using formioCommon.Constants;
using formioModels;
using formioModels.Data;
using formioModels.ProfitAndLoss;
using formioRepo.Helpers;
using Microsoft.Extensions.Configuration;
using MongoDB.Bson;
using MongoDB.Bson.Serialization;
using MongoDB.Driver;
using MongoDB.Driver.Linq;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Schema;

namespace formioRepo.Dashboard
{
    public class DashboardRepository
    {
        private readonly IConfiguration _iconfiguration;
        public DashboardRepository(IConfiguration iConfiguration)
        {
            _iconfiguration = iConfiguration;
        }
        protected IMongoCollection<T> GetMongoCollectionObject<T>(string collectionName)
        {
            IMongoDatabase imongoDb = GetMongoDbConnection();
            return imongoDb.GetCollection<T>(collectionName);
        }
        protected IMongoDatabase GetMongoDbConnection()
        {
            MongoClient client = new MongoClient(_iconfiguration["MongoDBConnectionString"]);
            return client.GetDatabase(_iconfiguration["MongoCommunicatorDB"]);
        }
        public List<DashboardOutputModel> GetPalmOilImportDashboard(DashboardInputModel inputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetPalmOilImportDashboard", "DashboardRepository"));
                IMongoCollection<DataSetOutputModel> datasetCollection = GetMongoCollectionObject<DataSetOutputModel>(MongoDBCollectionConstants.DataSet);

                string sourceLookupKey = "selectSourceContract" + inputModel.ContractUniqueId + "lookupchilddata";

                DateTime fromDate = inputModel.FromDate ?? DateTime.UtcNow;
                DateTime toDate = inputModel.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;

                List<BsonDocument> dashboardPipeline =
                new List<BsonDocument>
                          {
                            new BsonDocument("$addFields",
                            new BsonDocument("datefilter",
                            new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))),
                            new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "DataJson.FormData.ImportUniqueId", inputModel.ContractUniqueId },
                                    { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                { "IsArchived", false },
                                { "datefilter",
                            new BsonDocument
                                    {
                                        { "$gte",
                            new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                        { "$lte",
                            new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                    } },
                                    { "DataJson.FormData.type", inputModel.ProductType }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$DataJson")),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id", "" },
                                    { "Product-Sales",
                            new BsonDocument("$sum",
                            new BsonDocument("$cond",
                            new BsonDocument
                                            {
                                                { "if",
                            new BsonDocument("$eq",
                            new BsonArray
                                                    {
                                                        "$DataJson.FormData.commodity1",
                                                        "$DataJson.FormData." + sourceLookupKey + ".commodity1"
                                                    }) },
                                                { "then", new BsonDocument("$round", new BsonArray {new BsonDocument("$toDecimal", new BsonDocument("$ifNull",new BsonArray {"$DataJson.FormData.quantityMt2","0"})) ,4}) },
                                                { "else", 0 }
                                            })) },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$DataJson.FormData")) }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$FormData")),
                            new BsonDocument("$addFields",
                            new BsonDocument
                                {
                                    { "ProductName", "$FormData.Data." + sourceLookupKey + ".commodity1" },
                                    { "Product-OB", "$FormData.Data." + sourceLookupKey + ".contractQuantityMt" },
                                    { "Product-Sales", "$Product-Sales" }
                                }),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id", "" },
                                    { "OpeningBalance",
                            new BsonDocument("$avg", "$OpeningBalance") },
                                    { "ProductName",
                            new BsonDocument("$first", "$ProductName") },
                                    { "Product-OB",
                            new BsonDocument("$first", "$Product-OB") },
                                    { "Product-Sales",
                            new BsonDocument("$first", "$Product-Sales") },
                                    { "CPO-Consumption",
                            new BsonDocument("$sum","$FormData.Data.cpoMt") },
                                    { "RPO-Consumption",
                            new BsonDocument("$sum","$FormData.Data.rpoMt1") },
                                    { "RBD-Consumption",
                            new BsonDocument("$sum","$FormData.Data.rbdPalmoleinImportMt") },
                                    { "Loss",
                            new BsonDocument("$sum", "$FormData.Data.lossMt") },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$FormData.Data")) }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$FormData")),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id",
                            new BsonDocument("Map",
                            new BsonDocument
                                        {
                                            { "Commodity", "$FormData.Data.commodity1" },
                                            { "SalesType", "$FormData.Data.salesType" }
                                        }) },
                                    { "Sales",
                            new BsonDocument("$sum", new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {"$FormData.Data.quantityMt2","0"})),4 })) },
                                    { "ProductName",
                            new BsonDocument("$first", "$ProductName") },
                                    { "Product-OB",
                            new BsonDocument("$first", "$Product-OB") },
                                    { "Product-Sales",
                            new BsonDocument("$first", "$Product-Sales") },
                                    { "Loss",
                            new BsonDocument("$avg", "$Loss") },
                                    { "CPO-Consumption",
                            new BsonDocument("$avg", "$CPO-Consumption") },
                                    { "RPO-Consumption",
                            new BsonDocument("$avg", "$RPO-Consumption") },
                                    { "RBD-Consumption",
                            new BsonDocument("$avg", "$RBD-Consumption") },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$FormData.Data")) }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$FormData")),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id",
                            new BsonDocument("Map",
                            new BsonDocument
                                        {
                                            { "SalesType", "$FormData.Data.salesType" },
                                            { "Sales-Group", "$_id.Map" },
                                            { "Sales", "$Sales" }
                                        }) },
                                    { "ProductName",
                            new BsonDocument("$first", "$ProductName") },
                                    { "Product-Sales",
                            new BsonDocument("$first", "$Product-Sales") },
                                    { "Product-OB",
                            new BsonDocument("$first", "$Product-OB") },
                                    { "Loss",
                            new BsonDocument("$avg", "$Loss") },
                                    { "CPO-Consumption",
                            new BsonDocument("$avg", "$CPO-Consumption") },
                                    { "RPO-Consumption",
                            new BsonDocument("$avg", "$RPO-Consumption") },
                                    { "RBD-Consumption",
                            new BsonDocument("$avg", "$RBD-Consumption") },
                                    { "RPO-Production",
                            new BsonDocument("$sum", "$FormData.Data.rpoMt") },
                                    { "RBD-Production",
                            new BsonDocument("$sum", "$FormData.Data.rbdOleinMt") },
                                    { "Stearint-Production",
                            new BsonDocument("$sum", "$FormData.Data.stearinMt") },
                                    { "PFAD-Production",
                            new BsonDocument("$sum", "$FormData.Data.pfadMt") },
                                    { "RPO-T-Production",
                            new BsonDocument("$sum", "$FormData.Data.rpoMt2") },
                                    { "RBD-T-Production",
                            new BsonDocument("$sum", "$FormData.Data.rbdPalmoleinTradingMt") },
                                    { "HardStearint-Production",
                            new BsonDocument("$sum", "$FormData.Data.hardStearinMt") },
                                    { "SoftStearint-Production",
                            new BsonDocument("$sum", "$FormData.Data.softStearinMt") },
                                    { "WhiteOlein-Production",
                            new BsonDocument("$sum", "$FormData.Data.whiteOleinMt") },
                                    { "CalciumSoap-Production",
                            new BsonDocument("$sum", "$FormData.Data.calciumSoapMt") },
                                    { "RBD-R2-Consumption",
                            new BsonDocument("$sum", "$FormData.Data.rbdPalmOleinMt") },
                                    { "Stearin-R2-Consumption",
                            new BsonDocument("$sum", "$FormData.Data.stearinMt1") },
                                    { "PFAD-R2-Consumption",
                            new BsonDocument("$sum", "$FormData.Data.pfadMt1") },
                                    { "Product-Group",
                            new BsonDocument("$first", "$FormData.Data.productGroup1") },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$FormData.Data")) }
                                }),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id", "" },
                                    { "FinalDatata",
                            new BsonDocument("$push",
                            new BsonDocument
                                        {
                                            { "Product-Group", "$Product-Group" },
                                            { "Sales", "$Sales" },
                                            { "Sales-Map", "$Sales-Product" },
                                            { "Production-Map", "$_id.Map" },
                                            { "Loss", "$Loss" },
                                            { "CPO-Consumption", "$CPO-Consumption" },
                                            { "RPO-Consumption", "$RPO-Consumption" },
                                            { "RBD-Consumption", "$RBD-Consumption" },
                                            { "RPO-Production", "$RPO-Production" },
                                            { "RBD-Production", "$RBD-Production" },
                                            { "Stearint-Production", "$Stearint-Production" },
                                            { "PFAD-Production", "$PFAD-Production" },
                                            { "RPO-T-Production", "$RPO-T-Production" },
                                            { "RBD-T-Production", "$RBD-T-Production" },
                                            { "HardStearint-Production", "$HardStearint-Production" },
                                            { "SoftStearint-Production", "$SoftStearint-Production" },
                                            { "WhiteOlein-Production", "$WhiteOlein-Production" },
                                            { "CalciumSoap-Production", "$CalciumSoap-Production" },
                                            { "ProductName", "$ProductName" },
                                            { "Product-Sales", "$Product-Sales" },
                                            { "Product-OB", "$Product-OB" },
                                            { "RBD-R2-Consumption", "$RBD-R2-Consumption" },
                                            { "Stearin-R2-Consumption", "$Stearin-R2-Consumption" },
                                            { "PFAD-R2-Consumption", "$PFAD-R2-Consumption" }
                                        }) }
                                }),
                            new BsonDocument("$project",
                            new BsonDocument
                                {
                                    { "_id", 0 },
                                    { "MyArray",
                            new BsonArray
                                    {
                                        new BsonDocument
                                        {
                                            { "ProductName",
                                        new BsonDocument("$concat",
                                        new BsonArray
                                                {
                                                    "Product Group: ",
                                                    new BsonDocument("$first", "$FinalDatata.Product-Group")
                                                }) },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "CPO" },
                                             { "OpeningBalance",
                                                new BsonDocument("$cond",
                                                new BsonDocument
                                                        {
                                                            { "if",
                                                new BsonDocument("$eq",
                                                new BsonArray
                                                                {
                                                                    new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                                    "cpo"
                                                                }) },
                                                            { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                                new BsonDocument("$first", "$FinalDatata.Product-OB") ),4 })},
                                                            { "else", "$False" }
                                                        }) },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "cpo"
                                                        }) },
                                                    { "then",
                                        new BsonDocument("$round", new BsonArray {
                                             new BsonDocument("$toDecimal", new BsonDocument("$first", "$FinalDatata.CPO-Consumption"))
                                            ,4 }) },
                                                    { "else", "$False" }
                                                }) },
                                            { "Production", 0 },
                                            { "Sales",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "cpo"
                                                        }) },
                                                    { "then",
                                        new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.Product-Sales")),4 }) },
                                                    { "else", "$False" }
                                                }) }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Refined Palm Oil-Import" },
                                            { "OpeningBalance",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "refined palm oil-import"
                                                        }) },
                                                    { "then",
                                        new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.Product-OB")),4}) },
                                                    { "else", "$False" }
                                                }) },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "refined palm oil-import"
                                                        }) },
                                                    { "then",
                                        new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.RPO-Consumption")),4 }) },
                                                    { "else", "$False" }
                                                }) },
                                            { "Production", 0 },
                                            { "Sales",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "refined palm oil-import"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.Product-Sales")),4 }) },
                                                    { "else", "$False" }
                                                }) }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RBD Palm Olein-Import" },
                                            { "OpeningBalance",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "rbd palm olein-import"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.Product-OB")),4 }) },
                                                    { "else", "$False" }
                                                }) },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "rbd palm olein-import"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.RBD-Consumption") ),4 })},
                                                    { "else", "$False" }
                                                }) },
                                            { "Production", 0 },
                                            { "Sales",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "rbd palm olein-import"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.Product-Sales")),4 }) },
                                                    { "else", "$False" }
                                                }) }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Primary: Regular Sales" },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Refined Palm Oil" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                            new BsonDocument("$reduce",new BsonDocument{{ "input",
                                            new BsonDocument("$filter",new BsonDocument{
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "production" },
                                                                        { "cond",
                                            new BsonDocument("$eq",new BsonArray{
                                                                                new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                                "regular"
                                                                            }) } }) },
                                                                { "initialValue", 0 },
                                                                { "in", new BsonDocument("$round", new BsonArray{
                                                                        new BsonDocument("$toDecimal",
                                                                        new BsonDocument("$add",
                                                                        new BsonArray{ "$$this.RPO-Production", "$$value"})),4 }) } })},
                                           { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "refined palm oil"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                           },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Refined Palm Oil-Trading" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                         new BsonDocument("$reduce",new BsonDocument{{ "input",
                                            new BsonDocument("$filter",new BsonDocument{
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "production" },
                                                                        { "cond",
                                            new BsonDocument("$eq",new BsonArray{
                                                                                new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                                "regular"
                                                                            }) } }) },
                                                                { "initialValue", 0 },
                                                                { "in", new BsonDocument("$round", new BsonArray{
                                                                        new BsonDocument("$toDecimal",
                                                                        new BsonDocument("$add",
                                                                        new BsonArray{ "$$this.RPO-T-Production", "$$value"})),4 }) } })
                                                     },
                                             { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "refined palm oil-trading"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RBD Palm Olein" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonArray
                                                {
                                                    new BsonDocument("$and",
                                                    new BsonArray
                                                        {
                                                           new BsonDocument("$eq",
                                                            new BsonArray
                                                                {
                                                                    new BsonDocument("$first", "$FinalDatata.Production-Map.SalesType"),
                                                                    "REGULAR"
                                                                })
                                                        }),
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                                    new BsonDocument("$sum", "$FinalDatata.RBD-R2-Consumption")),4 }),
                                                    "$False"
                                                }) },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                            new BsonDocument("$filter",new BsonDocument{
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "production" },
                                                                        { "cond",
                                            new BsonDocument("$eq",new BsonArray{
                                                                                new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                                "regular"
                                                                            }) } }) },
                                                                { "initialValue", 0 },
                                                                { "in", new BsonDocument("$round", new BsonArray{
                                                                        new BsonDocument("$toDecimal",
                                                                        new BsonDocument("$add",
                                                                        new BsonArray{ "$$this.RBD-Production", "$$value"})),4 }) } })
                                                    },
                                             { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rbd palm olein"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RBD Palm Olein-Trading" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                         new BsonDocument("$reduce",new BsonDocument{{ "input",
                                            new BsonDocument("$filter",new BsonDocument{
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "production" },
                                                                        { "cond",
                                            new BsonDocument("$eq",new BsonArray{
                                                                                new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                                "regular"
                                                                            }) } }) },
                                                                { "initialValue", 0 },
                                                                { "in", new BsonDocument("$round", new BsonArray{
                                                                        new BsonDocument("$toDecimal",
                                                                        new BsonDocument("$add",
                                                                        new BsonArray{ "$$this.RBD-T-Production", "$$value"})),4 }) } })
                                                    },
                                              { "Sales",
                                                  new BsonDocument("$getField",
                                                  new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "rbd palm olein-trading"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                              },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Primary: Institutional Sales" },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Refined Palm Oil" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RPO-Production", "$$value"})),4 }) } })
                                                   },
                                            { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "refined palm oil"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Refined Palm Oil-Trading" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RPO-T-Production", "$$value"})),4 }) } })
                                                    },
                                            { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "refined palm oil-trading"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RBD Palm Olein" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonArray
                                                {
                                                    new BsonDocument("$and",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$eq",
                                                            new BsonArray
                                                                {
                                                                    new BsonDocument("$first", "$FinalDatata.Production-Map.SalesType"),
                                                                    "INSTITUTIONAL"
                                                                })
                                                        }),
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                                    new BsonDocument("$sum", "$FinalDatata.RBD-R2-Consumption")),4 }),
                                                    "$False"
                                                }) },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RBD-Production", "$$value"})),4 }) } }) },
                                            { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rbd palm olein"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RBD Palm Olein-Trading" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RBD-T-Production", "$$value"})),4 }) } })
                                                    },
                                            { "Sales",
                                                  new BsonDocument("$getField",
                                                  new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "rbd palm olein-trading"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Non-Primary: Regular Sales" },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Stearin" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonArray
                                                {
                                                    new BsonDocument("$and",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$eq",
                                                            new BsonArray
                                                                {
                                                                    new BsonDocument("$first", "$FinalDatata.Production-Map.SalesType"),
                                                                    "REGULAR"
                                                                })
                                                        }),
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                                    new BsonDocument("$sum", "$FinalDatata.Stearin-R2-Consumption")),4 }),
                                                    "$False"
                                                }) },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.Stearint-Production", "$$value"})),4 }) } })
                                                     },
                                             { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "stearin"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "PFAD" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonArray
                                                {
                                                    new BsonDocument("$and",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$eq",
                                                            new BsonArray
                                                                {
                                                                    new BsonDocument("$first", "$FinalDatata.Production-Map.SalesType"),
                                                                    "REGULAR"
                                                                })
                                                        }),
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                                    new BsonDocument("$sum", "$FinalDatata.PFAD-R2-Consumption")),4 }),
                                                    "$False"
                                                }) },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.PFAD-Production", "$$value"})),4 }) } })
                                                     },
                                             { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "pfad"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                             },
                                        new BsonDocument
                                            {
                                            { "ProductName", "Hard Stearin" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.HardStearint-Production", "$$value"})),4 }) } })
                                                     },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "hard stearin"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Soft Stearin" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.SoftStearint-Production", "$$value"})),4 }) } })
                                                     },
                                            { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "soft stearin"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Super Olein" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production", 0 },
                                            { "Sales", 0 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "White Olein" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                       new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.WhiteOlein-Production", "$$value"})),4 }) } })
                                                     },
                                            { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "white olein"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Calcium Soap" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.CalciumSoap-Production", "$$value"})),4 }) } })
                                                    },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "calcium soap"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Non-Primary: Institutional Sales" },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Stearin" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonArray
                                                {
                                                    new BsonDocument("$and",
                                                    new BsonArray
                                                        {
                                                           new BsonDocument("$eq",
                                                            new BsonArray
                                                                {
                                                                    new BsonDocument("$first", "$FinalDatata.Production-Map.SalesType"),
                                                                    "INSTITUTIONAL"
                                                                })
                                                        }),
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                                    new BsonDocument("$sum", "$FinalDatata.Stearin-R2-Consumption")),4 }),
                                                    "$False"
                                                }) },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.Stearint-Production", "$$value"})),4 }) } })
                                                   },
                                            { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "stearin"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "PFAD" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonArray
                                                {
                                                    new BsonDocument("$and",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$eq",
                                                            new BsonArray
                                                                {
                                                                    new BsonDocument("$first", "$FinalDatata.Production-Map.SalesType"),
                                                                    "INSTITUTIONAL"
                                                                })
                                                        }),
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                                    new BsonDocument("$sum", "$FinalDatata.PFAD-R2-Consumption")),4 }),
                                                    "$False"
                                                }) },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.PFAD-Production", "$$value"})),4 }) } })
                                                    },
                                           { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "pfad"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Hard Stearin" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.HardStearint-Production", "$$value"})),4 }) } })
                                                     },
                                              { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "hard stearin"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Soft Stearin" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.SoftStearint-Production", "$$value"})),4 }) } })
                                                    },
                                            { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "soft stearin"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Super Olein" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production", 0 },
                                            { "Sales", 0 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "White Olein" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.WhiteOlein-Production", "$$value"})),4 }) } })
                                                    },
                                           { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "white olein"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Calcium Soap" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                       new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.CalciumSoap-Production", "$$value"})),4 }) } })
                                                    },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "calcium soap"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Loss" },
                                            { "Production", new BsonDocument("$round",new BsonArray{ new BsonDocument( "$toDecimal",new BsonDocument("$first","$FinalDatata.Loss")),4}) }
                                        }
                                    } }

                                })
                              };

                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };
                var aggregateDataList = datasetCollection.Aggregate<BsonDocument>(dashboardPipeline, aggregateOptions).ToList();
                List<DashboardOutputModel> dataSources = new List<DashboardOutputModel>();

                if (aggregateDataList.Count > 0)
                {
                    //var result = BsonHelper.ConvertBsonDocumentListToModel<FinalOutputModel>(aggregateDataList);
                    // var resultSet = result.Select(x => x.MyArray).FirstOrDefault().ToJson();
                    var test = BsonSerializer.Deserialize<FinalOutputModel1>(aggregateDataList.FirstOrDefault());
                    dataSources = test.MyArray.ToList();

                    if (dataSources != null && dataSources.Count > 0)
                    {
                        Parallel.ForEach(dataSources, data =>
                        {
                            data.OpeningBalance = data.OpeningBalance ?? 0;
                            data.Production = data.Production ?? 0;
                            data.Sales = (data.Sales * -1) ?? 0;
                            data.Consumption = (data.Consumption * -1) ?? 0;
                            data.ClosingBalance = (data.OpeningBalance + data.Production + data.Sales + data.Consumption);
                        });
                    }
                }
                return dataSources;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetPalmOilImportDashboard", "DashboardRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return null;
            }
        }

        public List<DashboardOutputModel> GetSunflowerImportDashboard(DashboardInputModel inputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetSunflowerImportDashboard", "DashboardRepository"));
                IMongoCollection<DataSetOutputModel> datasetCollection = GetMongoCollectionObject<DataSetOutputModel>(MongoDBCollectionConstants.DataSet);

                string sourceLookupKey = "selectSourceContract" + inputModel.ContractUniqueId + "lookupchilddata";

                DateTime fromDate = inputModel.FromDate ?? DateTime.UtcNow;
                DateTime toDate = inputModel.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;

                List<BsonDocument> dashboardPipeline = new List<BsonDocument>
                          {
                            new BsonDocument("$addFields",
                            new BsonDocument("datefilter",
                            new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))),
                            new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "DataJson.FormData.ImportUniqueId", inputModel.ContractUniqueId },
                                    { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                    { "IsArchived", false },
                                { "datefilter",
                            new BsonDocument
                                    {
                                        { "$gte",
                            new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                        { "$lte",
                            new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                    } },
                                    { "DataJson.FormData.type", inputModel.ProductType }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$DataJson")),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id", "" },
                                    { "Product-Sales",
                            new BsonDocument("$sum",
                            new BsonDocument("$cond",
                            new BsonDocument
                                            {
                                                { "if",
                            new BsonDocument("$eq",
                            new BsonArray
                                                    {
                                                        "$DataJson.FormData.commodity1",
                                                        "$FormData.Data." + sourceLookupKey + ".commodity1"
                                                    }) },
                                                { "then",new BsonDocument("$round", new BsonArray {new BsonDocument("$toDecimal", new BsonDocument("$ifNull",new BsonArray { "$DataJson.FormData.quantityMt2","0"})),4 }) },
                                                { "else", 0 }
                                            })) },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$DataJson.FormData")) }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$FormData")),
                            new BsonDocument("$addFields",
                            new BsonDocument
                                {
                                    { "ProductName", "$FormData.Data." + sourceLookupKey + ".commodity1" },
                                    { "Product-OB", "$FormData.Data." + sourceLookupKey + ".contractQuantityMt" },
                                    { "Product-Sales", "$Product-Sales" }
                                }),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id", "" },
                                    { "OpeningBalance",
                            new BsonDocument("$avg", "$OpeningBalance") },
                                    { "ProductName",
                            new BsonDocument("$first", "$ProductName") },
                                    { "Product-OB",
                            new BsonDocument("$first", "$Product-OB") },
                                    { "Product-Sales",
                            new BsonDocument("$first", "$Product-Sales") },
                                    { "CSFO-Consumption",
                            new BsonDocument("$sum", "$FormData.Data.csfoMt") },
                                    { "RSFO-IMPORT-Consumption",
                            new BsonDocument("$sum","$FormData.Data.rsfoImportMt") },
                                    { "Loss",
                            new BsonDocument("$sum", "$FormData.Data.lossMt1") },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$FormData.Data")) }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$FormData")),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id",
                            new BsonDocument("Map",
                            new BsonDocument
                                        {
                                            { "Commodity", "$FormData.Data.commodity1" },
                                            { "SalesType", "$FormData.Data.salesType" }
                                        }) },
                                    { "Sales",
                            new BsonDocument("$sum",new BsonDocument("$toDecimal", new BsonDocument("$ifNull",new BsonArray { "$FormData.Data.quantityMt2","0"}))) },
                                    { "ProductName",
                            new BsonDocument("$first", "$ProductName") },
                                    { "Product-OB",
                            new BsonDocument("$first", "$Product-OB") },
                                    { "Product-Sales",
                            new BsonDocument("$first", "$Product-Sales") },
                                    { "Loss",
                            new BsonDocument("$avg", "$Loss") },
                                    { "CSFO-Consumption",
                            new BsonDocument("$avg", "$CSFO-Consumption") },
                                    { "RSFO-IMPORT-Consumption",
                            new BsonDocument("$avg", "$RSFO-IMPORT-Consumption") },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$FormData.Data")) }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$FormData")),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id",
                            new BsonDocument("Map",
                            new BsonDocument
                                        {
                                           { "SalesType", "$FormData.Data.salesType" },
                                            { "Sales-Group", "$_id.Map" },
                                            { "Sales", "$Sales" }
                                        }) },
                                    { "ProductName",
                            new BsonDocument("$first", "$ProductName") },
                                    { "Product-Sales",
                            new BsonDocument("$first", "$Product-Sales") },
                                    { "Product-OB",
                            new BsonDocument("$first", "$Product-OB") },
                                    { "Loss",
                            new BsonDocument("$avg", "$Loss") },
                                    { "CSFO-Consumption",
                            new BsonDocument("$avg", "$CSFO-Consumption") },
                                    { "RSFO-IMPORT-Consumption",
                            new BsonDocument("$avg", "$RSFO-IMPORT-Consumption") },
                                    { "RSFO-Production",
                            new BsonDocument("$sum", "$FormData.Data.rsfoMt") },
                                    { "RSFO-TRADING-Production",
                            new BsonDocument("$sum", "$FormData.Data.rsfoTradingMt") },
                                    { "CSFO-TRADING-Production",
                            new BsonDocument("$sum", "$FormData.Data.csfoTradingMt") },
                                    { "SFACID-Production",
                            new BsonDocument("$sum", "$FormData.Data.sunflowerFattyAcidMt") },
                                    { "RSFO-SLUDGE-Production",
                            new BsonDocument("$sum", "$FormData.Data.rsfoSludgeMt") },
                                    { "RSFO-R2-Consumption",
                            new BsonDocument("$sum", "$DataJson.FormData.rsfoMt2") },
                                    { "Product-Group",
                            new BsonDocument("$first", "$FormData.Data.productGroup1") },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$FormData.Data")) }
                                }),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id", "" },
                                    { "FinalDatata",
                            new BsonDocument("$push",
                            new BsonDocument
                                        {
                                            { "Product-Group", "$Product-Group" },
                                            { "Sales", "$Sales" },
                                            { "Sales-Map", "$Sales-Product" },
                                            { "Production-Map", "$_id.Map" },
                                            { "Loss", "$Loss" },
                                            { "CSFO-Consumption", "$CSFO-Consumption" },
                                            { "RSFO-IMPORT-Consumption", "$RSFO-IMPORT-Consumption" },
                                            { "RSFO-Production", "$RSFO-Production" },
                                            { "RSFO-TRADING-Production", "$RSFO-TRADING-Production" },
                                            { "CSFO-TRADING-Production", "$CSFO-TRADING-Production" },
                                            { "SFACID-Production", "$SFACID-Production" },
                                            { "RSFO-SLUDGE-Production", "$RSFO-SLUDGE-Production" },
                                            { "ProductName", "$ProductName" },
                                            { "Product-OB", "$Product-OB" },
                                            { "Product-Sales", "$Product-Sales" },
                                            { "RSFO-R2-Consumption", "$RSFO-R2-Consumption" }
                                        }) }
                                }),
                            new BsonDocument("$project",
                            new BsonDocument
                                {
                                    { "_id", 0 },
                                    { "MyArray",
                            new BsonArray
                                    {
                                        new BsonDocument
                                        {
                                            { "ProductName",
                                        new BsonDocument("$concat",
                                        new BsonArray
                                                {
                                                    "Product Group: ",
                                                    new BsonDocument("$first", "$FinalDatata.Product-Group")
                                                }) },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "CSFO" },
                                            { "OpeningBalance",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                             new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "csfo"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.Product-OB")),4 }) },
                                                    { "else", "$False" }
                                                }) },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                         new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                         "csfo"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.CSFO-Consumption")),4 }) },
                                                    { "else", "$False" }
                                                }) },
                                            { "Production", 0 },
                                            { "Sales",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "csfo"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.Product-Sales")),4 }) },
                                                    { "else", "$False" }
                                                }) }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RSFO-Import" },
                                            { "OpeningBalance",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "rsfo-import"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.Product-OB")),4 }) },
                                                    { "else", "$False" }
                                                }) },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "rsfo-import"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.CSFO-Consumption")),4 }) },
                                                    { "else", "$False" }
                                                }) },
                                            { "Production", 0 },
                                            { "Sales",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "rsfo-import"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.Product-Sales")),4 }) },
                                                    { "else", "$False" }
                                                }) }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Primary: Regular Sales" },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RSFO" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$first", "$FinalDatata.ProductName"),
                                                            "RSFO"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.RSFO-R2-Consumption,")),4 }) },
                                                    { "else", "$False" }
                                                }) },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSFO-Production", "$$value"})),4 }) } })
                                                    },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "rsfo"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RSFO-TRADING" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSFO-TRADING-Production", "$$value"})),4 }) } })
                                                     },
                                             { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "rsfo-trading"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "CSFO-TRADING" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.CSFO-TRADING-Production", "$$value"})),4 }) } })
                                                     },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "csfo-trading"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Primary: Institutional Sales" },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RSFO" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$first", "$FinalDatata.ProductName"),
                                                            "RSFO"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.RSFO-R2-Consumption,")),4 }) },
                                                    { "else", "$False" }
                                                }) },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSFO-Production", "$$value"})),4 }) } })
                                                    },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "rsfo"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RSFO-TRADING" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSFO-TRADING-Production", "$$value"})),4 }) } })
                                                     },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "rsfo-trading"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "CSFO-TRADING" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.CSFO-TRADING-Production", "$$value"})),4 }) } })
                                                     },
                                             { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "csfo-trading"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Non-Primary: Regular Sales" },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "SUNFLOWER FATTY ACID" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.SFACID-Production", "$$value"})),4 }) } })
                                                     },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "sunflower fatty acid"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RSFO-SLUDGE" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSFO-SLUDGE-Production", "$$value"})),4 }) } })
                                                     },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "rsfo-sludge"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Non-Primary: Institutional Sales" },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "SUNFLOWER FATTY ACID" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.SFACID-Production", "$$value"})),4 }) } })
                                                    },
                                             { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "sunflower fatty acid"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RSFO-SLUDGE" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSFO-SLUDGE-Production", "$$value"})),4 }) } })
                                                     },
                                             { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "rsfo-sludge"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Loss" },
                                            { "Production", new BsonDocument("$round",new BsonArray{ new BsonDocument( "$toDecimal",new BsonDocument("$first","$FinalDatata.Loss")),4}) }
                                        }
                                    } }
                                })
                            };
                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };
                var aggregateDataList = datasetCollection.Aggregate<BsonDocument>(dashboardPipeline, aggregateOptions).ToList();
                var data = (aggregateDataList[0].TryGetValue("MyArray", out BsonValue finalData) ? finalData : null);
                List<DashboardOutputModel> dataSources = new List<DashboardOutputModel>();

                if (aggregateDataList.Count > 0)
                {
                    var test = BsonSerializer.Deserialize<FinalOutputModel1>(aggregateDataList.FirstOrDefault());
                    dataSources = test.MyArray.ToList();

                    if (dataSources != null && dataSources.Count > 0)
                    {
                        Parallel.ForEach(dataSources, data =>
                        {
                            data.OpeningBalance = data.OpeningBalance ?? 0;
                            data.Production = data.Production ?? 0;
                            data.Sales = (data.Sales * -1) ?? 0;
                            data.Consumption = (data.Consumption * -1) ?? 0;
                            data.ClosingBalance = (data.OpeningBalance + data.Production + data.Sales + data.Consumption);
                        });
                    }
                }
                return dataSources;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetSunflowerImportDashboard", "DashboardRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return null;
            }
        }

        public List<DashboardOutputModel> GetSunflowerLocalDashboard(DashboardInputModel inputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetSunflowerLocalDashboard", "DashboardRepository"));
                IMongoCollection<DataSetOutputModel> datasetCollection = GetMongoCollectionObject<DataSetOutputModel>(MongoDBCollectionConstants.DataSet);

                string sourceLookupKey = "mylookup" + inputModel.ContractUniqueId + "lookupchilddata";

                DateTime fromDate = inputModel.FromDate ?? DateTime.UtcNow;
                DateTime toDate = inputModel.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;

                List<BsonDocument> dashboardPipeline = new List<BsonDocument>
                {
                            new BsonDocument("$addFields",
                            new BsonDocument("datefilter",
                            new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))),
                            new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "DataJson.FormData.localUniqueId", inputModel.ContractUniqueId },
                                    { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                    { "IsArchived", false },
                                { "datefilter",
                                                    new BsonDocument
                                                            {
                                                                { "$gte",
                                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                                { "$lte",
                                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                                            } },
                                                            { "DataJson.FormData.type", inputModel.ProductType }
                                                        }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$DataJson")),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id", "" },
                                    { "Product-Sales",
                            new BsonDocument("$sum",
                            new BsonDocument("$cond",
                            new BsonDocument
                                            {
                                                { "if",
                            new BsonDocument("$eq",
                            new BsonArray
                                                {
                                                    "$DataJson.FormData.commodity1",
                                                    "$FormData.Data." + sourceLookupKey + ".commodity"
                                                }) },
                                            { "then", new BsonDocument("$round", new BsonArray {new BsonDocument("$toDecimal",  new BsonDocument("$ifNull",new BsonArray { "$DataJson.FormData.quantityMt2","0"})),4 }) },
                                            { "else", 0 }
                                        })) },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$DataJson.FormData")) }
                            }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$FormData")),
                            new BsonDocument("$addFields",
                            new BsonDocument
                                {
                                    { "ProductName", "$FormData.Data." + sourceLookupKey + ".commodity" },
                                    { "Product-OB", "$FormData.Data." + sourceLookupKey + ".totalQuantityMt" },
                                    { "Product-Sales", "$Product-Sales" }
                                }),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id", "" },
                                    { "OpeningBalance",
                            new BsonDocument("$avg", "$OpeningBalance") },
                                    { "ProductName",
                            new BsonDocument("$first", "$ProductName") },
                                    { "Product-OB",
                            new BsonDocument("$first", "$Product-OB") },
                                    { "Product-Sales",
                            new BsonDocument("$first", "$Product-Sales") },
                                    { "CSFO-Local-Consumption",
                            new BsonDocument("$sum","$FormData.Data.rsfoImportMt") },
                                    { "RSFO-Local-Consumption",
                            new BsonDocument("$sum","$FormData.Data.rsfoImportMt") },
                                    { "Loss",
                            new BsonDocument("$sum", "$FormData.Data.lossMt5") },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$FormData.Data")) }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$FormData")),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id",
                            new BsonDocument("Map",
                            new BsonDocument
                                        {
                                            { "Commodity", "$FormData.Data.commodity1" },
                                            { "SalesType", "$FormData.Data.salesType" }
                                        }) },
                                    { "Sales",
                            new BsonDocument("$sum","$FormData.Data.rsfoImportMt") },
                                    { "ProductName",
                            new BsonDocument("$first", "$ProductName") },
                                    { "Product-OB",
                            new BsonDocument("$first", "$Product-OB") },
                                    { "Product-Sales",
                            new BsonDocument("$first", "$Product-Sales") },
                                    { "Loss",
                            new BsonDocument("$avg", "$Loss") },
                                    { "CSFO-Local-Consumption",
                            new BsonDocument("$avg", "$CSFO-Local-Consumption") },
                                    { "RSFO-Local-Consumption",
                            new BsonDocument("$avg", "$RSFO-Local-Consumption") },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$FormData.Data")) }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$FormData")),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id",
                            new BsonDocument("Map",
                            new BsonDocument
                                        {
                                            { "SalesType", "$FormData.Data.salesType" },
                                            { "Sales-Group", "$_id.Map" },
                                            { "Sales", "$Sales" }
                                        }) },
                                    { "ProductName",
                            new BsonDocument("$first", "$ProductName") },
                                    { "Product-Sales",
                            new BsonDocument("$first", "$Product-Sales") },
                                    { "Product-OB",
                            new BsonDocument("$first", "$Product-OB") },
                                    { "Loss",
                            new BsonDocument("$avg", "$Loss") },
                                    { "CSFO-Local-Consumption",
                            new BsonDocument("$avg", "$CSFO-Local-Consumption") },
                                    { "RSFO-Local-Consumption",
                            new BsonDocument("$avg", "$RSFO-Local-Consumption") },
                                    { "RSFO-Production",
                            new BsonDocument("$sum", "$FormData.Data.rsfoMt1") },
                                    { "RSFO-TRADING-Production",
                            new BsonDocument("$sum", "$FormData.Data.rsfoTradingMt1") },
                                    { "SFACID-Production",
                            new BsonDocument("$sum", "$FormData.Data.sunflowerFattyAcidMt1") },
                                    { "RSFO-SLUDGE-Production",
                            new BsonDocument("$sum", "$FormData.Data.rsfoSludgeMtnplocal") },
                                    { "RSFO-R2-Local-Consumption",
                            new BsonDocument("$sum", "$DataJson.FormData.rsfoMt2nplocal") },
                                    { "Product-Group",
                            new BsonDocument("$first", "$FormData.Data.productGroup1") },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$FormData.Data")) }
                                }),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id", "" },
                                    { "FinalDatata",
                            new BsonDocument("$push",
                            new BsonDocument
                                        {
                                            { "Product-Group", "$Product-Group" },
                                            { "Sales", "$Sales" },
                                            { "Sales-Map", "$Sales-Product" },
                                            { "Production-Map", "$_id.Map" },
                                            { "Loss", "$Loss" },
                                            { "CSFO-Local-Consumption", "$CSFO-Local-Consumption" },
                                            { "RSFO-Local-Consumption", "$RSFO-Local-Consumption" },
                                            { "RSFO-Production", "$RSFO-Production" },
                                            { "RSFO-TRADING-Production", "$RSFO-TRADING-Production" },
                                            { "SFACID-Production", "$SFACID-Production" },
                                            { "RSFO-SLUDGE-Production", "$RSFO-SLUDGE-Production" },
                                            { "ProductName", "$ProductName" },
                                            { "Product-OB", "$Product-OB" },
                                            { "Product-Sales", "$Product-Sales" },
                                            { "RSFO-R2-Local-Consumption", "$RSFO-R2-Local-Consumption" }
                                        }) }
                                }),
                            new BsonDocument("$project",
                            new BsonDocument
                                {
                                { "_id", 0 },
                                { "MyArray",
                                new BsonArray
                                                {
                                new BsonDocument
                                {
                                    { "ProductName",
                                new BsonDocument("$concat",
                                new BsonArray
                                        {
                                            "Product Group: ",
                                            new BsonDocument("$first", "$FinalDatata.Product-Group")
                                        }) },
                                    { "IsBold", 1 }
                                },
                                new BsonDocument
                                {
                                    { "ProductName", "CSFO-Local" },
                                    { "OpeningBalance",
                                new BsonDocument("$cond",
                                new BsonDocument
                                        {
                                            { "if",
                                new BsonDocument("$eq",
                                new BsonArray
                                                {
                                   new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                    "csfo-local"
                                     }) },
                                   { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-OB")),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Consumption",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                         new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                         "csfo-local"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.CSFO-Local-Consumption")),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Production", 0 },
                                        { "Sales",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                {
                                     new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                    "csfo-local"
                                }) },
                            { "then",
                            new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                new BsonDocument("$first", "$FinalDatata.Product-Sales")),4 }) },
                            { "else", "$False" }
                        }) }
                },
                                new BsonDocument
                                {
                                    { "ProductName", "RSFO-Local" },
                                    { "OpeningBalance",
                                new BsonDocument("$cond",
                                new BsonDocument
                                        {
                                            { "if",
                                new BsonDocument("$eq",
                                new BsonArray
                                                {
                                                     new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                     "rsfo-local"
                                                }) },
                                            { "then",
                                            new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                new BsonDocument("$first", "$FinalDatata.Product-OB")),4 }) },
                                            { "else", "$False" }
                                        }) },
                                    { "Consumption",
                                new BsonDocument("$cond",
                                new BsonDocument
                                        {
                                            { "if",
                                new BsonDocument("$eq",
                                new BsonArray
                                                {
                                                    new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                     "rsfo-local"
                                                }) },
                                            { "then",
                                            new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                new BsonDocument("$first", "$FinalDatata.CSFO-Local-Consumption")),4 }) },
                                            { "else", "$False" }
                                        }) },
                                    { "Production", 0 },
                                    { "Sales",
                                new BsonDocument("$cond",
                                new BsonDocument
                                        {
                                            { "if",
                                new BsonDocument("$eq",
                                new BsonArray
                                                {
                                                    new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                     "rsfo-local"
                                                }) },
                                            { "then",
                                            new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                new BsonDocument("$first", "$FinalDatata.Product-Sales")),4 }) },
                                            { "else", "$False" }
                                        }) }
                                },
                                new BsonDocument
                                {
                                    { "ProductName", "Primary: Regular Sales" },
                                    { "IsBold", 1 }
                                },
                                new BsonDocument
                                {
                                    { "ProductName", "RSFO" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption",
                                new BsonDocument("$cond",
                                new BsonDocument
                                        {
                                            { "if",
                                new BsonDocument("$eq",
                                new BsonArray
                                                {
                                                    new BsonDocument("$first", "$FinalDatata.ProductName"),
                                                    "RSFO"
                                                }) },
                                            { "then",
                                            new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                new BsonDocument("$first", "$FinalDatata.RSFO-R2-Local-Consumption,")),4 }) },
                                            { "else", "$False" }
                                        }) },
                                    { "Production",
                                new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSFO-Production", "$$value"})),4 }) } })
                                             },
                                    { "Sales",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                {
                                                    { "field", "Sales" },
                                                    { "input",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                        {
                                                            { "field", "Production-Map" },
                                                            { "input",
                                        new BsonDocument("$first",
                                        new BsonDocument("$filter",

                                        new BsonDocument
                                                                    {
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "sale" },
                                                                        { "cond",
                                        new BsonDocument("$and",
                                        new BsonArray
                                                                            {
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                        "rsfo"
                                                                                    }),
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                        "regular"
                                                                                    })
                                                                            }) }
                                                                    })) }
                                                        }) }
                                                }) }
                                },
                                new BsonDocument
                                {
                                    { "ProductName", "RSFO-TRADING" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption", 0 },
                                    { "Production",
                                new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSFO-TRADING-Production", "$$value"})),4 }) } })
                                             },
                                    { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rsfo-trading"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                            },
                                new BsonDocument
                                {
                                    { "ProductName", "Primary: Institutional Sales" },
                                    { "IsBold", 1 }
                                },
                                new BsonDocument
                                {
                                    { "ProductName", "RSFO" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption",
                                new BsonDocument("$cond",
                                new BsonDocument
                                        {
                                            { "if",
                                new BsonDocument("$eq",
                                new BsonArray
                                                {
                                                    new BsonDocument("$first", "$FinalDatata.ProductName"),
                                                    "RSFO"
                                                }) },
                                            { "then",
                                            new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                new BsonDocument("$first", "$FinalDatata.RSFO-R2-Local-Consumption,")),4 }) },
                                            { "else", "$False" }
                                        }) },
                                    { "Production",
                                new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSFO-Production", "$$value"})),4 }) } })
                                             },
                                    { "Sales",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                {
                                                    { "field", "Sales" },
                                                    { "input",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                        {
                                                            { "field", "Production-Map" },
                                                            { "input",
                                        new BsonDocument("$first",
                                        new BsonDocument("$filter",
                                        new BsonDocument
                                                                    {
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "sale" },
                                                                        { "cond",
                                        new BsonDocument("$and",
                                        new BsonArray
                                                                            {
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                        "rsfo"
                                                                                    }),
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                        "institutional"
                                                                                    })
                                                                            }) }
                                                                    })) }
                                                        }) }
                                                }) }
                                    },
                                new BsonDocument
                                {
                                    { "ProductName", "RSFO-TRADING" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption", 0 },
                                    { "Production",
                               new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSFO-TRADING-Production", "$$value"})),4 }) } })
                                             },
                                    { "Sales",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                {
                                                    { "field", "Sales" },
                                                    { "input",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                        {
                                                            { "field", "Production-Map" },
                                                            { "input",
                                        new BsonDocument("$first",
                                        new BsonDocument("$filter",
                                        new BsonDocument
                                                                    {
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "sale" },
                                                                        { "cond",
                                        new BsonDocument("$and",
                                        new BsonArray
                                                                            {
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                        "rsfo-trading"
                                                                                    }),
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                        "institutional"
                                                                                    })
                                                                            }) }
                                                                    })) }
                                                        }) }
                                                }) }
                                    },
                                new BsonDocument
                                {
                                    { "ProductName", "Non-Primary: Regular Sales" },
                                    { "IsBold", 1 }
                                },
                                new BsonDocument
                                {
                                    { "ProductName", "SUNFLOWER FATTY ACID" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption", 0 },
                                    { "Production",
                               new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.SFACID-Production", "$$value"})),4 }) } })
                                             },
                                      { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "sunflower fatty acid"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                      },
                                new BsonDocument
                                {
                                    { "ProductName", "RSFO-SLUDGE" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption", 0 },
                                    { "Production",
                                new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSFO-SLUDGE-Production", "$$value"})),4 }) } })
                                           },
                                    { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rsfo-sludge"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                    },
                                new BsonDocument
                                {
                                    { "ProductName", "Non-Primary: Institutional Sales" },
                                    { "IsBold", 1 }
                                },
                                new BsonDocument
                                {
                                    { "ProductName", "SUNFLOWER FATTY ACID" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption", 0 },
                                    { "Production",
                               new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.SFACID-Production", "$$value"})),4 }) } })
                                             },
                                   { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "sunflower fatty acid"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                      },
                                new BsonDocument
                                {
                                    { "ProductName", "RSFO-SLUDGE" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption", 0 },
                                    { "Production",
                                new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSFO-SLUDGE-Production", "$$value"})),4 }) } })
                                             },
                                    { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rsfo-sludge"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                    },
                                new BsonDocument
                                {
                                    { "ProductName", "Loss" },
                                    { "Production", new BsonDocument("$round",new BsonArray{ new BsonDocument( "$toDecimal",new BsonDocument("$first","$FinalDatata.Loss")),4}) }
                                }
            }               }
                            })
                 };
                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };
                var aggregateDataList = datasetCollection.Aggregate<BsonDocument>(dashboardPipeline, aggregateOptions).ToList();
                var data = (aggregateDataList[0].TryGetValue("MyArray", out BsonValue finalData) ? finalData : null);
                List<DashboardOutputModel> dataSources = new List<DashboardOutputModel>();

                if (aggregateDataList.Count > 0)
                {
                    var test = BsonSerializer.Deserialize<FinalOutputModel1>(aggregateDataList.FirstOrDefault());
                    dataSources = test.MyArray.ToList();

                    if (dataSources != null && dataSources.Count > 0)
                    {
                        Parallel.ForEach(dataSources, data =>
                        {
                            data.OpeningBalance = data.OpeningBalance ?? 0;
                            data.Production = data.Production ?? 0;
                            data.Sales = (data.Sales * -1) ?? 0;
                            data.Consumption = (data.Consumption * -1) ?? 0;
                            data.ClosingBalance = (data.OpeningBalance + data.Production + data.Sales + data.Consumption);
                        });
                    }
                }
                return dataSources;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetSunflowerLocalDashboard", "DashboardRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return null;
            }
        }

        public List<DashboardOutputModel> GetGlycerinImportDashboard(DashboardInputModel inputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetGlycerinImportDashboard", "DashboardRepository"));
                IMongoCollection<DataSetOutputModel> datasetCollection = GetMongoCollectionObject<DataSetOutputModel>(MongoDBCollectionConstants.DataSet);

                string sourceLookupKey = "selectSourceContract" + inputModel.ContractUniqueId + "lookupchilddata";

                DateTime fromDate = inputModel.FromDate ?? DateTime.UtcNow;
                DateTime toDate = inputModel.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;

                List<BsonDocument> dashboardPipeline =
                new List<BsonDocument> {
                        new BsonDocument("$addFields",
                        new BsonDocument("datefilter",
                        new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))),
                        new BsonDocument("$match",
                        new BsonDocument
                            {
                                { "DataJson.FormData.ImportUniqueId", inputModel.ContractUniqueId },
                                { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                { "IsArchived", false },
                            { "datefilter",
                        new BsonDocument
                                {
                                    { "$gte",
                        new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                    { "$lte",
                        new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                } },
                                { "DataJson.FormData.type", inputModel.ProductType }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$DataJson")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "Product-Sales",
                        new BsonDocument("$sum",
                        new BsonDocument("$cond",
                        new BsonDocument
                                        {
                                            { "if",
                        new BsonDocument("$eq",
                        new BsonArray
                                                {
                                                    "$DataJson.FormData.commodity1",
                                                    "$DataJson.FormData." + sourceLookupKey + ".commodity1"
                                                }) },
                                            { "then", new BsonDocument("$toDecimal", new BsonDocument("$ifNull",new BsonArray { "$DataJson.FormData.quantityMt2","0"}))  },
                                            { "else", 0 }
                                        })) },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$DataJson.FormData")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$addFields",
                        new BsonDocument
                            {
                                { "ProductName", "$FormData.Data." + sourceLookupKey + ".commodity1" },
                                { "Product-OB", "$FormData.Data." + sourceLookupKey + ".contractQuantityMt" },
                                { "Product-Sales", "$Product-Sales" }
                            }),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "OpeningBalance",
                        new BsonDocument("$avg", "$OpeningBalance") },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "CG-Consumption",
                        new BsonDocument("$sum", "$FormData.Data.crudeGlycerinMt") },
                                { "RG-Consumption",
                        new BsonDocument("$sum", "$FormData.Data.refinedGlycerinLocalMt") },
                                { "Loss",
                        new BsonDocument("$sum", "$FormData.Data.lossMt4") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id",
                        new BsonDocument("Map",
                        new BsonDocument
                                    {
                                        { "Commodity", "$FormData.Data.commodity1" },
                                        { "SalesType", "$FormData.Data.salesType" }
                                    }) },
                                { "Sales",
                        new BsonDocument("$sum",new BsonDocument("$toDecimal", new BsonDocument("$ifNull",new BsonArray { "$FormData.Data.quantityMt2","0"}))) },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "Loss",
                        new BsonDocument("$avg", "$Loss") },
                                { "CG-Consumption",
                        new BsonDocument("$avg", "$CG-Consumption") },
                                { "RG-Consumption",
                        new BsonDocument("$avg", "$RG-Consumption") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id",
                        new BsonDocument("Map",
                        new BsonDocument
                                    {
                                       { "SalesType", "$FormData.Data.salesType" },
                                        { "Sales-Group", "$_id.Map" },
                                        { "Sales", "$Sales" }
                                    }) },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Loss",
                        new BsonDocument("$avg", "$Loss") },
                                { "CG-Consumption",
                        new BsonDocument("$avg", "$CG-Consumption") },
                                { "RG-Consumption",
                        new BsonDocument("$avg", "$RG-Consumption") },
                                { "RG-Production",
                        new BsonDocument("$sum", "$FormData.Data.refinedGycerinMt") },
                                { "RG-T-Production",
                        new BsonDocument("$sum", "$FormData.Data.refinedGlycerinTradingMt") },
                                { "Product-Group",
                        new BsonDocument("$first", "$FormData.Data.productGroup1") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "FinalDatata",
                        new BsonDocument("$push",
                        new BsonDocument
                                    {
                                        { "Product-Group", "$Product-Group" },
                                        { "Sales", "$Sales" },
                                        { "Sales-Map", "$Sales-Product" },
                                        { "Production-Map", "$_id.Map" },
                                        { "Loss", "$Loss" },
                                        { "ProductName", "$ProductName" },
                                        { "Product-Sales", "$Product-Sales" },
                                        { "Product-OB", "$Product-OB" },
                                        { "CG-Consumption", "$CG-Consumption" },
                                        { "RG-Consumption", "$RG-Consumption" },
                                        { "RG-Production", "$RG-Production" },
                                        { "RG-T-Production", "$RG-T-Production" }
                                    }) }
                            }),
                        new BsonDocument("$project",
                        new BsonDocument
                            {
                                { "_id", 0 },
                                { "MyArray",
                        new BsonArray
                                {
                                    new BsonDocument
                                    {
                                        { "ProductName",
                                    new BsonDocument("$concat",
                                    new BsonArray
                                            {
                                                "Product Group: ",
                                                new BsonDocument("$first", "$FinalDatata.Product-Group")
                                            }) },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Crude Glycerin" },
                                        { "OpeningBalance",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "crude glycerin"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-OB")),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Consumption",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "crude glycerin"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.RBD-Consumption")),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Production", 0 },
                                        { "Sales",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "crude glycerin"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-Sales")),4 }) },
                                                { "else", "$False" }
                                            }) }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Refined Glycerin-Import" },
                                        { "OpeningBalance",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "refined glycerin-import"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-OB")),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Consumption",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "refined glycerin-import"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.RBD-Consumption")),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Production", 0 },
                                        { "Sales",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "refined glycerin-import"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-Sales")),4 }) },
                                                { "else", "$False" }
                                            }) }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Primary: Regular Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Refined Glycerin" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RG-Production", "$$value"})),4 }) } })
                                                },
                                        { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "refined glycerin"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                        },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Refined Glycerin-Trading" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                   new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RG-T-Production", "$$value"})),4 }) } })
                                                },
                                        { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "refined glycerin-trading"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                        },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Primary: Institutional Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Refined Glycerin" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RG-Production", "$$value"})),4 }) } })
                                                 },
                                         { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "refined glycerin"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                        },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Refined Glycerin-Trading" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                   new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RG-T-Production", "$$value"})),4 }) } })
                                                 },
                                         { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "refined glycerin-trading"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                         },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Loss" },
                                        { "Production", new BsonDocument("$round",new BsonArray{ new BsonDocument( "$toDecimal",new BsonDocument("$first","$FinalDatata.Loss")),4}) }
                                    }
                                } }
                            })
                };

                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };
                var aggregateDataList = datasetCollection.Aggregate<BsonDocument>(dashboardPipeline, aggregateOptions).ToList();
                List<DashboardOutputModel> dataSources = new List<DashboardOutputModel>();

                if (aggregateDataList.Count > 0)
                {
                    var test = BsonSerializer.Deserialize<FinalOutputModel1>(aggregateDataList.FirstOrDefault());
                    dataSources = test.MyArray.ToList();

                    if (dataSources != null && dataSources.Count > 0)
                    {
                        Parallel.ForEach(dataSources, data =>
                        {
                            data.OpeningBalance = data.OpeningBalance ?? 0;
                            data.Production = data.Production ?? 0;
                            data.Sales = (data.Sales * -1) ?? 0;
                            data.Consumption = (data.Consumption * -1) ?? 0;
                            data.ClosingBalance = (data.OpeningBalance + data.Production + data.Sales + data.Consumption);
                        });
                    }
                }
                return dataSources;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetGlycerinImportDashboard", "DashboardRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return null;
            }
        }

        public List<DashboardOutputModel> GetGlycerinLocalDashboard(DashboardInputModel inputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetGlycerinLocalDashboard", "DashboardRepository"));
                IMongoCollection<DataSetOutputModel> datasetCollection = GetMongoCollectionObject<DataSetOutputModel>(MongoDBCollectionConstants.DataSet);

                string sourceLookupKey = "mylookup" + inputModel.ContractUniqueId + "lookupchilddata";

                DateTime fromDate = inputModel.FromDate ?? DateTime.UtcNow;
                DateTime toDate = inputModel.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;

                List<BsonDocument> dashboardPipeline =
                new List<BsonDocument> {
                        new BsonDocument("$addFields",
                        new BsonDocument("datefilter",
                        new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))),
                        new BsonDocument("$match",
                        new BsonDocument
                            {
                                { "DataJson.FormData.localUniqueId", inputModel.ContractUniqueId },
                                { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                { "IsArchived", false },
                            { "datefilter",
                        new BsonDocument
                                {
                                    { "$gte",
                        new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                    { "$lte",
                        new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                } },
                                { "DataJson.FormData.type", inputModel.ProductType }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$DataJson")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "Product-Sales",
                        new BsonDocument("$sum",
                        new BsonDocument("$cond",
                        new BsonDocument
                                        {
                                            { "if",
                        new BsonDocument("$eq",
                        new BsonArray
                                                {
                                                    "$DataJson.FormData.commodity1",
                                                    "$DataJson.FormData." + sourceLookupKey + ".commodity"
                                                }) },
                                            { "then", new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray { "$DataJson.FormData.quantityMt2","0"})) },
                                            { "else", 0 }
                                        })) },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$DataJson.FormData")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$addFields",
                        new BsonDocument
                            {
                                { "ProductName", "$FormData.Data." + sourceLookupKey + ".commodity" },
                                { "Product-OB", "$FormData.Data." + sourceLookupKey + ".totalQuantityMt" },
                                { "Product-Sales", "$Product-Sales" }
                            }),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "OpeningBalance",
                        new BsonDocument("$avg", "$OpeningBalance") },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "CG-Consumption",
                        new BsonDocument("$sum", "$FormData.Data.crudeGlycerinLocalMt") },
                                { "RG-Consumption",
                        new BsonDocument("$sum", "$FormData.Data.refinedGlycerinLocalMt1") },
                                { "Loss",
                        new BsonDocument("$sum", "$FormData.Data.lossMt9") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id",
                        new BsonDocument("Map",
                        new BsonDocument
                                    {
                                        { "Commodity", "$FormData.Data.commodity1" },
                                        { "SalesType", "$FormData.Data.salesType" }
                                    }) },
                                { "Sales",
                        new BsonDocument("$sum",new BsonDocument("$toDecimal", new BsonDocument("$ifNull",new BsonArray {"$FormData.Data.quantityMt2","0"}))) },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "Loss",
                        new BsonDocument("$avg", "$Loss") },
                                { "CG-Consumption",
                        new BsonDocument("$avg", "$CG-Consumption") },
                                { "RG-Consumption",
                        new BsonDocument("$avg", "$RG-Consumption") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id",
                        new BsonDocument("Map",
                        new BsonDocument
                                    {
                                       { "SalesType", "$FormData.Data.salesType" },
                                        { "Sales-Group", "$_id.Map" },
                                        { "Sales", "$Sales" }
                                    }) },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Loss",
                        new BsonDocument("$avg", "$Loss") },
                                { "CG-Consumption",
                        new BsonDocument("$avg", "$CG-Consumption") },
                                { "RG-Consumption",
                        new BsonDocument("$avg", "$RG-Consumption") },
                                { "RG-Production",
                        new BsonDocument("$sum", "$FormData.Data.refinedGlycerinMt") },
                                { "RG-T-Production",
                        new BsonDocument("$sum", "$FormData.Data.refinedGlycerinTradingMt1") },
                                { "Product-Group",
                        new BsonDocument("$first", "$FormData.Data.productGroup1") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "FinalDatata",
                        new BsonDocument("$push",
                        new BsonDocument
                                    {
                                        { "Product-Group", "$Product-Group" },
                                        { "Sales", "$Sales" },
                                        { "Sales-Map", "$Sales-Product" },
                                        { "Production-Map", "$_id.Map" },
                                        { "Loss", "$Loss" },
                                        { "ProductName", "$ProductName" },
                                        { "Product-Sales", "$Product-Sales" },
                                        { "Product-OB", "$Product-OB" },
                                        { "CG-Consumption", "$CG-Consumption" },
                                        { "RG-Consumption", "$RG-Consumption" },
                                        { "RG-Production", "$RG-Production" },
                                        { "RG-T-Production", "$RG-T-Production" }
                                    }) }
                            }),
                        new BsonDocument("$project",
                        new BsonDocument
                            {
                                { "_id", 0 },
                                { "MyArray",
                        new BsonArray
                                {
                                    new BsonDocument
                                    {
                                        { "ProductName",
                                    new BsonDocument("$concat",
                                    new BsonArray
                                            {
                                                "Product Group: ",
                                                new BsonDocument("$first", "$FinalDatata.Product-Group")
                                            }) },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Crude Glycerin" },
                                        { "OpeningBalance",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$first", "$FinalDatata.ProductName"),
                                                        "Crude Glycerin"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-OB") ),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Consumption",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$first", "$FinalDatata.ProductName"),
                                                        "Crude Glycerin"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.RBD-Consumption")),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Production", 0 },
                                        { "Sales",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "crude glycerin"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-Sales") ),4 })},
                                                { "else", "$False" }
                                            }) }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Refined Glycerin-Import" },
                                        { "OpeningBalance",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$first", "$FinalDatata.ProductName"),
                                                        "Refined Glycerin-Import"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-OB") ),4 })},
                                                { "else", "$False" }
                                            }) },
                                        { "Consumption",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$first", "$FinalDatata.ProductName"),
                                                        "Refined Glycerin-Import"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.RBD-Consumption")),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Production", 0 },
                                        { "Sales",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "refined glycerin-import"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-Sales")),4 }) },
                                                { "else", "$False" }
                                            }) }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Primary: Regular Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Refined Glycerin" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                   new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RG-Production", "$$value"})),4 }) } })
                                                },
                                          { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "refined glycerin"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                          },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Refined Glycerin-Trading" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                   new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RG-T-Production", "$$value"})),4 }) } })
                                                },
                                         { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "refined glycerin-trading"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                        },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Primary: Institutional Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Refined Glycerin" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RG-Production", "$$value"})),4 }) } })
                                                 },
                                         { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "refined glycerin"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                        },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Refined Glycerin-Trading" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                   new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RG-T-Production", "$$value"})),4 }) } })
                                                 },
                                         { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "refined glycerin-trading"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                        },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Loss" },
                                        { "Production", new BsonDocument("$round",new BsonArray{ new BsonDocument( "$toDecimal",new BsonDocument("$first","$FinalDatata.Loss")),4}) }
                                    }
                                } }
                            })
                };

                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };
                var aggregateDataList = datasetCollection.Aggregate<BsonDocument>(dashboardPipeline, aggregateOptions).ToList();
                List<DashboardOutputModel> dataSources = new List<DashboardOutputModel>();

                if (aggregateDataList.Count > 0)
                {
                    var test = BsonSerializer.Deserialize<FinalOutputModel1>(aggregateDataList.FirstOrDefault());
                    dataSources = test.MyArray.ToList();

                    if (dataSources != null && dataSources.Count > 0)
                    {
                        Parallel.ForEach(dataSources, data =>
                        {
                            data.OpeningBalance = data.OpeningBalance ?? 0;
                            data.Production = data.Production ?? 0;
                            data.Sales = (data.Sales * -1) ?? 0;
                            data.Consumption = (data.Consumption * -1) ?? 0;
                            data.ClosingBalance = (data.OpeningBalance + data.Production + data.Sales + data.Consumption);
                        });
                    }
                }
                return dataSources;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetGlycerinLocalDashboard", "DashboardRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return null;
            }
        }

        public List<DashboardOutputModel> GetRiceBranImportDashboard(DashboardInputModel inputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetRiceBranImportDashboard", "DashboardRepository"));
                IMongoCollection<DataSetOutputModel> datasetCollection = GetMongoCollectionObject<DataSetOutputModel>(MongoDBCollectionConstants.DataSet);

                string sourceLookupKey = "selectSourceContract" + inputModel.ContractUniqueId + "lookupchilddata";

                DateTime fromDate = inputModel.FromDate ?? DateTime.UtcNow;
                DateTime toDate = inputModel.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;

                List<BsonDocument> dashboardPipeline = new List<BsonDocument>
                {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))),
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "DataJson.FormData.ImportUniqueId", inputModel.ContractUniqueId },
                            { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                            { "IsArchived", false },
                            { "datefilter",
                                            new BsonDocument
                                                    {
                                                        { "$gte",
                                            new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                        { "$lte",
                                            new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                                    } },
                                                    { "DataJson.FormData.type", inputModel.ProductType }
                                                }),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$DataJson")),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "" },
                            { "Product-Sales",
                    new BsonDocument("$sum",
                    new BsonDocument("$cond",
                    new BsonDocument
                                    {
                                        { "if",
                    new BsonDocument("$eq",
                                            new BsonArray
                                                                    {
                                                                        "$DataJson.FormData.commodity1",
                                                                        "$FormData.Data." + sourceLookupKey + ".commodity1"
                                                                    }) },
                                        { "then", new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {"$DataJson.FormData.quantityMt2","0"})) },
                                        { "else", 0 }
                                    })) },
                            { "FormData",
                    new BsonDocument("$push",
                    new BsonDocument("Data", "$DataJson.FormData")) }
                        }),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$FormData")),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "ProductName", "$FormData.Data." + sourceLookupKey + ".commodity1" },
                                                    { "Product-OB", "$FormData.Data." + sourceLookupKey + ".contractQuantityMt" },
                                                    { "Product-Sales", "$Product-Sales" }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "" },
                            { "OpeningBalance",
                    new BsonDocument("$avg", "$OpeningBalance") },
                            { "ProductName",
                    new BsonDocument("$first", "$ProductName") },
                            { "Product-OB",
                    new BsonDocument("$first", "$Product-OB") },
                            { "Product-Sales",
                    new BsonDocument("$first", "$Product-Sales") },
                            { "CRBO-Consumption",
                    new BsonDocument("$sum","$FormData.Data.crboMt") },
                            { "RRBO-IMPORT-Consumption",
                    new BsonDocument("$sum","$FormData.Data.rrboImportMt") },
                            { "Loss",
                    new BsonDocument("$sum", "$FormData.Data.lossMt1") },
                            { "FormData",
                    new BsonDocument("$push",
                    new BsonDocument("Data", "$FormData.Data")) }
                        }),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$FormData")),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id",
                    new BsonDocument("Map",
                    new BsonDocument
                                {
                                    { "Commodity", "$FormData.Data.commodity1" },
                                    { "SalesType", "$FormData.Data.salesType" }
                                }) },
                            { "Sales",
                    new BsonDocument("$sum",new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {"$FormData.Data.quantityMt2","0"}))) },
                            { "ProductName",
                    new BsonDocument("$first", "$ProductName") },
                            { "Product-OB",
                    new BsonDocument("$first", "$Product-OB") },
                            { "Product-Sales",
                    new BsonDocument("$first", "$Product-Sales") },
                            { "Loss",
                    new BsonDocument("$avg", "$Loss") },
                            { "CRBO-Consumption",
                    new BsonDocument("$avg", "$CRBO-Consumption") },
                            { "RRBO-Import-Consumption",
                    new BsonDocument("$avg", "$RRBO-Import-Consumption") },
                            { "FormData",
                    new BsonDocument("$push",
                    new BsonDocument("Data", "$FormData.Data")) }
                        }),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$FormData")),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id",
                    new BsonDocument("Map",
                    new BsonDocument
                                {
                                    { "SalesType", "$FormData.Data.salesType" },
                                    { "Sales-Group", "$_id.Map" },
                                    { "Sales", "$Sales" }
                                }) },
                            { "ProductName",
                    new BsonDocument("$first", "$ProductName") },
                            { "Product-Sales",
                    new BsonDocument("$first", "$Product-Sales") },
                            { "Product-OB",
                    new BsonDocument("$first", "$Product-OB") },
                            { "Loss",
                    new BsonDocument("$avg", "$Loss") },
                            { "CRBO-Consumption",
                    new BsonDocument("$avg", "$CRBO-Consumption") },
                            { "RRBO-Import-Consumption",
                    new BsonDocument("$avg", "$RRBO-Import-Consumption") },
                            { "RRBO-Production",
                    new BsonDocument("$sum", "$FormData.Data.rrboMt") },
                            { "RRBO-Trading-Production",
                    new BsonDocument("$sum", "$FormData.Data.rrboTradingMt") },
                            { "RB-Fatty-ACID-Production",
                    new BsonDocument("$sum", "$FormData.Data.rbFattyAcidMt") },
                            { "RB-Oil-Wax-Production",
                    new BsonDocument("$sum", "$FormData.Data.rbOilWaxMt") },
                            { "Product-Group",
                    new BsonDocument("$first", "$FormData.Data.productGroup1") },
                            { "FormData",
                    new BsonDocument("$push",
                    new BsonDocument("Data", "$FormData.Data")) }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "" },
                            { "FinalDatata",
                    new BsonDocument("$push",
                    new BsonDocument
                                {
                                    { "Product-Group", "$Product-Group" },
                                    { "Sales", "$Sales" },
                                    { "Sales-Map", "$Sales-Product" },
                                    { "Production-Map", "$_id.Map" },
                                    { "Loss", "$Loss" },
                                    { "CRBO-Consumption", "$CRBO-Consumption" },
                                    { "RRBO-Import-Consumption", "$RRBO-Import-Consumption" },
                                    { "RRBO-Production", "$RRBO-Production" },
                                    { "RRBO-Trading-Production", "$RRBO-Trading-Production" },
                                    { "RB-Fatty-ACID-Production", "$RB-Fatty-ACID-Production" },
                                    { "RB-Oil-Wax-Production", "$RB-Oil-Wax-Production" },
                                    { "ProductName", "$ProductName" },
                                    { "Product-Sales", "$Product-Sales" },
                                    { "Product-OB", "$Product-OB" }
                                }) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "MyArray",
                    new BsonArray
                            {
                                new BsonDocument
                                {
                                    { "ProductName",
                                new BsonDocument("$concat",
                                new BsonArray
                                        {
                                            "Product Group: ",
                                            new BsonDocument("$first", "$FinalDatata.Product-Group")
                                        }) },
                                    { "IsBold", 1 }
                                },
                                new BsonDocument
                                {
                                    { "ProductName", "CRBO" },
                                    { "OpeningBalance",
                                new BsonDocument("$cond",
                                new BsonDocument
                                        {
                                            { "if",
                                new BsonDocument("$eq",
                                new BsonArray
                                                {
                                                    new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                    "crbo"
                                                }) },
                                            { "then",
                                new BsonDocument("$first", "$FinalDatata.Product-OB") },
                                            { "else", "$False" }
                                        }) },
                                    { "Consumption",
                                new BsonDocument("$cond",
                                new BsonDocument
                                        {
                                            { "if",
                                new BsonDocument("$eq",
                                new BsonArray
                                                {
                                                    new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                    "crbo"
                                                }) },
                                            { "then",
                                new BsonDocument("$first", "$FinalDatata.CRBO-Consumption") },
                                            { "else", "$False" }
                                        }) },
                                    { "Production", 0 },
                                    { "Sales",
                                new BsonDocument("$cond",
                                new BsonDocument
                                        {
                                            { "if",
                                new BsonDocument("$eq",
                                new BsonArray
                                                {
                                                    new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                    "crbo"
                                                }) },
                                            { "then",
                                new BsonDocument("$first", "$FinalDatata.Product-Sales") },
                                            { "else", "$False" }
                                        }) }
                                },
                                new BsonDocument
                                {
                                    { "ProductName", "RRBO-Import" },
                                    { "OpeningBalance",
                                new BsonDocument("$cond",
                                new BsonDocument
                                        {
                                            { "if",
                                new BsonDocument("$eq",
                                new BsonArray
                                                {
                                                   new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                    "rrbo-import"
                                                }) },
                                            { "then",
                                new BsonDocument("$first", "$FinalDatata.Product-OB") },
                                            { "else", "$False" }
                                        }) },
                                    { "Consumption",
                                new BsonDocument("$cond",
                                new BsonDocument
                                        {
                                            { "if",
                                new BsonDocument("$eq",
                                new BsonArray
                                                {
                                                    new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                    "rrbo-import"
                                                }) },
                                            { "then",
                                new BsonDocument("$first", "$FinalDatata.CRBO-Consumption") },
                                            { "else", "$False" }
                                        }) },
                                    { "Production", 0 },
                                    { "Sales",
                                new BsonDocument("$cond",
                                new BsonDocument
                                        {
                                            { "if",
                                new BsonDocument("$eq",
                                new BsonArray
                                                {
                                                    new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                    "rrbo-import"
                                                }) },
                                            { "then",
                                new BsonDocument("$first", "$FinalDatata.Product-Sales") },
                                            { "else", "$False" }
                                        }) }
                                },
                                new BsonDocument
                                {
                                    { "ProductName", "Primary: Regular Sales" },
                                    { "IsBold", 1 }
                                },
                                new BsonDocument
                                {
                                    { "ProductName", "RRBO" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption", 0 },
                                    { "Production",
                               new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RRBO-Production", "$$value"})),4 }) } })
                                             },
                                   { "Sales",
                                    new BsonDocument("$getField",
                                    new BsonDocument
                                            {
                                                { "field", "Sales" },
                                                { "input",
                                    new BsonDocument("$getField",
                                    new BsonDocument
                                                    {
                                                        { "field", "Production-Map" },
                                                        { "input",
                                    new BsonDocument("$first",
                                    new BsonDocument("$filter",
                                    new BsonDocument
                                                                {
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "sale" },
                                                                    { "cond",
                                    new BsonDocument("$and",
                                    new BsonArray
                                                                        {
                                                                            new BsonDocument("$eq",
                                                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                    "rrbo"
                                                                                }),
                                                                            new BsonDocument("$eq",
                                                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                    "regular"
                                                                                })
                                                                        }) }
                                                                })) }
                                                    }) }
                                            }) }
                                   },
                                new BsonDocument
                                {
                                    { "ProductName", "RRBO-TRADING" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption", 0 },
                                    { "Production",
                                new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RRBO-Trading-Production", "$$value"})),4 }) } })
                                             },
                                    { "Sales",
                                      new BsonDocument("$getField",
                                      new BsonDocument
                                            {
                                                { "field", "Sales" },
                                                { "input",
                                    new BsonDocument("$getField",
                                    new BsonDocument
                                                    {
                                                        { "field", "Production-Map" },
                                                        { "input",
                                    new BsonDocument("$first",
                                    new BsonDocument("$filter",
                                    new BsonDocument
                                                                {
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "sale" },
                                                                    { "cond",
                                    new BsonDocument("$and",
                                    new BsonArray
                                                                        {
                                                                            new BsonDocument("$eq",
                                                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                    "rrbo-trading"
                                                                                }),
                                                                            new BsonDocument("$eq",
                                                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                    "regular"
                                                                                })
                                                                        }) }
                                                                })) }
                                                    }) }
                                            }) }
                                    },
                                new BsonDocument
                                {
                                    { "ProductName", "Primary: Institutional Sales" },
                                    { "IsBold", 1 }
                                },
                                new BsonDocument
                                {
                                    { "ProductName", "RRBO" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption", 0 },
                                    { "Production",
                                new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RRBO-Production", "$$value"})),4 }) } })
                                           },
                                     { "Sales",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                {
                                                    { "field", "Sales" },
                                                    { "input",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                        {
                                                            { "field", "Production-Map" },
                                                            { "input",
                                        new BsonDocument("$first",
                                        new BsonDocument("$filter",
                                        new BsonDocument
                                                                    {
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "sale" },
                                                                        { "cond",
                                        new BsonDocument("$and",
                                        new BsonArray
                                                                            {
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                        "rrbo"
                                                                                    }),
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                        "institutional"
                                                                                    })
                                                                            }) }
                                                                    })) }
                                                        }) }
                                                }) }
                                     },
                                new BsonDocument
                                {
                                    { "ProductName", "RRBO-TRADING" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption", 0 },
                                    { "Production",
                               new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RRBO-Trading-Production", "$$value"})),4 }) } })
                                             },
                                    { "Sales",
                                      new BsonDocument("$getField",
                                      new BsonDocument
                                            {
                                                { "field", "Sales" },
                                                { "input",
                                    new BsonDocument("$getField",
                                    new BsonDocument
                                                    {
                                                        { "field", "Production-Map" },
                                                        { "input",
                                    new BsonDocument("$first",
                                    new BsonDocument("$filter",
                                    new BsonDocument
                                                                {
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "sale" },
                                                                    { "cond",
                                    new BsonDocument("$and",
                                    new BsonArray
                                                                        {
                                                                            new BsonDocument("$eq",
                                                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                    "rrbo-trading"
                                                                                }),
                                                                            new BsonDocument("$eq",
                                                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                    "institutional"
                                                                                })
                                                                        }) }
                                                                })) }
                                                    }) }
                                            }) }
                                    },
                                new BsonDocument
                                {
                                    { "ProductName", "Non-Primary: Regular Sales" },
                                    { "IsBold", 1 }
                                },
                                new BsonDocument
                                {
                                    { "ProductName", "RB Fatty ACID" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption", 0 },
                                    { "Production",
                               new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RB-Fatty-ACID-Production", "$$value"})),4 }) } })
                                            },
                                    { "Sales",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                {
                                                    { "field", "Sales" },
                                                    { "input",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                        {
                                                            { "field", "Production-Map" },
                                                            { "input",
                                        new BsonDocument("$first",
                                        new BsonDocument("$filter",
                                        new BsonDocument
                                                                    {
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "sale" },
                                                                        { "cond",
                                        new BsonDocument("$and",
                                        new BsonArray
                                                                            {
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                        "rb fatty acid"
                                                                                    }),
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                        "regular"
                                                                                    })
                                                                            }) }
                                                                    })) }
                                                        }) }
                                                }) }
                                    },
                                new BsonDocument
                                {
                                    { "ProductName", "RB Oil Wax" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption", 0 },
                                    { "Production",
                                new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RB-Oil-Wax-Production", "$$value"})),4 }) } })
                                             },
                                    { "Sales",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                {
                                                    { "field", "Sales" },
                                                    { "input",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                        {
                                                            { "field", "Production-Map" },
                                                            { "input",
                                        new BsonDocument("$first",
                                        new BsonDocument("$filter",
                                        new BsonDocument
                                                                    {
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "sale" },
                                                                        { "cond",
                                        new BsonDocument("$and",
                                        new BsonArray
                                                                            {
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                        "rb oil wax"
                                                                                    }),
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                        "regular"
                                                                                    })
                                                                            }) }
                                                                    })) }
                                                        }) }
                                                }) }
                                    },
                                new BsonDocument
                                {
                                    { "ProductName", "Non-Primary: Institutional Sales" },
                                    { "IsBold", 1 }
                                },
                                new BsonDocument
                                {
                                    { "ProductName", "RB Fatty ACID" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption", 0 },
                                    { "Production",
                               new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RB-Fatty-ACID-Production", "$$value"})),4 }) } })
                                            },
                                     { "Sales",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                {
                                                    { "field", "Sales" },
                                                    { "input",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                        {
                                                            { "field", "Production-Map" },
                                                            { "input",
                                        new BsonDocument("$first",
                                        new BsonDocument("$filter",
                                        new BsonDocument
                                                                    {
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "sale" },
                                                                        { "cond",
                                        new BsonDocument("$and",
                                        new BsonArray
                                                                            {
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                        "rb fatty acid"
                                                                                    }),
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                        "institutional"
                                                                                    })
                                                                            }) }
                                                                    })) }
                                                        }) }
                                                }) }
                                    },
                                new BsonDocument
                                {
                                    { "ProductName", "RB Oil Wax" },
                                    { "OpeningBalance", 0 },
                                    { "Consumption", 0 },
                                    { "Production",
                               new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RB-Oil-Wax-Production", "$$value"})),4 }) } })
                                            },
                                    { "Sales",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                {
                                                    { "field", "Sales" },
                                                    { "input",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                        {
                                                            { "field", "Production-Map" },
                                                            { "input",
                                        new BsonDocument("$first",
                                        new BsonDocument("$filter",
                                        new BsonDocument
                                                                    {
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "sale" },
                                                                        { "cond",
                                        new BsonDocument("$and",
                                        new BsonArray
                                                                            {
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                        "rb oil wax"
                                                                                    }),
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                        "institutional"
                                                                                    })
                                                                            }) }
                                                                    })) }
                                                        }) }
                                                }) }
                                    },
                                new BsonDocument
                                {
                                    { "ProductName", "Loss" },
                                    { "Production", new BsonDocument("$round",new BsonArray{ new BsonDocument( "$toDecimal",new BsonDocument("$first","$FinalDatata.Loss")),4}) }
                                }
                            } }
                        })
                };
                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };
                var aggregateDataList = datasetCollection.Aggregate<BsonDocument>(dashboardPipeline, aggregateOptions).ToList();
                var data = (aggregateDataList[0].TryGetValue("MyArray", out BsonValue finalData) ? finalData : null);
                List<DashboardOutputModel> dataSources = new List<DashboardOutputModel>();

                if (aggregateDataList.Count > 0)
                {
                    var test = BsonSerializer.Deserialize<FinalOutputModel1>(aggregateDataList.FirstOrDefault());
                    dataSources = test.MyArray.ToList();

                    if (dataSources != null && dataSources.Count > 0)
                    {
                        Parallel.ForEach(dataSources, data =>
                        {
                            data.OpeningBalance = data.OpeningBalance ?? 0;
                            data.Production = data.Production ?? 0;
                            data.Sales = (data.Sales * -1) ?? 0;
                            data.Consumption = (data.Consumption * -1) ?? 0;
                            data.ClosingBalance = (data.OpeningBalance + data.Production + data.Sales + data.Consumption);
                        });
                    }
                }
                return dataSources;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetRiceBranImportDashboard", "DashboardRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return null;
            }
        }
        public List<DashboardOutputModel> GetRiceBranLocalDashboard(DashboardInputModel inputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetRiceBranLocalDashboard", "DashboardRepository"));
                IMongoCollection<DataSetOutputModel> datasetCollection = GetMongoCollectionObject<DataSetOutputModel>(MongoDBCollectionConstants.DataSet);

                string sourceLookupKey = "mylookup" + inputModel.ContractUniqueId + "lookupchilddata";

                DateTime fromDate = inputModel.FromDate ?? DateTime.UtcNow;
                DateTime toDate = inputModel.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;

                List<BsonDocument> dashboardPipeline = new List<BsonDocument>
                    {
                        new BsonDocument("$addFields",
                        new BsonDocument("datefilter",
                        new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))),
                        new BsonDocument("$match",
                        new BsonDocument
                            {
                               { "DataJson.FormData.localUniqueId", inputModel.ContractUniqueId },
                               { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                               { "IsArchived", false },
                                { "datefilter",
                                                new BsonDocument
                                                        {
                                                            { "$gte",
                                                new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                            { "$lte",
                                                new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                                        } },
                                                        { "DataJson.FormData.type", inputModel.ProductType }
                                                    }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$DataJson")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "Product-Sales",
                        new BsonDocument("$sum",
                        new BsonDocument("$cond",
                        new BsonDocument
                                        {
                                            { "if",
                        new BsonDocument("$eq",
                        new BsonArray
                                                                        {
                                                                            "$DataJson.FormData.commodity1",
                                                                            "$FormData.Data." + sourceLookupKey + ".commodity"
                                                                        }) },
                                            { "then", new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {"$DataJson.FormData.quantityMt2","0"})) },
                                            { "else", 0 }
                                        })) },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$DataJson.FormData")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$addFields",
                        new BsonDocument
                            {
                                { "ProductName", "$FormData.Data." + sourceLookupKey + ".commodity" },
                                                        { "Product-OB", "$FormData.Data." + sourceLookupKey + ".totalQuantityMt" },
                                                        { "Product-Sales", "$Product-Sales" }
                            }),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "OpeningBalance",
                        new BsonDocument("$avg", "$OpeningBalance") },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "CRBO-Local-Consumption",
                        new BsonDocument("$sum", "$FormData.Data.crboLocalMt") },
                                { "RRBO-Local-Consumption",
                        new BsonDocument("$sum","$FormData.Data.rrboLocalMt") },
                                { "Loss",
                        new BsonDocument("$sum", "$FormData.Data.lossMt6") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id",
                        new BsonDocument("Map",
                        new BsonDocument
                                    {
                                        { "Commodity", "$FormData.Data.commodity1" },
                                        { "SalesType", "$FormData.Data.salesType" }
                                    }) },
                                { "Sales",
                        new BsonDocument("$sum",new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {"$FormData.Data.quantityMt2","0"}))) },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "Loss",
                        new BsonDocument("$avg", "$Loss") },
                                { "CRBO-Local-Consumption",
                        new BsonDocument("$avg", "$CRBO-Local-Consumption") },
                                { "RRBO-Local-Consumption",
                        new BsonDocument("$avg", "$RRBO-Local-Consumption") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id",
                        new BsonDocument("Map",
                        new BsonDocument
                                    {
                                        { "SalesType", "$FormData.Data.salesType" },
                                        { "Sales-Group", "$_id.Map" },
                                        { "Sales", "$Sales" }
                                    }) },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Loss",
                        new BsonDocument("$avg", "$Loss") },
                                { "CRBO-Local-Consumption",
                        new BsonDocument("$avg", "$CRBO-Local-Consumption") },
                                { "RRBO-Local-Consumption",
                        new BsonDocument("$avg", "$RRBO-Local-Consumption") },
                                { "RRBO-Production",
                        new BsonDocument("$sum", "$FormData.Data.rrboMt1") },
                                { "RRBO-Trading-Production",
                        new BsonDocument("$sum", "$FormData.Data.rrboTradingMt1") },
                                { "RB-Fatty-ACID-Production",
                        new BsonDocument("$sum", "$FormData.Data.rbFattyAcidMt1") },
                                { "RB-Oil-Wax-Production",
                        new BsonDocument("$sum", "$FormData.Data.rbOilWaxMt1") },
                                { "Product-Group",
                        new BsonDocument("$first", "$FormData.Data.productGroup1") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "FinalDatata",
                        new BsonDocument("$push",
                        new BsonDocument
                                    {
                                        { "Product-Group", "$Product-Group" },
                                        { "Sales", "$Sales" },
                                        { "Sales-Map", "$Sales-Product" },
                                        { "Production-Map", "$_id.Map" },
                                        { "Loss", "$Loss" },
                                        { "CRBO-Local-Consumption", "$CRBO-Local-Consumption" },
                                        { "RRBO-Local-Consumption", "$RRBO-Local-Consumption" },
                                        { "RRBO-Production", "$RRBO-Production" },
                                        { "RRBO-Trading-Production", "$RRBO-Trading-Production" },
                                        { "RB-Fatty-ACID-Production", "$RB-Fatty-ACID-Production" },
                                        { "RB-Oil-Wax-Production", "$RB-Oil-Wax-Production" },
                                        { "ProductName", "$ProductName" },
                                        { "Product-Sales", "$Product-Sales" },
                                        { "Product-OB", "$Product-OB" }
                                    }) }
                            }),
                        new BsonDocument("$project",
                        new BsonDocument
                            {
                                { "_id", 0 },
                                { "MyArray",
                        new BsonArray
                                {
                                    new BsonDocument
                                    {
                                        { "ProductName",
                                    new BsonDocument("$concat",
                                    new BsonArray
                                            {
                                                "Product Group: ",
                                                new BsonDocument("$first", "$FinalDatata.Product-Group")
                                            }) },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "CRBO-Local" },
                                        { "OpeningBalance",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "crbo-local"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-OB")),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Consumption",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "crbo-local"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.CRBO-Local-Consumption") ),4 })},
                                                { "else", "$False" }
                                            }) },
                                        { "Production", 0 },
                                        { "Sales",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                       new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "crbo-local"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-Sales") ),4 })},
                                                { "else", "$False" }
                                            }) }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RRBO-Local" },
                                        { "OpeningBalance",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "rrbo-local"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-OB") ),4 })},
                                                { "else", "$False" }
                                            }) },
                                        { "Consumption",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "rrbo-local"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.CRBO-Local-Consumption")),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Production", 0 },
                                        { "Sales",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "rrbo-local"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-Sales") ),4 })},
                                                { "else", "$False" }
                                            }) }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Primary: Regular Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RRBO" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RRBO-Production", "$$value"})),4 }) } })
                                                },
                                         { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rrbo"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                         },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RRBO-TRADING" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                   new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RRBO-Trading-Production", "$$value"})),4 }) } })
                                                },
                                        { "Sales",
                                          new BsonDocument("$getField",
                                          new BsonDocument
                                                {
                                                    { "field", "Sales" },
                                                    { "input",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                        {
                                                            { "field", "Production-Map" },
                                                            { "input",
                                        new BsonDocument("$first",
                                        new BsonDocument("$filter",
                                        new BsonDocument
                                                                    {
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "sale" },
                                                                        { "cond",
                                        new BsonDocument("$and",
                                        new BsonArray
                                                                            {
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                        "rrbo-trading"
                                                                                    }),
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                        "regular"
                                                                                    })
                                                                            }) }
                                                                    })) }
                                                        }) }
                                                }) }
                                        },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Primary: Institutional Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RRBO" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RRBO-Production", "$$value"})),4 }) } })
                                                 },
                                         { "Sales",
                                    new BsonDocument("$getField",
                                    new BsonDocument
                                            {
                                                { "field", "Sales" },
                                                { "input",
                                    new BsonDocument("$getField",
                                    new BsonDocument
                                                    {
                                                        { "field", "Production-Map" },
                                                        { "input",
                                    new BsonDocument("$first",
                                    new BsonDocument("$filter",
                                    new BsonDocument
                                                                {
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "sale" },
                                                                    { "cond",
                                    new BsonDocument("$and",
                                    new BsonArray
                                                                        {
                                                                            new BsonDocument("$eq",
                                                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                    "rrbo"
                                                                                }),
                                                                            new BsonDocument("$eq",
                                                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                    "institutional"
                                                                                })
                                                                        }) }
                                                                })) }
                                                    }) }
                                            }) }
                                   },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RRBO-TRADING" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RRBO-Trading-Production", "$$value"})),4 }) } })
                                                },
                                       { "Sales",
                                          new BsonDocument("$getField",
                                          new BsonDocument
                                                {
                                                    { "field", "Sales" },
                                                    { "input",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                        {
                                                            { "field", "Production-Map" },
                                                            { "input",
                                        new BsonDocument("$first",
                                        new BsonDocument("$filter",
                                        new BsonDocument
                                                                    {
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "sale" },
                                                                        { "cond",
                                        new BsonDocument("$and",
                                        new BsonArray
                                                                            {
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                        "rrbo-trading"
                                                                                    }),
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                        "institutional"
                                                                                    })
                                                                            }) }
                                                                    })) }
                                                        }) }
                                                }) }
                                       },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Non-Primary: Regular Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RB Fatty ACID" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                   new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RB-Fatty-ACID-Production", "$$value"})),4 }) } })
                                                 },
                                       { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rb fatty acid"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                       },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RB Oil Wax" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                   new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RB-Oil-Wax-Production", "$$value"})),4 }) } })
                                                 },
                                       { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rb oil wax"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                       },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Non-Primary: Institutional Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RB Fatty ACID" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RB-Fatty-ACID-Production", "$$value"})),4 }) } })
                                                 },
                                       { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rb fatty acid"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                       },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RB Oil Wax" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RB-Oil-Wax-Production", "$$value"})),4 }) } })
                                                },
                                        { "Sales",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                {
                                                    { "field", "Sales" },
                                                    { "input",
                                        new BsonDocument("$getField",
                                        new BsonDocument
                                                        {
                                                            { "field", "Production-Map" },
                                                            { "input",
                                        new BsonDocument("$first",
                                        new BsonDocument("$filter",
                                        new BsonDocument
                                                                    {
                                                                        { "input", "$FinalDatata" },
                                                                        { "as", "sale" },
                                                                        { "cond",
                                        new BsonDocument("$and",
                                        new BsonArray
                                                                            {
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                        "rb oil wax"
                                                                                    }),
                                                                                new BsonDocument("$eq",
                                                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                        "institutional"
                                                                                    })
                                                                            }) }
                                                                    })) }
                                                        }) }
                                                }) }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Loss" },
                                        { "Production", new BsonDocument("$round",new BsonArray{ new BsonDocument( "$toDecimal",new BsonDocument("$first","$FinalDatata.Loss")),4}) }
                                    }
                                } }
                            })
                    };
                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };
                var aggregateDataList = datasetCollection.Aggregate<BsonDocument>(dashboardPipeline, aggregateOptions).ToList();
                var data = (aggregateDataList[0].TryGetValue("MyArray", out BsonValue finalData) ? finalData : null);
                List<DashboardOutputModel> dataSources = new List<DashboardOutputModel>();

                if (aggregateDataList.Count > 0)
                {
                    var test = BsonSerializer.Deserialize<FinalOutputModel1>(aggregateDataList.FirstOrDefault());
                    dataSources = test.MyArray.ToList();

                    if (dataSources != null && dataSources.Count > 0)
                    {
                        Parallel.ForEach(dataSources, data =>
                        {
                            data.OpeningBalance = data.OpeningBalance ?? 0;
                            data.Production = data.Production ?? 0;
                            data.Sales = (data.Sales * -1) ?? 0;
                            data.Consumption = (data.Consumption * -1) ?? 0;
                            data.ClosingBalance = (data.OpeningBalance + data.Production + data.Sales + data.Consumption);
                        });
                    }
                }
                return dataSources;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetRiceBranLocalDashboard", "DashboardRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return null;
            }
        }
        public List<DashboardOutputModel> GetSoyabeanOilLocalDashboard(DashboardInputModel inputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetSoyabeanOilLocalDashboard", "DashboardRepository"));
                IMongoCollection<DataSetOutputModel> datasetCollection = GetMongoCollectionObject<DataSetOutputModel>(MongoDBCollectionConstants.DataSet);

                string sourceLookupKey = "mylookup" + inputModel.ContractUniqueId + "lookupchilddata";

                DateTime fromDate = inputModel.FromDate ?? DateTime.UtcNow;
                DateTime toDate = inputModel.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;

                List<BsonDocument> dashboardPipeline =
                new List<BsonDocument> {
                        new BsonDocument("$addFields",
                        new BsonDocument("datefilter",
                        new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))),
                        new BsonDocument("$match",
                        new BsonDocument
                            {
                                { "DataJson.FormData.localUniqueId", inputModel.ContractUniqueId },
                                { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                { "IsArchived", false },
                            { "datefilter",
                        new BsonDocument
                                {
                                    { "$gte",
                        new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                    { "$lte",
                        new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                } },
                                { "DataJson.FormData.type", inputModel.ProductType }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$DataJson")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "Product-Sales",
                        new BsonDocument("$sum",
                        new BsonDocument("$cond",
                        new BsonDocument
                                        {
                                            { "if",
                        new BsonDocument("$eq",
                        new BsonArray
                                                {
                                                    "$DataJson.FormData.commodity1",
                                                    "$DataJson.FormData." + sourceLookupKey + ".commodity"
                                                }) },
                                            { "then", new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {"$DataJson.FormData.quantityMt2","0"})) },
                                            { "else", 0 }
                                        })) },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$DataJson.FormData")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$addFields",
                        new BsonDocument
                            {
                                { "ProductName", "$FormData.Data." + sourceLookupKey + ".commodity" },
                                { "Product-OB", "$FormData.Data." + sourceLookupKey + ".totalQuantityMt" },
                                { "Product-Sales", "$Product-Sales" }
                            }),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "OpeningBalance",
                        new BsonDocument("$avg", "$OpeningBalance") },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "CDSBO-Consumption",
                        new BsonDocument("$sum", "$FormData.Data.cdsboLocalMt") },
                                { "RSBO-Consumption",
                        new BsonDocument("$sum", "$FormData.Data.rsboLocalMt") },
                                { "Loss",
                        new BsonDocument("$sum", "$FormData.Data.lossMt7") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id",
                        new BsonDocument("Map",
                        new BsonDocument
                                    {
                                        { "Commodity", "$FormData.Data.commodity1" },
                                        { "SalesType", "$FormData.Data.salesType" }
                                    }) },
                                { "Sales",
                        new BsonDocument("$sum",new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {"$FormData.Data.quantityMt2","0"}))) },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "Loss",
                        new BsonDocument("$avg", "$Loss") },
                                { "CDSBO-Consumption",
                        new BsonDocument("$avg", "$CDSBO-Consumption") },
                                { "RSBO-Consumption",
                        new BsonDocument("$avg", "$RSBO-Consumption") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id",
                        new BsonDocument("Map",
                        new BsonDocument
                                    {
                                       { "SalesType", "$FormData.Data.salesType" },
                                        { "Sales-Group", "$_id.Map" },
                                        { "Sales", "$Sales" }
                                    }) },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Loss",
                        new BsonDocument("$avg", "$Loss") },
                                { "CDSBO-Consumption",
                        new BsonDocument("$avg", "$CDSBO-Consumption") },
                                { "RSBO-Consumption",
                        new BsonDocument("$avg", "$RSBO-Consumption") },
                                { "RSBO-Production",
                        new BsonDocument("$sum", "$FormData.Data.rsboMt1") },
                                { "RSBO-T-Production",
                        new BsonDocument("$sum", "$FormData.Data.rsboTradingMt1") },
                                { "SoyAcidOil-Production",
                        new BsonDocument("$sum", "$FormData.Data.soyAcidOilMt1") },
                                { "Product-Group",
                        new BsonDocument("$first", "$FormData.Data.productGroup1") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "FinalDatata",
                        new BsonDocument("$push",
                        new BsonDocument
                                    {
                                        { "Product-Group", "$Product-Group" },
                                        { "Sales", "$Sales" },
                                        { "Sales-Map", "$Sales-Product" },
                                        { "Production-Map", "$_id.Map" },
                                        { "Loss", "$Loss" },
                                        { "ProductName", "$ProductName" },
                                        { "Product-Sales", "$Product-Sales" },
                                        { "Product-OB", "$Product-OB" },
                                        { "CDSBO-Consumption", "$CDSBO-Consumption" },
                                        { "RSBO-Consumption", "$RSBO-Consumption" },
                                        { "RSBO-T-Production", "$RSBO-T-Production" },
                                        { "RSBO-Production", "RSBO-Production" },
                                        { "SoyAcidOil-Production", "SoyAcidOil-Production" }
                                    }) }
                            }),
                        new BsonDocument("$project",
                        new BsonDocument
                            {
                                { "_id", 0 },
                                { "MyArray",
                        new BsonArray
                                {
                                    new BsonDocument
                                    {
                                        { "ProductName",
                                    new BsonDocument("$concat",
                                    new BsonArray
                                            {
                                                "Product Group: ",
                                                new BsonDocument("$first", "$FinalDatata.Product-Group")
                                            }) },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "CDSBO" },
                                        { "OpeningBalance",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "cdsbo"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-OB") ),4 })},
                                                { "else", "$False" }
                                            }) },
                                        { "Consumption",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "cdsbo"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.CDSBO-Consumption")),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Production", 0 },
                                        { "Sales",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "cdsbo"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-Sales") ),4 })},
                                                { "else", "$False" }
                                            }) }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RSBO-Import" },
                                        { "OpeningBalance",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "rsbo-import"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-OB")),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Consumption",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "rsbo-import"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.RSBO-Consumption")),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Production", 0 },
                                        { "Sales",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "rsbo-import"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-Sales") ),4 })},
                                                { "else", "$False" }
                                            }) }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Primary: Regular Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RSBO" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSBO-Production", "$$value"})),4 }) } })
                                                 },
                                         { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rsbo"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                         },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RSBO-Trading" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                   new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSBO-T-Production", "$$value"})),4 }) } })
                                                },
                                        { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rsbo trading"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                         },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Primary: Institutional Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RSBO" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSBO-Production", "$$value"})),4 }) } })
                                                 },
                                      { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rsbo"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                         },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RSBO-Trading" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSBO-T-Production", "$$value"})),4 }) } })
                                                 },
                                       { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rsbo-trading"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                       },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Non Primary: Regular Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Soy Acid Oil" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.SoyAcidOil-Production", "$$value"})),4 }) } })
                                                 },
                                       { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "soy acid oil"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                        },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Non-Primary: Institutional Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Soy Acid Oil" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.SoyAcidOil-Production", "$$value"})),4 }) } })
                                                 },
                                       { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "soy acid oil"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                        },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Loss" },
                                        { "Production", new BsonDocument("$round",new BsonArray{ new BsonDocument( "$toDecimal",new BsonDocument("$first","$FinalDatata.Loss")),4}) }
                                    }
                                } }
                            })
                };

                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };
                var aggregateDataList = datasetCollection.Aggregate<BsonDocument>(dashboardPipeline, aggregateOptions).ToList();
                List<DashboardOutputModel> dataSources = new List<DashboardOutputModel>();

                if (aggregateDataList.Count > 0)
                {
                    var test = BsonSerializer.Deserialize<FinalOutputModel1>(aggregateDataList.FirstOrDefault());
                    dataSources = test.MyArray.ToList();

                    if (dataSources != null && dataSources.Count > 0)
                    {
                        Parallel.ForEach(dataSources, data =>
                        {
                            data.OpeningBalance = data.OpeningBalance ?? 0;
                            data.Production = data.Production ?? 0;
                            data.Sales = (data.Sales * -1) ?? 0;
                            data.Consumption = (data.Consumption * -1) ?? 0;
                            data.ClosingBalance = (data.OpeningBalance + data.Production + data.Sales + data.Consumption);
                        });
                    }
                }
                return dataSources;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetSoyabeanOilLocalDashboard", "DashboardRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return null;
            }
        }
        public List<DashboardOutputModel> GetSoyabeanOilImportDashboard(DashboardInputModel inputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetSoyabeanOilImportDashboard", "DashboardRepository"));
                IMongoCollection<DataSetOutputModel> datasetCollection = GetMongoCollectionObject<DataSetOutputModel>(MongoDBCollectionConstants.DataSet);

                string sourceLookupKey = "selectSourceContract" + inputModel.ContractUniqueId + "lookupchilddata";

                DateTime fromDate = inputModel.FromDate ?? DateTime.UtcNow;
                DateTime toDate = inputModel.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;

                List<BsonDocument> dashboardPipeline =
                new List<BsonDocument> {
                        new BsonDocument("$addFields",
                        new BsonDocument("datefilter",
                        new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))),
                        new BsonDocument("$match",
                        new BsonDocument
                            {
                                { "DataJson.FormData.ImportUniqueId", inputModel.ContractUniqueId },
                                { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                { "IsArchived", false },
                            { "datefilter",
                        new BsonDocument
                                {
                                    { "$gte",
                        new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                    { "$lte",
                        new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                } },
                                { "DataJson.FormData.type", inputModel.ProductType }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$DataJson")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "Product-Sales",
                        new BsonDocument("$sum",
                        new BsonDocument("$cond",
                        new BsonDocument
                                        {
                                            { "if",
                        new BsonDocument("$eq",
                        new BsonArray
                                                {
                                                    "$DataJson.FormData.commodity1",
                                                    "$DataJson.FormData." + sourceLookupKey + ".commodity1"
                                                }) },
                                            { "then", new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {"$DataJson.FormData.quantityMt2","0"})) },
                                            { "else", 0 }
                                        })) },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$DataJson.FormData")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$addFields",
                        new BsonDocument
                            {
                                { "ProductName", "$FormData.Data." + sourceLookupKey + ".commodity1" },
                                { "Product-OB", "$FormData.Data." + sourceLookupKey + ".contractQuantityMt" },
                                { "Product-Sales", "$Product-Sales" }
                            }),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "OpeningBalance",
                        new BsonDocument("$avg", "$OpeningBalance") },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "CDSBO-Consumption",
                        new BsonDocument("$sum", "$FormData.Data.cdsboMt") },
                                { "RSBO-Consumption",
                        new BsonDocument("$sum", "$FormData.Data.rsboImportMt") },
                                { "Loss",
                        new BsonDocument("$sum", "$FormData.Data.lossMt3") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id",
                        new BsonDocument("Map",
                        new BsonDocument
                                    {
                                        { "Commodity", "$FormData.Data.commodity1" },
                                        { "SalesType", "$FormData.Data.salesType" }
                                    }) },
                                { "Sales",
                        new BsonDocument("$sum", new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {"$FormData.Data.quantityMt2","0"})) ) },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "Loss",
                        new BsonDocument("$avg", "$Loss") },
                                { "CDSBO-Consumption",
                        new BsonDocument("$avg", "$CDSBO-Consumption") },
                                { "RSBO-Consumption",
                        new BsonDocument("$avg", "$RSBO-Consumption") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$FormData")),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id",
                        new BsonDocument("Map",
                        new BsonDocument
                                    {
                                       { "SalesType", "$FormData.Data.salesType" },
                                        { "Sales-Group", "$_id.Map" },
                                        { "Sales", "$Sales" }
                                    }) },
                                { "ProductName",
                        new BsonDocument("$first", "$ProductName") },
                                { "Product-Sales",
                        new BsonDocument("$first", "$Product-Sales") },
                                { "Product-OB",
                        new BsonDocument("$first", "$Product-OB") },
                                { "Loss",
                        new BsonDocument("$avg", "$Loss") },
                                { "CDSBO-Consumption",
                        new BsonDocument("$avg", "$CDSBO-Consumption") },
                                { "RSBO-Consumption",
                        new BsonDocument("$avg", "$RSBO-Consumption") },
                                { "RSBO-Production",
                        new BsonDocument("$sum", "$FormData.Data.rsboMt") },
                                { "RSBO-T-Production",
                        new BsonDocument("$sum", "$FormData.Data.rsboTradingMt") },
                                { "SoyAcidOil-Production",
                        new BsonDocument("$sum", "$FormData.Data.soyAcidOilMt") },
                                { "Product-Group",
                        new BsonDocument("$first", "$FormData.Data.productGroup1") },
                                { "FormData",
                        new BsonDocument("$push",
                        new BsonDocument("Data", "$FormData.Data")) }
                            }),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "FinalDatata",
                        new BsonDocument("$push",
                        new BsonDocument
                                    {
                                        { "Product-Group", "$Product-Group" },
                                        { "Sales", "$Sales" },
                                        { "Sales-Map", "$Sales-Product" },
                                        { "Production-Map", "$_id.Map" },
                                        { "Loss", "$Loss" },
                                        { "ProductName", "$ProductName" },
                                        { "Product-Sales", "$Product-Sales" },
                                        { "Product-OB", "$Product-OB" },
                                        { "CDSBO-Consumption", "$CDSBO-Consumption" },
                                        { "RSBO-Consumption", "$RSBO-Consumption" },
                                        { "RSBO-T-Production", "$RSBO-T-Production" },
                                        { "RSBO-Production", "RSBO-Production" },
                                        { "SoyAcidOil-Production", "SoyAcidOil-Production" }
                                    }) }
                            }),
                        new BsonDocument("$project",
                        new BsonDocument
                            {
                                { "_id", 0 },
                                { "MyArray",
                        new BsonArray
                                {
                                    new BsonDocument
                                    {
                                        { "ProductName",
                                    new BsonDocument("$concat",
                                    new BsonArray
                                            {
                                                "Product Group: ",
                                                new BsonDocument("$first", "$FinalDatata.Product-Group")
                                            }) },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "CDSBO" },
                                        { "OpeningBalance",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "cdsbo"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-OB") ),4 })},
                                                { "else", "$False" }
                                            }) },
                                        { "Consumption",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "cdsbo"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.CDSBO-Consumption")),4 }) },
                                                { "else", "$False" }
                                            }) },
                                        { "Production", 0 },
                                        { "Sales",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "cdsbo"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-Sales")),4 }) },
                                                { "else", "$False" }
                                            }) }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RSBO-Import" },
                                        { "OpeningBalance",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "rsbo-import"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-OB") ),4 })},
                                                { "else", "$False" }
                                            }) },
                                        { "Consumption",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "rsbo-import"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.RSBO-Consumption") ),4 })},
                                                { "else", "$False" }
                                            }) },
                                        { "Production", 0 },
                                        { "Sales",
                                    new BsonDocument("$cond",
                                    new BsonDocument
                                            {
                                                { "if",
                                    new BsonDocument("$eq",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toLower" ,new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                        "rsbo-import"
                                                    }) },
                                                { "then",
                                                new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                    new BsonDocument("$first", "$FinalDatata.Product-Sales") ),4 })},
                                                { "else", "$False" }
                                            }) }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Primary: Regular Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RSBO" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSBO-Production", "$$value"})),4 }) } })
                                                },
                                        { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rsbo"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                        },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RSBO-Trading" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                   new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSBO-T-Production", "$$value"})),4 }) } })
                                                },
                                         { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rsbo-trading"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                         },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Primary: Institutional Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RSBO" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSBO-Production", "$$value"})),4 }) } })
                                                },
                                       { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rsbo"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                       },
                                    new BsonDocument
                                    {
                                        { "ProductName", "RSBO-Trading" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                   new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RSBO-T-Production", "$$value"})),4 }) } })
                                               },
                                         { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rsbo-trading"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                       },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Non Primary: Regular Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Soy Acid Oil" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                    new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.SoyAcidOil-Production", "$$value"})),4 }) } })
                                                 },
                                        { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "soy acid oil"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                        },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Non-Primary: Institutional Sales" },
                                        { "IsBold", 1 }
                                    },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Soy Acid Oil" },
                                        { "OpeningBalance", 0 },
                                        { "Consumption", 0 },
                                        { "Production",
                                   new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.SoyAcidOil-Production", "$$value"})),4 }) } })
                                                },
                                        { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "soy acid oil"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                        },
                                    new BsonDocument
                                    {
                                        { "ProductName", "Loss" },
                                        { "Production", new BsonDocument("$round",new BsonArray{ new BsonDocument( "$toDecimal",new BsonDocument("$first","$FinalDatata.Loss")),4}) }
                                    }
                                } }
                            })
                };

                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };
                var aggregateDataList = datasetCollection.Aggregate<BsonDocument>(dashboardPipeline, aggregateOptions).ToList();
                List<DashboardOutputModel> dataSources = new List<DashboardOutputModel>();

                if (aggregateDataList.Count > 0)
                {
                    var test = BsonSerializer.Deserialize<FinalOutputModel1>(aggregateDataList.FirstOrDefault());
                    dataSources = test.MyArray.ToList();

                    if (dataSources != null && dataSources.Count > 0)
                    {
                        Parallel.ForEach(dataSources, data =>
                        {
                            data.OpeningBalance = data.OpeningBalance ?? 0;
                            data.Production = data.Production ?? 0;
                            data.Sales = (data.Sales * -1) ?? 0;
                            data.Consumption = (data.Consumption * -1) ?? 0;
                            data.ClosingBalance = (data.OpeningBalance + data.Production + data.Sales + data.Consumption);
                        });
                    }
                }
                return dataSources;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetSoyabeanOilImportDashboard", "DashboardRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return null;
            }
        }
        public List<DashboardOutputModel> GetPalmOilLocalDashboard(DashboardInputModel inputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetPalmOilLocalDashboard", "DashboardRepository"));
                IMongoCollection<DataSetOutputModel> datasetCollection = GetMongoCollectionObject<DataSetOutputModel>(MongoDBCollectionConstants.DataSet);

                string sourceLookupKey = "mylookup" + inputModel.ContractUniqueId + "lookupchilddata";

                DateTime fromDate = inputModel.FromDate ?? DateTime.UtcNow;
                DateTime toDate = inputModel.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;

                List<BsonDocument> dashboardPipeline =
                new List<BsonDocument>
                          {
                            new BsonDocument("$addFields",
                            new BsonDocument("datefilter",
                            new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))),
                            new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "DataJson.FormData.localUniqueId", inputModel.ContractUniqueId },
                                    { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                    { "IsArchived", false },
                                { "datefilter",
                            new BsonDocument
                                    {
                                        { "$gte",
                            new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                        { "$lte",
                            new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                    } },
                                    { "DataJson.FormData.type", inputModel.ProductType }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$DataJson")),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id", "" },
                                    { "Product-Sales",
                            new BsonDocument("$sum",
                            new BsonDocument("$cond",
                            new BsonDocument
                                            {
                                                { "if",
                            new BsonDocument("$eq",
                            new BsonArray
                                                    {
                                                        "$DataJson.FormData.commodity1",
                                                        "$DataJson.FormData." + sourceLookupKey + ".commodity"
                                                    }) },
                                                { "then", new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {"$DataJson.FormData.quantityMt2","0"})) },
                                                { "else", 0 }
                                            })) },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$DataJson.FormData")) }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$FormData")),
                            new BsonDocument("$addFields",
                            new BsonDocument
                                {
                                    { "ProductName", "$FormData.Data." + sourceLookupKey + ".commodity" },
                                    { "Product-OB", "$FormData.Data." + sourceLookupKey + ".totalQuantityMt" },
                                    { "Product-Sales", "$Product-Sales" }
                                }),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id", "" },
                                    { "OpeningBalance",
                            new BsonDocument("$avg", "$OpeningBalance") },
                                    { "ProductName",
                            new BsonDocument("$first", "$ProductName") },
                                    { "Product-OB",
                            new BsonDocument("$first", "$Product-OB") },
                                    { "Product-Sales",
                            new BsonDocument("$first", "$Product-Sales") },
                                    { "CPO-Local-Consumption",
                            new BsonDocument("$sum","$FormData.Data.cpolocalMt") },
                                    { "RPO-Local-Consumption",
                            new BsonDocument("$sum","$FormData.Data.refinedPalmOilLocalMt") },
                                    { "RBD-Local-Consumption",
                            new BsonDocument("$sum","$FormData.Data.rbdPalmoleinImportMt1") },
                                    { "Loss",
                            new BsonDocument("$sum", "$FormData.Data.lossMt8") },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$FormData.Data")) }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$FormData")),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id",
                            new BsonDocument("Map",
                            new BsonDocument
                                        {
                                            { "Commodity", "$FormData.Data.commodity1" },
                                            { "SalesType", "$FormData.Data.salesType" }
                                        }) },
                                    { "Sales",
                            new BsonDocument("$sum",new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {"$FormData.Data.quantityMt2","0"}))) },
                                    { "ProductName",
                            new BsonDocument("$first", "$ProductName") },
                                    { "Product-OB",
                            new BsonDocument("$first", "$Product-OB") },
                                    { "Product-Sales",
                            new BsonDocument("$first", "$Product-Sales") },
                                    { "Loss",
                            new BsonDocument("$avg", "$Loss") },
                                    { "CPO-Local-Consumption",
                            new BsonDocument("$avg", "$CPO-Local-Consumption") },
                                    { "RPO-Local-Consumption",
                            new BsonDocument("$avg", "$RPO-Local-Consumption") },
                                    { "RBD-Local-Consumption",
                            new BsonDocument("$avg", "$RBD-Local-Consumption") },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$FormData.Data")) }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$FormData")),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id",
                            new BsonDocument("Map",
                            new BsonDocument
                                        {
                                           { "SalesType", "$FormData.Data.salesType" },
                                            { "Sales-Group", "$_id.Map" },
                                            { "Sales", "$Sales" }
                                        }) },
                                    { "ProductName",
                            new BsonDocument("$first", "$ProductName") },
                                    { "Product-Sales",
                            new BsonDocument("$first", "$Product-Sales") },
                                    { "Product-OB",
                            new BsonDocument("$first", "$Product-OB") },
                                    { "Loss",
                            new BsonDocument("$avg", "$Loss") },
                                    { "CPO-Local-Consumption",
                            new BsonDocument("$avg", "$CPO-Local-Consumption") },
                                    { "RPO-Local-Consumption",
                            new BsonDocument("$avg", "$RPO-Local-Consumption") },
                                    { "RBD-Local-Consumption",
                            new BsonDocument("$avg", "$RBD-Local-Consumption") },
                                    { "RPO-Production",
                            new BsonDocument("$sum", "$FormData.Data.rpoMt5") },
                                    { "RBD-Production",
                            new BsonDocument("$sum", "$FormData.Data.rbdOleinMt6") },
                                    { "Stearint-Production",
                            new BsonDocument("$sum", "$FormData.Data.stearinMt7") },
                                    { "PFAD-Production",
                            new BsonDocument("$sum", "$FormData.Data.pfadMt8") },
                                    { "RPO-T-Production",
                            new BsonDocument("$sum", "$FormData.Data.refinedPalmOilTradingMt") },
                                    { "RBD-T-Production",
                            new BsonDocument("$sum", "$FormData.Data.rbdPalmoleinTradingMt1") },
                                    { "HardStearint-Production",
                            new BsonDocument("$sum", "$FormData.Data.hardStearinMtlocal") },
                                    { "SoftStearint-Production",
                            new BsonDocument("$sum", "$FormData.Data.softStearinMtlocal") },
                                    { "WhiteOlein-Production",
                            new BsonDocument("$sum", "$FormData.Data.whiteOleinMtnplocal") },
                                    { "CalciumSoap-Production",
                            new BsonDocument("$sum", "$FormData.Data.calciumSoapMtnplocal") },
                                    { "RBD-R2-Consumption",
                            new BsonDocument("$sum", "$FormData.Data.rbdPalmOleinMtnplocal") },
                                    { "Stearin-R2-Consumption",
                            new BsonDocument("$sum", "$FormData.Data.stearinMt1nplocal") },
                                    { "PFAD-R2-Consumption",
                            new BsonDocument("$sum", "$FormData.Data.pfadMt1nplocal") },
                                    { "Product-Group",
                            new BsonDocument("$first", "$FormData.Data.productGroup1") },
                                    { "FormData",
                            new BsonDocument("$push",
                            new BsonDocument("Data", "$FormData.Data")) }
                                }),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id", "" },
                                    { "FinalDatata",
                            new BsonDocument("$push",
                            new BsonDocument
                                        {
                                            { "Product-Group", "$Product-Group" },
                                            { "Sales", "$Sales" },
                                            { "Sales-Map", "$Sales-Product" },
                                            { "Production-Map", "$_id.Map" },
                                            { "Loss", "$Loss" },
                                            { "CPO-Local-Consumption", "$CPO-Local-Consumption" },
                                            { "RPO-Local-Consumption", "$RPO-Local-Consumption" },
                                            { "RBD-Local-Consumption", "$RBD-Local-Consumption" },
                                            { "RPO-Production", "$RPO-Production" },
                                            { "RBD-Production", "$RBD-Production" },
                                            { "Stearint-Production", "$Stearint-Production" },
                                            { "PFAD-Production", "$PFAD-Production" },
                                            { "RPO-T-Production", "$RPO-T-Production" },
                                            { "RBD-T-Production", "$RBD-T-Production" },
                                            { "HardStearint-Production", "$HardStearint-Production" },
                                            { "SoftStearint-Production", "$SoftStearint-Production" },
                                            { "WhiteOlein-Production", "$WhiteOlein-Production" },
                                            { "CalciumSoap-Production", "$CalciumSoap-Production" },
                                            { "ProductName", "$ProductName" },
                                            { "Product-Sales", "$Product-Sales" },
                                            { "Product-OB", "$Product-OB" },
                                            { "RBD-R2-Consumption", "$RBD-R2-Consumption" },
                                            { "Stearin-R2-Consumption", "$Stearin-R2-Consumption" },
                                            { "PFAD-R2-Consumption", "$PFAD-R2-Consumption" }
                                        }) }
                                }),
                            new BsonDocument("$project",
                            new BsonDocument
                                {
                                    { "_id", 0 },
                                    { "MyArray",
                            new BsonArray
                                    {
                                        new BsonDocument
                                        {
                                            { "ProductName",
                                        new BsonDocument("$concat",
                                        new BsonArray
                                                {
                                                    "Product Group: ",
                                                    new BsonDocument("$first", "$FinalDatata.Product-Group")
                                                }) },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "CPO-Local" },
                                             { "OpeningBalance",
                                                new BsonDocument("$cond",
                                                new BsonDocument
                                                        {
                                                            { "if",
                                                new BsonDocument("$eq",
                                                new BsonArray
                                                                {
                                                                    new BsonDocument("$toLower",new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                                    "cpo-local"
                                                                }) },
                                                            { "then",
                                                            new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                                new BsonDocument("$first", "$FinalDatata.Product-OB")),4 }) },
                                                            { "else", "$False" }
                                                        }) },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "cpo-local"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.CPO-Local-Consumption") ),4 })},
                                                    { "else", "$False" }
                                                }) },
                                            { "Production", 0 },
                                            { "Sales",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "cpo-local"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.Product-Sales") ),4 })},
                                                    { "else", "$False" }
                                                }) }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Refined Palm Oil-Local" },
                                            { "OpeningBalance",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "refined palm oil-local"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.Product-OB")),4 }) },
                                                    { "else", "$False" }
                                                }) },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "refined palm oil-local"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.RPO-Local-Consumption")),4 }) },
                                                    { "else", "$False" }
                                                }) },
                                            { "Production", 0 },
                                            { "Sales",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "refined palm oil-local"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.Product-Sales") ),4 })},
                                                    { "else", "$False" }
                                                }) }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RBD Palm Olein-Local" },
                                            { "OpeningBalance",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "rbd palm olein-local"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.Product-OB") ),4 })},
                                                    { "else", "$False" }
                                                }) },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "rbd palm olein-local"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.RBD-Local-Consumption") ),4 })},
                                                    { "else", "$False" }
                                                }) },
                                            { "Production", 0 },
                                            { "Sales",
                                        new BsonDocument("$cond",
                                        new BsonDocument
                                                {
                                                    { "if",
                                        new BsonDocument("$eq",
                                        new BsonArray
                                                        {
                                                            new BsonDocument("$toLower" , new BsonDocument("$first", "$FinalDatata.ProductName")),
                                                            "rbd palm olein-local"
                                                        }) },
                                                    { "then",
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                        new BsonDocument("$first", "$FinalDatata.Product-Sales") ),4 })},
                                                    { "else", "$False" }
                                                }) }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Primary: Regular Sales" },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Refined Palm Oil" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RPO-Production", "$$value"})),4 }) } })
                                                     },
                                             { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "refined palm oil"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Refined Palm Oil-Trading" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RPO-T-Production", "$$value"})),4 }) } })
                                                     },
                                             { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "refined palm oil-trading"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RBD Palm Olein" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonArray
                                                {
                                                    new BsonDocument("$and",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$eq",
                                                            new BsonArray
                                                                {
                                                                    new BsonDocument("$first", "$FinalDatata.Production-Map.SalesType"),
                                                                    "REGULAR"
                                                                })
                                                        }),
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                                    new BsonDocument("$sum", "$FinalDatata.RBD-R2-Consumption")),4 }),
                                                    "$False"
                                                }) },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RBD-Production", "$$value"})),4 }) } })
                                                     },
                                            { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rbd palm olein"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RBD Palm Olein-Trading" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RBD-T-Production", "$$value"})),4 }) } })
                                                     },
                                              { "Sales",
                                                  new BsonDocument("$getField",
                                                  new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "rbd palm olein-trading"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                              },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Primary: Institutional Sales" },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Refined Palm Oil" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RPO-Production", "$$value"})),4 }) } })
                                                     },
                                             { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "refined palm oil"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Refined Palm Oil-Trading" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RPO-T-Production", "$$value"})),4 }) } })
                                                     },
                                           { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "refined palm oil-trading"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                           },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RBD Palm Olein" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonArray
                                                {
                                                    new BsonDocument("$and",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$eq",
                                                            new BsonArray
                                                                {
                                                                    new BsonDocument("$first", "$FinalDatata.Production-Map.SalesType"),
                                                                    "INSTITUTIONAL"
                                                                })
                                                        }),
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                                    new BsonDocument("$sum", "$FinalDatata.RBD-R2-Consumption")),4 }),
                                                    "$False"
                                                }) },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RBD-Production", "$$value"})),4 }) } })
                                                     },
                                             { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "rbd palm olein"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                             },
                                        new BsonDocument
                                        {
                                            { "ProductName", "RBD Palm Olein-Trading" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                         new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.RBD-T-Production", "$$value"})),4 }) } })
                                                     },
                                              { "Sales",
                                                  new BsonDocument("$getField",
                                                  new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "rbd palm olein-trading"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                              },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Primary: Regular Sales" },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Stearin" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonArray
                                                {
                                                    new BsonDocument("$and",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$eq",
                                                            new BsonArray
                                                                {
                                                                    new BsonDocument("$first", "$FinalDatata.Production-Map.SalesType"),
                                                                    "REGULAR"
                                                                })
                                                        }),
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                                    new BsonDocument("$sum", "$FinalDatata.Stearin-R2-Consumption")),4 }),
                                                    "$False"
                                                }) },
                                            { "Production",
                                       new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.Stearint-Production", "$$value"})),4 }) } })
                                                     },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "stearin"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "PFAD" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonArray
                                                {
                                                    new BsonDocument("$and",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$eq",
                                                            new BsonArray
                                                                {
                                                                    new BsonDocument("$first", "$FinalDatata.Production-Map.SalesType"),
                                                                    "REGULAR"
                                                                })
                                                        }),
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                                    new BsonDocument("$sum", "$FinalDatata.PFAD-R2-Consumption")),4 }),
                                                    "$False"
                                                }) },
                                            { "Production",
                                       new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.PFAD-Production", "$$value"})),4 }) } })
                                                    },
                                          { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "pfad"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                          },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Hard Stearin" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                       new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.HardStearint-Production", "$$value"})),4 }) } })
                                                     },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "hard stearin"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Soft Stearin" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.SoftStearint-Production", "$$value"})),4 }) } })
                                                     },
                                            { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "soft stearin"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "regular"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Super Olein" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production", 0 },
                                            { "Sales", 0 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "White Olein" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                       new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.WhiteOlein-Production", "$$value"})),4 }) } })
                                                     },
                                           { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "white olein"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Calcium Soap" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "regular"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.CalciumSoap-Production", "$$value"})),4 }) } })
                                                     },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "calcium soap"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "regular"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Non-Primary: Institutional Sales" },
                                            { "IsBold", 1 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Stearin" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonArray
                                                {
                                                    new BsonDocument("$and",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$eq",
                                                            new BsonArray
                                                                {
                                                                    new BsonDocument("$first", "$FinalDatata.Production-Map.SalesType"),
                                                                    "INSTITUTIONAL"
                                                                })
                                                        }),
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                                    new BsonDocument("$sum", "$FinalDatata.Stearin-R2-Consumption")),4 }),
                                                    "$False"
                                                }) },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.Stearint-Production", "$$value"})),4 }) } })
                                                    },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "stearin"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "PFAD" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption",
                                        new BsonDocument("$cond",
                                        new BsonArray
                                                {
                                                    new BsonDocument("$and",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$eq",
                                                            new BsonArray
                                                                {
                                                                    new BsonDocument("$first", "$FinalDatata.Production-Map.SalesType"),
                                                                    "INSTITUTIONAL"
                                                                })
                                                        }),
                                                    new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",
                                                    new BsonDocument("$sum", "$FinalDatata.PFAD-R2-Consumption")),4 }),
                                                    "$False"
                                                }) },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.PFAD-Production", "$$value"})),4 }) } })
                                                     },
                                             { "Sales",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "pfad"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                          },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Hard Stearin" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.HardStearint-Production", "$$value"})),4 }) } })
                                                     },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "hard stearin"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Soft Stearin" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                       new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.SoftStearint-Production", "$$value"})),4 }) } })
                                                    },
                                           { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                    {
                                                        { "field", "Sales" },
                                                        { "input",
                                            new BsonDocument("$getField",
                                            new BsonDocument
                                                            {
                                                                { "field", "Production-Map" },
                                                                { "input",
                                            new BsonDocument("$first",
                                            new BsonDocument("$filter",
                                            new BsonDocument
                                                                        {
                                                                            { "input", "$FinalDatata" },
                                                                            { "as", "sale" },
                                                                            { "cond",
                                            new BsonDocument("$and",
                                            new BsonArray
                                                                                {
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                            "soft stearin"
                                                                                        }),
                                                                                    new BsonDocument("$eq",
                                                                                    new BsonArray
                                                                                        {
                                                                                            new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                            "institutional"
                                                                                        })
                                                                                }) }
                                                                        })) }
                                                            }) }
                                                    }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Super Olein" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production", 0 },
                                            { "Sales", 0 }
                                        },
                                        new BsonDocument
                                        {
                                            { "ProductName", "White Olein" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                        new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.WhiteOlein-Production", "$$value"})),4 }) } })
                                                     },
                                           { "Sales",
                                              new BsonDocument("$getField",
                                              new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "white olein"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Calcium Soap" },
                                            { "OpeningBalance", 0 },
                                            { "Consumption", 0 },
                                            { "Production",
                                       new BsonDocument("$reduce",new BsonDocument{{ "input",
                                        new BsonDocument("$filter",new BsonDocument{
                                                                    { "input", "$FinalDatata" },
                                                                    { "as", "production" },
                                                                    { "cond",
                                        new BsonDocument("$eq",new BsonArray{
                                                                            new BsonDocument("$toLower", "$$production.Production-Map.SalesType"),
                                                                            "institutional"
                                                                        }) } }) },
                                                            { "initialValue", 0 },
                                                            { "in", new BsonDocument("$round", new BsonArray{
                                                                    new BsonDocument("$toDecimal",
                                                                    new BsonDocument("$add",
                                                                    new BsonArray{ "$$this.CalciumSoap-Production", "$$value"})),4 }) } })
                                                     },
                                            { "Sales",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                        {
                                                            { "field", "Sales" },
                                                            { "input",
                                                new BsonDocument("$getField",
                                                new BsonDocument
                                                                {
                                                                    { "field", "Production-Map" },
                                                                    { "input",
                                                new BsonDocument("$first",
                                                new BsonDocument("$filter",
                                                new BsonDocument
                                                                            {
                                                                                { "input", "$FinalDatata" },
                                                                                { "as", "sale" },
                                                                                { "cond",
                                                new BsonDocument("$and",
                                                new BsonArray
                                                                                    {
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.Commodity"),
                                                                                                "calcium soap"
                                                                                            }),
                                                                                        new BsonDocument("$eq",
                                                                                        new BsonArray
                                                                                            {
                                                                                                new BsonDocument("$toLower", "$$sale.Production-Map.Sales-Group.SalesType"),
                                                                                                "institutional"
                                                                                            })
                                                                                    }) }
                                                                            })) }
                                                                }) }
                                                        }) }
                                            },
                                        new BsonDocument
                                        {
                                            { "ProductName", "Loss" },
                                            { "Production", new BsonDocument("$round",new BsonArray{ new BsonDocument( "$toDecimal",new BsonDocument("$first","$FinalDatata.Loss")),4}) }
                                        }
                                    } }

                                })
                              };

                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };
                var aggregateDataList = datasetCollection.Aggregate<BsonDocument>(dashboardPipeline, aggregateOptions).ToList();
                List<DashboardOutputModel> dataSources = new List<DashboardOutputModel>();

                if (aggregateDataList.Count > 0)
                {
                    var test = BsonSerializer.Deserialize<FinalOutputModel1>(aggregateDataList.FirstOrDefault());
                    dataSources = test.MyArray.ToList();

                    if (dataSources != null && dataSources.Count > 0)
                    {
                        Parallel.ForEach(dataSources, data =>
                        {
                            data.OpeningBalance = data.OpeningBalance ?? 0;
                            data.Production = data.Production ?? 0;
                            data.Sales = (data.Sales * -1) ?? 0;
                            data.Consumption = (data.Consumption * -1) ?? 0;
                            data.ClosingBalance = (data.OpeningBalance + data.Production + data.Sales + data.Consumption);
                        });
                    }
                }
                return dataSources;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetPalmOilLocalDashboard", "DashboardRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return null;
            }
        }

        //=====================================================Realised P&L =========================================================
        public FinalReliasedOutputModel GetRealisedPandLDashboard(DashboardInputModel inputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetPalmOilLocalDashboard", "DashboardRepository"));
                IMongoCollection<DataSetOutputModel> datasetCollection = GetMongoCollectionObject<DataSetOutputModel>(MongoDBCollectionConstants.DataSet);

                string sourceLookupKey = "selectSourceContract" + inputModel.ContractUniqueId + "lookupchilddata";
                string uniquekey;
                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };

                if (inputModel.ProductType == "IMPORTED")
                {
                    uniquekey = "DataJson.FormData.ImportUniqueId";
                }
                else
                {
                    uniquekey = "DataJson.FormData.localUniqueId";
                }

                DateTime fromDate = inputModel.FromDate ?? DateTime.UtcNow;
                DateTime toDate = inputModel.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;

                List<BsonDocument> fxValuesPipeline = new List<BsonDocument>
                {   new BsonDocument("$match",
                    new BsonDocument{{"DataJson.FormData.mylookup", inputModel.ContractUniqueId },{ "IsArchived", false }}),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$DataJson.FormData")),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "Name", "$DataJson.FormData.mylookup" + inputModel.ContractUniqueId + "lookupchilddata.sourcecommodity" },
                            { "TotalPurchaseFXInUSD",  new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal","$DataJson.FormData.totalFxSettledInUsd"
                                                 ),4 })} ,
                            { "TotalPurchaseFXInINR", new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal","$DataJson.FormData.totalFxSettledValueInInr"
                                                 ),4 })}
                        }),
                    new BsonDocument("$project",
                           new BsonDocument
                               {
                                   { "Name", 1 },
                                   { "TotalPurchaseFXInUSD", 1 },
                                   { "TotalPurchaseFXInINR", 1 },
                                   { "_id", 0 }
                               })
                };
                var fxDataList = datasetCollection.Aggregate<BsonDocument>(fxValuesPipeline, aggregateOptions).ToList();
                var fxData = BsonHelper.ConvertBsonDocumentListToModel<RealisedProfitAndLossOutputModel>(fxDataList).FirstOrDefault();

                List<BsonDocument> dutyValuesPipeline = new List<BsonDocument>
                {   new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "DataJson.FormData.selectSourceContract", inputModel.ContractUniqueId },
                            { "DataJson.FormData.totalDutyPaidQuantityMt",
                    new BsonDocument("$ne", BsonNull.Value) },
                            { "IsArchived", false }
                        }),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$DataJson.FormData")),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "Name", "$DataJson.FormData.selectSourceContract" + inputModel.ContractUniqueId + "lookupchilddata.commodity1" },
                            { "DutyQuantityPaid", new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal","$DataJson.FormData.totalDutyPaidQuantityMt") ,4}) },
                            { "DutyValueInINR", new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal","$DataJson.FormData.totalPaidDutyInclIgstValueInr" ),4 })}
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Name", 1 },
                            { "DutyQuantityPaid", 1 },
                            { "DutyValueInINR", 1 }
                        })
                };
                var dutyDataList = datasetCollection.Aggregate<BsonDocument>(dutyValuesPipeline, aggregateOptions).ToList();
                var dutyData = BsonHelper.ConvertBsonDocumentListToModel<RealisedProfitAndLossOutputModel>(dutyDataList).FirstOrDefault();

                List<BsonDocument> refiningcostPipeline = new List<BsonDocument>
                {
                    new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                    { uniquekey, inputModel.ContractUniqueId },
                                    { "IsArchived", false },
                                { "datefilter",
                            new BsonDocument
                                    {
                                        { "$gte",
                            new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                        { "$lte",
                            new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                    } },
                                    { "DataJson.FormData.type", inputModel.ProductType }
                                }),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$DataJson.FormData")),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "" },
                            { "RefiningCostIncurred",
                    new BsonDocument("$sum", new BsonDocument("$round", new BsonArray { new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {"$DataJson.FormData.expectedRefiningCostInr1","0"})),4 })
                    ) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "RefiningCostIncurred", 1 }
                        })
                };
                var refiningcostData = datasetCollection.Aggregate<BsonDocument>(refiningcostPipeline, aggregateOptions).ToList();
                var refiningcost = BsonHelper.ConvertBsonDocumentListToModel<RealisedProfitAndLossOutputModel>(refiningcostData).FirstOrDefault();

                List<BsonDocument> dashboardPipeline = new List<BsonDocument>
                          {
                            new BsonDocument("$addFields",
                            new BsonDocument("datefilter",
                            new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))),
                            new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                    { uniquekey, inputModel.ContractUniqueId },
                                    { "IsArchived", false },
                                { "datefilter",
                            new BsonDocument
                                    {
                                        { "$gte",
                            new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                        { "$lte",
                            new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                    } },
                                    { "DataJson.FormData.type", inputModel.ProductType }
                                }),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id", "$DataJson.FormData.commodity1" },
                                    { "Product-Sales",
                            new BsonDocument("$sum", new BsonDocument("$round", new BsonArray {new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {"$DataJson.FormData.quantityMt2","0"})),4 })) },
                                    { "ProductName",
                            new BsonDocument("$first", "$ProductName") },
                                    { "valueInr1",
                            new BsonDocument("$sum", new BsonDocument("$round", new BsonArray {new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {new BsonDocument("$cond", new BsonDocument{{ "if",new BsonDocument("$eq",
                                    new BsonArray{"$DataJson.FormData.salesType","REGULAR"}) },
                                            { "then", "$DataJson.FormData.valueInr1" },
                                            { "else", 0 }
                                        }),"0"})),4 })) },
                                    { "valueInr",
                            new BsonDocument("$sum",new BsonDocument("$round",new BsonArray {new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {new BsonDocument("$cond", new BsonDocument {{ "if",new BsonDocument("$eq",
                                    new BsonArray{"$DataJson.FormData.salesType","REGULAR"}) },
                                            { "then", 0 },
                                            { "else", "$DataJson.FormData.valueInr1" }
                                     }),"0"})),4})) },
                                    { "PODateValueInr",
                            new BsonDocument("$sum", new BsonDocument("$round",new BsonArray {new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {new BsonDocument("$cond", new BsonDocument {{ "if",new BsonDocument("$eq",
                                    new BsonArray{"$DataJson.FormData.salesType","INSTITUTIONAL"}) },
                                            { "then", 0 },
                                            { "else", "$DataJson.FormData.PODateValueInr" }
                                     }),"0"})),4})) },
                                    { "DeliveryDateValueInr",
                            new BsonDocument("$sum", new BsonDocument("$round",new BsonArray {new BsonDocument("$toDecimal",new BsonDocument("$ifNull",new BsonArray {new BsonDocument("$cond", new BsonDocument {{ "if",new BsonDocument("$eq",
                                    new BsonArray{"$DataJson.FormData.salesType","INSTITUTIONAL"}) },
                                            { "then", 0 },
                                            { "else", "$DataJson.FormData.DeliveryDateValueInr" }
                                     }),"0"})),4})) },
                                }),
                            new BsonDocument("$addFields",
                            new BsonDocument
                                {
                                    { "Product-Sale", "$Product-Sales" },
                                    { "Product-Group", "$_id" },
                                    { "SalesValue",
                            new BsonDocument("$sum",
                            new BsonArray
                                        {
                                            "$valueInr1",
                                            "$valueInr",
                                            "$PODateValueInr",
                                            "$DeliveryDateValueInr"
                                        }) }
                                }),
                            new BsonDocument("$group",
                            new BsonDocument
                                {
                                    { "_id", "" },
                                    { "MyArray",
                            new BsonDocument("$push",
                            new BsonDocument
                                        {
                                            { "Name", "$Product-Group" },
                                            { "SalesInQuantity", "$Product-Sales" },
                                            { "SalesInValue", "$SalesValue" }
                                        }) }
                                }),
                            new BsonDocument("$project",
                            new BsonDocument
                                {
                                    { "_id", 0 },
                                    { "MyArray", 1 } })
                        };

                var aggregateDataList = datasetCollection.Aggregate<BsonDocument>(dashboardPipeline, aggregateOptions).ToList();
                List<RealisedProfitAndLossOutputModel> dataSources = new List<RealisedProfitAndLossOutputModel>();
                string[] commodities = null;
                List<Options> commodityDictionary = new List<Options>();

                List<BsonDocument> productNamePipeline =
                new List<BsonDocument>
                          {
                            new BsonDocument("$addFields",
                            new BsonDocument("datefilter",
                            new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))),
                            new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { uniquekey , inputModel.ContractUniqueId },
                                    { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                    { "IsArchived", false },
                                { "datefilter",
                            new BsonDocument
                                    {
                                        { "$gte",
                            new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                        { "$lte",
                            new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                    } },
                                    { "DataJson.FormData.type", inputModel.ProductType }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$DataJson.FormData")),
                            new BsonDocument("$project", new BsonDocument{  { "_id", 0 }, { "Data", "$DataJson.FormData.productGroup1" } })
                };

                BsonValue productCategory;
                var productDetails = datasetCollection.Aggregate<BsonDocument>(productNamePipeline, aggregateOptions).FirstOrDefault();
                string productGroupName = productDetails.TryGetValue("Data", out productCategory) ? productCategory.ToString() : null;

                if (productDetails != null && productDetails != "{{}}" && productGroupName == "PALM OIL")
                {
                    if (inputModel.ProductType == "IMPORTED")
                    {
                        commodities = new string[] { "CPO", "Refined Palm Oil-Import", "RBD Palm Olein-Import", "Refined Palm Oil", "Refined Palm Oil-Trading", "RBD Palm Olein", "RBD Palm Olein-Trading", "Stearin", "PFAD", "Hard Stearin", "Soft Stearin", "Super Olein", "White Olein", "Calcium Soap" };
                        commodityDictionary = new List<Options> {
                        new Options { label="CPO", value="cPO" },
                        new Options { label = "Refined Palm Oil-Import", value = "refinedPalmOilImport" },
                        new Options { label = "RBD Palm Olein-Import", value = "rBDPalmOleinImport" },
                        new Options { label = "Refined Palm Oil", value = "refinedPalmOil" },
                        new Options { label = "Refined Palm Oil-Trading", value = "refinedPalmOilTrading" },
                        new Options { label = "RBD Palm Olein", value = "rBDPalmOlein" },
                        new Options { label = "RBD Palm Olein-Trading", value = "rBDPalmOleinTrading" },
                        new Options { label = "Stearin", value = "Stearin" },
                        new Options { label = "PFAD", value = "pFAD" },
                        new Options { label = "Hard Stearin", value = "hardStearin" },
                        new Options { label = "Soft Stearin", value = "softStearin" },
                        new Options { label = "Super Olein", value = "superOlein" },
                        new Options { label = "White Olein", value = "whiteOlein" },
                        new Options { label = "Calcium Soap", value="calciumSoap" }
                        };

                    }
                    else if (inputModel.ProductType == "LOCAL")
                    {
                        commodities = new string[] { "CPO-Local", "Refined Palm Oil-Local", "RBD Palm Olein-Local", "Refined Palm Oil", "Refined Palm Oil-Trading", "RBD Palm Olein", "RBD Palm Olein-Trading", "Stearin", "PFAD", "Hard Stearin", "Soft Stearin", "Super Olein", "White Olein", "Calcium Soap" };
                        commodityDictionary = new List<Options>
                        {
                            new Options { label = "CPO-Local", value="cPOLocal" },
                            new Options { label = "Refined Palm Oil-Local", value="refinedPalmOilLocal" },
                            new Options { label = "RBD Palm Olein-Local", value="rBDPalmOleinLocal" },
                            new Options { label = "Refined Palm Oil", value="refinedPalmOil" },
                            new Options { label = "Refined Palm Oil-Trading", value="refinedPalmOilTrading" },
                            new Options { label = "RBD Palm Olein", value="rBDPalmOlein" },
                            new Options { label = "RBD Palm Olein-Trading", value="rBDPalmOleinTrading" },
                            new Options { label = "Stearin", value="stearin" },
                            new Options { label = "PFAD",value= "pFAD" },
                            new Options { label = "Hard Stearin",value= "hardStearin" },
                            new Options { label = "Soft Stearin", value="softStearin" },
                            new Options { label = "Super Olein", value="superOlein" },
                            new Options { label = "White Olein", value="whiteOlein" },
                            new Options { label = "Calcium Soap", value="calciumSoap" }
                        };
                    }
                }
                else if (productDetails != null && productDetails != "{{}}" && productGroupName == "SUNFLOWER OIL")
                {
                    if (inputModel.ProductType == "IMPORTED")
                    {
                        commodities = new string[] { "CSFO", "RSFO-Import", "RSFO", "RSFO-Trading", "CSFO-TRADING", "Sunflower Fatty Acid", "RSFO - Sludge" };
                        commodityDictionary = new List<Options>
                            {
                                new Options { label = "CSFO", value = "cSFO" },
                                new Options { label = "RSFO-Import", value = "rSFOImport" },
                                new Options { label = "RSFO", value = "rSFO" },
                                new Options { label = "RSFO-Trading", value = "rSFOTrading" },
                                new Options { label = "CSFO-TRADING", value = "cSFOTrading" },
                                new Options { label = "Sunflower Fatty Acid", value = "sunflowerFattyAcid" },
                                new Options { label = "RSFO - Sludge", value = "rSFOSludge" }
                            };
                    }
                    else if (inputModel.ProductType == "LOCAL")
                    {
                        commodities = new string[] { "CSFO", "RSFO-Local", "RSFO", "RSFO-Trading", "Sunflower Fatty Acid", "RSFO-Sludge" };
                        commodityDictionary = new List<Options>
                            {
                                new Options { label = "CSFO-Local", value = "cSFOLocal" },
                                new Options { label = "RSFO-Local", value = "rSFOLocal" },
                                new Options { label = "RSFO", value = "rSFO" },
                                new Options { label = "RSFO-Trading", value = "rSFOTrading" },
                                new Options { label = "Sunflower Fatty Acid", value = "sunflowerFattyAcid" },
                                new Options { label = "RSFO-Sludge", value = "rSFOSludge" }
                            };
                    }
                }
                else if (productDetails != null && productDetails != "{{}}" && productGroupName == "RICEBRAN OIL")
                {
                    if (inputModel.ProductType == "IMPORTED")
                    {
                        commodities = new string[] { "CRBO", "RRBO-Import", "RRBO", "RRBO-Trading", "RB Fatty Acid", "RB Oil Wax" };
                        commodityDictionary = new List<Options>
                            {
                                new Options{label="CRBO", value="cRBO" },
                                new Options{label="RRBO-Import", value="rRBOImport" },
                                new Options{label="RRBO", value="rRBO" },
                                new Options{label="RRBO-Trading", value="rRBOTrading" },
                                new Options{label="RB Fatty Acid", value="rBFattyAcid" },
                                new Options{label="RB Oil Wax", value="rBOilWax" }
                            };
                    }
                    else if (inputModel.ProductType == "LOCAL")
                    {
                        commodities = new string[] { "CRBO-Local", "RRBO-Local", "RRBO", "RRBO-Trading", "RB Fatty Acid", "RB Oil Wax" };
                        commodityDictionary = new List<Options>
                            {
                                new Options{label="CRBO-Local", value="cRBOLocal" },
                                new Options{label="RRBO-Local", value="rRBOLocal" },
                                new Options{label="RRBO", value="rRBO" },
                                new Options{label="RRBO-Trading", value="rRBOTrading" },
                                new Options{label="RB Fatty Acid", value="rBFattyAcid" },
                                new Options{label="RB Oil Wax", value="rBOilWax" }
                            };
                    }
                }
                else if (productDetails != null && productDetails != "{{}}" && productGroupName == "GLYCERIN")
                {
                    if (inputModel.ProductType == "IMPORTED")
                    {
                        commodities = new string[] { "Crude Glycerin", "Refined Glycerin-Import", "Refined Glycerin", "Refined Glycerin-Trading" };
                        commodityDictionary = new List<Options>
                            {
                                new Options { label = "Crude Glycerin", value = "crudeGlycerin" },
                                new Options { label = "Refined Glycerin-Import", value = "refinedGlycerinImport" },
                                new Options { label = "Refined Glycerin", value = "refinedGlycerin" },
                                new Options { label = "Refined Glycerin-Trading", value = "refinedGlycerinTrading" }
                            };
                    }
                    else if (inputModel.ProductType == "LOCAL")
                    {
                        commodities = new string[] { "Crude Glycerin", "Refined Glycerin-Import", "Refined Glycerin", "Refined Glycerin-Trading" };
                        commodityDictionary = new List<Options>
                            {
                                new Options { label = "Crude Glycerin", value = "crudeGlycerin" },
                                new Options { label = "Refined Glycerin-Import", value = "refinedGlycerinImport" },
                                new Options { label = "Refined Glycerin", value = "refinedGlycerin" },
                                new Options { label = "Refined Glycerin-Trading", value = "refinedGlycerinTrading" }
                            };
                    }
                }
                else if (productDetails != null && productDetails != "{{}}" && productGroupName == "SOYABEAN OIL")
                {
                    if (inputModel.ProductType == "IMPORTED")
                    {
                        commodities = new string[] { "CDSBO", "RSBO-Import", "RSBO", "RSBO-Trading", "Soy Acid Oil" };
                        commodityDictionary = new List<Options>
                            {
                                new Options { label = "CDSBO", value = "cDSBO" },
                                new Options { label = "RSBO-Import", value = "rSBOImport" },
                                new Options { label = "RSBO", value = "rSBO" },
                                new Options { label = "RSBO-Trading", value = "rSBOTrading" },
                                new Options { label = "Soy Acid Oil", value = "soyAcidOil" },
                            };
                    }
                    if (inputModel.ProductType == "LOCAL")
                    {
                        commodities = new string[] { "CDSBO", "RSBO-Import", "RSBO", "RSBO-Trading", "Soy Acid Oil" };
                        commodityDictionary = new List<Options>
                            {
                                new Options { label = "CDSBO", value = "cDSBO" },
                                new Options { label = "RSBO-Import", value = "rSBOImport" },
                                new Options { label = "RSBO", value = "rSBO" },
                                new Options { label = "RSBO-Trading", value = "rSBOTrading" },
                                new Options { label = "Soy Acid Oil", value = "soyAcidOil" },
                            };
                    }
                }

                if (aggregateDataList.Count > 0)
                {
                    //var result = BsonHelper.ConvertBsonDocumentListToModel<FinalOutputModel>(aggregateDataList);
                    //var resultSet = result.Select(x => x.MyArray).FirstOrDefault().ToJson();
                    //var finalOutputSet = JsonConvert.DeserializeObject<List<RealisedProfitAndLossOutputModel>>(resultSet);
                    var dataBson = BsonSerializer.Deserialize<FinalRealisedModel>(aggregateDataList.FirstOrDefault());
                    var finalOutputSet = dataBson.MyArray.ToList();
                    bool needFXValue = false;
                    bool needDutyValue = false;

                    foreach (string commodity in commodities)
                    {
                        string commodityLocal = commodity.ToLower();
                        RealisedProfitAndLossOutputModel recordFetch = new RealisedProfitAndLossOutputModel();

                        if (finalOutputSet != null && finalOutputSet.Count > 0)
                        {
                            recordFetch = finalOutputSet.Where(x => x.Name.ToLower() == commodityLocal).FirstOrDefault();
                        }

                        if (fxData != null && fxData.Name != null && fxData.Name.ToLower() == commodityLocal)
                            needFXValue = true;
                        if (dutyData != null && dutyData.Name != null && dutyData.Name.ToLower() == commodityLocal)
                            needDutyValue = true;

                        if (recordFetch != null && recordFetch.Name != null)
                        {
                            dataSources.Add(new RealisedProfitAndLossOutputModel
                            {
                                Name = commodity,
                                SalesInQuantity = recordFetch.SalesInQuantity,
                                SalesInValue = recordFetch.SalesInValue,
                                TotalPurchaseFXInINR = needFXValue ? (-1) * fxData.TotalPurchaseFXInINR : 0,
                                TotalPurchaseFXInUSD = needFXValue ? (-1) * fxData.TotalPurchaseFXInUSD : 0,
                                DutyQuantityPaid = needDutyValue ? (-1) * dutyData.DutyQuantityPaid : 0,
                                DutyValueInINR = needDutyValue ? (-1) * dutyData.DutyValueInINR : 0,
                                RefiningCostIncurred = refiningcost == null ? 0 : refiningcost.RefiningCostIncurred != 0
                                && refiningcost.RefiningCostIncurred != null ? (-1) * refiningcost.RefiningCostIncurred : 0
                            });
                            refiningcost = null;
                            fxData = needFXValue ? new RealisedProfitAndLossOutputModel() : fxData;
                            dutyData = needDutyValue ? new RealisedProfitAndLossOutputModel() : dutyData;
                            continue;
                        }

                        RealisedProfitAndLossOutputModel newRecord = new RealisedProfitAndLossOutputModel
                        {
                            Name = commodity,
                            TotalPurchaseFXInINR = needFXValue ? (-1) * fxData.TotalPurchaseFXInINR : 0,
                            TotalPurchaseFXInUSD = needFXValue ? (-1) * fxData.TotalPurchaseFXInUSD : 0,
                            DutyQuantityPaid = needDutyValue ? (-1) * dutyData.DutyQuantityPaid : 0,
                            DutyValueInINR = needDutyValue ? (-1) * dutyData.DutyValueInINR : 0,
                            RefiningCostIncurred = refiningcost == null ? 0 : refiningcost.RefiningCostIncurred != 0
                            && refiningcost.RefiningCostIncurred != null ? (-1) * refiningcost.RefiningCostIncurred : 0
                        };

                        dataSources.Add(newRecord);
                        fxData = needFXValue ? new RealisedProfitAndLossOutputModel() : fxData;
                        dutyData = needDutyValue ? new RealisedProfitAndLossOutputModel() : dutyData;
                        refiningcost = null;
                    }

                    if (dataSources != null && dataSources.Count > 0)
                    {
                        Parallel.ForEach(dataSources, data =>
                        {
                            data.SalesInQuantity = data.SalesInQuantity ?? 0;
                            data.SalesInValue = data.SalesInValue ?? 0;
                            data.TotalPurchaseFXInUSD = data.TotalPurchaseFXInUSD ?? 0;
                            data.TotalPurchaseFXInINR = data.TotalPurchaseFXInINR ?? 0;
                            data.DutyQuantityPaid = (-1) * data.DutyQuantityPaid ?? 0;
                            data.DutyValueInINR = data.DutyValueInINR ?? 0;
                            data.RefiningCostIncurred = data.RefiningCostIncurred ?? 0;
                        });
                    }
                }

                FinalReliasedOutputModel output = new FinalReliasedOutputModel();
                output.GridData = dataSources;
                output.Headers = commodityDictionary;
                return output;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetPalmOilLocalDashboard", "DashboardRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return new FinalReliasedOutputModel();
            }
        }
        public FinalUnReliasedOutputModel GetUnRealisedPandLDashboard(DashboardInputModel inputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetUnRealisedPandLDashboard", "DashboardRepository"));
                IMongoCollection<DataSetOutputModel> datasetCollection = GetMongoCollectionObject<DataSetOutputModel>(MongoDBCollectionConstants.DataSet);

                string uniquekey;

                if (inputModel.ProductType == "IMPORTED")
                {
                    uniquekey = "DataJson.FormData.ImportUniqueId";
                }
                else
                {
                    uniquekey = "DataJson.FormData.localUniqueId";
                }

                DateTime fromDate = inputModel.FromDate ?? DateTime.UtcNow;
                DateTime toDate = inputModel.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;

                List<UnRealisedProfitAndLossOutputModel> dataSources = new List<UnRealisedProfitAndLossOutputModel>();
                string[] commodities = null;
                List<Options> commodityDictionary = new List<Options>();

                List<BsonDocument> productNamePipeline =
                new List<BsonDocument>
                          {
                            new BsonDocument("$addFields",
                            new BsonDocument("datefilter",
                            new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))),
                            new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { uniquekey , inputModel.ContractUniqueId },
                                    { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                { "datefilter",
                            new BsonDocument
                                    {
                                        { "$gte",
                            new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                        { "$lte",
                            new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                    } },
                                    { "DataJson.FormData.type", inputModel.ProductType }
                                }),
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$DataJson.FormData")),
                            new BsonDocument("$project", new BsonDocument{  { "_id", 0 }, { "Data", "$DataJson.FormData.productGroup1" } })
                };

                BsonValue productCategory;
                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };
                var productDetails = datasetCollection.Aggregate<BsonDocument>(productNamePipeline, aggregateOptions).FirstOrDefault();
                string productGroupName = productDetails == null ? null : productDetails.TryGetValue("Data", out productCategory) ? productCategory.ToString() : null;


                if (productDetails != null && productDetails != "{{}} " && productGroupName == "PALM OIL")
                {
                    if (inputModel.ProductType == "IMPORTED")
                    {
                        commodities = new string[] { "CPO", "Refined Palm Oil-Import", "RBD Palm Olein-Import", "Refined Palm Oil", "Refined Palm Oil-Trading", "RBD Palm Olein", "RBD Palm Olein-Trading", "Stearin", "PFAD", "Hard Stearin", "Soft Stearin", "Super Olein", "White Olein", "Calcium Soap" };
                        commodityDictionary = new List<Options> {
                        new Options { label="CPO", value="cPO" },
                        new Options { label = "Refined Palm Oil-Import", value = "refinedPalmOilImport" },
                        new Options { label = "RBD Palm Olein-Import", value = "rBDPalmOleinImport" },
                        new Options { label = "Refined Palm Oil", value = "refinedPalmOil" },
                        new Options { label = "Refined Palm Oil-Trading", value = "refinedPalmOilTrading" },
                        new Options { label = "RBD Palm Olein", value = "rBDPalmOlein" },
                        new Options { label = "RBD Palm Olein-Trading", value = "rBDPalmOleinTrading" },
                        new Options { label = "Stearin", value = "stearin" },
                        new Options { label = "PFAD", value = "pFAD" },
                        new Options { label = "Hard Stearin", value = "hardStearin" },
                        new Options { label = "Soft Stearin", value = "softStearin" },
                        new Options { label = "Super Olein", value = "superOlein" },
                        new Options { label = "White Olein", value = "whiteOlein" },
                        new Options { label = "Calcium Soap", value="calciumSoap" }
                        };

                    }
                    else if (inputModel.ProductType == "LOCAL")
                    {
                        commodities = new string[] { "CPO-Local", "Refined Palm Oil-Local", "RBD Palm Olein-Local", "Refined Palm Oil", "Refined Palm Oil-Trading", "RBD Palm Olein", "RBD Palm Olein-Trading", "Stearin", "PFAD", "Hard Stearin", "Soft Stearin", "Super Olein", "White Olein", "Calcium Soap" };
                        commodityDictionary = new List<Options>
                        {
                            new Options { label = "CPO-Local", value="cPOLocal" },
                            new Options { label = "Refined Palm Oil-Local", value="refinedPalmOilLocal" },
                            new Options { label = "RBD Palm Olein-Local", value="rBDPalmOleinLocal" },
                            new Options { label = "Refined Palm Oil", value="refinedPalmOil" },
                            new Options { label = "Refined Palm Oil-Trading", value="refinedPalmOilTrading" },
                            new Options { label = "RBD Palm Olein", value="rBDPalmOlein" },
                            new Options { label = "RBD Palm Olein-Trading", value="rBDPalmOleinTrading" },
                            new Options { label = "Stearin", value="stearin" },
                            new Options { label = "PFAD",value= "pFAD" },
                            new Options { label = "Hard Stearin",value= "hardStearin" },
                            new Options { label = "Soft Stearin", value="softStearin" },
                            new Options { label = "Super Olein", value="superOlein" },
                            new Options { label = "White Olein", value="whiteOlein" },
                            new Options { label = "Calcium Soap", value="calciumSoap" }
                        };
                    }
                }
                else if (productDetails != null && productDetails != "{{}} " && productGroupName == "SUNFLOWER OIL")
                {
                    if (inputModel.ProductType == "IMPORTED")
                    {
                        commodities = new string[] { "CSFO", "RSFO-Import", "RSFO", "RSFO - Trading", "CSFO - Trading", "Sunflower Fatty Acid", "RSFO - Sludge" };
                        commodityDictionary = new List<Options>
                            {
                                new Options { label = "CSFO", value = "cSFO" },
                                new Options { label = "RSFO-Import", value = "rSFOImport" },
                                new Options { label = "RSFO", value = "rSFO" },
                                new Options { label = "RSFO - Trading", value = "rSFOTrading" },
                                new Options { label = "CSFO - Trading", value = "cSFOTrading" },
                                new Options { label = "Sunflower Fatty Acid", value = "sunflowerFattyAcid" },
                                new Options { label = "RSFO - Sludge", value = "rSFOSludge" }
                            };
                    }
                    else if (inputModel.ProductType == "LOCAL")
                    {
                        commodities = new string[] { "CSFO-Local", "RSFO-Local", "RSFO", "RSFO - Trading", "Sunflower Fatty Acid", "RSFO - Sludge" };
                        commodityDictionary = new List<Options>
                            {
                                new Options { label = "CSFO-Local", value = "cSFOLocal" },
                                new Options { label = "RSFO-Local", value = "rSFOLocal" },
                                new Options { label = "RSFO", value = "rSFO" },
                                new Options { label = "RSFO - Trading", value = "rSFOTrading" },
                                new Options { label = "Sunflower Fatty Acid", value = "sunflowerFattyAcid" },
                                new Options { label = "RSFO - Sludge", value = "rSFOSludge" }
                            };
                    }
                }
                else if (productDetails != null && productDetails != "{{}} " && productGroupName == "RICEBRAN OIL")
                {
                    if (inputModel.ProductType == "IMPORTED")
                    {
                        commodities = new string[] { "CRBO", "RRBO-Import", "RRBO", "RRBO-Trading", "RB Fatty Acid", "RB Oil Wax" };
                        commodityDictionary = new List<Options>
                            {
                                new Options{label="CRBO", value="cRBO" },
                                new Options{label="RRBO-Import", value="rRBOImport" },
                                new Options{label="RRBO", value="rRBO" },
                                new Options{label="RRBO-Trading", value="rRBOTrading" },
                                new Options{label="RB Fatty Acid", value="rBFattyAcid" },
                                new Options{label="RB Oil Wax", value="rBOilWax" }
                            };
                    }
                    else if (inputModel.ProductType == "LOCAL")
                    {
                        commodities = new string[] { "CRBO-Local", "RRBO-Local", "RRBO", "RRBO-Trading", "RB Fatty Acid", "RB Oil Wax" };
                        commodityDictionary = new List<Options>
                            {
                                new Options{label="CRBO-Local", value="cRBOLocal" },
                                new Options{label="RRBO-Local", value="rRBOLocal" },
                                new Options{label="RRBO", value="rRBO" },
                                new Options{label="RRBO-Trading", value="rRBOTrading" },
                                new Options{label="RB Fatty Acid", value="rBFattyAcid" },
                                new Options{label="RB Oil Wax", value="rBOilWax" }
                            };
                    }
                }
                else if (productDetails != null && productDetails != "{{}} " && productGroupName == "GLYCERIN")
                {
                    if (inputModel.ProductType == "IMPORTED")
                    {
                        commodities = new string[] { "Crude Glycerin", "Refined Glycerin-Import", "Refined Glycerin", "Refined Glycerin-Trading" };
                        commodityDictionary = new List<Options>
                            {
                                new Options { label = "Crude Glycerin", value = "crudeGlycerin" },
                                new Options { label = "Refined Glycerin-Import", value = "refinedGlycerinImport" },
                                new Options { label = "Refined Glycerin", value = "refinedGlycerin" },
                                new Options { label = "Refined Glycerin-Trading", value = "refinedGlycerinTrading" }
                            };
                    }
                    else if (inputModel.ProductType == "LOCAL")
                    {
                        commodities = new string[] { "Crude Glycerin", "Refined Glycerin-Import", "Refined Glycerin", "Refined Glycerin-Trading" };
                        commodityDictionary = new List<Options>
                            {
                                new Options { label = "Crude Glycerin", value = "crudeGlycerin" },
                                new Options { label = "Refined Glycerin-Import", value = "refinedGlycerinImport" },
                                new Options { label = "Refined Glycerin", value = "refinedGlycerin" },
                                new Options { label = "Refined Glycerin-Trading", value = "refinedGlycerinTrading" }
                            };
                    }
                }
                else if (productDetails != null && productDetails != "{{}} " && productGroupName == "SOYABEAN OIL")
                {
                    if (inputModel.ProductType == "IMPORTED")
                    {
                        commodities = new string[] { "CDSBO", "RSBO-Import", "RSBO", "RSBO-Trading", "Soy Acid Oil" };
                        commodityDictionary = new List<Options>
                            {
                                new Options { label = "CDSBO", value = "cDSBO" },
                                new Options { label = "RSBO-Import", value = "rSBOImport" },
                                new Options { label = "RSBO", value = "rSBO" },
                                new Options { label = "RSBO-Trading", value = "rSBOTrading" },
                                new Options { label = "Soy Acid Oil", value = "soyAcidOil" },
                            };
                    }
                    if (inputModel.ProductType == "LOCAL")
                    {
                        commodities = new string[] { "CDSBO", "RSBO-Import", "RSBO", "RSBO-Trading", "Soy Acid Oil" };
                        commodityDictionary = new List<Options>
                            {
                                new Options { label = "CDSBO", value = "cDSBO" },
                                new Options { label = "RSBO-Import", value = "rSBOImport" },
                                new Options { label = "RSBO", value = "rSBO" },
                                new Options { label = "RSBO-Trading", value = "rSBOTrading" },
                                new Options { label = "Soy Acid Oil", value = "soyAcidOil" },
                            };
                    }
                }

                if (commodities != null && commodities.Length > 0)
                {
                    foreach (string commodity in commodities)
                    {
                        UnRealisedProfitAndLossOutputModel newRecord = new UnRealisedProfitAndLossOutputModel { Name = commodity };
                        dataSources.Add(newRecord);
                    }
                }

                if (dataSources != null && dataSources.Count > 0)
                {
                    Parallel.ForEach(dataSources, data =>
                    {
                        data.ClosingBalance = data.ClosingBalance ?? 0;
                        data.MTMValue = data.MTMValue ?? 0;
                        data.PurchaseFXValueInUSD = data.PurchaseFXValueInUSD ?? 0;
                        data.PurchaseMTMRate = data.PurchaseMTMRate ?? 0;
                        data.QuantityUnpaid = data.QuantityUnpaid ?? 0;
                        data.QuantityDutyMTM = data.QuantityDutyMTM ?? 0;
                        data.QuantityUnPaidValueInINR = data.QuantityUnPaidValueInINR ?? 0;
                        data.RefiningCostPending = data.RefiningCostPending ?? 0;
                    });
                }

                FinalUnReliasedOutputModel output = new FinalUnReliasedOutputModel();
                output.GridData = dataSources;
                output.Headers = commodityDictionary;
                return output;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetUnRealisedPandLDashboard", "DashboardRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return new FinalUnReliasedOutputModel();
            }
        }

        public InstanceLevelPositionDashboardOutputModel GetPalmOilInstanceLevelDashboard(DashboardInputModel instanceDashboardInput, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetPalmOilInstanceLevelDashboard", "DataSetRepository"));
                IMongoCollection<BsonDocument> datasetCollection = GetMongoCollectionObject<BsonDocument>(MongoDBCollectionConstants.DataSet);
                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };

                DateTime fromDate = instanceDashboardInput.FromDate ?? DateTime.UtcNow;
                DateTime toDate = instanceDashboardInput.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;
                string formId = GetSalesFormId(instanceDashboardInput.CompanyName, loggedInContext);

                var commodityDictionary = new List<ProductListModel>();

                commodityDictionary = new List<ProductListModel>
                    {
                        new ProductListModel { ProductName = "Source Import", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "CPO", ProductValue = "cPO",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RBD Palm Olein-Import", ProductValue = "rBDPalmOleinImport",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Refined Palm Oil-Import", ProductValue = "refinedPalmOilImport",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Source Local", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "CPO-Local", ProductValue = "cPOLocal",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RBD Palm Olein-Local", ProductValue = "rBDPalmOleinLocal",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Refined Palm Oil-Local", ProductValue = "refinedPalmOilLocal",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Primary: Regular", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "Refined Palm Oil", ProductValue = "refinedPalmOil",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Refined Palm Oil-Trading", ProductValue = "refinedPalmOilTrading",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RBD Palm Olein", ProductValue = "rBDPalmOlein",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RBD Palm Olein-Trading", ProductValue = "rBDPalmOleinTrading",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Primary: Institutional", ProductValue = "",IsRegularSales = false, IsBold = true},
                        new ProductListModel { ProductName = "Refined Palm Oil", ProductValue = "refinedPalmOil",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "Refined Palm Oil-Trading", ProductValue = "refinedPalmOilTrading",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "RBD Palm Olein", ProductValue = "rBDPalmOlein",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "RBD Palm Olein-Trading", ProductValue = "rBDPalmOleinTrading",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "Non Primary: Regular", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "Stearin", ProductValue = "stearin",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "PFAD", ProductValue = "pFAD",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Hard Stearin", ProductValue = "hardStearin",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Soft Stearin", ProductValue = "softStearin",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Super Olein", ProductValue = "superOlein",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "White Olein", ProductValue = "whiteOlein",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Calcium Soap", ProductValue = "calcilumSoap",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Non Primary: Institutional", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "Stearin", ProductValue = "stearin",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "PFAD", ProductValue = "pFAD",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "Hard Stearin", ProductValue = "hardStearin",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "Soft Stearin", ProductValue = "softStearin",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "Super Olein", ProductValue = "superOlein",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "White Olein", ProductValue = "whiteOlein",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "Calcium Soap", ProductValue = "calcilumSoap",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "Loss", ProductValue = "loss", IsBold = false},
                    };

                var salesPipeLine = new List<BsonDocument>
                                                {
                                    new BsonDocument("$addFields",
                                    new BsonDocument("datefilter",
                                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    salesPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                salesPipeLine.AddRange(
                    new List<BsonDocument> {new BsonDocument("$match",
                                    new BsonDocument
                                        {
                                            { "DataJson.FormData.salesType",
                                    new BsonDocument("$ne", BsonNull.Value) },
                                            { "IsArchived", false },
                                            { "datefilter",
                                    new BsonDocument
                                            {
                                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                            } },
                                            { "$and",
                                    new BsonArray
                                            {
                                                new BsonDocument("$or",
                                                new BsonArray
                                                    {
                                                        new BsonDocument("DataJson.FormData.ImportUniqueId",
                                                        new BsonDocument("$nin",new BsonArray{BsonNull.Value,""})),
                                                        new BsonDocument("DataJson.FormData.localUniqueId",
                                                        new BsonDocument("$nin",new BsonArray{BsonNull.Value,""}))
                                                    })
                                            } }
                                        }),
                                    new BsonDocument("$group",
                                    new BsonDocument
                                        {
                                            { "_id",
                                    new BsonDocument
                                            {
                                                { "Commodity", "$DataJson.FormData.commodity1" },
                                                { "SalesType", "$DataJson.FormData.salesType" }
                                            } },
                                            { "Sales",
                                    new BsonDocument("$sum",
                                    new BsonDocument("$round",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toDecimal", "$DataJson.FormData.quantityMt2"),
                                                        4
                                                    })) }
                                        }),
                                    new BsonDocument("$project",
                                    new BsonDocument
                                        {
                                            { "_id", 0 },
                                            { "Commodity", "$_id.Commodity" },
                                            { "SalesType", "$_id.SalesType" },
                                            { "Salesvalue", "$Sales" }
                                        })
                                       });
                var unTaggedSalesPipeLine = new List<BsonDocument> {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    unTaggedSalesPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                unTaggedSalesPipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            { "$and",
                    new BsonArray
                            {
                                new BsonDocument("DataJson.FormData.ImportUniqueId",
                                new BsonDocument("$in",new BsonArray{BsonNull.Value,""})),
                                new BsonDocument("DataJson.FormData.localUniqueId",
                                new BsonDocument("$in",new BsonArray{BsonNull.Value,""}))
                            } },
                            { "DataJson.FormData.salesType",
                    new BsonDocument("$ne", BsonNull.Value) }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id",
                    new BsonDocument
                            {
                                { "Commodity", "$DataJson.FormData.commodity1" },
                                { "SalesType", "$DataJson.FormData.salesType" }
                            } },
                            { "Sales",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.quantityMt2"),
                                        4
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Commodity", "$_id.Commodity" },
                            { "SalesType", "$_id.SalesType" },
                            { "Salesvalue", "$Sales" }
                        })
                });

                var productionPipeLine = new List<BsonDocument> {
                new BsonDocument("$addFields",
                new BsonDocument("datefilter",
                new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    productionPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                productionPipeLine.AddRange(
                    new List<BsonDocument> {
                new BsonDocument("$match",
                new BsonDocument
                    {
                        { "DataJson.FormData.salesType",
                new BsonDocument("$ne", BsonNull.Value) },
                        { "IsArchived", false },
                        { "datefilter",
                new BsonDocument
                        {
                            { "$gte",
                             new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                            { "$lt",
                             new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                        } },
                        { "$and",
                new BsonArray
                        {
                            new BsonDocument("$or",
                            new BsonArray
                                {
                                    new BsonDocument("DataJson.FormData.ImportUniqueId",
                                    new BsonDocument("$ne", BsonNull.Value)),
                                    new BsonDocument("DataJson.FormData.localUniqueId",
                                    new BsonDocument("$ne", BsonNull.Value))
                                })
                        } }
                    }),
                new BsonDocument("$group",
                new BsonDocument
                    {
                        { "_id", "$DataJson.FormData.salesType" },
                        { "refinedPalmOil1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.rpoMt"),4})) },
                        { "rBDPalmOlein1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.rbdOleinMt"),4})) },
                        { "refinedPalmOilTrading1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.rpoMt2"),4})) },
                        { "rBDPalmOleinTrading1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal",  new BsonDocument("$cond",
                        new BsonArray
                                {
                                    new BsonDocument("$gt",
                                    new BsonArray
                                        {
                                            new BsonDocument("$strLenCP", "$DataJson.FormData.ImportUniqueId"),
                                            new BsonDocument("$toInt", 1)
                                        }),
                                    "$DataJson.FormData.rbdPalmoleinTradingMt",
                                    0
                                })),4})) },
                        { "stearin1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.stearinMt"),4})) },
                        { "pFAD1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.pfadMt"),4})) },
                        { "hardStearin1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.hardStearinMt"),4})) },
                        { "softStearin1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.softStearinMt"),4})) },
                        { "whiteOlein1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.whiteOleinMt"),4})) },
                        { "calcilumSoap1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.calciumSoapMt"),4})) },
                        { "refinedPalmOil2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.rpoMt5"),4})) },
                        { "rBDPalmOlein2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.rbdOleinMt6"),4})) },
                        { "refinedPalmOilTrading2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.refinedPalmOilTradingMt"),4})) },
                        { "rBDPalmOleinTrading2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray {new BsonDocument("$toDecimal", new BsonDocument("$cond",
                        new BsonArray
                                {
                                    new BsonDocument("$gt",
                                    new BsonArray
                                        {
                                            new BsonDocument("$strLenCP", "$DataJson.FormData.localUniqueId"),
                                            new BsonDocument("$toInt", 1)
                                        }),
                                    "$DataJson.FormData.rbdPalmoleinTradingMt1",
                                    0
                                })),4})) },
                        { "stearin2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.stearinMt7"),4})) },
                        { "pFAD2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.pfadMt8"),4})) },
                        { "hardStearin2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.hardStearinMtlocal"),4})) },
                        { "softStearin2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.softStearinMtlocal"),4})) },
                        { "whiteOlein2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.whiteOleinMtnplocal"),4})) },
                        { "calcilumSoap2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.calciumSoapMtnplocal"),4})) },
                    { "rBDPalmOlein-c1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.rbdPalmOleinMt"),4})) },
                    { "rBDPalmOlein-c2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.rbdPalmOleinMtnplocal"),4})) },
                    { "stearin-c1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.stearinMt1"),4})) },
                    { "stearin-c2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.stearinMt1nplocal"),4})) },
                    { "pFAD-c1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.pfadMt1"),4})) },
                    { "pFAD-c2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.pfadMt1nplocal"),4})) }
                    }),
                new BsonDocument("$project",
                new BsonDocument
                    {
                        { "_id", 0 },
                        { "SalesType", "$_id" },
                        { "refinedPalmOil",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$refinedPalmOil1",
                                "$refinedPalmOil2"
                            })) },
                        { "rBDPalmOlein",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$rBDPalmOlein1",
                                "$rBDPalmOlein2"
                            })) },
                        { "refinedPalmOilTrading",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$refinedPalmOilTrading1",
                                "$refinedPalmOilTrading2"
                            })) },
                        { "rBDPalmOleinTrading",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$rBDPalmOleinTrading1",
                                "$rBDPalmOleinTrading2"
                            })) },
                        { "stearin",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$stearin1",
                                "$stearin2"
                            })) },
                        { "pFAD",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$pFAD1",
                                "$pFAD2"
                            })) },
                        { "hardStearin",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$hardStearin1",
                                "$hardStearin2"
                            })) },
                        { "softStearin",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$softStearin1",
                                "$softStearin2"
                            })) },
                        { "whiteOlein",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$whiteOlein1",
                                "$whiteOlein2"
                            })) },
                        { "calcilumSoap",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$calcilumSoap1",
                                "$calcilumSoap2"
                            })) },
                        { "rBDPalmOlein-Consumption",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$rBDPalmOlein-c1",
                                "$rBDPalmOlein-c2"
                            })) },
                        { "stearin-Consumption",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$stearin-c1",
                                "$stearin-c2"
                            })) },
                        { "pFAD-Consumption",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$pFAD-c1",
                                "$pFAD-c2"
                            })) }
                    })
                });

                var consumptionPipeLine = new List<BsonDocument> {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    consumptionPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                consumptionPipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "DataJson.FormData.salesType",
                    new BsonDocument("$ne", BsonNull.Value) },
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                               { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            { "$and",
                    new BsonArray
                            {
                                new BsonDocument("$or",
                                new BsonArray
                                    {
                                        new BsonDocument("DataJson.FormData.ImportUniqueId",
                                        new BsonDocument("$ne", BsonNull.Value)),
                                        new BsonDocument("DataJson.FormData.localUniqueId",
                                        new BsonDocument("$ne", BsonNull.Value))
                                    })
                            } }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "" },
                            { "cPO-Consumption",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.cpoMt"),
                                        4
                                    })) },
                            { "refinedPalmOilImport-Consumption",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.rpoMt1"),
                                        4
                                    })) },
                            { "rBDPalmOleinImport-Consumption",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.rbdPalmoleinImportMt"),
                                        4
                                    })) },
                            { "cPOLocal-Consumption",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.cpolocalMt"),
                                        4
                                    })) },
                            { "refinedPalmOilLocal-Consumption",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.refinedPalmOilLocalMt"),
                                        4
                                    })) },
                            { "rBDPalmOleinLocal-Consumption",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.rbdPalmoleinImportMt1"),
                                        4
                                    })) },
                            { "loss1",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.lossMt"),
                                        4
                                    })) },
                            { "loss2",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.lossMt8"),
                                        4
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "cPO-Consumption", new BsonDocument("$toDecimal","$cPO-Consumption") },
                            { "refinedPalmOilImport-Consumption", new BsonDocument("$toDecimal","$refinedPalmOilImport-Consumption") },
                            { "rBDPalmOleinImport-Consumption", new BsonDocument("$toDecimal","$rBDPalmOleinImport-Consumption") },
                            { "cPOLocal-Consumption", new BsonDocument("$toDecimal","$cPOLocal-Consumption") },
                            { "refinedPalmOilLocal-Consumption", new BsonDocument("$toDecimal","$refinedPalmOilLocal-Consumption") },
                            { "rBDPalmOleinLocal-Consumption", new BsonDocument("$toDecimal","$rBDPalmOleinLocal-Consumption") },
                            { "loss",
                    new BsonDocument("$round",
                    new BsonArray
                                {
                                    new BsonDocument("$toDecimal",
                                    new BsonDocument("$add",
                                    new BsonArray
                                            {
                                                "$loss1",
                                                "$loss2"
                                            })),
                                    4
                                }) }
                        })
                });

                var openingbalancePipeLine = new List<BsonDocument> {
                                                new BsonDocument("$addFields",
                                                new BsonDocument("ProductGroup",
                                                new BsonDocument("$toLower", "$DataJson.FormData.productGroup"))),
                                                new BsonDocument("$match",
                                                new BsonDocument
                                                    {
                                                        { "DataJson.FormData.openingBalanceQuantityMt",
                                                new BsonDocument("$ne", BsonNull.Value) },
                                                        //{ "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                                        { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                                        { "IsArchived", false },
                                                    }) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    openingbalancePipeLine.AddRange(new List<BsonDocument>
                    {
                         new BsonDocument("$match",
                         new BsonDocument {{ "CompanyId", loggedInContext.CompanyGuid.ToString() }, })
                    });
                }

                openingbalancePipeLine.AddRange(new List<BsonDocument>
                { new BsonDocument("$group",
                                                new BsonDocument
                                                    {
                                                        { "_id",
                                                new BsonDocument
                                                        {
                                                            { "Commodity", "$DataJson.FormData.productName" },
                                                            { "SalesType", "$DataJson.FormData.salesType" }
                                                        } },
                                                        { "OpeningBalance",
                                                new BsonDocument("$sum",
                                                new BsonDocument("$round",
                                                new BsonArray
                                                                {
                                                                    new BsonDocument("$toDecimal", "$DataJson.FormData.openingBalanceQuantityMt"),
                                                                    4
                                                                })) }
                                                    }),
                                                new BsonDocument("$project",
                                                new BsonDocument
                                                    {
                                                        { "_id", 0 },
                                                        { "Commodity", "$_id.Commodity" },
                                                        { "SalesType", "$_id.SalesType" },
                                                        { "OpeningBalance", 1 }
                                                    })
                });

                var sourceCommoditiesBalancePipeLine = new List<BsonDocument>
                {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                sourceCommoditiesBalancePipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            { "$and",
                    new BsonArray
                            {
                                new BsonDocument("$or",
                                new BsonArray
                                    {
                                        new BsonDocument("DataJson.FormData.ImportUniqueId",
                                        new BsonDocument("$nin",
                                        new BsonArray
                                                {
                                                    BsonNull.Value,
                                                    ""
                                                })),
                                        new BsonDocument("DataJson.FormData.localUniqueId",
                                        new BsonDocument("$nin",
                                        new BsonArray
                                                {
                                                    BsonNull.Value,
                                                    ""
                                                }))
                                    })
                            } },
                            { "DataJson.FormData.salesType",
                    new BsonDocument("$ne", BsonNull.Value) }
                        }),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "sourceuniqueId",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.ImportUniqueId",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.localUniqueId",
                                            ""
                                        })
                                }) },
                            { "SourceData",
                    new BsonDocument("$filter",
                    new BsonDocument
                                {
                                    { "input",
                    new BsonDocument("$objectToArray", "$DataJson.FormData") },
                                    { "as", "dataSet" },
                                    { "cond",
                    new BsonDocument("$or",
                    new BsonArray
                                        {
                                            new BsonDocument("$eq",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "selectSourceContract",
                                                                "$DataJson.FormData.ImportUniqueId",
                                                                "lookupchilddata"
                                                            }))
                                                }),
                                            new BsonDocument("$eq",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "mylookup",
                                                                "$DataJson.FormData.localUniqueId",
                                                                "lookupchilddata"
                                                            }))
                                                })
                                        }) }
                                }) }
                        }) });

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                        new List<BsonDocument> {
                    new BsonDocument("$lookup",
                    new BsonDocument
                       {
                            { "from", MongoDBCollectionConstants.ContractQuantity },
                            { "localField", "sourceuniqueId" },
                            { "foreignField", "UniqueId" },
                            { "pipeline",
                    new BsonArray
                            {
                                new BsonDocument("$match",
                                new BsonDocument("CompanyId", loggedInContext.CompanyGuid.ToString() )),
                                new BsonDocument("$project",
                                new BsonDocument
                                    {
                                        { "ContractQuantity", 1 },
                                        { "_id", 0 }
                                    })
                            } },
                            { "as", "UsedQuantity" }
                       }) });
                }
                else
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                        new List<BsonDocument> {
                    new BsonDocument("$lookup",
                   new BsonDocument
                       {
                            { "from", MongoDBCollectionConstants.ContractQuantity },
                            { "localField", "sourceuniqueId" },
                            { "foreignField", "UniqueId" },
                            { "pipeline",
                    new BsonArray
                            {
                                new BsonDocument("$project",
                                new BsonDocument
                                    {
                                        { "ContractQuantity", 1 },
                                        { "_id", 0 }
                                    })
                            } },
                            { "as", "UsedQuantity" }
                       }) });
                }

                sourceCommoditiesBalancePipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$unwind", "$SourceData"),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "Commodity",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$SourceData.v.commodity1",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$SourceData.v.commodity",
                                            ""
                                        })
                                }) },
                            { "Quantity",
                    new BsonDocument("$subtract",
                    new BsonArray
                                {
                                    new BsonDocument("$add",
                                    new BsonArray
                                        {
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal", "$SourceData.v.contractQuantityMt"),
                                                    0
                                                }),
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal", "$SourceData.v.totalQuantityMt"),
                                                    0
                                                })
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            new BsonDocument("$toDecimal",
                                            new BsonDocument("$first", "$UsedQuantity.ContractQuantity")),
                                            0
                                        })
                                }) }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$sourceuniqueId" },
                            { "Commodity",
                    new BsonDocument("$first", "$Commodity") },
                            { "Quantity",
                    new BsonDocument("$first", "$Quantity") }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "UniqueId", "$_id" },
                            { "Commodity", "$Commodity" },
                            { "Quantity",
                            new BsonDocument("$round",
                            new BsonArray { new BsonDocument("$toDecimal", "$Quantity"),4 }) }
                        })
            });

                var purchageCommoditiesBalancePipeLine = new List<BsonDocument> {
                            new BsonDocument("$addFields",
                            new BsonDocument("ProductGroup",
                            new BsonDocument("$toLower", "$DataJson.FormData.productGroup1")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument>
                    {
                         new BsonDocument("$match",
                         new BsonDocument {{ "CompanyId", loggedInContext.CompanyGuid.ToString() }, })
                    });
                }

                purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                            new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "IsArchived", false },
                                    { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                    { "$and",
                            new BsonArray
                                    {
                                        new BsonDocument("$or",
                                        new BsonArray
                                            {
                                                new BsonDocument("DataJson.FormData.contractDetails",
                                                new BsonDocument("$nin",
                                                new BsonArray
                                                        {
                                                            BsonNull.Value,
                                                            ""
                                                        })),
                                                new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                new BsonDocument("$nin",
                                                new BsonArray
                                                        {
                                                            BsonNull.Value,
                                                            ""
                                                        }))
                                            })
                                    } }
                                }),
                            new BsonDocument("$addFields",
                            new BsonDocument
                                {
                                    { "sourceuniqueId",
                            new BsonDocument("$ifNull",
                            new BsonArray
                                        {
                                            "$DataJson.FormData.contractDetails",
                                            "$DataJson.FormData.uniqueIdLocal"
                                        }) },
                                    { "SourceData",
                            new BsonDocument("$filter",
                            new BsonDocument
                                        {
                                            { "input",
                            new BsonDocument("$objectToArray", "$DataJson.FormData") },
                                            { "as", "dataSet" },
                                            { "cond",
                            new BsonDocument("$eq",
                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "contractDetails",
                                                                "$DataJson.FormData.contractDetails",
                                                                "lookupchilddata"
                                                            }))
                                                }) }
                                        }) }
                                }) });

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                    new BsonDocument("$lookup",
                           new BsonDocument
                               {
                                    { "from", MongoDBCollectionConstants.ContractQuantity },
                                    { "localField", "sourceuniqueId" },
                                    { "foreignField", "UniqueId" },
                                    { "pipeline",
                            new BsonArray
                                    {
                                        new BsonDocument("$match",
                                        new BsonDocument("CompanyId", loggedInContext.CompanyGuid.ToString())),
                                        new BsonDocument("$project",
                                        new BsonDocument
                                            {
                                                { "ContractQuantity", 1 },
                                                { "_id", 0 }
                                            })
                                    } },
                                    { "as", "UsedQuantity" }
                               }) });
                }
                else
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                    new BsonDocument("$lookup",
                           new BsonDocument
                               {
                                    { "from", MongoDBCollectionConstants.ContractQuantity },
                                    { "localField", "sourceuniqueId" },
                                    { "foreignField", "UniqueId" },
                                    { "pipeline",
                            new BsonArray
                                    {
                                        new BsonDocument("$project",
                                        new BsonDocument
                                            {
                                                { "ContractQuantity", 1 },
                                                { "_id", 0 }
                                            })
                                    } },
                                    { "as", "UsedQuantity" }
                               }) });
                }

                purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                            new BsonDocument("$project",
                            new BsonDocument
                                {
                                    { "_id", 0 },
                                    { "UniqueId", "$sourceuniqueId" },
                                    { "Commodity", "$DataJson.FormData.commodity" },
                                    { "Quantity",
                            new BsonDocument("$round",
                            new BsonArray
                                        {
                                new BsonDocument("$subtract",
                                    new BsonArray
                                                {
                                            new BsonDocument("$add",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$ifNull",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$toDecimal",
                                                            new BsonDocument("$first", "$SourceData.v.contractQuantity")),
                                                            0
                                                        }),
                                                    new BsonDocument("$ifNull",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$toDecimal", "$DataJson.FormData.totalQuantityMt"),
                                                            0
                                                        })
                                                }),
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal",
                                                    new BsonDocument("$first", "$UsedQuantity.ContractQuantity")),
                                                    0
                                                })
                                        }),
                                            4
                                        }) }
                                })
                });

                var importrecordcountPiprLine = new List<BsonDocument> {
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$DataJson.FormData.contractDetails")),
                            new BsonDocument("$addFields",
                            new BsonDocument("ProductGroup",
                            new BsonDocument("$toLower", "$DataJson.FormData.contractDetails.productGroup1"))),
                            new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "IsArchived", false },
                                    { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                })};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    importrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument
                                        {
                                        { "DataJson.FormData.contractDetails.contractUniqueId",
                                new BsonDocument
                                        {
                                            { "$regex", instanceDashboardInput.CompanyName.ToLower() },
                                            { "$options", "i" }
                                        } }
                    }) });
                }

                importrecordcountPiprLine.AddRange(new List<BsonDocument> {
                            new BsonDocument("$count", "Count")
                });

                var localrecordcountPiprLine = new List<BsonDocument> {
                                new BsonDocument("$unwind",
                                new BsonDocument("path", "$DataJson.FormData")),
                                new BsonDocument("$addFields",
                                new BsonDocument("ProductGroup",
                                new BsonDocument("$toLower", "$DataJson.FormData.productGroup1"))),
                                new BsonDocument("$match",
                                new BsonDocument
                                    {
                                        { "IsArchived", false },
                                        { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                    }) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    localrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument
                                        {
                                        { "DataJson.FormData.uniqueIdLocal",
                                new BsonDocument
                                        {
                                            { "$regex", instanceDashboardInput.CompanyName.ToLower() },
                                            { "$options", "i" }
                                        } }
                    }) });
                }
                else
                {
                    localrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument("$or",
                                        new BsonArray
                                                {
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument {{ "$regex", "ana-kakinada" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "umiro-india" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-krishnapatnam" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-chennai" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana+umiro" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "sg-ana" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-mumbai" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-mangalore" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-kandla" },{ "$options", "i" }}),
                                                }))
                   });
                }

                localrecordcountPiprLine.AddRange(new List<BsonDocument> {
                       new BsonDocument("$count", "Count") });

                var salesDataList = datasetCollection.Aggregate<BsonDocument>(salesPipeLine, aggregateOptions).ToList();
                var unTaggedSalesData = datasetCollection.Aggregate<BsonDocument>(unTaggedSalesPipeLine, aggregateOptions).ToList();
                var productionData = datasetCollection.Aggregate<BsonDocument>(productionPipeLine, aggregateOptions).ToList();
                var consumptionDataList = datasetCollection.Aggregate<BsonDocument>(consumptionPipeLine, aggregateOptions).FirstOrDefault();
                var openingBalanceDataList = datasetCollection.Aggregate<BsonDocument>(openingbalancePipeLine, aggregateOptions).ToList();
                var sourceOpeningBalanceDataList = datasetCollection.Aggregate<BsonDocument>(sourceCommoditiesBalancePipeLine, aggregateOptions).ToList();
                var purchageOpeningBalanceDataList = datasetCollection.Aggregate<BsonDocument>(purchageCommoditiesBalancePipeLine, aggregateOptions).ToList();
                var importIdList = datasetCollection.Aggregate<BsonDocument>(importrecordcountPiprLine, aggregateOptions).FirstOrDefault();
                var localIdList = datasetCollection.Aggregate<BsonDocument>(localrecordcountPiprLine, aggregateOptions).FirstOrDefault();

                List<InstanceLevelDashboardModel> salesList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(salesDataList);
                List<InstanceLevelDashboardModel> untaggedsalesList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(unTaggedSalesData);
                List<InstanceLevelDashboardModel> openingBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(openingBalanceDataList);
                List<InstanceLevelDashboardModel> sourceOpeningBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(sourceOpeningBalanceDataList);
                List<InstanceLevelDashboardModel> purchageOpeningBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(purchageOpeningBalanceDataList);

                List<InstanceLevelDashboardOutputModel> finalDashboardOutputModel = new List<InstanceLevelDashboardOutputModel>();
                BsonValue salesType = "", productionValue = 0, consumptionValue = 0, salesConsumptValues = 0, importIdCount = 0, localIdCount = 0;
                decimal salesQuantity = 0, sourceQuantity = 0, salesOpeningbalance = 0;

                //var finalSourcebalnce = sourceOpeningBalanceList.Concat(purchageOpeningBalanceList.Except(sourceOpeningBalanceList));
                var finalSourcebalnce = sourceOpeningBalanceList;
                Parallel.ForEach(purchageOpeningBalanceList, data =>
                {
                    if (!sourceOpeningBalanceList.Exists(x => x.UniqueId == data.UniqueId))
                        finalSourcebalnce.Add(data);
                });

                foreach (var commodity in commodityDictionary)
                {
                    InstanceLevelDashboardModel sale = salesList?.Where(x => ((x.SalesType.ToLower() == "regular"
                                           && commodity.IsRegularSales == true
                                           && x.Commodity.ToLower() == commodity.ProductName.ToLower())
                    || (x.SalesType.ToLower() == "institutional"
                    && commodity.IsRegularSales == false
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower()))).FirstOrDefault();

                    InstanceLevelDashboardModel untaggedSale = untaggedsalesList?.Where(x => ((x.SalesType.ToLower() == "regular"
                    && commodity.IsRegularSales == true
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower())
                    || (x.SalesType.ToLower() == "institutional"
                    && commodity.IsRegularSales == false
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower()))).FirstOrDefault();

                    var production = productionData?.Where(x => (((x.TryGetValue("SalesType", out salesType) ? salesType.ToString().ToLower() : "") == "regular"
                    && commodity.IsRegularSales == true)
                    || ((x.TryGetValue("SalesType", out salesType) ? salesType.ToString().ToLower() : "") == "institutional"
                    && commodity.IsRegularSales == false))).FirstOrDefault();

                    decimal? salesConsumptionValue = consumptionDataList != null ? consumptionDataList.TryGetValue(commodity.ProductValue + "-Consumption", out salesConsumptValues) ? salesConsumptValues?.AsDecimal : 0 : 0;
                    decimal? openingBalance = consumptionDataList != null ? consumptionDataList.TryGetValue(commodity.ProductValue, out salesConsumptValues) ? salesConsumptValues?.AsDecimal : 0 : 0;
                    decimal? sourceBalance = finalSourcebalnce.Where(x => x.Commodity.ToLower() == commodity.ProductName.ToLower()).Sum(x => x.Quantity);
                    salesOpeningbalance = openingBalanceList.Where(x => (x.Commodity.ToLower() == commodity.ProductName.ToLower()
                    && ((x.SalesType.ToLower() == "regular" && commodity.IsRegularSales == true) || (x.SalesType.ToLower() == "institutional" && commodity.IsRegularSales == false)))
                    ).Select(x => x.OpeningBalance).FirstOrDefault() ?? 0;

                    finalDashboardOutputModel.Add(new InstanceLevelDashboardOutputModel
                    {
                        ProductName = commodity.ProductName,
                        OpeningBalance = sourceBalance == 0 || sourceBalance == null ?
                                         (openingBalance == 0 || openingBalance == null ?
                                         salesOpeningbalance : openingBalance) : sourceBalance,
                        Consumption = (salesConsumptionValue == 0 || salesConsumptionValue == null) ?
                                       (production != null ? (production.TryGetValue(commodity.ProductValue + "-Consumption", out consumptionValue)
                                        ? consumptionValue?.AsDecimal : 0) : 0) : salesConsumptionValue,
                        Production = production != null ? (production.TryGetValue(commodity.ProductValue, out productionValue) ? productionValue?.AsDecimal : 0) : 0,
                        Sales = sale?.Salesvalue,
                        UnTaggedSales = untaggedSale?.Salesvalue,
                        IsBold = commodity.IsBold,
                    });

                    sourceQuantity = sourceQuantity + (sourceBalance ?? 0);
                    salesQuantity = salesQuantity + (sale?.Salesvalue ?? 0) + (untaggedSale?.Salesvalue ?? 0);
                    sale = null;
                    untaggedSale = null;
                    salesType = "";
                    production = null;
                    productionValue = null;
                    consumptionValue = null;
                    salesConsumptionValue = null;
                    openingBalance = 0;
                    sourceBalance = 0;
                    salesOpeningbalance = 0;
                }
                InstanceLevelPositionDashboardOutputModel finalInstanceModel = new InstanceLevelPositionDashboardOutputModel();
                finalInstanceModel.GridData = finalDashboardOutputModel;
                finalInstanceModel.TotalSourceQuantity = sourceQuantity;
                finalInstanceModel.TotalSalesQuantity = salesQuantity;
                finalInstanceModel.TotalImportContracts = importIdList == null ? 0 : importIdList.TryGetValue("Count", out importIdCount) ? importIdCount.AsInt32 : 0;
                finalInstanceModel.TotalLocalContracts = localIdList == null ? 0 : localIdList.TryGetValue("Count", out localIdCount) ? localIdCount.AsInt32 : 0;

                return finalInstanceModel;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetPalmOilInstanceLevelDashboard", "DataSetRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return new InstanceLevelPositionDashboardOutputModel();
            }
        }
        public InstanceLevelPositionDashboardOutputModel GetSunflowerInstanceLevelDashboard(DashboardInputModel instanceDashboardInput, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetSunflowerInstanceLevelDashboard", "DataSetRepository"));
                IMongoCollection<BsonDocument> datasetCollection = GetMongoCollectionObject<BsonDocument>(MongoDBCollectionConstants.DataSet);
                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };

                DateTime fromDate = instanceDashboardInput.FromDate ?? DateTime.UtcNow;
                DateTime toDate = instanceDashboardInput.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;
                string formId = GetSalesFormId(instanceDashboardInput.CompanyName, loggedInContext);

                var commodityDictionary = new List<ProductListModel>();

                commodityDictionary = new List<ProductListModel>
                   {
                        new ProductListModel { ProductName = "Source Import", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "CSFO", ProductValue = "cSFO",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RSFO-Import", ProductValue = "rSFOImport",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Source Local", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "CSFO-Local", ProductValue = "cSFOLocal",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RSFO-Local", ProductValue = "rSFOLocal",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Primary: Regular", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "RSFO", ProductValue = "rSFO",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RSFO-TRADING", ProductValue = "rSFOTrading",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "CSFO-TRADING", ProductValue = "cSFOTrading",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Primary: Institutional", ProductValue = "",IsRegularSales = false, IsBold = true},
                        new ProductListModel { ProductName = "RSFO", ProductValue = "rSFO",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "RSFO-TRADING", ProductValue = "rSFOTrading",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "Non Primary: Regular", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "SUNFLOWER FATTY ACID", ProductValue = "sunFlowerFattyAcid",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RSFO-SLUDGE", ProductValue = "rSFOSludge",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Non Primary: Institutional", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "SUNFLOWER FATTY ACID", ProductValue = "sunFlowerFattyAcid",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "RSFO-SLUDGE", ProductValue = "rSFOSludge",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "Loss", ProductValue = "loss", IsBold = false},
                   };

                var salesPipeLine = new List<BsonDocument>
                                                {
                                    new BsonDocument("$addFields",
                                    new BsonDocument("datefilter",
                                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    salesPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                salesPipeLine.AddRange(
                    new List<BsonDocument> {new BsonDocument("$match",
                                    new BsonDocument
                                        {
                                            { "DataJson.FormData.salesType",
                                    new BsonDocument("$ne", BsonNull.Value) },
                                            { "IsArchived", false },
                                            { "datefilter",
                                    new BsonDocument
                                            {
                                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                            } },
                                            { "$and",
                                    new BsonArray
                                            {
                                                new BsonDocument("$or",
                                                new BsonArray
                                                    {
                                                        new BsonDocument("DataJson.FormData.ImportUniqueId",
                                                        new BsonDocument("$nin",new BsonArray{BsonNull.Value,""})),
                                                        new BsonDocument("DataJson.FormData.localUniqueId",
                                                        new BsonDocument("$nin",new BsonArray{BsonNull.Value,""}))
                                                    })
                                            } }
                                        }),
                                    new BsonDocument("$group",
                                    new BsonDocument
                                        {
                                            { "_id",
                                    new BsonDocument
                                            {
                                                { "Commodity", "$DataJson.FormData.commodity1" },
                                                { "SalesType", "$DataJson.FormData.salesType" }
                                            } },
                                            { "Sales",
                                    new BsonDocument("$sum",
                                    new BsonDocument("$round",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toDecimal", "$DataJson.FormData.quantityMt2"),
                                                        4
                                                    })) }
                                        }),
                                    new BsonDocument("$project",
                                    new BsonDocument
                                        {
                                            { "_id", 0 },
                                            { "Commodity", "$_id.Commodity" },
                                            { "SalesType", "$_id.SalesType" },
                                            { "Salesvalue", "$Sales" }
                                        })
                                       });

                var unTaggedSalesPipeLine = new List<BsonDocument> {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    unTaggedSalesPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                unTaggedSalesPipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            { "$and",
                    new BsonArray
                            {
                                new BsonDocument("DataJson.FormData.ImportUniqueId",
                                new BsonDocument("$in",new BsonArray{BsonNull.Value,""})),
                                new BsonDocument("DataJson.FormData.localUniqueId",
                                new BsonDocument("$in",new BsonArray{BsonNull.Value,""}))
                            } },
                            { "DataJson.FormData.salesType",
                    new BsonDocument("$ne", BsonNull.Value) }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id",
                    new BsonDocument
                            {
                                { "Commodity", "$DataJson.FormData.commodity1" },
                                { "SalesType", "$DataJson.FormData.salesType" }
                            } },
                            { "Sales",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.quantityMt2"),
                                        4
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Commodity", "$_id.Commodity" },
                            { "SalesType", "$_id.SalesType" },
                            { "Salesvalue", "$Sales" }
                        })
                });

                var productionPipeLine = new List<BsonDocument> {
                        new BsonDocument("$addFields",
                        new BsonDocument("datefilter",
                        new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    productionPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                productionPipeLine.AddRange(
                    new List<BsonDocument> {
                        new BsonDocument("$match",
                        new BsonDocument
                            {
                                { "DataJson.FormData.salesType",
                        new BsonDocument("$ne", BsonNull.Value) },
                                { "IsArchived", false },
                                { "datefilter",
                        new BsonDocument
                                {
                            { "$gte",
                             new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                            { "$lt",
                             new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                        } },
                                { "$and",
                        new BsonArray
                                {
                                    new BsonDocument("$or",
                                    new BsonArray
                                        {
                                            new BsonDocument("DataJson.FormData.ImportUniqueId",
                                            new BsonDocument("$ne", BsonNull.Value)),
                                            new BsonDocument("DataJson.FormData.localUniqueId",
                                            new BsonDocument("$ne", BsonNull.Value))
                                        })
                                } }
                            }),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "$DataJson.FormData.salesType" },
                                { "rSFO1",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.rsfoMt"),
                                            4
                                        })) },
                                { "rSFOTrading1",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.rsfoTradingMt"),
                                            4
                                        })) },
                                { "cSFOTrading1",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.csfoTradingMt"),
                                            4
                                        })) },
                                { "sunFlowerFattyAcid1",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.sunflowerFattyAcidMt"),
                                            4
                                        })) },
                                { "rSFOSludge1",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.rsfoSludgeMt"),
                                            4
                                        })) },
                                { "rSFO2",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.rsfoMt1"),
                                            4
                                        })) },
                                { "rSFOTrading2",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.rsfoTradingMt1"),
                                            4
                                        })) },
                                { "sunFlowerFattyAcid2",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.sunflowerFattyAcidMt1"),
                                            4
                                        })) },
                                { "rSFOSludge2",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.rsfoSludgeMtnplocal"),
                                            4
                                        })) },
                                { "rSFO-c1",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.rsfoMt2"),
                                            4
                                        })) },
                                { "rSFO-c2",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.rsfoMt2nplocal"),
                                            4
                                        })) }
                            }),
                        new BsonDocument("$project",
                        new BsonDocument
                            {
                                { "_id", 0 },
                                { "SalesType", "$_id" },
                                { "rSFO",
                        new BsonDocument("$toDecimal",
                        new BsonDocument("$add",
                        new BsonArray
                                        {
                                            "$rSFO1",
                                            "$rSFO2"
                                        })) },
                                { "rSFOTrading",
                        new BsonDocument("$toDecimal",
                        new BsonDocument("$add",
                        new BsonArray
                                        {
                                            "$rSFOTrading1",
                                            "$rSFOTrading2"
                                        })) },
                                { "cSFOTrading", "$cSFOTrading" },
                                { "sunFlowerFattyAcid",
                        new BsonDocument("$toDecimal",
                        new BsonDocument("$add",
                        new BsonArray
                                        {
                                            "$sunFlowerFattyAcid1",
                                            "$sunFlowerFattyAcid2"
                                        })) },
                                { "rSFOSludge",
                        new BsonDocument("$toDecimal",
                        new BsonDocument("$add",
                        new BsonArray
                                        {
                                            "$rSFOSludge1",
                                            "$rSFOSludge2"
                                        })) },
                                { "rSFO-Consumption",
                        new BsonDocument("$toDecimal",
                        new BsonDocument("$add",
                        new BsonArray
                                        {
                                            "$rSFO-c1",
                                            "$rSFO-c2"
                                        })) }
                            })
                });

                var consumptionPipeLine = new List<BsonDocument> {
                        new BsonDocument("$addFields",
                        new BsonDocument("datefilter",
                        new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    consumptionPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                consumptionPipeLine.AddRange(
                    new List<BsonDocument> {
                        new BsonDocument("$match",
                        new BsonDocument
                            {
                                { "DataJson.FormData.salesType",
                        new BsonDocument("$ne", BsonNull.Value) },
                                { "IsArchived", false },
                                { "datefilter",
                        new BsonDocument
                                {
                               { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                                { "$and",
                        new BsonArray
                                {
                                    new BsonDocument("$or",
                                    new BsonArray
                                        {
                                            new BsonDocument("DataJson.FormData.ImportUniqueId",
                                            new BsonDocument("$ne", BsonNull.Value)),
                                            new BsonDocument("DataJson.FormData.localUniqueId",
                                            new BsonDocument("$ne", BsonNull.Value))
                                        })
                                } }
                            }),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "" },
                                { "cSFO-Consumption",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.csfoMt"),
                                            4
                                        })) },
                                { "rSFOImport-Consumption",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.rsfoImportMt"),
                                            4
                                        })) },
                                { "cSFOLocal-Consumption",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.csfoLocalMt"),
                                            4
                                        })) },
                                { "rSFOLocal-Consumption",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.rsfoLocalMt"),
                                            4
                                        })) },
                                { "loss1",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.lossMt1"),
                                            4
                                        })) },
                                { "loss2",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal", "$DataJson.FormData.lossMt5"),
                                            4
                                        })) }
                            }),
                        new BsonDocument("$project",
                        new BsonDocument
                            {
                                { "_id", 0 },
                                { "cSFO-Consumption",
                        new BsonDocument("$toDecimal", "$cSFO-Consumption") },
                                { "rSFOImport-Consumption",
                        new BsonDocument("$toDecimal", "$rSFOImport-Consumption") },
                                { "cSFOLocal-Consumption",
                        new BsonDocument("$toDecimal", "$cSFOLocal-Consumption") },
                                { "rSFOLocal-Consumption",
                        new BsonDocument("$toDecimal", "$rSFOLocal-Consumption") },
                                { "loss",
                        new BsonDocument("$round",
                        new BsonArray
                                    {
                                        new BsonDocument("$toDecimal",
                                        new BsonDocument("$add",
                                        new BsonArray
                                                {
                                                    "$loss1",
                                                    "$loss2"
                                                })),
                                        4
                                    }) }
                            })
                });

                var openingbalancePipeLine = new List<BsonDocument> {
                                                new BsonDocument("$addFields",
                                                new BsonDocument("ProductGroup",
                                                new BsonDocument("$toLower", "$DataJson.FormData.productGroup"))),
                                                new BsonDocument("$match",
                                                new BsonDocument
                                                    {
                                                        { "DataJson.FormData.openingBalanceQuantityMt",
                                                new BsonDocument("$ne", BsonNull.Value) },
                                                        { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                                        { "IsArchived", false },
                                                    }) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    openingbalancePipeLine.AddRange(new List<BsonDocument>
                    {
                         new BsonDocument("$match",
                         new BsonDocument {{ "CompanyId", loggedInContext.CompanyGuid.ToString() }, })
                    });
                }

                openingbalancePipeLine.AddRange(new List<BsonDocument>
                { new BsonDocument("$group",
                                                new BsonDocument
                                                    {
                                                        { "_id",
                                                new BsonDocument
                                                        {
                                                            { "Commodity", "$DataJson.FormData.productName" },
                                                            { "SalesType", "$DataJson.FormData.salesType" }
                                                        } },
                                                        { "OpeningBalance",
                                                new BsonDocument("$sum",
                                                new BsonDocument("$round",
                                                new BsonArray
                                                                {
                                                                    new BsonDocument("$toDecimal", "$DataJson.FormData.openingBalanceQuantityMt"),
                                                                    4
                                                                })) }
                                                    }),
                                                new BsonDocument("$project",
                                                new BsonDocument
                                                    {
                                                        { "_id", 0 },
                                                        { "Commodity", "$_id.Commodity" },
                                                        { "SalesType", "$_id.SalesType" },
                                                        { "OpeningBalance", 1 }
                                                    })
                });

                var sourceCommoditiesBalancePipeLine = new List<BsonDocument>
                {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                sourceCommoditiesBalancePipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            { "$and",
                    new BsonArray
                            {
                                new BsonDocument("$or",
                                new BsonArray
                                    {
                                        new BsonDocument("DataJson.FormData.ImportUniqueId",
                                        new BsonDocument("$nin",
                                        new BsonArray
                                                {
                                                    BsonNull.Value,
                                                    ""
                                                })),
                                        new BsonDocument("DataJson.FormData.localUniqueId",
                                        new BsonDocument("$nin",
                                        new BsonArray
                                                {
                                                    BsonNull.Value,
                                                    ""
                                                }))
                                    })
                            } },
                            { "DataJson.FormData.salesType",
                    new BsonDocument("$ne", BsonNull.Value) }
                        }),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "sourceuniqueId",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.ImportUniqueId",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.localUniqueId",
                                            ""
                                        })
                                }) },
                            { "SourceData",
                    new BsonDocument("$filter",
                    new BsonDocument
                                {
                                    { "input",
                    new BsonDocument("$objectToArray", "$DataJson.FormData") },
                                    { "as", "dataSet" },
                                    { "cond",
                    new BsonDocument("$or",
                    new BsonArray
                                        {
                                            new BsonDocument("$eq",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "selectSourceContract",
                                                                "$DataJson.FormData.ImportUniqueId",
                                                                "lookupchilddata"
                                                            }))
                                                }),
                                            new BsonDocument("$eq",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "mylookup",
                                                                "$DataJson.FormData.localUniqueId",
                                                                "lookupchilddata"
                                                            }))
                                                })
                                        }) }
                                }) }
                        })});

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                        new List<BsonDocument> {
                    new BsonDocument("$lookup",
                    new BsonDocument
                       {
                            { "from", MongoDBCollectionConstants.ContractQuantity },
                            { "localField", "sourceuniqueId" },
                            { "foreignField", "UniqueId" },
                            { "pipeline",
                    new BsonArray
                            {
                                new BsonDocument("$match",
                                new BsonDocument("CompanyId", loggedInContext.CompanyGuid.ToString() )),
                                new BsonDocument("$project",
                                new BsonDocument
                                    {
                                        { "ContractQuantity", 1 },
                                        { "_id", 0 }
                                    })
                            } },
                            { "as", "UsedQuantity" }
                       }) });
                }
                else
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                        new List<BsonDocument> {
                    new BsonDocument("$lookup",
                   new BsonDocument
                       {
                            { "from", MongoDBCollectionConstants.ContractQuantity },
                            { "localField", "sourceuniqueId" },
                            { "foreignField", "UniqueId" },
                            { "pipeline",
                    new BsonArray
                            {
                                new BsonDocument("$project",
                                new BsonDocument
                                    {
                                        { "ContractQuantity", 1 },
                                        { "_id", 0 }
                                    })
                            } },
                            { "as", "UsedQuantity" }
                       }) });
                }

                sourceCommoditiesBalancePipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$unwind", "$SourceData"),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "Commodity",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$SourceData.v.commodity1",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$SourceData.v.commodity",
                                            ""
                                        })
                                }) },
                            { "Quantity",
                    new BsonDocument("$subtract",
                    new BsonArray
                                {
                                    new BsonDocument("$add",
                                    new BsonArray
                                        {
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal", "$SourceData.v.contractQuantityMt"),
                                                    0
                                                }),
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal", "$SourceData.v.totalQuantityMt"),
                                                    0
                                                })
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            new BsonDocument("$toDecimal",
                                            new BsonDocument("$first", "$UsedQuantity.ContractQuantity")),
                                            0
                                        })
                                }) }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$sourceuniqueId" },
                            { "Commodity",
                    new BsonDocument("$first", "$Commodity") },
                            { "Quantity",
                    new BsonDocument("$first", "$Quantity") }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "UniqueId", "$_id" },
                            { "Commodity", "$Commodity" },
                            { "Quantity",
                            new BsonDocument("$round",
                            new BsonArray { new BsonDocument("$toDecimal", "$Quantity"),4 }) }
                        })
                });

                var purchageCommoditiesBalancePipeLine = new List<BsonDocument> {
                            new BsonDocument("$addFields",
                            new BsonDocument("ProductGroup",
                            new BsonDocument("$toLower", "$DataJson.FormData.productGroup1")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument>
                    {
                         new BsonDocument("$match",
                         new BsonDocument {{ "CompanyId", loggedInContext.CompanyGuid.ToString() }, })
                    });
                }

                purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "IsArchived", false },
                                    { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                    { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                    { "$and",
                            new BsonArray
                                    {
                                        new BsonDocument("$or",
                                        new BsonArray
                                            {
                                                new BsonDocument("DataJson.FormData.contractDetails",
                                                new BsonDocument("$nin",
                                                new BsonArray
                                                        {
                                                            BsonNull.Value,
                                                            ""
                                                        })),
                                                new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                new BsonDocument("$nin",
                                                new BsonArray
                                                        {
                                                            BsonNull.Value,
                                                            ""
                                                        }))
                                            })
                                    } }
                                }),
                            new BsonDocument("$addFields",
                            new BsonDocument
                                {
                                    { "sourceuniqueId",
                            new BsonDocument("$ifNull",
                            new BsonArray
                                        {
                                            "$DataJson.FormData.contractDetails",
                                            "$DataJson.FormData.uniqueIdLocal"
                                        }) },
                                    { "SourceData",
                            new BsonDocument("$filter",
                            new BsonDocument
                                        {
                                            { "input",
                            new BsonDocument("$objectToArray", "$DataJson.FormData") },
                                            { "as", "dataSet" },
                                            { "cond",
                            new BsonDocument("$eq",
                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "contractDetails",
                                                                "$DataJson.FormData.contractDetails",
                                                                "lookupchilddata"
                                                            }))
                                                }) }
                                        }) }
                                })});

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                    new BsonDocument("$lookup",
                           new BsonDocument
                               {
                                    { "from", MongoDBCollectionConstants.ContractQuantity },
                                    { "localField", "sourceuniqueId" },
                                    { "foreignField", "UniqueId" },
                                    { "pipeline",
                            new BsonArray
                                    {
                                        new BsonDocument("$match",
                                        new BsonDocument("CompanyId", loggedInContext.CompanyGuid.ToString())),
                                        new BsonDocument("$project",
                                        new BsonDocument
                                            {
                                                { "ContractQuantity", 1 },
                                                { "_id", 0 }
                                            })
                                    } },
                                    { "as", "UsedQuantity" }
                               }) });
                }
                else
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                    new BsonDocument("$lookup",
                           new BsonDocument
                               {
                                    { "from", MongoDBCollectionConstants.ContractQuantity },
                                    { "localField", "sourceuniqueId" },
                                    { "foreignField", "UniqueId" },
                                    { "pipeline",
                            new BsonArray
                                    {
                                        new BsonDocument("$project",
                                        new BsonDocument
                                            {
                                                { "ContractQuantity", 1 },
                                                { "_id", 0 }
                                            })
                                    } },
                                    { "as", "UsedQuantity" }
                               }) });
                }

                purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                            new BsonDocument("$project",
                            new BsonDocument
                                {
                                    { "_id", 0 },
                                    { "UniqueId", "$sourceuniqueId" },
                                    { "Commodity", "$DataJson.FormData.commodity" },
                                    { "Quantity",
                            new BsonDocument("$round",
                            new BsonArray
                                        {
                                new BsonDocument("$subtract",
                                    new BsonArray
                                                {
                                            new BsonDocument("$add",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$ifNull",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$toDecimal",
                                                            new BsonDocument("$first", "$SourceData.v.contractQuantity")),
                                                            0
                                                        }),
                                                    new BsonDocument("$ifNull",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$toDecimal", "$DataJson.FormData.totalQuantityMt"),
                                                            0
                                                        })
                                                }),
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal",
                                                    new BsonDocument("$first", "$UsedQuantity.ContractQuantity")),
                                                    0
                                                })
                                        }),
                                            4
                                        }) }
                                })
                });

                var importrecordcountPiprLine = new List<BsonDocument> {
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$DataJson.FormData.contractDetails")),
                            new BsonDocument("$addFields",
                            new BsonDocument("ProductGroup",
                            new BsonDocument("$toLower", "$DataJson.FormData.contractDetails.productGroup1"))),
                            new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "IsArchived", false },
                                    { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                })};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    importrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument
                                        {
                                        { "DataJson.FormData.contractDetails.contractUniqueId",
                                new BsonDocument
                                        {
                                            { "$regex", instanceDashboardInput.CompanyName.ToLower() },
                                            { "$options", "i" }
                                        } }
                    }) });
                }

                importrecordcountPiprLine.AddRange(new List<BsonDocument> {
                            new BsonDocument("$count", "Count")
                });

                var localrecordcountPiprLine = new List<BsonDocument> {
                                new BsonDocument("$unwind",
                                new BsonDocument("path", "$DataJson.FormData")),
                                new BsonDocument("$addFields",
                                new BsonDocument("ProductGroup",
                                new BsonDocument("$toLower", "$DataJson.FormData.productGroup1"))),
                                new BsonDocument("$match",
                                new BsonDocument
                                    {
                                        { "IsArchived", false },
                                        { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                    }) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    localrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument
                                        {
                                        { "DataJson.FormData.uniqueIdLocal",
                                new BsonDocument
                                        {
                                            { "$regex", instanceDashboardInput.CompanyName.ToLower() },
                                            { "$options", "i" }
                                        } }
                    }) });
                }
                else
                {
                    localrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument("$or",
                                        new BsonArray
                                                {
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument {{ "$regex", "ana-kakinada" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "umiro-india" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-krishnapatnam" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-chennai" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana+umiro" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "sg-ana" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-mumbai" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-mangalore" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-kandla" },{ "$options", "i" }}),
                                                }))
                   });
                }

                localrecordcountPiprLine.AddRange(new List<BsonDocument> {
                       new BsonDocument("$count", "Count") });


                var salesDataList = datasetCollection.Aggregate<BsonDocument>(salesPipeLine, aggregateOptions).ToList();
                var unTaggedSalesData = datasetCollection.Aggregate<BsonDocument>(unTaggedSalesPipeLine, aggregateOptions).ToList();
                var productionData = datasetCollection.Aggregate<BsonDocument>(productionPipeLine, aggregateOptions).ToList();
                var consumptionDataList = datasetCollection.Aggregate<BsonDocument>(consumptionPipeLine, aggregateOptions).FirstOrDefault();
                var openingBalanceDataList = datasetCollection.Aggregate<BsonDocument>(openingbalancePipeLine, aggregateOptions).ToList();
                var sourceOpeningBalanceDataList = datasetCollection.Aggregate<BsonDocument>(sourceCommoditiesBalancePipeLine, aggregateOptions).ToList();
                var purchageOpeningBalanceDataList = datasetCollection.Aggregate<BsonDocument>(purchageCommoditiesBalancePipeLine, aggregateOptions).ToList();
                var importIdList = datasetCollection.Aggregate<BsonDocument>(importrecordcountPiprLine, aggregateOptions).FirstOrDefault();
                var localIdList = datasetCollection.Aggregate<BsonDocument>(localrecordcountPiprLine, aggregateOptions).FirstOrDefault();

                List<InstanceLevelDashboardModel> salesList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(salesDataList);
                List<InstanceLevelDashboardModel> untaggedsalesList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(unTaggedSalesData);
                List<InstanceLevelDashboardModel> openingBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(openingBalanceDataList);
                List<InstanceLevelDashboardModel> sourceOpeningBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(sourceOpeningBalanceDataList);
                List<InstanceLevelDashboardModel> purchageOpeningBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(purchageOpeningBalanceDataList);

                List<InstanceLevelDashboardOutputModel> finalDashboardOutputModel = new List<InstanceLevelDashboardOutputModel>();
                BsonValue salesType = "", productionValue = 0, consumptionValue = 0, salesConsumptValues = 0, importIdCount = 0, localIdCount = 0;
                decimal salesQuantity = 0, sourceQuantity = 0, salesOpeningbalance = 0;

                //var finalSourcebalnce = sourceOpeningBalanceList.Concat(purchageOpeningBalanceList.Except(sourceOpeningBalanceList));
                var finalSourcebalnce = sourceOpeningBalanceList;
                Parallel.ForEach(purchageOpeningBalanceList, data =>
                {
                    if (!sourceOpeningBalanceList.Exists(x => x.UniqueId == data.UniqueId))
                        finalSourcebalnce.Add(data);
                });

                foreach (var commodity in commodityDictionary)
                {
                    InstanceLevelDashboardModel sale = salesList?.Where(x => ((x.SalesType.ToLower() == "regular"
                                           && commodity.IsRegularSales == true
                                           && x.Commodity.ToLower() == commodity.ProductName.ToLower())
                    || (x.SalesType.ToLower() == "institutional"
                    && commodity.IsRegularSales == false
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower()))).FirstOrDefault();

                    InstanceLevelDashboardModel untaggedSale = untaggedsalesList?.Where(x => ((x.SalesType.ToLower() == "regular"
                    && commodity.IsRegularSales == true
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower())
                    || (x.SalesType.ToLower() == "institutional"
                    && commodity.IsRegularSales == false
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower()))).FirstOrDefault();

                    var production = productionData?.Where(x => (((x.TryGetValue("SalesType", out salesType) ? salesType.ToString().ToLower() : "") == "regular"
                    && commodity.IsRegularSales == true)
                    || ((x.TryGetValue("SalesType", out salesType) ? salesType.ToString().ToLower() : "") == "institutional"
                    && commodity.IsRegularSales == false))).FirstOrDefault();

                    decimal? salesConsumptionValue = consumptionDataList != null ? consumptionDataList.TryGetValue(commodity.ProductValue + "-Consumption", out salesConsumptValues) ? salesConsumptValues?.AsDecimal : 0 : 0;
                    decimal? openingBalance = consumptionDataList != null ? consumptionDataList.TryGetValue(commodity.ProductValue, out salesConsumptValues) ? salesConsumptValues?.AsDecimal : 0 : 0;
                    decimal? sourceBalance = finalSourcebalnce.Where(x => x.Commodity.ToLower() == commodity.ProductName.ToLower()).Sum(x => x.Quantity);
                    salesOpeningbalance = openingBalanceList.Where(x => (x.Commodity.ToLower() == commodity.ProductName.ToLower()
                    && ((x.SalesType.ToLower() == "regular" && commodity.IsRegularSales == true) || (x.SalesType.ToLower() == "institutional" && commodity.IsRegularSales == false)))
                    ).Select(x => x.OpeningBalance).FirstOrDefault() ?? 0;

                    finalDashboardOutputModel.Add(new InstanceLevelDashboardOutputModel
                    {
                        ProductName = commodity.ProductName,
                        OpeningBalance = sourceBalance == 0 || sourceBalance == null ?
                                         (openingBalance == 0 || openingBalance == null ?
                                         salesOpeningbalance : openingBalance) : sourceBalance,
                        Consumption = (salesConsumptionValue == 0 || salesConsumptionValue == null) ?
                                       (production != null ? (production.TryGetValue(commodity.ProductValue + "-Consumption", out consumptionValue)
                                        ? consumptionValue?.AsDecimal : 0) : 0) : salesConsumptionValue,
                        Production = production != null ? (production.TryGetValue(commodity.ProductValue, out productionValue) ? productionValue?.AsDecimal : 0) : 0,
                        Sales = sale?.Salesvalue,
                        UnTaggedSales = untaggedSale?.Salesvalue,
                        IsBold = commodity.IsBold,
                    });
                    sourceQuantity = sourceQuantity + (sourceBalance ?? 0);
                    salesQuantity = salesQuantity + (sale?.Salesvalue ?? 0) + (untaggedSale?.Salesvalue ?? 0);
                    sale = null;
                    untaggedSale = null;
                    salesType = "";
                    production = null;
                    productionValue = null;
                    consumptionValue = null;
                    salesConsumptionValue = null;
                    openingBalance = 0;
                    sourceBalance = 0;
                }
                InstanceLevelPositionDashboardOutputModel finalInstanceModel = new InstanceLevelPositionDashboardOutputModel();
                finalInstanceModel.GridData = finalDashboardOutputModel;
                finalInstanceModel.TotalSourceQuantity = sourceQuantity;
                finalInstanceModel.TotalSalesQuantity = salesQuantity;
                finalInstanceModel.TotalImportContracts = importIdList == null ? 0 : importIdList.TryGetValue("Count", out importIdCount) ? importIdCount.AsInt32 : 0;
                finalInstanceModel.TotalLocalContracts = localIdList == null ? 0 : localIdList.TryGetValue("Count", out localIdCount) ? localIdCount.AsInt32 : 0;

                return finalInstanceModel;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetPalmOilInstanceLevelDashboard", "DataSetRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return new InstanceLevelPositionDashboardOutputModel();
            }
        }
        public InstanceLevelPositionDashboardOutputModel GetRiceBranInstanceLevelDashboard(DashboardInputModel instanceDashboardInput, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetRiceBranInstanceLevelDashboard", "DataSetRepository"));
                IMongoCollection<BsonDocument> datasetCollection = GetMongoCollectionObject<BsonDocument>(MongoDBCollectionConstants.DataSet);
                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };

                DateTime fromDate = instanceDashboardInput.FromDate ?? DateTime.UtcNow;
                DateTime toDate = instanceDashboardInput.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;
                string formId = GetSalesFormId(instanceDashboardInput.CompanyName, loggedInContext);

                var commodityDictionary = new List<ProductListModel>();

                commodityDictionary = new List<ProductListModel>
                   {
                        new ProductListModel { ProductName = "Source Import", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "CSFO", ProductValue = "cSFO",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RSFO-Import", ProductValue = "rSFOImport",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Source Local", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "CSFO-Local", ProductValue = "cSFOLocal",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RSFO-Local", ProductValue = "rSFOLocal",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Primary: Regular", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "RSFO", ProductValue = "rSFO",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RSFO-TRADING", ProductValue = "rSFOTrading",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "CSFO-TRADING", ProductValue = "cSFOTrading",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Primary: Institutional", ProductValue = "",IsRegularSales = false, IsBold = true},
                        new ProductListModel { ProductName = "RSFO", ProductValue = "rSFO",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "RSFO-TRADING", ProductValue = "rSFOTrading",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "Non Primary: Regular", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "SUNFLOWER FATTY ACID", ProductValue = "sunFlowerFattyAcid",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RSFO-SLUDGE", ProductValue = "rSFOSludge",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Non Primary: Institutional", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "SUNFLOWER FATTY ACID", ProductValue = "sunFlowerFattyAcid",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "RSFO-SLUDGE", ProductValue = "rSFOSludge",IsRegularSales = false, IsBold = false},
                        new ProductListModel { ProductName = "Loss", ProductValue = "loss", IsBold = false},
                   };

                var salesPipeLine = new List<BsonDocument>
                                                {
                                    new BsonDocument("$addFields",
                                    new BsonDocument("datefilter",
                                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    salesPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                salesPipeLine.AddRange(
                    new List<BsonDocument> {new BsonDocument("$match",
                                    new BsonDocument
                                        {
                                            { "DataJson.FormData.salesType",
                                    new BsonDocument("$ne", BsonNull.Value) },
                                            { "IsArchived", false },
                                            { "datefilter",
                                    new BsonDocument
                                            {
                                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                            } },
                                            { "$and",
                                    new BsonArray
                                            {
                                                new BsonDocument("$or",
                                                new BsonArray
                                                    {
                                                        new BsonDocument("DataJson.FormData.ImportUniqueId",
                                                        new BsonDocument("$nin",new BsonArray{BsonNull.Value,""})),
                                                        new BsonDocument("DataJson.FormData.localUniqueId",
                                                        new BsonDocument("$nin",new BsonArray{BsonNull.Value,""}))
                                                    })
                                            } }
                                        }),
                                    new BsonDocument("$group",
                                    new BsonDocument
                                        {
                                            { "_id",
                                    new BsonDocument
                                            {
                                                { "Commodity", "$DataJson.FormData.commodity1" },
                                                { "SalesType", "$DataJson.FormData.salesType" }
                                            } },
                                            { "Sales",
                                    new BsonDocument("$sum",
                                    new BsonDocument("$round",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toDecimal", "$DataJson.FormData.quantityMt2"),
                                                        4
                                                    })) }
                                        }),
                                    new BsonDocument("$project",
                                    new BsonDocument
                                        {
                                            { "_id", 0 },
                                            { "Commodity", "$_id.Commodity" },
                                            { "SalesType", "$_id.SalesType" },
                                            { "Salesvalue", "$Sales" }
                                        })
                                       });

                var unTaggedSalesPipeLine = new List<BsonDocument> {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    unTaggedSalesPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                unTaggedSalesPipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            { "$and",
                    new BsonArray
                            {
                                new BsonDocument("DataJson.FormData.ImportUniqueId",
                                new BsonDocument("$in",new BsonArray{BsonNull.Value,""})),
                                new BsonDocument("DataJson.FormData.localUniqueId",
                                new BsonDocument("$in",new BsonArray{BsonNull.Value,""}))
                            } },
                            { "DataJson.FormData.salesType",
                    new BsonDocument("$ne", BsonNull.Value) }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id",
                    new BsonDocument
                            {
                                { "Commodity", "$DataJson.FormData.commodity1" },
                                { "SalesType", "$DataJson.FormData.salesType" }
                            } },
                            { "Sales",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.quantityMt2"),
                                        4
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Commodity", "$_id.Commodity" },
                            { "SalesType", "$_id.SalesType" },
                            { "Salesvalue", "$Sales" }
                        })
                });

                var productionPipeLine = new List<BsonDocument> {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    productionPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                productionPipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "DataJson.FormData.salesType",
                    new BsonDocument("$ne", BsonNull.Value) },
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                            { "$gte",
                                new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0)
                            },
                            { "$lt",
                                new DateTime(toYear, toMonth, toDay, 23, 0, 0)
                            }
                            } },
                            { "$and",
                    new BsonArray
                            {
                                new BsonDocument("$or",
                                new BsonArray
                                    {
                                        new BsonDocument("DataJson.FormData.ImportUniqueId",
                                        new BsonDocument("$ne", BsonNull.Value)),
                                        new BsonDocument("DataJson.FormData.localUniqueId",
                                        new BsonDocument("$ne", BsonNull.Value))
                                    })
                            } }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$DataJson.FormData.salesType" },
                            { "rRBO1",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.rrboMt"),
                                        4
                                    })) },
                            { "rRBO2",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.rrboMt1"),
                                        4
                                    })) },
                            { "rRBOTrading1",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.rrboTradingMt"),
                                        4
                                    })) },
                            { "rRBOTrading2",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.rrboTradingMt1"),
                                        4
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "SalesType", "$_id" },
                            { "rRBO",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$add",
                    new BsonArray
                                    {
                                        "$rRBO1",
                                        "$rRBO2"
                                    })) },
                            { "rRBOTrading",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$add",
                    new BsonArray
                                    {
                                        "$rRBOTrading1",
                                        "$rRBOTrading2"
                                    })) }
                        })
                });

                var consumptionPipeLine = new List<BsonDocument> {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    consumptionPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                consumptionPipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "DataJson.FormData.salesType",
                    new BsonDocument("$ne", BsonNull.Value) },
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                            { "$gte",
                                new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0)
                            },
                            { "$lt",
                                new DateTime(toYear, toMonth, toDay, 23, 0, 0)
                            }
                            } },
                            { "$and",
                    new BsonArray
                            {
                                new BsonDocument("$or",
                                new BsonArray
                                    {
                                        new BsonDocument("DataJson.FormData.ImportUniqueId",
                                        new BsonDocument("$ne", BsonNull.Value)),
                                        new BsonDocument("DataJson.FormData.localUniqueId",
                                        new BsonDocument("$ne", BsonNull.Value))
                                    })
                            } }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "" },
                            { "cRBO1-Consumption",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.crboMt"),
                                        4
                                    })) },
                            { "cRBO2-Consumption",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.crboLocalMt"),
                                        4
                                    })) },
                            { "rRBOImport1-Consumption",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.rrboImportMt"),
                                        4
                                    })) },
                            { "rRBOImport2-Consumption",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.rrboLocalMt"),
                                        4
                                    })) },
                            { "loss1",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.lossMt1"),
                                        4
                                    })) },
                            { "loss2",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.lossMt6"),
                                        4
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "cRBO-Consumption",
                    new BsonDocument("$round",
                    new BsonArray
                                {
                                    new BsonDocument("$toDecimal",
                                    new BsonDocument("$add",
                                    new BsonArray
                                            {
                                                "$cRBO1-Consumption",
                                                "$cRBO2-Consumption"
                                            })),
                                    4
                                }) },
                            { "rRBOImport-Consumption",
                    new BsonDocument("$round",
                    new BsonArray
                                {
                                    new BsonDocument("$toDecimal",
                                    new BsonDocument("$add",
                                    new BsonArray
                                            {
                                                "$rRBOImport1-Consumption",
                                                "$rRBOImport2-Consumption"
                                            })),
                                    4
                                }) },
                            { "loss",
                    new BsonDocument("$round",
                    new BsonArray
                                {
                                    new BsonDocument("$toDecimal",
                                    new BsonDocument("$add",
                                    new BsonArray
                                            {
                                                "$loss1",
                                                "$loss2"
                                            })),
                                    4
                                }) }
                        })

                });

                var openingbalancePipeLine = new List<BsonDocument> {
                                                new BsonDocument("$addFields",
                                                new BsonDocument("ProductGroup",
                                                new BsonDocument("$toLower", "$DataJson.FormData.productGroup"))),
                                                new BsonDocument("$match",
                                                new BsonDocument
                                                    {
                                                        { "DataJson.FormData.openingBalanceQuantityMt",
                                                new BsonDocument("$ne", BsonNull.Value) },
                                                        { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                                        { "IsArchived", false },
                                                    }) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    openingbalancePipeLine.AddRange(new List<BsonDocument>
                    {
                         new BsonDocument("$match",
                         new BsonDocument {{ "CompanyId", loggedInContext.CompanyGuid.ToString() }, })
                    });
                }

                openingbalancePipeLine.AddRange(new List<BsonDocument>
                { new BsonDocument("$group",
                                                new BsonDocument
                                                    {
                                                        { "_id",
                                                new BsonDocument
                                                        {
                                                            { "Commodity", "$DataJson.FormData.productName" },
                                                            { "SalesType", "$DataJson.FormData.salesType" }
                                                        } },
                                                        { "OpeningBalance",
                                                new BsonDocument("$sum",
                                                new BsonDocument("$round",
                                                new BsonArray
                                                                {
                                                                    new BsonDocument("$toDecimal", "$DataJson.FormData.openingBalanceQuantityMt"),
                                                                    4
                                                                })) }
                                                    }),
                                                new BsonDocument("$project",
                                                new BsonDocument
                                                    {
                                                        { "_id", 0 },
                                                        { "Commodity", "$_id.Commodity" },
                                                        { "SalesType", "$_id.SalesType" },
                                                        { "OpeningBalance", 1 }
                                                    })
                });

                var sourceCommoditiesBalancePipeLine = new List<BsonDocument>
                {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                sourceCommoditiesBalancePipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            { "$and",
                    new BsonArray
                            {
                                new BsonDocument("$or",
                                new BsonArray
                                    {
                                        new BsonDocument("DataJson.FormData.ImportUniqueId",
                                        new BsonDocument("$nin",
                                        new BsonArray
                                                {
                                                    BsonNull.Value,
                                                    ""
                                                })),
                                        new BsonDocument("DataJson.FormData.localUniqueId",
                                        new BsonDocument("$nin",
                                        new BsonArray
                                                {
                                                    BsonNull.Value,
                                                    ""
                                                }))
                                    })
                            } },
                            { "DataJson.FormData.salesType",
                    new BsonDocument("$ne", BsonNull.Value) }
                        }),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "sourceuniqueId",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.ImportUniqueId",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.localUniqueId",
                                            ""
                                        })
                                }) },
                            { "SourceData",
                    new BsonDocument("$filter",
                    new BsonDocument
                                {
                                    { "input",
                    new BsonDocument("$objectToArray", "$DataJson.FormData") },
                                    { "as", "dataSet" },
                                    { "cond",
                    new BsonDocument("$or",
                    new BsonArray
                                        {
                                            new BsonDocument("$eq",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "selectSourceContract",
                                                                "$DataJson.FormData.ImportUniqueId",
                                                                "lookupchilddata"
                                                            }))
                                                }),
                                            new BsonDocument("$eq",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "mylookup",
                                                                "$DataJson.FormData.localUniqueId",
                                                                "lookupchilddata"
                                                            }))
                                                })
                                        }) }
                                }) }
                        })});

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                        new List<BsonDocument> {
                    new BsonDocument("$lookup",
                    new BsonDocument
                       {
                            { "from", MongoDBCollectionConstants.ContractQuantity },
                            { "localField", "sourceuniqueId" },
                            { "foreignField", "UniqueId" },
                            { "pipeline",
                    new BsonArray
                            {
                                new BsonDocument("$match",
                                new BsonDocument("CompanyId", loggedInContext.CompanyGuid.ToString() )),
                                new BsonDocument("$project",
                                new BsonDocument
                                    {
                                        { "ContractQuantity", 1 },
                                        { "_id", 0 }
                                    })
                            } },
                            { "as", "UsedQuantity" }
                       }) });
                }
                else
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                        new List<BsonDocument> {
                    new BsonDocument("$lookup",
                   new BsonDocument
                       {
                            { "from", MongoDBCollectionConstants.ContractQuantity },
                            { "localField", "sourceuniqueId" },
                            { "foreignField", "UniqueId" },
                            { "pipeline",
                    new BsonArray
                            {
                                new BsonDocument("$project",
                                new BsonDocument
                                    {
                                        { "ContractQuantity", 1 },
                                        { "_id", 0 }
                                    })
                            } },
                            { "as", "UsedQuantity" }
                       }) });
                }

                sourceCommoditiesBalancePipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$unwind", "$SourceData"),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "Commodity",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$SourceData.v.commodity1",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$SourceData.v.commodity",
                                            ""
                                        })
                                }) },
                            { "Quantity",
                    new BsonDocument("$subtract",
                    new BsonArray
                                {
                                    new BsonDocument("$add",
                                    new BsonArray
                                        {
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal", "$SourceData.v.contractQuantityMt"),
                                                    0
                                                }),
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal", "$SourceData.v.totalQuantityMt"),
                                                    0
                                                })
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            new BsonDocument("$toDecimal",
                                            new BsonDocument("$first", "$UsedQuantity.ContractQuantity")),
                                            0
                                        })
                                }) }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$sourceuniqueId" },
                            { "Commodity",
                    new BsonDocument("$first", "$Commodity") },
                            { "Quantity",
                    new BsonDocument("$first", "$Quantity") }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "UniqueId", "$_id" },
                            { "Commodity", "$Commodity" },
                            { "Quantity",
                            new BsonDocument("$round",
                            new BsonArray { new BsonDocument("$toDecimal", "$Quantity"),4 }) }
                        })
                });

                var purchageCommoditiesBalancePipeLine = new List<BsonDocument> {
                            new BsonDocument("$addFields",
                            new BsonDocument("ProductGroup",
                            new BsonDocument("$toLower", "$DataJson.FormData.productGroup1")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument>
                    {
                         new BsonDocument("$match",
                         new BsonDocument {{ "CompanyId", loggedInContext.CompanyGuid.ToString() }, })
                    });
                }

                purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "IsArchived", false },
                                    { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                    { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                    { "$and",
                            new BsonArray
                                    {
                                        new BsonDocument("$or",
                                        new BsonArray
                                            {
                                                new BsonDocument("DataJson.FormData.contractDetails",
                                                new BsonDocument("$nin",
                                                new BsonArray
                                                        {
                                                            BsonNull.Value,
                                                            ""
                                                        })),
                                                new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                new BsonDocument("$nin",
                                                new BsonArray
                                                        {
                                                            BsonNull.Value,
                                                            ""
                                                        }))
                                            })
                                    } }
                                }),
                            new BsonDocument("$addFields",
                            new BsonDocument
                                {
                                    { "sourceuniqueId",
                            new BsonDocument("$ifNull",
                            new BsonArray
                                        {
                                            "$DataJson.FormData.contractDetails",
                                            "$DataJson.FormData.uniqueIdLocal"
                                        }) },
                                    { "SourceData",
                            new BsonDocument("$filter",
                            new BsonDocument
                                        {
                                            { "input",
                            new BsonDocument("$objectToArray", "$DataJson.FormData") },
                                            { "as", "dataSet" },
                                            { "cond",
                            new BsonDocument("$eq",
                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "contractDetails",
                                                                "$DataJson.FormData.contractDetails",
                                                                "lookupchilddata"
                                                            }))
                                                }) }
                                        }) }
                                })});

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                    new BsonDocument("$lookup",
                           new BsonDocument
                               {
                                    { "from", MongoDBCollectionConstants.ContractQuantity },
                                    { "localField", "sourceuniqueId" },
                                    { "foreignField", "UniqueId" },
                                    { "pipeline",
                            new BsonArray
                                    {
                                        new BsonDocument("$match",
                                        new BsonDocument("CompanyId", loggedInContext.CompanyGuid.ToString())),
                                        new BsonDocument("$project",
                                        new BsonDocument
                                            {
                                                { "ContractQuantity", 1 },
                                                { "_id", 0 }
                                            })
                                    } },
                                    { "as", "UsedQuantity" }
                               }) });
                }
                else
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                    new BsonDocument("$lookup",
                           new BsonDocument
                               {
                                    { "from", MongoDBCollectionConstants.ContractQuantity },
                                    { "localField", "sourceuniqueId" },
                                    { "foreignField", "UniqueId" },
                                    { "pipeline",
                            new BsonArray
                                    {
                                        new BsonDocument("$project",
                                        new BsonDocument
                                            {
                                                { "ContractQuantity", 1 },
                                                { "_id", 0 }
                                            })
                                    } },
                                    { "as", "UsedQuantity" }
                               }) });
                }

                purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                            new BsonDocument("$project",
                            new BsonDocument
                                {
                                    { "_id", 0 },
                                    { "UniqueId", "$sourceuniqueId" },
                                    { "Commodity", "$DataJson.FormData.commodity" },
                                    { "Quantity",
                            new BsonDocument("$round",
                            new BsonArray
                                        {
                                new BsonDocument("$subtract",
                                    new BsonArray
                                                {
                                            new BsonDocument("$add",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$ifNull",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$toDecimal",
                                                            new BsonDocument("$first", "$SourceData.v.contractQuantity")),
                                                            0
                                                        }),
                                                    new BsonDocument("$ifNull",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$toDecimal", "$DataJson.FormData.totalQuantityMt"),
                                                            0
                                                        })
                                                }),
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal",
                                                    new BsonDocument("$first", "$UsedQuantity.ContractQuantity")),
                                                    0
                                                })
                                        }),
                                            4
                                        }) }
                                })
                });

                var importrecordcountPiprLine = new List<BsonDocument> {
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$DataJson.FormData.contractDetails")),
                            new BsonDocument("$addFields",
                            new BsonDocument("ProductGroup",
                            new BsonDocument("$toLower", "$DataJson.FormData.contractDetails.productGroup1"))),
                            new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "IsArchived", false },
                                    { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                })};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    importrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument
                                        {
                                        { "DataJson.FormData.contractDetails.contractUniqueId",
                                new BsonDocument
                                        {
                                            { "$regex", instanceDashboardInput.CompanyName.ToLower() },
                                            { "$options", "i" }
                                        } }
                    }) });
                }

                importrecordcountPiprLine.AddRange(new List<BsonDocument> {
                            new BsonDocument("$count", "Count")
                });

                var localrecordcountPiprLine = new List<BsonDocument> {
                                new BsonDocument("$unwind",
                                new BsonDocument("path", "$DataJson.FormData")),
                                new BsonDocument("$addFields",
                                new BsonDocument("ProductGroup",
                                new BsonDocument("$toLower", "$DataJson.FormData.productGroup1"))),
                                new BsonDocument("$match",
                                new BsonDocument
                                    {
                                        { "IsArchived", false },
                                        { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                    }) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    localrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument
                                        {
                                        { "DataJson.FormData.uniqueIdLocal",
                                new BsonDocument
                                        {
                                            { "$regex", instanceDashboardInput.CompanyName.ToLower() },
                                            { "$options", "i" }
                                        } }
                    }) });
                }
                else
                {
                    localrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument("$or",
                                        new BsonArray
                                                {
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument {{ "$regex", "ana-kakinada" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "umiro-india" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-krishnapatnam" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-chennai" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana+umiro" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "sg-ana" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-mumbai" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-mangalore" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-kandla" },{ "$options", "i" }}),
                                                }))
                   });
                }

                localrecordcountPiprLine.AddRange(new List<BsonDocument> {
                       new BsonDocument("$count", "Count") });

                var salesDataList = datasetCollection.Aggregate<BsonDocument>(salesPipeLine, aggregateOptions).ToList();
                var unTaggedSalesData = datasetCollection.Aggregate<BsonDocument>(unTaggedSalesPipeLine, aggregateOptions).ToList();
                var productionData = datasetCollection.Aggregate<BsonDocument>(productionPipeLine, aggregateOptions).ToList();
                var consumptionDataList = datasetCollection.Aggregate<BsonDocument>(consumptionPipeLine, aggregateOptions).FirstOrDefault();
                var openingBalanceDataList = datasetCollection.Aggregate<BsonDocument>(openingbalancePipeLine, aggregateOptions).ToList();
                var sourceOpeningBalanceDataList = datasetCollection.Aggregate<BsonDocument>(sourceCommoditiesBalancePipeLine, aggregateOptions).ToList();
                var purchageOpeningBalanceDataList = datasetCollection.Aggregate<BsonDocument>(purchageCommoditiesBalancePipeLine, aggregateOptions).ToList();
                var importIdList = datasetCollection.Aggregate<BsonDocument>(importrecordcountPiprLine, aggregateOptions).FirstOrDefault();
                var localIdList = datasetCollection.Aggregate<BsonDocument>(localrecordcountPiprLine, aggregateOptions).FirstOrDefault();

                List<InstanceLevelDashboardModel> salesList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(salesDataList);
                List<InstanceLevelDashboardModel> untaggedsalesList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(unTaggedSalesData);
                List<InstanceLevelDashboardModel> openingBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(openingBalanceDataList);
                List<InstanceLevelDashboardModel> sourceOpeningBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(sourceOpeningBalanceDataList);
                List<InstanceLevelDashboardModel> purchageOpeningBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(purchageOpeningBalanceDataList);

                List<InstanceLevelDashboardOutputModel> finalDashboardOutputModel = new List<InstanceLevelDashboardOutputModel>();
                BsonValue salesType = "", productionValue = 0, consumptionValue = 0, salesConsumptValues = 0, importIdCount = 0, localIdCount = 0;
                decimal salesQuantity = 0, sourceQuantity = 0, salesOpeningbalance = 0;

                //var finalSourcebalnce = sourceOpeningBalanceList.Concat(purchageOpeningBalanceList.Except(sourceOpeningBalanceList));
                var finalSourcebalnce = sourceOpeningBalanceList;
                Parallel.ForEach(purchageOpeningBalanceList, data =>
                {
                    if (!sourceOpeningBalanceList.Exists(x => x.UniqueId == data.UniqueId))
                        finalSourcebalnce.Add(data);
                });

                foreach (var commodity in commodityDictionary)
                {
                    InstanceLevelDashboardModel sale = salesList?.Where(x => ((x.SalesType.ToLower() == "regular"
                                           && commodity.IsRegularSales == true
                                           && x.Commodity.ToLower() == commodity.ProductName.ToLower())
                    || (x.SalesType.ToLower() == "institutional"
                    && commodity.IsRegularSales == false
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower()))).FirstOrDefault();

                    InstanceLevelDashboardModel untaggedSale = untaggedsalesList?.Where(x => ((x.SalesType.ToLower() == "regular"
                    && commodity.IsRegularSales == true
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower())
                    || (x.SalesType.ToLower() == "institutional"
                    && commodity.IsRegularSales == false
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower()))).FirstOrDefault();

                    var production = productionData?.Where(x => (((x.TryGetValue("SalesType", out salesType) ? salesType.ToString().ToLower() : "") == "regular"
                    && commodity.IsRegularSales == true)
                    || ((x.TryGetValue("SalesType", out salesType) ? salesType.ToString().ToLower() : "") == "institutional"
                    && commodity.IsRegularSales == false))).FirstOrDefault();

                    decimal? salesConsumptionValue = consumptionDataList != null ? consumptionDataList.TryGetValue(commodity.ProductValue + "-Consumption", out salesConsumptValues) ? salesConsumptValues?.AsDecimal : 0 : 0;
                    decimal? openingBalance = consumptionDataList != null ? consumptionDataList.TryGetValue(commodity.ProductValue, out salesConsumptValues) ? salesConsumptValues?.AsDecimal : 0 : 0;
                    decimal? sourceBalance = finalSourcebalnce.Where(x => x.Commodity.ToLower() == commodity.ProductName.ToLower()).Sum(x => x.Quantity);
                    salesOpeningbalance = openingBalanceList.Where(x => (x.Commodity.ToLower() == commodity.ProductName.ToLower()
                     && ((x.SalesType.ToLower() == "regular" && commodity.IsRegularSales == true) || (x.SalesType.ToLower() == "institutional" && commodity.IsRegularSales == false)))
                     ).Select(x => x.OpeningBalance).FirstOrDefault() ?? 0;

                    finalDashboardOutputModel.Add(new InstanceLevelDashboardOutputModel
                    {
                        ProductName = commodity.ProductName,
                        OpeningBalance = sourceBalance == 0 || sourceBalance == null ?
                                         (openingBalance == 0 || openingBalance == null ?
                                         salesOpeningbalance : openingBalance) : sourceBalance,
                        Consumption = (salesConsumptionValue == 0 || salesConsumptionValue == null) ?
                                       (production != null ? (production.TryGetValue(commodity.ProductValue + "-Consumption", out consumptionValue)
                                        ? consumptionValue?.AsDecimal : 0) : 0) : salesConsumptionValue,
                        Production = production != null ? (production.TryGetValue(commodity.ProductValue, out productionValue) ? productionValue?.AsDecimal : 0) : 0,
                        Sales = sale?.Salesvalue,
                        UnTaggedSales = untaggedSale?.Salesvalue,
                        IsBold = commodity.IsBold,
                    });

                    sourceQuantity = sourceQuantity + (sourceBalance ?? 0);
                    salesQuantity = salesQuantity + (sale?.Salesvalue ?? 0) + (untaggedSale?.Salesvalue ?? 0);
                    sale = null;
                    untaggedSale = null;
                    salesType = "";
                    production = null;
                    productionValue = null;
                    consumptionValue = null;
                    salesConsumptionValue = null;
                    openingBalance = 0;
                    sourceBalance = 0;
                }
                InstanceLevelPositionDashboardOutputModel finalInstanceModel = new InstanceLevelPositionDashboardOutputModel();
                finalInstanceModel.GridData = finalDashboardOutputModel;
                finalInstanceModel.TotalSourceQuantity = sourceQuantity;
                finalInstanceModel.TotalSalesQuantity = salesQuantity;
                finalInstanceModel.TotalImportContracts = importIdList == null ? 0 : importIdList.TryGetValue("Count", out importIdCount) ? importIdCount.AsInt32 : 0;
                finalInstanceModel.TotalLocalContracts = localIdList == null ? 0 : localIdList.TryGetValue("Count", out localIdCount) ? localIdCount.AsInt32 : 0;

                return finalInstanceModel;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetRiceBranInstanceLevelDashboard", "DataSetRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return new InstanceLevelPositionDashboardOutputModel();
            }
        }
        public InstanceLevelPositionDashboardOutputModel GetSoyaBeanInstanceLevelDashboard(DashboardInputModel instanceDashboardInput, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetSoyaBeanInstanceLevelDashboard", "DataSetRepository"));
                IMongoCollection<BsonDocument> datasetCollection = GetMongoCollectionObject<BsonDocument>(MongoDBCollectionConstants.DataSet);
                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };

                DateTime fromDate = instanceDashboardInput.FromDate ?? DateTime.UtcNow;
                DateTime toDate = instanceDashboardInput.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;
                string formId = GetSalesFormId(instanceDashboardInput.CompanyName, loggedInContext);

                var commodityDictionary = new List<ProductListModel>();

                commodityDictionary = new List<ProductListModel>
                   {
                        new ProductListModel { ProductName = "Source Import", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "CDSBO", ProductValue = "cDSBO",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RSBO-Import", ProductValue = "rSBOImport",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Source Local", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "CDSBO", ProductValue = "cDSBO",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RSBO-Import", ProductValue = "rSBOImport",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Primary: Regular", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "RSBO", ProductValue = "rSBO",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RSBO-Trading", ProductValue = "rSBOTrading",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Primary: Institutional", ProductValue = "",IsRegularSales = false, IsBold = true},
                        new ProductListModel { ProductName = "RSBO", ProductValue = "rSBO",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "RSBO-Trading", ProductValue = "rSBOTrading",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Non Primary: Regular", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "Soy Acid Oil", ProductValue = "soyAcidOil",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Non Primary: Institutional", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "Soy Acid Oil", ProductValue = "soyAcidOil",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Loss", ProductValue = "loss", IsBold = false},
                   };

                var salesPipeLine = new List<BsonDocument>
                                                {
                                    new BsonDocument("$addFields",
                                    new BsonDocument("datefilter",
                                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    salesPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                salesPipeLine.AddRange(
                    new List<BsonDocument> {new BsonDocument("$match",
                                    new BsonDocument
                                        {
                                            { "DataJson.FormData.salesType",
                                    new BsonDocument("$ne", BsonNull.Value) },
                                            { "IsArchived", false },
                                            { "datefilter",
                                    new BsonDocument
                                            {
                                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                            } },
                                            { "$and",
                                    new BsonArray
                                            {
                                                new BsonDocument("$or",
                                                new BsonArray
                                                    {
                                                        new BsonDocument("DataJson.FormData.ImportUniqueId",
                                                        new BsonDocument("$nin",new BsonArray{BsonNull.Value,""})),
                                                        new BsonDocument("DataJson.FormData.localUniqueId",
                                                        new BsonDocument("$nin",new BsonArray{BsonNull.Value,""}))
                                                    })
                                            } }
                                        }),
                                    new BsonDocument("$group",
                                    new BsonDocument
                                        {
                                            { "_id",
                                    new BsonDocument
                                            {
                                                { "Commodity", "$DataJson.FormData.commodity1" },
                                                { "SalesType", "$DataJson.FormData.salesType" }
                                            } },
                                            { "Sales",
                                    new BsonDocument("$sum",
                                    new BsonDocument("$round",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toDecimal", "$DataJson.FormData.quantityMt2"),
                                                        4
                                                    })) }
                                        }),
                                    new BsonDocument("$project",
                                    new BsonDocument
                                        {
                                            { "_id", 0 },
                                            { "Commodity", "$_id.Commodity" },
                                            { "SalesType", "$_id.SalesType" },
                                            { "Salesvalue", "$Sales" }
                                        })
                                       });

                var unTaggedSalesPipeLine = new List<BsonDocument> {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    unTaggedSalesPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                unTaggedSalesPipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            { "$and",
                    new BsonArray
                            {
                                new BsonDocument("DataJson.FormData.ImportUniqueId",
                                new BsonDocument("$in",new BsonArray{BsonNull.Value,""})),
                                new BsonDocument("DataJson.FormData.localUniqueId",
                                new BsonDocument("$in",new BsonArray{BsonNull.Value,""}))
                            } },
                            { "DataJson.FormData.salesType",
                    new BsonDocument("$ne", BsonNull.Value) }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id",
                    new BsonDocument
                            {
                                { "Commodity", "$DataJson.FormData.commodity1" },
                                { "SalesType", "$DataJson.FormData.salesType" }
                            } },
                            { "Sales",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.quantityMt2"),
                                        4
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Commodity", "$_id.Commodity" },
                            { "SalesType", "$_id.SalesType" },
                            { "Salesvalue", "$Sales" }
                        })
                });

                var productionPipeLine = new List<BsonDocument> {
                new BsonDocument("$addFields",
                new BsonDocument("datefilter",
                new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    productionPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                productionPipeLine.AddRange(
                    new List<BsonDocument> {
                new BsonDocument("$match",
                new BsonDocument
                    {
                        { "DataJson.FormData.salesType",
                new BsonDocument("$ne", BsonNull.Value) },
                        { "IsArchived", false },
                        { "datefilter",
                new BsonDocument
                        {
                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                        { "$and",
                new BsonArray
                        {
                            new BsonDocument("$or",
                            new BsonArray
                                {
                                    new BsonDocument("DataJson.FormData.ImportUniqueId",
                                    new BsonDocument("$ne", BsonNull.Value)),
                                    new BsonDocument("DataJson.FormData.localUniqueId",
                                    new BsonDocument("$ne", BsonNull.Value))
                                })
                        } }
                    }),
                new BsonDocument("$group",
                new BsonDocument
                    {
                        { "_id", "$DataJson.FormData.salesType" },
                        { "rSBO1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray
                                {
                                    new BsonDocument("$toDecimal", "$DataJson.FormData.rsboMt"),
                                    4
                                })) },
                        { "rSBO2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray
                                {
                                    new BsonDocument("$toDecimal", "$DataJson.FormData.rsboMt1"),
                                    4
                                })) },
                        { "rSBOTrading1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray
                                {
                                    new BsonDocument("$toDecimal", "$DataJson.FormData.rsboTradingMt"),
                                    4
                                })) },
                        { "rSBOTrading2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray
                                {
                                    new BsonDocument("$toDecimal", "$DataJson.FormData.rsboTradingMt1"),
                                    4
                                })) }
                    }),
                new BsonDocument("$project",
                new BsonDocument
                    {
                        { "_id", 0 },
                        { "SalesType", "$_id" },
                        { "rSBO",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                                {
                                    "$rSBO1",
                                    "$rSBO2"
                                })) },
                        { "rSBOTrading",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                                {
                                    "$rSBOTrading1",
                                    "$rSBOTrading2"
                                })) }
                    })
                });

                var consumptionPipeLine = new List<BsonDocument> {
                new BsonDocument("$addFields",
                new BsonDocument("datefilter",
                new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    consumptionPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                consumptionPipeLine.AddRange(
                    new List<BsonDocument> {
                new BsonDocument("$match",
                new BsonDocument
                    {
                        { "DataJson.FormData.salesType",
                new BsonDocument("$ne", BsonNull.Value) },
                        { "IsArchived", false },
                        { "datefilter",
                new BsonDocument
                        {
                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                        { "$and",
                new BsonArray
                        {
                            new BsonDocument("$or",
                            new BsonArray
                                {
                                    new BsonDocument("DataJson.FormData.ImportUniqueId",
                                    new BsonDocument("$ne", BsonNull.Value)),
                                    new BsonDocument("DataJson.FormData.localUniqueId",
                                    new BsonDocument("$ne", BsonNull.Value))
                                })
                        } }
                    }),
                new BsonDocument("$group",
                new BsonDocument
                    {
                        { "_id", "" },
                        { "cDSBO1-Consumption",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray
                                {
                                    new BsonDocument("$toDecimal", "$DataJson.FormData.cdsboMt"),
                                    4
                                })) },
                        { "cDSBO2-Consumption",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray
                                {
                                    new BsonDocument("$toDecimal", "$DataJson.FormData.cdsboLocalMt"),
                                    4
                                })) },
                        { "rSBOImport1-Consumption",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray
                                {
                                    new BsonDocument("$toDecimal", "$DataJson.FormData.rsboImportMt"),
                                    4
                                })) },
                        { "rSBOImport2-Consumption",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray
                                {
                                    new BsonDocument("$toDecimal", "$DataJson.FormData.rsboLocalMt"),
                                    4
                                })) },
                        { "loss1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray
                                {
                                    new BsonDocument("$toDecimal", "$DataJson.FormData.lossMt3"),
                                    4
                                })) },
                        { "loss2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray
                                {
                                    new BsonDocument("$toDecimal", "$DataJson.FormData.lossMt7"),
                                    4
                                })) }
                    }),
                new BsonDocument("$project",
                new BsonDocument
                    {
                        { "_id", 0 },
                        { "cDSBO-Consumption",
                new BsonDocument("$round",
                new BsonArray
                            {
                                new BsonDocument("$toDecimal",
                                new BsonDocument("$add",
                                new BsonArray
                                        {
                                            "$cDSBO1-Consumption",
                                            "$cDSBO2-Consumption"
                                        })),
                                4
                            }) },
                        { "rSBOImport-Consumption",
                new BsonDocument("$round",
                new BsonArray
                            {
                                new BsonDocument("$toDecimal",
                                new BsonDocument("$add",
                                new BsonArray
                                        {
                                            "$rSBOImport1-Consumption",
                                            "$rSBOImport2-Consumption"
                                        })),
                                4
                            }) },
                        { "loss",
                new BsonDocument("$round",
                new BsonArray
                            {
                                new BsonDocument("$toDecimal",
                                new BsonDocument("$add",
                                new BsonArray
                                        {
                                            "$loss1",
                                            "$loss2"
                                        })),
                                4
                            }) }
                    })
                });

                var openingbalancePipeLine = new List<BsonDocument> {
                                                new BsonDocument("$addFields",
                                                new BsonDocument("ProductGroup",
                                                new BsonDocument("$toLower", "$DataJson.FormData.productGroup"))),
                                                new BsonDocument("$match",
                                                new BsonDocument
                                                    {
                                                        { "DataJson.FormData.openingBalanceQuantityMt",
                                                new BsonDocument("$ne", BsonNull.Value) },
                                                        { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                                        { "IsArchived", false },
                                                    }) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    openingbalancePipeLine.AddRange(new List<BsonDocument>
                    {
                         new BsonDocument("$match",
                         new BsonDocument {{ "CompanyId", loggedInContext.CompanyGuid.ToString() }, })
                    });
                }

                openingbalancePipeLine.AddRange(new List<BsonDocument>
                { new BsonDocument("$group",
                                                new BsonDocument
                                                    {
                                                        { "_id",
                                                new BsonDocument
                                                        {
                                                            { "Commodity", "$DataJson.FormData.productName" },
                                                            { "SalesType", "$DataJson.FormData.salesType" }
                                                        } },
                                                        { "OpeningBalance",
                                                new BsonDocument("$sum",
                                                new BsonDocument("$round",
                                                new BsonArray
                                                                {
                                                                    new BsonDocument("$toDecimal", "$DataJson.FormData.openingBalanceQuantityMt"),
                                                                    4
                                                                })) }
                                                    }),
                                                new BsonDocument("$project",
                                                new BsonDocument
                                                    {
                                                        { "_id", 0 },
                                                        { "Commodity", "$_id.Commodity" },
                                                        { "SalesType", "$_id.SalesType" },
                                                        { "OpeningBalance", 1 }
                                                    })
                });

                var sourceCommoditiesBalancePipeLine = new List<BsonDocument>
                {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                sourceCommoditiesBalancePipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            { "$and",
                    new BsonArray
                            {
                                new BsonDocument("$or",
                                new BsonArray
                                    {
                                        new BsonDocument("DataJson.FormData.ImportUniqueId",
                                        new BsonDocument("$nin",
                                        new BsonArray
                                                {
                                                    BsonNull.Value,
                                                    ""
                                                })),
                                        new BsonDocument("DataJson.FormData.localUniqueId",
                                        new BsonDocument("$nin",
                                        new BsonArray
                                                {
                                                    BsonNull.Value,
                                                    ""
                                                }))
                                    })
                            } },
                            { "DataJson.FormData.salesType",
                    new BsonDocument("$ne", BsonNull.Value) }
                        }),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "sourceuniqueId",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.ImportUniqueId",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.localUniqueId",
                                            ""
                                        })
                                }) },
                            { "SourceData",
                    new BsonDocument("$filter",
                    new BsonDocument
                                {
                                    { "input",
                    new BsonDocument("$objectToArray", "$DataJson.FormData") },
                                    { "as", "dataSet" },
                                    { "cond",
                    new BsonDocument("$or",
                    new BsonArray
                                        {
                                            new BsonDocument("$eq",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "selectSourceContract",
                                                                "$DataJson.FormData.ImportUniqueId",
                                                                "lookupchilddata"
                                                            }))
                                                }),
                                            new BsonDocument("$eq",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "mylookup",
                                                                "$DataJson.FormData.localUniqueId",
                                                                "lookupchilddata"
                                                            }))
                                                })
                                        }) }
                                }) }
                        })});

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                        new List<BsonDocument> {
                    new BsonDocument("$lookup",
                    new BsonDocument
                       {
                            { "from", MongoDBCollectionConstants.ContractQuantity },
                            { "localField", "sourceuniqueId" },
                            { "foreignField", "UniqueId" },
                            { "pipeline",
                    new BsonArray
                            {
                                new BsonDocument("$match",
                                new BsonDocument("CompanyId", loggedInContext.CompanyGuid.ToString() )),
                                new BsonDocument("$project",
                                new BsonDocument
                                    {
                                        { "ContractQuantity", 1 },
                                        { "_id", 0 }
                                    })
                            } },
                            { "as", "UsedQuantity" }
                       }) });
                }
                else
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                        new List<BsonDocument> {
                    new BsonDocument("$lookup",
                   new BsonDocument
                       {
                            { "from", MongoDBCollectionConstants.ContractQuantity },
                            { "localField", "sourceuniqueId" },
                            { "foreignField", "UniqueId" },
                            { "pipeline",
                    new BsonArray
                            {
                                new BsonDocument("$project",
                                new BsonDocument
                                    {
                                        { "ContractQuantity", 1 },
                                        { "_id", 0 }
                                    })
                            } },
                            { "as", "UsedQuantity" }
                       }) });
                }

                sourceCommoditiesBalancePipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$unwind", "$SourceData"),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "Commodity",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$SourceData.v.commodity1",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$SourceData.v.commodity",
                                            ""
                                        })
                                }) },
                            { "Quantity",
                    new BsonDocument("$subtract",
                    new BsonArray
                                {
                                    new BsonDocument("$add",
                                    new BsonArray
                                        {
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal", "$SourceData.v.contractQuantityMt"),
                                                    0
                                                }),
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal", "$SourceData.v.totalQuantityMt"),
                                                    0
                                                })
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            new BsonDocument("$toDecimal",
                                            new BsonDocument("$first", "$UsedQuantity.ContractQuantity")),
                                            0
                                        })
                                }) }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$sourceuniqueId" },
                            { "Commodity",
                    new BsonDocument("$first", "$Commodity") },
                            { "Quantity",
                    new BsonDocument("$first", "$Quantity") }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "UniqueId", "$_id" },
                            { "Commodity", "$Commodity" },
                            { "Quantity",
                            new BsonDocument("$round",
                            new BsonArray { new BsonDocument("$toDecimal", "$Quantity"),4 }) }
                        })
                });

                var purchageCommoditiesBalancePipeLine = new List<BsonDocument> {
                            new BsonDocument("$addFields",
                            new BsonDocument("ProductGroup",
                            new BsonDocument("$toLower", "$DataJson.FormData.productGroup1")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument>
                    {
                         new BsonDocument("$match",
                         new BsonDocument {{ "CompanyId", loggedInContext.CompanyGuid.ToString() }, })
                    });
                }

                purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "IsArchived", false },
                                    { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                    { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                    { "$and",
                            new BsonArray
                                    {
                                        new BsonDocument("$or",
                                        new BsonArray
                                            {
                                                new BsonDocument("DataJson.FormData.contractDetails",
                                                new BsonDocument("$nin",
                                                new BsonArray
                                                        {
                                                            BsonNull.Value,
                                                            ""
                                                        })),
                                                new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                new BsonDocument("$nin",
                                                new BsonArray
                                                        {
                                                            BsonNull.Value,
                                                            ""
                                                        }))
                                            })
                                    } }
                                }),
                            new BsonDocument("$addFields",
                            new BsonDocument
                                {
                                    { "sourceuniqueId",
                            new BsonDocument("$ifNull",
                            new BsonArray
                                        {
                                            "$DataJson.FormData.contractDetails",
                                            "$DataJson.FormData.uniqueIdLocal"
                                        }) },
                                    { "SourceData",
                            new BsonDocument("$filter",
                            new BsonDocument
                                        {
                                            { "input",
                            new BsonDocument("$objectToArray", "$DataJson.FormData") },
                                            { "as", "dataSet" },
                                            { "cond",
                            new BsonDocument("$eq",
                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "contractDetails",
                                                                "$DataJson.FormData.contractDetails",
                                                                "lookupchilddata"
                                                            }))
                                                }) }
                                        }) }
                                })});

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                    new BsonDocument("$lookup",
                           new BsonDocument
                               {
                                    { "from", MongoDBCollectionConstants.ContractQuantity },
                                    { "localField", "sourceuniqueId" },
                                    { "foreignField", "UniqueId" },
                                    { "pipeline",
                            new BsonArray
                                    {
                                        new BsonDocument("$match",
                                        new BsonDocument("CompanyId", loggedInContext.CompanyGuid.ToString())),
                                        new BsonDocument("$project",
                                        new BsonDocument
                                            {
                                                { "ContractQuantity", 1 },
                                                { "_id", 0 }
                                            })
                                    } },
                                    { "as", "UsedQuantity" }
                               }) });
                }
                else
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                    new BsonDocument("$lookup",
                           new BsonDocument
                               {
                                    { "from", MongoDBCollectionConstants.ContractQuantity },
                                    { "localField", "sourceuniqueId" },
                                    { "foreignField", "UniqueId" },
                                    { "pipeline",
                            new BsonArray
                                    {
                                        new BsonDocument("$project",
                                        new BsonDocument
                                            {
                                                { "ContractQuantity", 1 },
                                                { "_id", 0 }
                                            })
                                    } },
                                    { "as", "UsedQuantity" }
                               }) });
                }

                purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                            new BsonDocument("$project",
                            new BsonDocument
                                {
                                    { "_id", 0 },
                                    { "UniqueId", "$sourceuniqueId" },
                                    { "Commodity", "$DataJson.FormData.commodity" },
                                    { "Quantity",
                            new BsonDocument("$round",
                            new BsonArray
                                        {
                                new BsonDocument("$subtract",
                                    new BsonArray
                                                {
                                            new BsonDocument("$add",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$ifNull",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$toDecimal",
                                                            new BsonDocument("$first", "$SourceData.v.contractQuantity")),
                                                            0
                                                        }),
                                                    new BsonDocument("$ifNull",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$toDecimal", "$DataJson.FormData.totalQuantityMt"),
                                                            0
                                                        })
                                                }),
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal",
                                                    new BsonDocument("$first", "$UsedQuantity.ContractQuantity")),
                                                    0
                                                })
                                        }),
                                            4
                                        }) }
                                })
                });

                var importrecordcountPiprLine = new List<BsonDocument> {
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$DataJson.FormData.contractDetails")),
                            new BsonDocument("$addFields",
                            new BsonDocument("ProductGroup",
                            new BsonDocument("$toLower", "$DataJson.FormData.contractDetails.productGroup1"))),
                            new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "IsArchived", false },
                                    { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                })};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    importrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument
                                        {
                                        { "DataJson.FormData.contractDetails.contractUniqueId",
                                new BsonDocument
                                        {
                                            { "$regex", instanceDashboardInput.CompanyName.ToLower() },
                                            { "$options", "i" }
                                        } }
                    }) });
                }

                importrecordcountPiprLine.AddRange(new List<BsonDocument> {
                            new BsonDocument("$count", "Count")
                });

                var localrecordcountPiprLine = new List<BsonDocument> {
                                new BsonDocument("$unwind",
                                new BsonDocument("path", "$DataJson.FormData")),
                                new BsonDocument("$addFields",
                                new BsonDocument("ProductGroup",
                                new BsonDocument("$toLower", "$DataJson.FormData.productGroup1"))),
                                new BsonDocument("$match",
                                new BsonDocument
                                    {
                                        { "IsArchived", false },
                                        { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                    }) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    localrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument
                                        {
                                        { "DataJson.FormData.uniqueIdLocal",
                                new BsonDocument
                                        {
                                            { "$regex", instanceDashboardInput.CompanyName.ToLower() },
                                            { "$options", "i" }
                                        } }
                    }) });
                }
                else
                {
                    localrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument("$or",
                                        new BsonArray
                                                {
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument {{ "$regex", "ana-kakinada" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "umiro-india" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-krishnapatnam" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-chennai" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana+umiro" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "sg-ana" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-mumbai" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-mangalore" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-kandla" },{ "$options", "i" }}),
                                                }))
                   });
                }

                localrecordcountPiprLine.AddRange(new List<BsonDocument> {
                       new BsonDocument("$count", "Count") });

                var salesDataList = datasetCollection.Aggregate<BsonDocument>(salesPipeLine, aggregateOptions).ToList();
                var unTaggedSalesData = datasetCollection.Aggregate<BsonDocument>(unTaggedSalesPipeLine, aggregateOptions).ToList();
                var productionData = datasetCollection.Aggregate<BsonDocument>(productionPipeLine, aggregateOptions).ToList();
                var consumptionDataList = datasetCollection.Aggregate<BsonDocument>(consumptionPipeLine, aggregateOptions).FirstOrDefault();
                var openingBalanceDataList = datasetCollection.Aggregate<BsonDocument>(openingbalancePipeLine, aggregateOptions).ToList();
                var sourceOpeningBalanceDataList = datasetCollection.Aggregate<BsonDocument>(sourceCommoditiesBalancePipeLine, aggregateOptions).ToList();
                var purchageOpeningBalanceDataList = datasetCollection.Aggregate<BsonDocument>(purchageCommoditiesBalancePipeLine, aggregateOptions).ToList();
                var importIdList = datasetCollection.Aggregate<BsonDocument>(importrecordcountPiprLine, aggregateOptions).FirstOrDefault();
                var localIdList = datasetCollection.Aggregate<BsonDocument>(localrecordcountPiprLine, aggregateOptions).FirstOrDefault();

                List<InstanceLevelDashboardModel> salesList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(salesDataList);
                List<InstanceLevelDashboardModel> untaggedsalesList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(unTaggedSalesData);
                List<InstanceLevelDashboardModel> openingBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(openingBalanceDataList);
                List<InstanceLevelDashboardModel> sourceOpeningBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(sourceOpeningBalanceDataList);
                List<InstanceLevelDashboardModel> purchageOpeningBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(purchageOpeningBalanceDataList);

                List<InstanceLevelDashboardOutputModel> finalDashboardOutputModel = new List<InstanceLevelDashboardOutputModel>();
                BsonValue salesType = "", productionValue = 0, consumptionValue = 0, salesConsumptValues = 0, importIdCount = 0, localIdCount = 0;
                decimal salesQuantity = 0, sourceQuantity = 0, salesOpeningbalance = 0;

                var finalSourcebalnce = sourceOpeningBalanceList;
                Parallel.ForEach(purchageOpeningBalanceList, data =>
                {
                    if (!sourceOpeningBalanceList.Exists(x => x.UniqueId == data.UniqueId))
                        finalSourcebalnce.Add(data);
                });

                foreach (var commodity in commodityDictionary)
                {
                    InstanceLevelDashboardModel sale = salesList?.Where(x => ((x.SalesType.ToLower() == "regular"
                                           && commodity.IsRegularSales == true
                                           && x.Commodity.ToLower() == commodity.ProductName.ToLower())
                    || (x.SalesType.ToLower() == "institutional"
                    && commodity.IsRegularSales == false
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower()))).FirstOrDefault();

                    InstanceLevelDashboardModel untaggedSale = untaggedsalesList?.Where(x => ((x.SalesType.ToLower() == "regular"
                    && commodity.IsRegularSales == true
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower())
                    || (x.SalesType.ToLower() == "institutional"
                    && commodity.IsRegularSales == false
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower()))).FirstOrDefault();

                    var production = productionData?.Where(x => (((x.TryGetValue("SalesType", out salesType) ? salesType.ToString().ToLower() : "") == "regular"
                    && commodity.IsRegularSales == true)
                    || ((x.TryGetValue("SalesType", out salesType) ? salesType.ToString().ToLower() : "") == "institutional"
                    && commodity.IsRegularSales == false))).FirstOrDefault();

                    decimal? salesConsumptionValue = consumptionDataList != null ? consumptionDataList.TryGetValue(commodity.ProductValue + "-Consumption", out salesConsumptValues) ? salesConsumptValues?.AsDecimal : 0 : 0;
                    decimal? openingBalance = consumptionDataList != null ? consumptionDataList.TryGetValue(commodity.ProductValue, out salesConsumptValues) ? salesConsumptValues?.AsDecimal : 0 : 0;
                    decimal? sourceBalance = finalSourcebalnce.Where(x => x.Commodity.ToLower() == commodity.ProductName.ToLower()).Sum(x => x.Quantity);
                    salesOpeningbalance = openingBalanceList.Where(x => (x.Commodity.ToLower() == commodity.ProductName.ToLower()
                     && ((x.SalesType.ToLower() == "regular" && commodity.IsRegularSales == true) || (x.SalesType.ToLower() == "institutional" && commodity.IsRegularSales == false)))
                     ).Select(x => x.OpeningBalance).FirstOrDefault() ?? 0;

                    finalDashboardOutputModel.Add(new InstanceLevelDashboardOutputModel
                    {
                        ProductName = commodity.ProductName,
                        OpeningBalance = sourceBalance == 0 || sourceBalance == null ?
                                         (openingBalance == 0 || openingBalance == null ?
                                         salesOpeningbalance : openingBalance) : sourceBalance,
                        Consumption = (salesConsumptionValue == 0 || salesConsumptionValue == null) ?
                                       (production != null ? (production.TryGetValue(commodity.ProductValue + "-Consumption", out consumptionValue)
                                        ? consumptionValue?.AsDecimal : 0) : 0) : salesConsumptionValue,
                        Production = production != null ? (production.TryGetValue(commodity.ProductValue, out productionValue) ? productionValue?.AsDecimal : 0) : 0,
                        Sales = sale?.Salesvalue,
                        UnTaggedSales = untaggedSale?.Salesvalue,
                        IsBold = commodity.IsBold,
                    });

                    sourceQuantity = sourceQuantity + (sourceBalance ?? 0);
                    salesQuantity = salesQuantity + (sale?.Salesvalue ?? 0) + (untaggedSale?.Salesvalue ?? 0);
                    sale = null;
                    untaggedSale = null;
                    salesType = "";
                    production = null;
                    productionValue = null;
                    consumptionValue = null;
                    salesConsumptionValue = null;
                    openingBalance = 0;
                    sourceBalance = 0;
                }
                InstanceLevelPositionDashboardOutputModel finalInstanceModel = new InstanceLevelPositionDashboardOutputModel();
                finalInstanceModel.GridData = finalDashboardOutputModel;
                finalInstanceModel.TotalSourceQuantity = sourceQuantity;
                finalInstanceModel.TotalSalesQuantity = salesQuantity;
                finalInstanceModel.TotalImportContracts = importIdList == null ? 0 : importIdList.TryGetValue("Count", out importIdCount) ? importIdCount.AsInt32 : 0;
                finalInstanceModel.TotalLocalContracts = localIdList == null ? 0 : localIdList.TryGetValue("Count", out localIdCount) ? localIdCount.AsInt32 : 0;

                return finalInstanceModel;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetSoyaBeanInstanceLevelDashboard", "DataSetRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return new InstanceLevelPositionDashboardOutputModel();
            }
        }
        public InstanceLevelPositionDashboardOutputModel GetGlycerinInstanceLevelDashboard(DashboardInputModel instanceDashboardInput, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetGlycerinInstanceLevelDashboard", "DataSetRepository"));
                IMongoCollection<BsonDocument> datasetCollection = GetMongoCollectionObject<BsonDocument>(MongoDBCollectionConstants.DataSet);
                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };

                DateTime fromDate = instanceDashboardInput.FromDate ?? DateTime.UtcNow;
                DateTime toDate = instanceDashboardInput.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;
                string formId = GetSalesFormId(instanceDashboardInput.CompanyName, loggedInContext);

                var commodityDictionary = new List<ProductListModel>();

                commodityDictionary = new List<ProductListModel>
                    {
                        new ProductListModel { ProductName = "Source Import & Local", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "Crude Glycerin", ProductValue = "crudeGlycerin",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Refined Glycerin-Import", ProductValue = "refinedGlycerinImport",IsRegularSales = true, IsBold = false},
                        //new ProductListModel { ProductName = "Source Local", ProductValue = "",IsRegularSales = true, IsBold = true},
                        //new ProductListModel { ProductName = "Crude Glycerin", ProductValue = "crudeGlycerin",IsRegularSales = true, IsBold = false},
                        //new ProductListModel { ProductName = "Refined Glycerin-Import", ProductValue = "refinedGlycerinImport",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Primary: Regular", ProductValue = "",IsRegularSales = true, IsBold = true},
                        new ProductListModel { ProductName = "Refined Glycerin", ProductValue = "refinedGlycerin",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Refined Glycerin-Trading", ProductValue = "RefinedGlycerinTrading",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Primary: Institutional", ProductValue = "",IsRegularSales = false, IsBold = true},
                        new ProductListModel { ProductName = "Refined Glycerin", ProductValue = "refinedGlycerin",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Refined Glycerin-Trading", ProductValue = "RefinedGlycerinTrading",IsRegularSales = true, IsBold = false},
                        new ProductListModel { ProductName = "Loss", ProductValue = "loss", IsBold = false},
                    };

                var salesPipeLine = new List<BsonDocument>
                                                {
                                    new BsonDocument("$addFields",
                                    new BsonDocument("datefilter",
                                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate"))) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    salesPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                salesPipeLine.AddRange(
                    new List<BsonDocument> {new BsonDocument("$match",
                                    new BsonDocument
                                        {
                                            { "DataJson.FormData.salesType",
                                    new BsonDocument("$ne", BsonNull.Value) },
                                            { "IsArchived", false },
                                            { "datefilter",
                                    new BsonDocument
                                            {
                                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                            } },
                                            { "$and",
                                    new BsonArray
                                            {
                                                new BsonDocument("$or",
                                                new BsonArray
                                                    {
                                                        new BsonDocument("DataJson.FormData.ImportUniqueId",
                                                        new BsonDocument("$nin",new BsonArray{BsonNull.Value,""})),
                                                        new BsonDocument("DataJson.FormData.localUniqueId",
                                                        new BsonDocument("$nin",new BsonArray{BsonNull.Value,""}))
                                                    })
                                            } }
                                        }),
                                    new BsonDocument("$group",
                                    new BsonDocument
                                        {
                                            { "_id",
                                    new BsonDocument
                                            {
                                                { "Commodity", "$DataJson.FormData.commodity1" },
                                                { "SalesType", "$DataJson.FormData.salesType" }
                                            } },
                                            { "Sales",
                                    new BsonDocument("$sum",
                                    new BsonDocument("$round",
                                    new BsonArray
                                                    {
                                                        new BsonDocument("$toDecimal", "$DataJson.FormData.quantityMt2"),
                                                        4
                                                    })) }
                                        }),
                                    new BsonDocument("$project",
                                    new BsonDocument
                                        {
                                            { "_id", 0 },
                                            { "Commodity", "$_id.Commodity" },
                                            { "SalesType", "$_id.SalesType" },
                                            { "Salesvalue", "$Sales" }
                                        })
                                       });

                var unTaggedSalesPipeLine = new List<BsonDocument> {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    unTaggedSalesPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                unTaggedSalesPipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            { "$and",
                    new BsonArray
                            {
                                new BsonDocument("DataJson.FormData.ImportUniqueId",
                                new BsonDocument("$in",new BsonArray{BsonNull.Value,""})),
                                new BsonDocument("DataJson.FormData.localUniqueId",
                                new BsonDocument("$in",new BsonArray{BsonNull.Value,""}))
                            } },
                            { "DataJson.FormData.salesType",
                    new BsonDocument("$ne", BsonNull.Value) }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id",
                    new BsonDocument
                            {
                                { "Commodity", "$DataJson.FormData.commodity1" },
                                { "SalesType", "$DataJson.FormData.salesType" }
                            } },
                            { "Sales",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.quantityMt2"),
                                        4
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Commodity", "$_id.Commodity" },
                            { "SalesType", "$_id.SalesType" },
                            { "Salesvalue", "$Sales" }
                        })
                });

                var productionPipeLine = new List<BsonDocument> {
                new BsonDocument("$addFields",
                new BsonDocument("datefilter",
                new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    productionPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                productionPipeLine.AddRange(
                    new List<BsonDocument> {
                new BsonDocument("$match",
                new BsonDocument
                    {
                        { "DataJson.FormData.salesType",
                new BsonDocument("$ne", BsonNull.Value) },
                        { "IsArchived", false },
                        { "datefilter",
                new BsonDocument
                        {
                            { "$gte",
                             new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                            { "$lt",
                             new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                        } },
                        { "$and",
                new BsonArray
                        {
                            new BsonDocument("$or",
                            new BsonArray
                                {
                                    new BsonDocument("DataJson.FormData.ImportUniqueId",
                                    new BsonDocument("$ne", BsonNull.Value)),
                                    new BsonDocument("DataJson.FormData.localUniqueId",
                                    new BsonDocument("$ne", BsonNull.Value))
                                })
                        } }
                    }),
                new BsonDocument("$group",
                new BsonDocument
                    {
                        { "_id", "$DataJson.FormData.salesType" },
                        { "refinedGlycerin1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.refinedGycerinMt"),4})) },
                        { "refinedGlycerin2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.refinedGlycerinMt"),4})) },
                        { "refinedGlycerinTrading1",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.refinedGlycerinTradingMt"),4})) },
                        { "refinedGlycerinTrading2",
                new BsonDocument("$sum",
                new BsonDocument("$round",
                new BsonArray{new BsonDocument("$toDecimal", "$DataJson.FormData.refinedGlycerinTradingMt1"),4})) },
                    }),
                new BsonDocument("$project",
                new BsonDocument
                    {
                        { "_id", 0 },
                        { "SalesType", "$_id" },
                        { "refinedGlycerin",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$refinedGlycerin1",
                                "$refinedGlycerin2"
                            })) },
                        { "refinedGlycerinTrading",
                new BsonDocument("$toDecimal",
                new BsonDocument("$add",
                new BsonArray
                            {
                                "$refinedGlycerinTrading1",
                                "$refinedGlycerinTrading2"
                            })) },
                    })
                });

                var consumptionPipeLine = new List<BsonDocument> {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    consumptionPipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                consumptionPipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "DataJson.FormData.salesType",
                    new BsonDocument("$ne", BsonNull.Value) },
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                               { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            { "$and",
                    new BsonArray
                            {
                                new BsonDocument("$or",
                                new BsonArray
                                    {
                                        new BsonDocument("DataJson.FormData.ImportUniqueId",
                                        new BsonDocument("$ne", BsonNull.Value)),
                                        new BsonDocument("DataJson.FormData.localUniqueId",
                                        new BsonDocument("$ne", BsonNull.Value))
                                    })
                            } }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "" },
                            { "crudeGlycerin1-Consumption",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.crudeGlycerinMt"),
                                        4
                                    })) },
                            { "crudeGlycerin2-Consumption",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.crudeGlycerinLocalMt"),
                                        4
                                    })) },
                            { "refinedGlycerinImport1-Consumption",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.refinedGlycerinLocalMt"),
                                        4
                                    })) },
                            { "refinedGlycerinImport2-Consumption",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.refinedGlycerinLocalMt1"),
                                        4
                                    })) },
                            { "loss1",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.lossMt4"),
                                        4
                                    })) },
                            { "loss2",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.lossMt9"),
                                        4
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            //{ "cPO-Consumption", new BsonDocument("$toDecimal","$cPO-Consumption") },
                            { "crudeGlycerin-Consumption", new BsonDocument("$round",
                    new BsonArray
                                {
                                    new BsonDocument("$toDecimal",
                                    new BsonDocument("$add",
                                    new BsonArray
                                            {
                                                "$crudeGlycerin1-Consumption",
                                                "$crudeGlycerin2-Consumption"
                                            })),
                                    4
                                }) },
                            { "refinedGlycerinImport-Consumption", new BsonDocument("$round",
                    new BsonArray
                                {
                                    new BsonDocument("$toDecimal",
                                    new BsonDocument("$add",
                                    new BsonArray
                                            {
                                                "$refinedGlycerinImport1-Consumption",
                                                "$refinedGlycerinImport2-Consumption"
                                            })),
                                    4
                                }) },
                            { "loss",
                    new BsonDocument("$round",
                    new BsonArray
                                {
                                    new BsonDocument("$toDecimal",
                                    new BsonDocument("$add",
                                    new BsonArray
                                            {
                                                "$loss1",
                                                "$loss2"
                                            })),
                                    4
                                }) }
                        })
                });

                var openingbalancePipeLine = new List<BsonDocument> {
                                                new BsonDocument("$addFields",
                                                new BsonDocument("ProductGroup",
                                                new BsonDocument("$toLower", "$DataJson.FormData.productGroup"))),
                                                new BsonDocument("$match",
                                                new BsonDocument
                                                    {
                                                        { "DataJson.FormData.openingBalanceQuantityMt",
                                                new BsonDocument("$ne", BsonNull.Value) },
                                                        { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                                        { "IsArchived", false },
                                                    }) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    openingbalancePipeLine.AddRange(new List<BsonDocument>
                    {
                         new BsonDocument("$match",
                         new BsonDocument {{ "CompanyId", loggedInContext.CompanyGuid.ToString() }, })
                    });
                }

                openingbalancePipeLine.AddRange(new List<BsonDocument>
                { new BsonDocument("$group",
                                                new BsonDocument
                                                    {
                                                        { "_id",
                                                new BsonDocument
                                                        {
                                                            { "Commodity", "$DataJson.FormData.productName" },
                                                            { "SalesType", "$DataJson.FormData.salesType" }
                                                        } },
                                                        { "OpeningBalance",
                                                new BsonDocument("$sum",
                                                new BsonDocument("$round",
                                                new BsonArray
                                                                {
                                                                    new BsonDocument("$toDecimal", "$DataJson.FormData.openingBalanceQuantityMt"),
                                                                    4
                                                                })) }
                                                    }),
                                                new BsonDocument("$project",
                                                new BsonDocument
                                                    {
                                                        { "_id", 0 },
                                                        { "Commodity", "$_id.Commodity" },
                                                        { "SalesType", "$_id.SalesType" },
                                                        { "OpeningBalance", 1 }
                                                    })
                });

                var sourceCommoditiesBalancePipeLine = new List<BsonDocument>
                {
                    new BsonDocument("$addFields",
                    new BsonDocument("datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                             new List<BsonDocument> {new BsonDocument("$match",new BsonDocument
                                        {{ "DataSourceId", formId}, })});
                }

                sourceCommoditiesBalancePipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                                { "$lt",
                                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            { "$and",
                    new BsonArray
                            {
                                new BsonDocument("$or",
                                new BsonArray
                                    {
                                        new BsonDocument("DataJson.FormData.ImportUniqueId",
                                        new BsonDocument("$nin",
                                        new BsonArray
                                                {
                                                    BsonNull.Value,
                                                    ""
                                                })),
                                        new BsonDocument("DataJson.FormData.localUniqueId",
                                        new BsonDocument("$nin",
                                        new BsonArray
                                                {
                                                    BsonNull.Value,
                                                    ""
                                                }))
                                    })
                            } },
                            { "DataJson.FormData.salesType",
                    new BsonDocument("$ne", BsonNull.Value) }
                        }),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "sourceuniqueId",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.ImportUniqueId",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.localUniqueId",
                                            ""
                                        })
                                }) },
                            { "SourceData",
                    new BsonDocument("$filter",
                    new BsonDocument
                                {
                                    { "input",
                    new BsonDocument("$objectToArray", "$DataJson.FormData") },
                                    { "as", "dataSet" },
                                    { "cond",
                    new BsonDocument("$or",
                    new BsonArray
                                        {
                                            new BsonDocument("$eq",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "selectSourceContract",
                                                                "$DataJson.FormData.ImportUniqueId",
                                                                "lookupchilddata"
                                                            }))
                                                }),
                                            new BsonDocument("$eq",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "mylookup",
                                                                "$DataJson.FormData.localUniqueId",
                                                                "lookupchilddata"
                                                            }))
                                                })
                                        }) }
                                }) }
                        })});

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                        new List<BsonDocument> {
                    new BsonDocument("$lookup",
                    new BsonDocument
                       {
                            { "from", MongoDBCollectionConstants.ContractQuantity },
                            { "localField", "sourceuniqueId" },
                            { "foreignField", "UniqueId" },
                            { "pipeline",
                    new BsonArray
                            {
                                new BsonDocument("$match",
                                new BsonDocument("CompanyId", loggedInContext.CompanyGuid.ToString() )),
                                new BsonDocument("$project",
                                new BsonDocument
                                    {
                                        { "ContractQuantity", 1 },
                                        { "_id", 0 }
                                    })
                            } },
                            { "as", "UsedQuantity" }
                       }) });
                }
                else
                {
                    sourceCommoditiesBalancePipeLine.AddRange(
                        new List<BsonDocument> {
                    new BsonDocument("$lookup",
                   new BsonDocument
                       {
                            { "from", MongoDBCollectionConstants.ContractQuantity },
                            { "localField", "sourceuniqueId" },
                            { "foreignField", "UniqueId" },
                            { "pipeline",
                    new BsonArray
                            {
                                new BsonDocument("$project",
                                new BsonDocument
                                    {
                                        { "ContractQuantity", 1 },
                                        { "_id", 0 }
                                    })
                            } },
                            { "as", "UsedQuantity" }
                       }) });
                }

                sourceCommoditiesBalancePipeLine.AddRange(
                    new List<BsonDocument> {
                    new BsonDocument("$unwind", "$SourceData"),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "Commodity",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$SourceData.v.commodity1",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$SourceData.v.commodity",
                                            ""
                                        })
                                }) },
                            { "Quantity",
                    new BsonDocument("$subtract",
                    new BsonArray
                                {
                                    new BsonDocument("$add",
                                    new BsonArray
                                        {
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal", "$SourceData.v.contractQuantityMt"),
                                                    0
                                                }),
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal", "$SourceData.v.totalQuantityMt"),
                                                    0
                                                })
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            new BsonDocument("$toDecimal",
                                            new BsonDocument("$first", "$UsedQuantity.ContractQuantity")),
                                            0
                                        })
                                }) }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$sourceuniqueId" },
                            { "Commodity",
                    new BsonDocument("$first", "$Commodity") },
                            { "Quantity",
                    new BsonDocument("$first", "$Quantity") }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "UniqueId", "$_id" },
                            { "Commodity", "$Commodity" },
                            { "Quantity",
                            new BsonDocument("$round",
                            new BsonArray { new BsonDocument("$toDecimal", "$Quantity"),4 }) }
                        })
                });

                var purchageCommoditiesBalancePipeLine = new List<BsonDocument> {
                            new BsonDocument("$addFields",
                            new BsonDocument("ProductGroup",
                            new BsonDocument("$toLower", "$DataJson.FormData.productGroup1")))};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument>
                    {
                         new BsonDocument("$match",
                         new BsonDocument {{ "CompanyId", loggedInContext.CompanyGuid.ToString() }, })
                    });
                }

                purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "IsArchived", false },
                                    { "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                    { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                    { "$and",
                            new BsonArray
                                    {
                                        new BsonDocument("$or",
                                        new BsonArray
                                            {
                                                new BsonDocument("DataJson.FormData.contractDetails",
                                                new BsonDocument("$nin",
                                                new BsonArray
                                                        {
                                                            BsonNull.Value,
                                                            ""
                                                        })),
                                                new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                new BsonDocument("$nin",
                                                new BsonArray
                                                        {
                                                            BsonNull.Value,
                                                            ""
                                                        }))
                                            })
                                    } }
                                }),
                            new BsonDocument("$addFields",
                            new BsonDocument
                                {
                                    { "sourceuniqueId",
                            new BsonDocument("$ifNull",
                            new BsonArray
                                        {
                                            "$DataJson.FormData.contractDetails",
                                            "$DataJson.FormData.uniqueIdLocal"
                                        }) },
                                    { "SourceData",
                            new BsonDocument("$filter",
                            new BsonDocument
                                        {
                                            { "input",
                            new BsonDocument("$objectToArray", "$DataJson.FormData") },
                                            { "as", "dataSet" },
                                            { "cond",
                            new BsonDocument("$eq",
                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "contractDetails",
                                                                "$DataJson.FormData.contractDetails",
                                                                "lookupchilddata"
                                                            }))
                                                }) }
                                        }) }
                                })});

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                    new BsonDocument("$lookup",
                           new BsonDocument
                               {
                                    { "from", MongoDBCollectionConstants.ContractQuantity },
                                    { "localField", "sourceuniqueId" },
                                    { "foreignField", "UniqueId" },
                                    { "pipeline",
                            new BsonArray
                                    {
                                        new BsonDocument("$match",
                                        new BsonDocument("CompanyId", loggedInContext.CompanyGuid.ToString())),
                                        new BsonDocument("$project",
                                        new BsonDocument
                                            {
                                                { "ContractQuantity", 1 },
                                                { "_id", 0 }
                                            })
                                    } },
                                    { "as", "UsedQuantity" }
                               }) });
                }
                else
                {
                    purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                    new BsonDocument("$lookup",
                           new BsonDocument
                               {
                                    { "from", MongoDBCollectionConstants.ContractQuantity },
                                    { "localField", "sourceuniqueId" },
                                    { "foreignField", "UniqueId" },
                                    { "pipeline",
                            new BsonArray
                                    {
                                        new BsonDocument("$project",
                                        new BsonDocument
                                            {
                                                { "ContractQuantity", 1 },
                                                { "_id", 0 }
                                            })
                                    } },
                                    { "as", "UsedQuantity" }
                               }) });
                }

                purchageCommoditiesBalancePipeLine.AddRange(new List<BsonDocument> {
                            new BsonDocument("$project",
                            new BsonDocument
                                {
                                    { "_id", 0 },
                                    { "UniqueId", "$sourceuniqueId" },
                                    { "Commodity", "$DataJson.FormData.commodity" },
                                    { "Quantity",
                            new BsonDocument("$round",
                            new BsonArray
                                        {
                                new BsonDocument("$subtract",
                                    new BsonArray
                                                {
                                            new BsonDocument("$add",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$ifNull",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$toDecimal",
                                                            new BsonDocument("$first", "$SourceData.v.contractQuantity")),
                                                            0
                                                        }),
                                                    new BsonDocument("$ifNull",
                                                    new BsonArray
                                                        {
                                                            new BsonDocument("$toDecimal", "$DataJson.FormData.totalQuantityMt"),
                                                            0
                                                        })
                                                }),
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal",
                                                    new BsonDocument("$first", "$UsedQuantity.ContractQuantity")),
                                                    0
                                                })
                                        }),
                                            4
                                        }) }
                                })
                });

                var importrecordcountPiprLine = new List<BsonDocument> {
                            new BsonDocument("$unwind",
                            new BsonDocument("path", "$DataJson.FormData.contractDetails")),
                            new BsonDocument("$addFields",
                            new BsonDocument("ProductGroup",
                            new BsonDocument("$toLower", "$DataJson.FormData.contractDetails.productGroup1"))),
                            new BsonDocument("$match",
                            new BsonDocument
                                {
                                    { "IsArchived", false },
                                    { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                })};

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    importrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument
                                        {
                                        { "DataJson.FormData.contractDetails.contractUniqueId",
                                new BsonDocument
                                        {
                                            { "$regex", instanceDashboardInput.CompanyName.ToLower() },
                                            { "$options", "i" }
                                        } }
                    }) });
                }

                importrecordcountPiprLine.AddRange(new List<BsonDocument> {
                            new BsonDocument("$count", "Count")
                });

                var localrecordcountPiprLine = new List<BsonDocument> {
                                new BsonDocument("$unwind",
                                new BsonDocument("path", "$DataJson.FormData")),
                                new BsonDocument("$addFields",
                                new BsonDocument("ProductGroup",
                                new BsonDocument("$toLower", "$DataJson.FormData.productGroup1"))),
                                new BsonDocument("$match",
                                new BsonDocument
                                    {
                                        { "IsArchived", false },
                                        { "ProductGroup", instanceDashboardInput.ProductType.ToLower() },
                                    }) };

                if (instanceDashboardInput.IsConsolidated == false)
                {
                    localrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument
                                        {
                                        { "DataJson.FormData.uniqueIdLocal",
                                new BsonDocument
                                        {
                                            { "$regex", instanceDashboardInput.CompanyName.ToLower() },
                                            { "$options", "i" }
                                        } }
                    }) });
                }
                else
                {
                    localrecordcountPiprLine.AddRange(new List<BsonDocument>
                    {new BsonDocument("$match",
                                        new BsonDocument("$or",
                                        new BsonArray
                                                {
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument {{ "$regex", "ana-kakinada" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "umiro-india" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-krishnapatnam" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-chennai" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana+umiro" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "sg-ana" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-mumbai" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-mangalore" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-kandla" },{ "$options", "i" }}),
                                                }))
                   });
                }

                localrecordcountPiprLine.AddRange(new List<BsonDocument> {
                       new BsonDocument("$count", "Count") });

                var salesDataList = datasetCollection.Aggregate<BsonDocument>(salesPipeLine, aggregateOptions).ToList();
                var unTaggedSalesData = datasetCollection.Aggregate<BsonDocument>(unTaggedSalesPipeLine, aggregateOptions).ToList();
                var productionData = datasetCollection.Aggregate<BsonDocument>(productionPipeLine, aggregateOptions).ToList();
                var consumptionDataList = datasetCollection.Aggregate<BsonDocument>(consumptionPipeLine, aggregateOptions).FirstOrDefault();
                var openingBalanceDataList = datasetCollection.Aggregate<BsonDocument>(openingbalancePipeLine, aggregateOptions).ToList();
                var sourceOpeningBalanceDataList = datasetCollection.Aggregate<BsonDocument>(sourceCommoditiesBalancePipeLine, aggregateOptions).ToList();
                var purchageOpeningBalanceDataList = datasetCollection.Aggregate<BsonDocument>(purchageCommoditiesBalancePipeLine, aggregateOptions).ToList();
                var importIdList = datasetCollection.Aggregate<BsonDocument>(importrecordcountPiprLine, aggregateOptions).FirstOrDefault();
                var localIdList = datasetCollection.Aggregate<BsonDocument>(localrecordcountPiprLine, aggregateOptions).FirstOrDefault();

                List<InstanceLevelDashboardModel> salesList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(salesDataList);
                List<InstanceLevelDashboardModel> untaggedsalesList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(unTaggedSalesData);
                List<InstanceLevelDashboardModel> openingBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(openingBalanceDataList);
                List<InstanceLevelDashboardModel> sourceOpeningBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(sourceOpeningBalanceDataList);
                List<InstanceLevelDashboardModel> purchageOpeningBalanceList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelDashboardModel>(purchageOpeningBalanceDataList);

                List<InstanceLevelDashboardOutputModel> finalDashboardOutputModel = new List<InstanceLevelDashboardOutputModel>();
                BsonValue salesType = "", productionValue = 0, consumptionValue = 0, salesConsumptValues = 0, importIdCount = 0, localIdCount = 0;
                decimal salesQuantity = 0, sourceQuantity = 0, salesOpeningbalance = 0;

                //var finalSourcebalnce = sourceOpeningBalanceList.Concat(purchageOpeningBalanceList.Except(sourceOpeningBalanceList));
                var finalSourcebalnce = sourceOpeningBalanceList;
                Parallel.ForEach(purchageOpeningBalanceList, data =>
                {
                    if (!sourceOpeningBalanceList.Exists(x => x.UniqueId == data.UniqueId))
                        finalSourcebalnce.Add(data);
                });

                foreach (var commodity in commodityDictionary)
                {
                    InstanceLevelDashboardModel sale = salesList?.Where(x => ((x.SalesType.ToLower() == "regular"
                                           && commodity.IsRegularSales == true
                                           && x.Commodity.ToLower() == commodity.ProductName.ToLower())
                    || (x.SalesType.ToLower() == "institutional"
                    && commodity.IsRegularSales == false
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower()))).FirstOrDefault();

                    InstanceLevelDashboardModel untaggedSale = untaggedsalesList?.Where(x => ((x.SalesType.ToLower() == "regular"
                    && commodity.IsRegularSales == true
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower())
                    || (x.SalesType.ToLower() == "institutional"
                    && commodity.IsRegularSales == false
                    && x.Commodity.ToLower() == commodity.ProductName.ToLower()))).FirstOrDefault();

                    var production = productionData?.Where(x => (((x.TryGetValue("SalesType", out salesType) ? salesType.ToString().ToLower() : "") == "regular"
                    && commodity.IsRegularSales == true)
                    || ((x.TryGetValue("SalesType", out salesType) ? salesType.ToString().ToLower() : "") == "institutional"
                    && commodity.IsRegularSales == false))).FirstOrDefault();

                    decimal? salesConsumptionValue = consumptionDataList != null ? consumptionDataList.TryGetValue(commodity.ProductValue + "-Consumption", out salesConsumptValues) ? salesConsumptValues?.AsDecimal : 0 : 0;
                    decimal? openingBalance = consumptionDataList != null ? consumptionDataList.TryGetValue(commodity.ProductValue, out salesConsumptValues) ? salesConsumptValues?.AsDecimal : 0 : 0;
                    decimal? sourceBalance = finalSourcebalnce.Where(x => x.Commodity.ToLower() == commodity.ProductName.ToLower()).Sum(x => x.Quantity);
                    salesOpeningbalance = openingBalanceList.Where(x => (x.Commodity.ToLower() == commodity.ProductName.ToLower()
                     && ((x.SalesType.ToLower() == "regular" && commodity.IsRegularSales == true) || (x.SalesType.ToLower() == "institutional" && commodity.IsRegularSales == false)))
                     ).Select(x => x.OpeningBalance).FirstOrDefault() ?? 0;

                    finalDashboardOutputModel.Add(new InstanceLevelDashboardOutputModel
                    {
                        ProductName = commodity.ProductName,
                        OpeningBalance = sourceBalance == 0 || sourceBalance == null ?
                                         (openingBalance == 0 || openingBalance == null ?
                                         salesOpeningbalance : openingBalance) : sourceBalance,
                        Consumption = (salesConsumptionValue == 0 || salesConsumptionValue == null) ?
                                       (production != null ? (production.TryGetValue(commodity.ProductValue + "-Consumption", out consumptionValue)
                                        ? consumptionValue?.AsDecimal : 0) : 0) : salesConsumptionValue,
                        Production = production != null ? (production.TryGetValue(commodity.ProductValue, out productionValue) ? productionValue?.AsDecimal : 0) : 0,
                        Sales = sale?.Salesvalue,
                        UnTaggedSales = untaggedSale?.Salesvalue,
                        IsBold = commodity.IsBold,
                    });

                    sourceQuantity = sourceQuantity + (sourceBalance ?? 0);
                    salesQuantity = salesQuantity + (sale?.Salesvalue ?? 0) + (untaggedSale?.Salesvalue ?? 0);
                    sale = null;
                    untaggedSale = null;
                    salesType = "";
                    production = null;
                    productionValue = null;
                    consumptionValue = null;
                    salesConsumptionValue = null;
                    openingBalance = 0;
                    sourceBalance = 0;
                }
                InstanceLevelPositionDashboardOutputModel finalInstanceModel = new InstanceLevelPositionDashboardOutputModel();
                finalInstanceModel.GridData = finalDashboardOutputModel;
                finalInstanceModel.TotalSourceQuantity = sourceQuantity;
                finalInstanceModel.TotalSalesQuantity = salesQuantity;
                finalInstanceModel.TotalImportContracts = importIdList == null ? 0 : importIdList.TryGetValue("Count", out importIdCount) ? importIdCount.AsInt32 : 0;
                finalInstanceModel.TotalLocalContracts = localIdList == null ? 0 : localIdList.TryGetValue("Count", out localIdCount) ? localIdCount.AsInt32 : 0;

                return finalInstanceModel;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetGlycerinInstanceLevelDashboard", "DataSetRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return new InstanceLevelPositionDashboardOutputModel();
            }
        }

        public List<InstanceLevelPofitLossOutputModel> GetConsolidatedProfitLossdashboard(DashboardInputModel dashboardInputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetConsolidatedProfitLossdashboard", "DataSetRepository"));
                IMongoCollection<BsonDocument> datasetCollection = GetMongoCollectionObject<BsonDocument>(MongoDBCollectionConstants.DataSet);
                var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };
                if (dashboardInputModel.ProductType.ToLower() == "sun flower oil")
                {
                    dashboardInputModel.ProductType = "sunflower oil";
                }
                if (dashboardInputModel.ProductType.ToLower() == "soya bean oil")
                {
                    dashboardInputModel.ProductType = "soyabean oil";
                }
                if (dashboardInputModel.ProductType.ToLower() == "ricebran oil")
                {
                    dashboardInputModel.ProductType = "rice bran oil";
                }

                DateTime fromDate = dashboardInputModel.FromDate ?? DateTime.UtcNow;
                DateTime toDate = dashboardInputModel.Todate ?? DateTime.UtcNow;
                int fromDay = fromDate.Day;
                int fromMonth = fromDate.Month;
                int fromYear = fromDate.Year;
                int toDay = toDate.Day;
                int toMonth = toDate.Month;
                int toYear = toDate.Year;
                List<string> companies = new List<string>
                {
                    "ana-kakinada",
                    "umiro-india",
                    "ana-krishnapatnam",
                    "ana-chennai",
                   // "ana+umiro",
                   // "sg-ana",
                    "ana-mumbai",
                    "ana-mangalore",
                    "ana-kandla",
                };

                var importUniqueIdPipeLine = new List<BsonDocument>
                    {
                        new BsonDocument("$unwind",
                        new BsonDocument("path", "$DataJson.FormData.contractDetails")),
                        new BsonDocument("$addFields",
                        new BsonDocument("ProductGroup",
                        new BsonDocument("$toLower", "$DataJson.FormData.contractDetails.productGroup1"))),
                        new BsonDocument("$match",
                        new BsonDocument
                            {
                                { "IsArchived", false },
                                { "ProductGroup", dashboardInputModel.ProductType.ToLower() },
                            }),
                        new BsonDocument("$project",
                        new BsonDocument
                            {
                                { "_id", 0 },
                                { "IsImportId",  new BsonDocument("$toBool", 1) },
                                { "UniqueId", "$DataJson.FormData.contractDetails.contractUniqueId" }
                            })
                    };
                var localUniqueIdPipeLine = new List<BsonDocument> {
                                new BsonDocument("$unwind",
                                new BsonDocument("path", "$DataJson.FormData")),
                                new BsonDocument("$addFields",
                                new BsonDocument("ProductGroup",
                                new BsonDocument("$toLower", "$DataJson.FormData.productGroup1"))),
                                new BsonDocument("$match",
                                new BsonDocument
                                    {
                                        { "IsArchived", false },
                                        { "ProductGroup", dashboardInputModel.ProductType.ToLower() },
                                    }),
                                new BsonDocument("$match",
                                        new BsonDocument("$or",
                                        new BsonArray
                                                {
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument {{ "$regex", "ana-kakinada" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "umiro-india" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-krishnapatnam" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-chennai" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana+umiro" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "sg-ana" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-mumbai" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-mangalore" },{ "$options", "i" }}),
                                                    new BsonDocument("DataJson.FormData.uniqueIdLocal",
                                                    new BsonDocument{{ "$regex", "ana-kandla" },{ "$options", "i" }}),
                                                })),
                                new BsonDocument("$project",
                                new BsonDocument
                                    {
                                        { "_id", 0 },
                                        { "UniqueId", "$DataJson.FormData.uniqueIdLocal" }
                                    })
                };
                var importIdList = datasetCollection.Aggregate<BsonDocument>(importUniqueIdPipeLine, aggregateOptions).ToList();
                var localIdList = datasetCollection.Aggregate<BsonDocument>(localUniqueIdPipeLine, aggregateOptions).ToList();
                List<VesselModel> vessels = new List<VesselModel>();
                vessels.AddRange(BsonHelper.ConvertBsonDocumentListToModel<VesselModel>(importIdList));
                vessels.AddRange(BsonHelper.ConvertBsonDocumentListToModel<VesselModel>(localIdList));

                var vesselLevelUnrealisedData = GetConsolidatedUnrealisedPandL(dashboardInputModel, loggedInContext, vessels, validationMessages);

                List<BsonDocument> fxValuesPipeline = new List<BsonDocument>
                {
                new BsonDocument("$match",
                new BsonDocument
                    {
                        { "$and",
                new BsonArray
                        {
                            new BsonDocument("DataJson.FormData.mylookup",
                            new BsonDocument("$ne", BsonNull.Value)),
                        } },
                        { "IsArchived", false }
                    }),
                new BsonDocument("$unwind",
                new BsonDocument("path", "$DataJson.FormData")),
                new BsonDocument("$addFields",
                new BsonDocument
                    {
                        { "Name", "$DataJson.FormData.mylookupstringlookupchilddata.sourcecommodity" },
                        { "TotalPurchaseFXInUSD",
                new BsonDocument("$round",
                new BsonArray
                            {
                                new BsonDocument("$toDecimal", "$DataJson.FormData.totalFxSettledInUsd"),
                                4
                            }) },
                        { "TotalPurchaseFXInINR",
                new BsonDocument("$round",
                new BsonArray
                            {
                                new BsonDocument("$toDecimal", "$DataJson.FormData.totalFxSettledValueInInr"),
                                4
                            }) }
                    }),
                new BsonDocument("$project",
                new BsonDocument
                    {
                        { "UniqueId", "$DataJson.FormData.mylookup" },
                        { "Name", 1 },
                        { "TotalPurchaseFXInUSD", 1 },
                        { "TotalPurchaseFXInINR", 1 },
                        { "_id", 0 }
                    })
                };
                List<BsonDocument> dutyValuesPipeline = new List<BsonDocument>
                {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            //{ "CompanyId", loggedInContext.CompanyGuid.ToString() },
                            { "DataJson.FormData.totalDutyPaidQuantityMt",
                    new BsonDocument("$ne", BsonNull.Value) },
                            { "IsArchived", false }
                        }),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$DataJson.FormData")),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "Name", "$DataJson.FormData.selectSourceContractstringlookupchilddata.commodity1" },
                            { "DutyQuantityPaid",
                    new BsonDocument("$round",
                    new BsonArray
                                {
                                    new BsonDocument("$toDecimal", "$DataJson.FormData.totalDutyPaidQuantityMt"),
                                    4
                                }) },
                            { "DutyValueInINR",
                    new BsonDocument("$round",
                    new BsonArray
                                {
                                    new BsonDocument("$toDecimal", "$DataJson.FormData.totalPaidDutyInclIgstValueInr"),
                                    4
                                }) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "UniqueId", "$DataJson.FormData.selectSourceContract" },
                            { "Name", 1 },
                            { "DutyQuantityPaid", 1 },
                            { "DutyValueInINR", 1 }
                        })
                };
                List<BsonDocument> refiningcostPipeline = new List<BsonDocument>
                {
                    new BsonDocument("$match",
                    new BsonDocument("$or",
                    new BsonArray
                            {
                                new BsonDocument("DataJson.FormData.ImportUniqueId",
                                new BsonDocument("$nin",
                                new BsonArray
                                        {
                                            "",
                                            BsonNull.Value
                                        })),
                                new BsonDocument("DataJson.FormData.localUniqueId",
                                new BsonDocument("$nin",
                                new BsonArray
                                        {
                                            "",
                                            BsonNull.Value
                                        }))
                            })),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate") },
                            { "UniqueId",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.ImportUniqueId",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.localUniqueId",
                                            ""
                                        })
                                }) }
                        }),
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            //{ "CompanyId", loggedInContext.CompanyGuid.ToString() },
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                            new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                        { "$lte",
                            new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                    }}
                        }),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$DataJson.FormData")),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$UniqueId" },
                            { "RefiningCostIncurred",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal",
                                        new BsonDocument("$ifNull",
                                        new BsonArray
                                                {
                                                    "$DataJson.FormData.expectedRefiningCostInr1",
                                                    "0"
                                                })),
                                        4
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "UniqueId", "$_id" },
                            { "RefiningCostIncurred", 1 }
                        })
                };
                List<BsonDocument> dashboardPipeline = new List<BsonDocument>
                          {

                        new BsonDocument("$match",
                        new BsonDocument("$or",
                        new BsonArray
                                {
                                    new BsonDocument("DataJson.FormData.ImportUniqueId",
                                    new BsonDocument("$nin",
                                    new BsonArray
                                            {
                                                "",
                                                BsonNull.Value
                                            })),
                                    new BsonDocument("DataJson.FormData.localUniqueId",
                                    new BsonDocument("$nin",
                                    new BsonArray
                                            {
                                                "",
                                                BsonNull.Value
                                            }))
                                })),
                        new BsonDocument("$addFields",
                        new BsonDocument
                            {
                                { "datefilter",
                        new BsonDocument("$toDate", "$DataJson.FormData.tradeDate") },
                                { "UniqueId",
                        new BsonDocument("$concat",
                        new BsonArray
                                    {
                                        new BsonDocument("$ifNull",
                                        new BsonArray
                                            {
                                                "$DataJson.FormData.ImportUniqueId",
                                                ""
                                            }),
                                        new BsonDocument("$ifNull",
                                        new BsonArray
                                            {
                                                "$DataJson.FormData.localUniqueId",
                                                ""
                                            })
                                    }) }
                            }),
                        new BsonDocument("$match",
                        new BsonDocument
                            {
                                //{ "CompanyId", loggedInContext.CompanyGuid.ToString() },
                                { "UniqueId",
                        new BsonDocument("$nin",
                        new BsonArray
                                    {
                                        "",
                                        BsonNull.Value
                                    }) },
                                { "IsArchived", false },
                                { "datefilter",
                        new BsonDocument
                                {
                                    { "$gte",
                            new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                        { "$lte",
                            new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                                    } }
                            }),
                        new BsonDocument("$group",
                        new BsonDocument
                            {
                                { "_id", "$UniqueId" },
                                { "Product-Sales",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal",
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                    {
                                                        "$DataJson.FormData.quantityMt2",
                                                        "0"
                                                    })),
                                            4
                                        })) },
                                { "valueInr1",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal",
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                    {
                                                        new BsonDocument("$cond", new BsonDocument{{ "if",new BsonDocument("$eq",
                                                        new BsonArray{"$DataJson.FormData.salesType","REGULAR"}) },
                                                                { "then", "$DataJson.FormData.valueInr1" },
                                                                { "else", 0 }
                                                            }),
                                                        "0"
                                                    })),
                                            4
                                        })) },
                                { "valueInr",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal",
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                    {
                                                        "$DataJson.FormData.valueInr1",
                                                        "0"
                                                    })),
                                            4
                                        })) },
                                { "PODateValueInr",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal",
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                    {
                                                        "$DataJson.FormData.PODateValueInr",
                                                        "0"
                                                    })),
                                            4
                                        })) },
                                { "DeliveryDateValueInr",
                        new BsonDocument("$sum",
                        new BsonDocument("$round",
                        new BsonArray
                                        {
                                            new BsonDocument("$toDecimal",
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                    {
                                                        "$DataJson.FormData.DeliveryDateValueInr",
                                                        "0"
                                                    })),
                                            4
                                        })) }
                            }),
                        new BsonDocument("$project",
                        new BsonDocument
                            {
                                { "_id", 0 },
                                { "UniqueId", "$_id" },
                                { "SalesInQuantity", "$Product-Sales" },
                                { "SalesInValue",
                        new BsonDocument("$add",
                        new BsonArray
                                    {
                                        "$valueInr1",
                                        "$valueInr",
                                        "$PODateValueInr",
                                        "$DeliveryDateValueInr"
                                    }) }
                            })

                        };

                List<RealisedProfitAndLossOutputModel> dataSources = new List<RealisedProfitAndLossOutputModel>();
                var fxDataList = datasetCollection.Aggregate<BsonDocument>(fxValuesPipeline, aggregateOptions).ToList();
                var dutyDataList = datasetCollection.Aggregate<BsonDocument>(dutyValuesPipeline, aggregateOptions).ToList();
                var refiningcostData = datasetCollection.Aggregate<BsonDocument>(refiningcostPipeline, aggregateOptions).ToList();
                var aggregateDataList = datasetCollection.Aggregate<BsonDocument>(dashboardPipeline, aggregateOptions).ToList();
                List<InstanceLevelPAndLDashboardModel> fxList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelPAndLDashboardModel>(fxDataList);
                List<InstanceLevelPAndLDashboardModel> dutyList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelPAndLDashboardModel>(dutyDataList);
                List<InstanceLevelPAndLDashboardModel> refiningcostList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelPAndLDashboardModel>(refiningcostData);
                List<InstanceLevelPAndLDashboardModel> salesList = BsonHelper.ConvertBsonDocumentListToModel<InstanceLevelPAndLDashboardModel>(aggregateDataList);
                List<InstanceLevelPofitLossOutputModel> finalInstanceLevelProfitLossOutputModel = new List<InstanceLevelPofitLossOutputModel>();

                foreach (string name in companies)
                {
                    List<string> filteredVessels = vessels.Where(x => x.UniqueId.ToLower().Contains(name.ToLower())).Select(x => x.UniqueId).ToList();
                    decimal? unReliasedOutputModel = vesselLevelUnrealisedData.Where(x => x.VesselName.In(filteredVessels)).Select(x => x.UnRealisedTotal).Sum();
                    var finalRealisedTotal = (salesList.Where(x => x.UniqueId.In(filteredVessels)).Select(x => x.SalesInValue).Sum() ?? 0)
                                              - (fxList.Where(x => x.UniqueId.In(filteredVessels)).Select(x => x.TotalPurchaseFXInINR).Sum() ?? 0)
                                              - (dutyList.Where(x => x.UniqueId.In(filteredVessels)).Select(x => x.DutyValueInINR).Sum() ?? 0)
                                              - (refiningcostList.Where(x => x.UniqueId.In(filteredVessels)).Select(x => x.RefiningCostIncurred).Sum() ?? 0);

                    finalInstanceLevelProfitLossOutputModel.Add(new InstanceLevelPofitLossOutputModel
                    {
                        VesselName = name,
                        RealisedTotal = finalRealisedTotal,
                        UnRealisedTotal = unReliasedOutputModel
                    });
                }

                return finalInstanceLevelProfitLossOutputModel;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetConsolidatedProfitLossdashboard", "DataSetRepository", exception));
                SqlValidationHelper.ValidateGetAllSqlExceptions(validationMessages, exception, ValidationMessages.ExceptionGetDataSetsById);
                return new List<InstanceLevelPofitLossOutputModel>();
            }
        }

        private List<closingBalanceModel> GetConsolidatedClosingBalance(DashboardInputModel dashboardInputModel, LoggedInContext loggedInContext, List<VesselModel> vessels, List<ValidationMessage> validationMessages)
        {
            List<string> commodities = new List<string>();
            List<Options> commodityDictionary = new List<Options>();
            IMongoCollection<BsonDocument> datasetCollection = GetMongoCollectionObject<BsonDocument>(MongoDBCollectionConstants.DataSet);
            var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };

            if (dashboardInputModel != null && dashboardInputModel.ProductType.ToLower() == "palm oil")
            {
                commodities.AddRange(new string[] { "CPO", "Refined Palm Oil-Import", "RBD Palm Olein-Import", "Refined Palm Oil", "Refined Palm Oil-Trading", "RBD Palm Olein", "RBD Palm Olein-Trading", "Stearin", "PFAD", "Hard Stearin", "Soft Stearin", "Super Olein", "White Olein", "Calcium Soap" });
                commodityDictionary.AddRange(new List<Options> {
                        new Options { label="CPO", value="cPO" },
                        new Options { label = "Refined Palm Oil-Import", value = "refinedPalmOilImport" },
                        new Options { label = "RBD Palm Olein-Import", value = "rBDPalmOleinImport" },
                        new Options { label = "Refined Palm Oil", value = "refinedPalmOil" },
                        new Options { label = "Refined Palm Oil-Trading", value = "refinedPalmOilTrading" },
                        new Options { label = "RBD Palm Olein", value = "rBDPalmOlein" },
                        new Options { label = "RBD Palm Olein-Trading", value = "rBDPalmOleinTrading" },
                        new Options { label = "Stearin", value = "stearin" },
                        new Options { label = "PFAD", value = "pFAD" },
                        new Options { label = "Hard Stearin", value = "hardStearin" },
                        new Options { label = "Soft Stearin", value = "softStearin" },
                        new Options { label = "Super Olein", value = "superOlein" },
                        new Options { label = "White Olein", value = "whiteOlein" },
                        new Options { label = "Calcium Soap", value="calciumSoap" }
                        });

                commodities.AddRange(new string[] { "CPO-Local", "Refined Palm Oil-Local", "RBD Palm Olein-Local", "Refined Palm Oil", "Refined Palm Oil-Trading", "RBD Palm Olein", "RBD Palm Olein-Trading", "Stearin", "PFAD", "Hard Stearin", "Soft Stearin", "Super Olein", "White Olein", "Calcium Soap" });
                commodityDictionary.AddRange(new List<Options>
                        {
                            new Options { label = "CPO-Local", value="cPOLocal" },
                            new Options { label = "Refined Palm Oil-Local", value="refinedPalmOilLocal" },
                            new Options { label = "RBD Palm Olein-Local", value="rBDPalmOleinLocal" },
                            new Options { label = "Refined Palm Oil", value="refinedPalmOil" },
                            new Options { label = "Refined Palm Oil-Trading", value="refinedPalmOilTrading" },
                            new Options { label = "RBD Palm Olein", value="rBDPalmOlein" },
                            new Options { label = "RBD Palm Olein-Trading", value="rBDPalmOleinTrading" },
                            new Options { label = "Stearin", value="stearin" },
                            new Options { label = "PFAD",value= "pFAD" },
                            new Options { label = "Hard Stearin",value= "hardStearin" },
                            new Options { label = "Soft Stearin", value="softStearin" },
                            new Options { label = "Super Olein", value="superOlein" },
                            new Options { label = "White Olein", value="whiteOlein" },
                            new Options { label = "Calcium Soap", value="calciumSoap" }
                        });
            }
            else if (dashboardInputModel != null && dashboardInputModel.ProductType.ToLower() == "sunflower oil")
            {

                commodities.AddRange(new string[] { "CSFO", "RSFO-Import", "RSFO", "RSFO - Trading", "CSFO - Trading", "Sunflower Fatty Acid", "RSFO - Sludge" });
                commodityDictionary.AddRange(new List<Options>
                            {
                                new Options { label = "CSFO", value = "cSFO" },
                                new Options { label = "RSFO-Import", value = "rSFOImport" },
                                new Options { label = "RSFO", value = "rSFO" },
                                new Options { label = "RSFO - Trading", value = "rSFOTrading" },
                                new Options { label = "CSFO - Trading", value = "cSFOTrading" },
                                new Options { label = "Sunflower Fatty Acid", value = "sunflowerFattyAcid" },
                                new Options { label = "RSFO - Sludge", value = "rSFOSludge" }
                            });

                commodities.AddRange(new string[] { "CSFO-Local", "RSFO-Local", "RSFO", "RSFO - Trading", "Sunflower Fatty Acid", "RSFO - Sludge" });
                commodityDictionary.AddRange(new List<Options>
                            {
                                new Options { label = "CSFO-Local", value = "cSFOLocal" },
                                new Options { label = "RSFO-Local", value = "rSFOLocal" },
                                new Options { label = "RSFO", value = "rSFO" },
                                new Options { label = "RSFO - Trading", value = "rSFOTrading" },
                                new Options { label = "Sunflower Fatty Acid", value = "sunflowerFattyAcid" },
                                new Options { label = "RSFO - Sludge", value = "rSFOSludge" }
                            });
            }
            else if (dashboardInputModel != null && dashboardInputModel.ProductType.ToLower() == "ricebran oil")
            {

                commodities.AddRange(new string[] { "CRBO", "RRBO-Import", "RRBO", "RRBO-Trading", "RB Fatty Acid", "RB Oil Wax" });
                commodityDictionary.AddRange(new List<Options>
                            {
                                new Options{label="CRBO", value="cRBO" },
                                new Options{label="RRBO-Import", value="rRBOImport" },
                                new Options{label="RRBO", value="rRBO" },
                                new Options{label="RRBO-Trading", value="rRBOTrading" },
                                new Options{label="RB Fatty Acid", value="rBFattyAcid" },
                                new Options{label="RB Oil Wax", value="rBOilWax" }
                            });

                commodities.AddRange(new string[] { "CRBO-Local", "RRBO-Local", "RRBO", "RRBO-Trading", "RB Fatty Acid", "RB Oil Wax" });
                commodityDictionary.AddRange(new List<Options>
                            {
                                new Options{label="CRBO-Local", value="cRBOLocal" },
                                new Options{label="RRBO-Local", value="rRBOLocal" },
                                new Options{label="RRBO", value="rRBO" },
                                new Options{label="RRBO-Trading", value="rRBOTrading" },
                                new Options{label="RB Fatty Acid", value="rBFattyAcid" },
                                new Options{label="RB Oil Wax", value="rBOilWax" }
                            });
            }
            else if (dashboardInputModel != null && dashboardInputModel.ProductType.ToLower() == "glycerin")
            {

                commodities.AddRange(new string[] { "Crude Glycerin", "Refined Glycerin-Import", "Refined Glycerin", "Refined Glycerin-Trading" });
                commodityDictionary.AddRange(new List<Options>
                            {
                                new Options { label = "Crude Glycerin", value = "crudeGlycerin" },
                                new Options { label = "Refined Glycerin-Import", value = "refinedGlycerinImport" },
                                new Options { label = "Refined Glycerin", value = "refinedGlycerin" },
                                new Options { label = "Refined Glycerin-Trading", value = "refinedGlycerinTrading" }
                            });

                commodities.AddRange(new string[] { "Crude Glycerin", "Refined Glycerin-Import", "Refined Glycerin", "Refined Glycerin-Trading" });
                commodityDictionary.AddRange(new List<Options>
                            {
                                new Options { label = "Crude Glycerin", value = "crudeGlycerin" },
                                new Options { label = "Refined Glycerin-Import", value = "refinedGlycerinImport" },
                                new Options { label = "Refined Glycerin", value = "refinedGlycerin" },
                                new Options { label = "Refined Glycerin-Trading", value = "refinedGlycerinTrading" }
                            });
            }
            else if (dashboardInputModel != null && dashboardInputModel.ProductType.ToLower() == "soya bean oil")
            {
                commodities.AddRange(new string[] { "CDSBO", "RSBO-Import", "RSBO", "RSBO-Trading", "Soy Acid Oil" });
                commodityDictionary.AddRange(new List<Options>
                            {
                                new Options { label = "CDSBO", value = "cDSBO" },
                                new Options { label = "RSBO-Import", value = "rSBOImport" },
                                new Options { label = "RSBO", value = "rSBO" },
                                new Options { label = "RSBO-Trading", value = "rSBOTrading" },
                                new Options { label = "Soy Acid Oil", value = "soyAcidOil" },
                            });

                commodities.AddRange(new string[] { "CDSBO", "RSBO-Import", "RSBO", "RSBO-Trading", "Soy Acid Oil" });
                commodityDictionary.AddRange(new List<Options>
                            {
                                new Options { label = "CDSBO", value = "cDSBO" },
                                new Options { label = "RSBO-Import", value = "rSBOImport" },
                                new Options { label = "RSBO", value = "rSBO" },
                                new Options { label = "RSBO-Trading", value = "rSBOTrading" },
                                new Options { label = "Soy Acid Oil", value = "soyAcidOil" },
                            });
            }

            DateTime fromDate = dashboardInputModel.FromDate ?? DateTime.UtcNow;
            DateTime toDate = dashboardInputModel.Todate ?? DateTime.UtcNow;
            int fromDay = fromDate.Day;
            int fromMonth = fromDate.Month;
            int fromYear = fromDate.Year;
            int toDay = toDate.Day;
            int toMonth = toDate.Month;
            int toYear = toDate.Year;

            var salesimportpipeline = new List<BsonDocument>
            {
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate") },
                            { "ProductGroup",
                    new BsonDocument("$toLower", "$DataJson.FormData.productGroup1") }
                        }),
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "ProductGroup", dashboardInputModel.ProductType.ToLower() },
                            { "$and",
                                new BsonArray
                                    {
                                        new BsonDocument("$or",
                                        new BsonArray
                                            {
                                               new BsonDocument( "DataJson.FormData.ImportUniqueId",
                                new BsonDocument("$nin",
                                new BsonArray
                                            {
                                                "",
                                                BsonNull.Value
                                            }) ),
                                               new BsonDocument( "DataJson.FormData.localUniqueId",
                                new BsonDocument("$nin",
                                new BsonArray
                                            {
                                                "",
                                                BsonNull.Value
                                            }) )
                                            })
                                    } },
                            //{ "CompanyId", "e988dfeb-ccbf-4209-b8da-36e5779bb506" },
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                { "$lte",
                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            //{ "DataJson.FormData.type", "IMPORTED" }
                        }),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$DataJson")),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id",
                    new BsonDocument
                            {
                                { "Commodity", "$DataJson.FormData.commodity1" },
                                { "UniqueId", "$DataJson.FormData.ImportUniqueId" }
                            } },
                            { "Sales",
                    new BsonDocument("$sum",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal",
                                        new BsonDocument("$ifNull",
                                        new BsonArray
                                                {
                                                    "$DataJson.FormData.quantityMt2",
                                                    "0"
                                                })),
                                        4
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "UniqueId", "$_id.UniqueId" },
                            { "Commodity", "$_id.Commodity" },
                            { "Sales", "$Sales" }
                        })
            };
            var openingBalanceImportPipeLine = new List<BsonDocument>
            {
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate") },
                            { "ProductGroup",
                    new BsonDocument("$toLower", "$DataJson.FormData.productGroup1") }
                        }),
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "ProductGroup", dashboardInputModel.ProductType.ToLower() },
                            { "$and",
                                new BsonArray
                                    {
                                        new BsonDocument("$or",
                                        new BsonArray
                                            {
                                               new BsonDocument( "DataJson.FormData.ImportUniqueId",
                                new BsonDocument("$nin",
                                new BsonArray
                                            {
                                                "",
                                                BsonNull.Value
                                            }) ),
                                               new BsonDocument( "DataJson.FormData.localUniqueId",
                                new BsonDocument("$nin",
                                new BsonArray
                                            {
                                                "",
                                                BsonNull.Value
                                            }) )
                                            })
                                    } },
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                { "$lte",
                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            //{ "DataJson.FormData.type", "IMPORTED" }
                        }),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$DataJson")),
                    new BsonDocument("$addFields",
                    new BsonDocument{
                        { "sourceuniqueId",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.ImportUniqueId",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.localUniqueId",
                                            ""
                                        })
                                }) },
                        { "SourceData",
                    new BsonDocument("$filter",
                    new BsonDocument
                                {
                                    { "input",
                    new BsonDocument("$objectToArray", "$DataJson.FormData") },
                                    { "as", "dataSet" },
                                    { "cond",
                                    new BsonDocument("$or",
                                    new BsonArray
                                        {
                                            new BsonDocument("$eq",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "selectSourceContract",
                                                                "$DataJson.FormData.ImportUniqueId",
                                                                "lookupchilddata"
                                                            }))
                                                }),
                                            new BsonDocument("$eq",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toLower", "$$dataSet.k"),
                                                    new BsonDocument("$toLower",
                                                    new BsonDocument("$concat",
                                                    new BsonArray
                                                            {
                                                                "mylookup",
                                                                "$DataJson.FormData.localUniqueId",
                                                                "lookupchilddata"
                                                            }))
                                                })
                                        }) }
                                }) } }),
                    new BsonDocument("$unwind",
                    new BsonDocument
                        {
                            { "path", "$SourceData" },
                            { "preserveNullAndEmptyArrays", false }
                        }),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "Commodity",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$SourceData.v.commodity1",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$SourceData.v.commodity",
                                            ""
                                        })
                                }) },
                            { "Quantity",
                                    new BsonDocument("$add",
                                    new BsonArray
                                        {
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal", "$SourceData.v.contractQuantityMt"),
                                                    0
                                                }),
                                            new BsonDocument("$ifNull",
                                            new BsonArray
                                                {
                                                    new BsonDocument("$toDecimal", "$SourceData.v.totalQuantityMt"),
                                                    0
                                                })
                                        }) }
                        }),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id",
                    new BsonDocument
                            {
                                { "Commodity", "$Commodity" },
                                { "UniqueId", "$sourceuniqueId" }
                            } },
                            { "OpeningBalance",
                    new BsonDocument("$first", "$Quantity") }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Commodity", "$_id.Commodity" },
                            { "UniqueId", "$_id.UniqueId" },
                            { "OpeningBalance", "$OpeningBalance" }
                        })
            };
            var productionandConsumptionPipeLine = new List<BsonDocument>
            {
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate") },
                            { "ProductGroup",
                    new BsonDocument("$toLower", "$DataJson.FormData.productGroup1") }
                        }),
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "DataJson.FormData.ImportUniqueId",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    "",
                                    BsonNull.Value
                                }) },
                            { "ProductGroup", dashboardInputModel.ProductType.ToLower()},
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                { "$lte",
                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            { "DataJson.FormData.type", "IMPORTED" }
                        }),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$DataJson")),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$DataJson.FormData.ImportUniqueId" },
                            { "cPO-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.cpoMt") },
                            { "refinedPalmOilImport-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.rpoMt1") },
                            { "rBDPalmOleinImport-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.rbdPalmoleinImportMt") },
                            { "rBDPalmOlein-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.rbdPalmOleinMt") },
                            { "stearin-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.stearinMt1") },
                            { "pFAD-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.pfadMt1") },
                            { "refinedPalmOil-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rpoMt") },
                            { "rBDPalmOlein-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rbdOleinMt") },
                            { "stearin-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.stearinMt") },
                            { "pFAD-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.pfadMt") },
                            { "refinedPalmOilTrading-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rpoMt2") },
                            { "rBDPalmOleinTrading-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rbdPalmoleinTradingMt") },
                            { "hardStearin-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.hardStearinMt") },
                            { "softStearin-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.softStearinMt") },
                            { "whiteOlein-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.whiteOleinMt") },
                            { "calciumSoap-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.calciumSoapMt") },
                            { "cSFO-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.csfoMt") },
                            { "rSFOImport-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.rsfoImportMt") },
                            { "rSFO-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.rsfoMt2") },
                            { "rSFO-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rsfoMt") },
                            { "rSFOTrading-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rsfoTradingMt") },
                            { "cSFOTrading-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.csfoTradingMt") },
                            { "sunflowerFattyAcid-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.sunflowerFattyAcidMt") },
                             { "rSFOSludge-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rsfoSludgeMt") },
                              { "cRBO-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.crboMt") },
                            { "rRBOImport-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.rrboImportMt") },
                            { "rRBO-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rrboMt") },
                            { "rRBOTrading-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rrboTradingMt") },
                            { "rBFattyAcid-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rbFattyAcidMt") },
                            { "rBOilWax-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rbOilWaxMt") },
                             { "cDSBO-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.cdsboMt") },
                            { "rSBOImport-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.rsboImportMt") },
                             { "rSBO-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rsboMt") },
                             { "rSBOTrading-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rsboTradingMt") },
                              { "soyAcidOil-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.soyAcidOilMt") },
                              { "crudeGlycerin-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.crudeGlycerinMt") },
                            { "refinedGlycerinImport-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.refinedGlycerinLocalMt") },
                            { "refinedGlycerin-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.refinedGycerinMt") },
                              { "refinedGlycerinTrading-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.refinedGlycerinTradingMt") },

                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "UniqueId", "$_id" },
                            { "cPO-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$cPO-Consumption",
                                        6
                                    })) },
                            { "refinedPalmOilImport-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$refinedPalmOilImport-Consumption",
                                        6
                                    })) },
                            { "rBDPalmOleinImport-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rBDPalmOleinImport-Consumption",
                                        6
                                    })) },
                            { "rBDPalmOlein-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rBDPalmOlein-Consumption",
                                        6
                                    })) },
                            { "stearin-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$stearin-Consumption",
                                        6
                                    })) },
                            { "pFAD-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$pFAD-Consumption",
                                        6
                                    })) },
                             { "cSFO-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$cSFO-Consumption",
                                        6
                                    })) },
                              { "rSFOImport-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSFOImport-Consumption",
                                        6
                                    })) },
                               { "rSFO-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSFO-Consumption",
                                        6
                                    })) },
                                { "cRBO-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$cRBO-Consumption",
                                        6
                                    })) },
                                 { "rRBOImport-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rRBOImport-Consumption",
                                        6
                                    })) },
                                 { "cDSBO-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$cDSBO-Consumption",
                                        6
                                    })) },
                                 { "rSBOImport-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSBOImport-Consumption",
                                        6
                                    })) },
                                 { "crudeGlycerin-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$crudeGlycerin-Consumption",
                                        6
                                    })) },
                                 { "refinedGlycerinImport-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$refinedGlycerinImport-Consumption",
                                        6
                                    })) },
                            { "refinedPalmOil-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$refinedPalmOil-Production",
                                        6
                                    })) },
                            { "rBDPalmOlein-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rBDPalmOlein-Production",
                                        6
                                    })) },
                            { "stearin-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$stearin-Production",
                                        6
                                    })) },
                            { "pFAD-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$pFAD-Production",
                                        6
                                    })) },
                            { "refinedPalmOilTrading-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$refinedPalmOilTrading-Production",
                                        6
                                    })) },
                            { "rBDPalmOleinTrading-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rBDPalmOleinTrading-Production",
                                        6
                                    })) },
                            { "hardStearin-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$hardStearin-Production",
                                        6
                                    })) },
                            { "softStearin-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$softStearin-Production",
                                        6
                                    })) },
                            { "whiteOlein-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$whiteOlein-Production",
                                        6
                                    })) },
                            { "calciumSoap-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$calciumSoap-Production",
                                        6
                                    })) },
                            { "rSFOTrading-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSFOTrading-Production",
                                        6
                                    })) },
                            { "cSFOTrading-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$cSFOTrading-Production",
                                        6
                                    })) },
                            { "sunflowerFattyAcid-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$sunflowerFattyAcid-Production",
                                        6
                                    })) },
                            { "rSFOSludge-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSFOSludge-Production",
                                        6
                                    })) },
                             { "rRBO-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rRBO-Production",
                                        6
                                    })) },
                            { "rRBOTrading-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rRBOTrading-Production",
                                        6
                                    })) },
                            { "rBFattyAcid-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rBFattyAcid-Production",
                                        6
                                    })) },
                            { "rBOilWax-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rBOilWax-Production",
                                        6
                                    })) },
                             { "rSBO-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSBO-Production",
                                        6
                                    })) },
                              { "rSBOTrading-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSBOTrading-Production",
                                        6
                                    })) },
                               { "soyAcidOil-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$soyAcidOil-Production",
                                        6
                                    })) },
                                { "refinedGlycerin-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$refinedGlycerin-Production",
                                        6
                                    })) },
                                 { "refinedGlycerinTrading-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$refinedGlycerinTrading-Production",
                                        6
                                    })) },
                    })
            };
            var productionandConsumptionLocalCommoditiesPipeLine = new List<BsonDocument>
            {
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate") },
                            { "ProductGroup",
                    new BsonDocument("$toLower", "$DataJson.FormData.productGroup1") }
                        }),
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "DataJson.FormData.localUniqueId",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    "",
                                    BsonNull.Value
                                }) },
                            { "ProductGroup", dashboardInputModel.ProductType.ToLower()},
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                    new DateTime(fromYear, fromMonth, fromDay, 0, 0, 0) },
                                { "$lte",
                    new DateTime(toYear, toMonth, toDay, 23, 0, 0) }
                            } },
                            { "DataJson.FormData.type", "LOCAL" }
                        }),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$DataJson")),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$DataJson.FormData.localUniqueId" },
                            { "cPOLocal-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.cpolocalMt") },
                            { "refinedPalmOilLocal-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.refinedPalmOilLocalMt") },
                            { "rBDPalmOleinLocal-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.rbdPalmoleinImportMt1") },
                            { "refinedPalmOil-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.rbdPalmOleinMt") },
                            { "rBDPalmOlein-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.rbdPalmOleinMtnplocal") },
                             { "stearin-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.stearinMt1nplocal") },
                            { "pFAD-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.pfadMt1nplocal") },
                            { "refinedPalmOil-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rpoMt5") },
                            { "refinedPalmOilTrading-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.refinedPalmOilTradingMt") },
                            { "rBDPalmOlein-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rbdOleinMt6") },
                             { "rBDPalmOleinTrading-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rbdPalmoleinTradingMt1") },
                              { "stearin-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.stearinMt7") },
                            { "pFAD-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.pfadMt8") },
                            { "hardStearin-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.hardStearinMtlocal") },
                            { "softStearin-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.softStearinMtlocal") },
                            { "whiteOlein-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.whiteOleinMtnplocal") },
                            { "calciumSoap-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.calciumSoapMtnplocal") },
                            { "cSFOLocal-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.csfoLocalMt") },
                            { "rSFOLocal-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.rsfoLocalMt") },
                             { "rSFO-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.rsfoMt2nplocal") },
                                { "rSFO-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rsfoMt1") },
                            { "rSFOTrading-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rsfoTradingMt1") },
                            { "sunflowerFattyAcid-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.sunflowerFattyAcidMt1") },
                             { "rSFOSludge-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rsfoSludgeMtnplocal") },
                              { "cRBOLocal-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.crboLocalMt") },
                            { "rRBOLocal-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.rrboLocalMt") },
                            { "rRBO-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rrboMt1") },
                            { "rRBOTrading-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rrboTradingMt1") },
                            { "rBFattyAcid-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rbFattyAcidMt1") },
                            { "rBOilWax-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rbOilWaxMt1") },
                             { "cDSBO-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.cdsboLocalMt") },
                            { "rSBOImport-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.rsboLocalMt") },
                             { "rSBO-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rsboMt1") },
                             { "rSBOTrading-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.rsboTradingMt1") },
                              { "soyAcidOil-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.soyAcidOilMt1") },
                              { "crudeGlycerin-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.crudeGlycerinLocalMt") },
                            { "refinedGlycerinImport-Consumption",
                    new BsonDocument("$sum", "$DataJson.FormData.refinedGlycerinLocalMt1") },
                            { "refinedGlycerin-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.refinedGlycerinMt") },
                              { "refinedGlycerinTrading-Production",
                    new BsonDocument("$sum", "$DataJson.FormData.refinedGlycerinTradingMt1") },

                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "UniqueId", "$_id" },
                            { "cPOLocal-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$cPOLocal-Consumption",
                                        6
                                    })) },
                            { "refinedPalmOilLocal-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$refinedPalmOilLocal-Consumption",
                                        6
                                    })) },
                            { "rBDPalmOleinLocal-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rBDPalmOleinLocal-Consumption",
                                        6
                                    })) },
                            { "rBDPalmOlein-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rBDPalmOlein-Consumption",
                                        6
                                    })) },
                            { "stearin-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$stearin-Consumption",
                                        6
                                    })) },
                            { "pFAD-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$pFAD-Consumption",
                                        6
                                    })) },
                             { "cSFOLocal-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$cSFOLocal-Consumption",
                                        6
                                    })) },
                              { "rSFOLocal-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSFOLocal-Consumption",
                                        6
                                    })) },
                               { "rSFO-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSFO-Consumption",
                                        6
                                    })) },
                                { "cRBOLocal-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$cRBOLocal-Consumption",
                                        6
                                    })) },
                                 { "rRBOLocal-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rRBOLocal-Consumption",
                                        6
                                    })) },
                                 { "cDSBO-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$cDSBO-Consumption",
                                        6
                                    })) },
                                 { "rSBOImport-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSBOImport-Consumption",
                                        6
                                    })) },
                                 { "crudeGlycerin-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$crudeGlycerin-Consumption",
                                        6
                                    })) },
                                 { "refinedGlycerinImport-Consumption",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$refinedGlycerinImport-Consumption",
                                        6
                                    })) },
                            { "refinedPalmOil-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$refinedPalmOil-Production",
                                        6
                                    })) },
                            { "refinedPalmOilTrading-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$refinedPalmOilTrading-Production",
                                        6
                                    })) },
                            { "rBDPalmOlein-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rBDPalmOlein-Production",
                                        6
                                    })) },
                            { "rBDPalmOleinTrading-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rBDPalmOleinTrading-Production",
                                        6
                                    })) },
                            { "stearin-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$stearin-Production",
                                        6
                                    })) },
                            { "pFAD-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$pFAD-Production",
                                        6
                                    })) },
                            { "hardStearin-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$hardStearin-Production",
                                        6
                                    })) },
                            { "softStearin-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$softStearin-Production",
                                        6
                                    })) },
                            { "whiteOlein-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$whiteOlein-Production",
                                        6
                                    })) },
                            { "calciumSoap-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$calciumSoap-Production",
                                        6
                                    })) },
                            { "rSFO-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSFO-Production",
                                        6
                                    })) },
                            { "rSFOTrading-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSFOTrading-Production",
                                        6
                                    })) },
                            { "sunflowerFattyAcid-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$sunflowerFattyAcid-Production",
                                        6
                                    })) },
                            { "rSFOSludge-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSFOSludge-Production",
                                        6
                                    })) },
                             { "rRBO-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rRBO-Production",
                                        6
                                    })) },
                            { "rRBOTrading-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rRBOTrading-Production",
                                        6
                                    })) },
                            { "rBFattyAcid-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rBFattyAcid-Production",
                                        6
                                    })) },
                            { "rBOilWax-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rBOilWax-Production",
                                        6
                                    })) },
                             { "rSBO-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSBO-Production",
                                        6
                                    })) },
                              { "rSBOTrading-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$rSBOTrading-Production",
                                        6
                                    })) },
                               { "soyAcidOil-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$soyAcidOil-Production",
                                        6
                                    })) },
                                { "refinedGlycerin-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$refinedGlycerin-Production",
                                        6
                                    })) },
                                 { "refinedGlycerinTrading-Production",
                    new BsonDocument("$toDecimal",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        "$refinedGlycerinTrading-Production",
                                        6
                                    })) },
                    })
            };
            
            var salesimportData = datasetCollection.Aggregate<BsonDocument>(salesimportpipeline, aggregateOptions).ToList();
            var _OBimportData = datasetCollection.Aggregate<BsonDocument>(openingBalanceImportPipeLine, aggregateOptions).ToList();
            var _PandCData = datasetCollection.Aggregate<BsonDocument>(productionandConsumptionPipeLine, aggregateOptions).ToList();
            var _PandCLocalData = datasetCollection.Aggregate<BsonDocument>(productionandConsumptionLocalCommoditiesPipeLine, aggregateOptions).ToList();

            List<closingBalanceModel> salesimportList = BsonHelper.ConvertBsonDocumentListToModel<closingBalanceModel>(salesimportData);
            List<closingBalanceModel> _OBimportList = BsonHelper.ConvertBsonDocumentListToModel<closingBalanceModel>(_OBimportData);

            List<closingBalanceModel> closingBalance = new List<closingBalanceModel>();

            foreach (var vessel in vessels)
            {
                foreach (var data in commodityDictionary)
                {
                    var sale = salesimportList.Where(x => x.UniqueId == vessel.UniqueId && x.Commodity.ToLower() == data.label.ToLower()).Sum(x => x.Sales);
                    var _OB = _OBimportList.Where(x => x.UniqueId == vessel.UniqueId && x.Commodity.ToLower() == data.label.ToLower()).Sum(x => x.OpeningBalance);
                    var production = _PandCData.Where(doc => doc.Contains(data.value + "-Production") && doc["UniqueId"] == BsonValue.Create(vessel.UniqueId)).Sum(doc => doc[data.value + "-Production"].AsDecimal);
                    production = (production) + (_PandCLocalData.Where(doc => doc.Contains(data.value + "-Production") && doc["UniqueId"] == BsonValue.Create(vessel.UniqueId)).Sum(doc => doc[data.value + "-Production"].AsDecimal));                    
                    var consumption = _PandCData.Where(doc => doc.Contains(data.value + "-Consumption") &&  doc["UniqueId"] == BsonValue.Create(vessel.UniqueId)).Sum(doc => doc[data.value + "-Consumption"].AsDecimal);
                    consumption = consumption + (_PandCLocalData.Where(doc => doc.Contains(data.value + "-Consumption") &&  doc["UniqueId"] == BsonValue.Create(vessel.UniqueId)).Sum(doc => doc[data.value + "-Consumption"].AsDecimal));

                    closingBalance.Add(new closingBalanceModel
                    {
                        Commodity = data.label,
                        UniqueId = vessel.UniqueId,
                        IsSourceCommodity = (_OB != null && _OB > 0) ? true : false,
                        ClosingBalance = (_OB + production - consumption - sale) ?? 0
                    });
                }
            }

            return closingBalance;
        }

        private List<InstanceLevelPofitLossOutputModel> GetConsolidatedUnrealisedPandL(DashboardInputModel dashboardInputModel, LoggedInContext loggedInContext, List<VesselModel> vessels, List<ValidationMessage> validationMessages)
        {
            IMongoCollection<BsonDocument> datasetCollection = GetMongoCollectionObject<BsonDocument>(MongoDBCollectionConstants.DataSet);
            var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };
            string DailyRatesFormId = "2dd458e8-af57-4f85-bc3d-cffafabbfcf1";
            string fx_ana_India = "dca15a7d-ff5f-4b73-aaf7-80d069923815"; //ana India fx form Id

            DateTime fromDate = dashboardInputModel.FromDate ?? DateTime.UtcNow;
            DateTime toDate = dashboardInputModel.Todate ?? DateTime.UtcNow;
            int fromDay = fromDate.Day;
            int fromMonth = fromDate.Month;
            int fromYear = fromDate.Year;
            int toDay = toDate.Day;
            int toMonth = toDate.Month;
            int toYear = toDate.Year;

            var mtmValuePipeline = new List<BsonDocument>
            {
                    new BsonDocument("$match",
                    new BsonDocument("DataJson.FormData.entryDate",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    "",
                                    " ",
                                    BsonNull.Value
                                }))),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "Location",
                    new BsonDocument("$toLower", "$DataJson.FormData.location") },
                            { "EntryDate",
                    new BsonDocument("$toDate", "$DataJson.FormData.entryDate") },
                            { "ProductGroup",
                    new BsonDocument("$toLower", "$DataJson.FormData.productGroup") }
                        }),
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "IsArchived", false },
                            { "DataSourceId", DailyRatesFormId },
                            { "EntryDate",
                    new BsonDocument("$lte",
                    new DateTime(toYear, toMonth, toDay, 23, 0, 0)) },
                            { "ProductGroup", dashboardInputModel.ProductType.ToLower() }
                        }),
                    new BsonDocument("$sort",
                    new BsonDocument("EntryDate", -1)),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id",
                    new BsonDocument
                            {
                                { "Commodity", "$DataJson.FormData.commodity1" },
                                { "Location", "$Location" }
                            } },
                            { "RateInr",
                    new BsonDocument("$first",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.rateInr"),
                                        6
                                    })) }
                        }),
                    new BsonDocument("$match",
                    new BsonDocument("RateInr",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    0,
                                    BsonNull.Value
                                }))),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Location", "$_id.Location" },
                            { "Commodity", "$_id.Commodity" },
                            { "RateInr", "$RateInr" }
                        })
            };
            var vesselLocationsPipeLine = new List<BsonDocument>
            {
                    new BsonDocument("$match",
                    new BsonDocument("DataJson.FormData.tradeDate",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    BsonNull.Value,
                                    "",
                                    "0"
                                }))),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate") },
                            { "ProductGroup",
                    new BsonDocument("$toLower", "$DataJson.FormData.productGroup1") },
                            { "UniqueId",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.ImportUniqueId",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.localUniqueId",
                                            ""
                                        })
                                }) }
                        }),
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                    new DateTime(2020, 3, 28, 18, 30, 0) },
                                { "$lte",
                    new DateTime(2023, 3, 28, 18, 30, 0) }
                            } },
                            { "ProductGroup", "palm oil" },
                            { "UniqueId",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    BsonNull.Value,
                                    ""
                                }) }
                        }),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$DataJson.FormData")),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$UniqueId" },
                            { "Location",
                    new BsonDocument("$first", "$DataJson.FormData.location") }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "UniqueId", "$_id" },
                            { "Locaton", "$Location" }
                        })
            };
            var fxRemittancePipeline = new List<BsonDocument>
            {
                    new BsonDocument("$match",
                    new BsonDocument("DataJson.FormData.entryDate",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    "",
                                    " ",
                                    BsonNull.Value
                                }))),
                    new BsonDocument("$addFields",
                    new BsonDocument("EntryDate",
                    new BsonDocument("$toDate", "$DataJson.FormData.entryDate"))),
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "DataSourceId", fx_ana_India },
                            { "EntryDate",
                    new BsonDocument("$lte",
                    new DateTime(toYear, toMonth, toDay, 23, 0, 0)) }
                        }),
                    new BsonDocument("$sort",
                    new BsonDocument("EntryDate", -1)),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$DataJson.FormData.sourceContract" },
                            { "FxVaue",
                    new BsonDocument("$first",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.fxValuePendingRemittance"),
                                        6
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "UniqueId", "$_id" },
                            { "FxVaue", "$FxVaue" }
                        })
            };
            var usdtoInrPipeLine = new List<BsonDocument>
            {
                    new BsonDocument("$match",
                    new BsonDocument("DataJson.FormData.entryDate",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    "",
                                    " ",
                                    BsonNull.Value
                                }))),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "Location",
                    new BsonDocument("$toLower", "$DataJson.FormData.location") },
                            { "EntryDate",
                    new BsonDocument("$toDate", "$DataJson.FormData.entryDate") },
                            { "ProductGroup",
                    new BsonDocument("$toLower", "$DataJson.FormData.productGroup") }
                        }),
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "DataSourceId", DailyRatesFormId },
                            { "ProductGroup", dashboardInputModel.ProductType.ToLower() },
                            { "EntryDate",
                    new BsonDocument("$lte",
                    new DateTime(toYear, toMonth, toDay, 23, 0, 0)) },
                            { "DataJson.FormData.usdToInr",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    BsonNull.Value,
                                    "",
                                    "-"
                                }) }
                        }),
                    new BsonDocument("$sort",
                    new BsonDocument("EntryDate", -1)),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$DataJson.FormData.commodity1" },
                            { "USDToINR",
                    new BsonDocument("$first",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.usdToInr"),
                                        6
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Commodity", "$_id" },
                            { "USDToINR", "$USDToINR" }
                        })
            };
            var dutyMTMPipeLine = new List<BsonDocument>
            {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "DataJson.FormData.entryDate",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    "",
                                    " ",
                                    BsonNull.Value
                                }) },
                            { "DataJson.FormData.selectSourceContract",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    BsonNull.Value,
                                    ""
                                }) }
                        }),
                    new BsonDocument("$addFields",
                    new BsonDocument("EntryDate",
                    new BsonDocument("$toDate", "$DataJson.FormData.entryDate"))),
                    new BsonDocument("$match",
                    new BsonDocument("EntryDate",
                    new BsonDocument("$lte",
                    new DateTime(toYear, toMonth, toDay, 23, 0, 0)))),
                    new BsonDocument("$unwind",
                    new BsonDocument
                        {
                            { "path", "$DataJson.FormData" },
                            { "preserveNullAndEmptyArrays", false }
                        }),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "QuantityMTM", "$DataJson.FormData.totalUnpaidDutyQuantityMt" },
                            { "SourceData",
                    new BsonDocument("$filter",
                    new BsonDocument
                                {
                                    { "input",
                    new BsonDocument("$objectToArray", "$DataJson.FormData") },
                                    { "as", "dataSet" },
                                    { "cond",
                    new BsonDocument("$eq",
                    new BsonArray
                                        {
                                            "$$dataSet.k",
                                            new BsonDocument("$concat",
                                            new BsonArray
                                                {
                                                    "selectSourceContract",
                                                    "$DataJson.FormData.selectSourceContract",
                                                    "lookupchilddata"
                                                })
                                        }) }
                                }) }
                        }),
                    new BsonDocument("$unwind",
                    new BsonDocument
                        {
                            { "path", "$SourceData" },
                            { "preserveNullAndEmptyArrays", false }
                        }),
                    new BsonDocument("$sort",
                    new BsonDocument("EntryDate", -1)),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id",
                    new BsonDocument
                            {
                                { "Commodity", "$SourceData.v.commodity1" },
                                { "UniqueId", "$DataJson.FormData.selectSourceContract" }
                            } },
                            { "QuantityMTM",
                    new BsonDocument("$first",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$QuantityMTM"),
                                        6
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Commodity", "$_id.Commodity" },
                            { "UniqueId", "$_id.UniqueId" },
                            { "QuantityMTM", "$QuantityMTM" }
                        })
            };
            var dutyInrPipeLine = new List<BsonDocument>
            {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            { "DataJson.FormData.startDate",
                    new BsonDocument("$ne", "") },
                            { "DataJson.FormData.productGroup", dashboardInputModel.ProductType.ToUpper() }
                        }),
                    new BsonDocument("$addFields",
                    new BsonDocument("EntryDate",
                    new BsonDocument("$toDate", "$DataJson.FormData.startDate"))),
                    new BsonDocument("$match",
                    new BsonDocument("EntryDate",
                    new BsonDocument("$lte",
                    new DateTime(toYear, toMonth, toDay, 23, 0, 0)))),
                    new BsonDocument("$sort",
                    new BsonDocument("EntryDate", -1)),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$DataJson.FormData.commodity" },
                            { "CustomsDutyInr",
                    new BsonDocument("$first",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.totalCustomsDutyInrPerMtWithIgst"),
                                        6
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Commodity", "$_id" },
                            { "CustomsDutyInr", "$CustomsDutyInr" }
                        })
            };

            var mtmValuesData = datasetCollection.Aggregate<BsonDocument>(mtmValuePipeline, aggregateOptions).ToList();
            var vesselLocationsData = datasetCollection.Aggregate<BsonDocument>(vesselLocationsPipeLine, aggregateOptions).ToList();
            var fxRemittanceData = datasetCollection.Aggregate<BsonDocument>(fxRemittancePipeline, aggregateOptions).ToList();
            var usdtoInrData = datasetCollection.Aggregate<BsonDocument>(usdtoInrPipeLine, aggregateOptions).ToList();
            var dutyMTMData = datasetCollection.Aggregate<BsonDocument>(dutyMTMPipeLine, aggregateOptions).ToList();
            var dutyInrData = datasetCollection.Aggregate<BsonDocument>(dutyInrPipeLine, aggregateOptions).ToList();

            List<UnrealisedDataModel> mtmValuesList = BsonHelper.ConvertBsonDocumentListToModel<UnrealisedDataModel>(mtmValuesData);
            List<VesselModel> vesselLocationsList = BsonHelper.ConvertBsonDocumentListToModel<VesselModel>(vesselLocationsData);
            List<UnrealisedDataModel> fxRemittanceList = BsonHelper.ConvertBsonDocumentListToModel<UnrealisedDataModel>(fxRemittanceData);
            List<UnrealisedDataModel> usdtoInrList = BsonHelper.ConvertBsonDocumentListToModel<UnrealisedDataModel>(usdtoInrData);
            List<UnrealisedDataModel> dutyMTMList = BsonHelper.ConvertBsonDocumentListToModel<UnrealisedDataModel>(dutyMTMData);
            List<UnrealisedDataModel> dutyInrList = BsonHelper.ConvertBsonDocumentListToModel<UnrealisedDataModel>(dutyInrData);
            var closingBalanceList = GetConsolidatedClosingBalance(dashboardInputModel, loggedInContext, vessels, validationMessages);
            List<InstanceLevelPofitLossOutputModel> vesselUnrealisedData = new List<InstanceLevelPofitLossOutputModel>();
            mtmValuesList.RemoveAll(record => record.Commodity == null);

            foreach (VesselModel vessel in vessels)
            {
                string uniqueId = vessel.UniqueId;
                var _CBList = closingBalanceList.Where(x => x.UniqueId == uniqueId).ToList();
                string location = vesselLocationsList.Where(x => x.UniqueId == uniqueId).Select(x => x.Locaton).FirstOrDefault();
                decimal? finalClosingBalance = 0;
                decimal? fxVaue = (fxRemittanceList.Where(x => x.UniqueId == uniqueId).Select(x => x.FxVaue).FirstOrDefault());

                foreach (var data in _CBList)
                {
                    string commodity = data.Commodity.ToLower();
                    decimal? mtmvalue = 0;

                    if (!string.IsNullOrEmpty(location))
                    {
                        mtmvalue = mtmValuesList.Where(x => x.Location.ToLower() == location.ToLower() && x.Commodity.ToLower() == commodity)
                                                                        .Select(x => x.RateInr).FirstOrDefault();
                        if (mtmvalue == null || mtmvalue == 0)
                        {
                            mtmvalue = mtmValuesList.Where(x => x.Location.ToLower() == "central" && x.Commodity.ToLower() == commodity)
                                                    .Select(x => x.RateInr).FirstOrDefault();
                        }
                    }
                    
                    if (data.IsSourceCommodity)
                    {
                        decimal? usdToInr = usdtoInrList.Where(x => x.Commodity.ToLower() == commodity).Select(x => x.USDToINR).FirstOrDefault();
                        decimal? dutyMTM = dutyMTMList.Where(x => x.Commodity.ToLower() == commodity && x.UniqueId == uniqueId).Select(x => x.QuantityMTM).FirstOrDefault();
                        decimal? dutyInr = dutyInrList.Where(x => x.Commodity.ToLower() == commodity).Select(x => x.CustomsDutyInr).FirstOrDefault();

                        finalClosingBalance = (finalClosingBalance ?? 0) + ((usdToInr * fxVaue) ?? 0) + ((dutyMTM * dutyInr) ?? 0);
                    }

                    finalClosingBalance = (finalClosingBalance ?? 0) + ((mtmvalue * data.ClosingBalance) ?? 0);
                }
                vesselUnrealisedData.Add(new InstanceLevelPofitLossOutputModel
                {
                    VesselName = uniqueId,
                    UnRealisedTotal = finalClosingBalance
                });
            }
            return vesselUnrealisedData;
        }

        private List<InstanceLevelPofitLossOutputModel> GetConsolidatedUnrealisedPandL1(DashboardInputModel dashboardInputModel, LoggedInContext loggedInContext, List<VesselModel> vessels, List<ValidationMessage> validationMessages)
        {
            IMongoCollection<BsonDocument> datasetCollection = GetMongoCollectionObject<BsonDocument>(MongoDBCollectionConstants.DataSet);
            var aggregateOptions = new AggregateOptions() { AllowDiskUse = true };
            string DailyRatesFormId = "2dd458e8-af57-4f85-bc3d-cffafabbfcf1";
            string fx_ana_India = "dca15a7d-ff5f-4b73-aaf7-80d069923815"; //ana India fx form Id

            DateTime fromDate = dashboardInputModel.FromDate ?? DateTime.UtcNow;
            DateTime toDate = dashboardInputModel.Todate ?? DateTime.UtcNow;
            int fromDay = fromDate.Day;
            int fromMonth = fromDate.Month;
            int fromYear = fromDate.Year;
            int toDay = toDate.Day;
            int toMonth = toDate.Month;
            int toYear = toDate.Year;

            var mtmValuePipeline = new List<BsonDocument>
            {
                    new BsonDocument("$match",
                    new BsonDocument{
                        {"CompanyId",loggedInContext.CompanyGuid.ToString() },
                        { "DataJson.FormData.entryDate",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    "",
                                    " ",
                                    BsonNull.Value
                                }) } }),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "Location",
                    new BsonDocument("$toLower", "$DataJson.FormData.location") },
                            { "EntryDate",
                    new BsonDocument("$toDate", "$DataJson.FormData.entryDate") },
                            { "ProductGroup",
                    new BsonDocument("$toLower", "$DataJson.FormData.productGroup") }
                        }),
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            {"CompanyId",loggedInContext.CompanyGuid.ToString() },
                            { "IsArchived", false },
                            { "DataSourceId", DailyRatesFormId },
                            { "EntryDate",
                    new BsonDocument("$lte",
                    new DateTime(toYear, toMonth, toDay, 23, 0, 0)) },
                            { "ProductGroup", dashboardInputModel.ProductType.ToLower() }
                        }),
                    new BsonDocument("$sort",
                    new BsonDocument("EntryDate", -1)),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id",
                    new BsonDocument
                            {
                                { "Commodity", "$DataJson.FormData.commodity1" },
                                { "Location", "$Location" }
                            } },
                            { "RateInr",
                    new BsonDocument("$first",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.rateInr"),
                                        6
                                    })) }
                        }),
                    new BsonDocument("$match",
                    new BsonDocument{
                        {"CompanyId",loggedInContext.CompanyGuid.ToString() },
                    { "RateInr",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    0,
                                    BsonNull.Value
                                }) } }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Location", "$_id.Location" },
                            { "Commodity", "$_id.Commodity" },
                            { "RateInr", "$RateInr" }
                        })
            };

            var vesselLocationsPipeLine = new List<BsonDocument>
            {
                    new BsonDocument("$match",
                    new BsonDocument{
                        {"CompanyId",loggedInContext.CompanyGuid.ToString() },
                        { "DataJson.FormData.tradeDate",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    BsonNull.Value,
                                    "",
                                    "0"
                                }) } }),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "datefilter",
                    new BsonDocument("$toDate", "$DataJson.FormData.tradeDate") },
                            { "ProductGroup",
                    new BsonDocument("$toLower", "$DataJson.FormData.productGroup1") },
                            { "UniqueId",
                    new BsonDocument("$concat",
                    new BsonArray
                                {
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.ImportUniqueId",
                                            ""
                                        }),
                                    new BsonDocument("$ifNull",
                                    new BsonArray
                                        {
                                            "$DataJson.FormData.localUniqueId",
                                            ""
                                        })
                                }) }
                        }),
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            {"CompanyId",loggedInContext.CompanyGuid.ToString() },
                            { "IsArchived", false },
                            { "datefilter",
                    new BsonDocument
                            {
                                { "$gte",
                    new DateTime(2020, 3, 28, 18, 30, 0) },
                                { "$lte",
                    new DateTime(2023, 3, 28, 18, 30, 0) }
                            } },
                            { "ProductGroup", "palm oil" },
                            { "UniqueId",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    BsonNull.Value,
                                    ""
                                }) }
                        }),
                    new BsonDocument("$unwind",
                    new BsonDocument("path", "$DataJson.FormData")),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$UniqueId" },
                            { "Location",
                    new BsonDocument("$first", "$DataJson.FormData.location") }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "UniqueId", "$_id" },
                            { "Locaton", "$Location" }
                        })
            };

            var fxRemittancePipeline = new List<BsonDocument>
            {
                    new BsonDocument("$match",
                    new BsonDocument{
                        {"CompanyId",loggedInContext.CompanyGuid.ToString() },
                        { "DataJson.FormData.entryDate",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    "",
                                    " ",
                                    BsonNull.Value
                                }) } }),
                    new BsonDocument("$addFields",
                    new BsonDocument("EntryDate",
                    new BsonDocument("$toDate", "$DataJson.FormData.entryDate"))),
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            {"CompanyId",loggedInContext.CompanyGuid.ToString() },
                            { "DataSourceId", fx_ana_India },
                            { "EntryDate",
                    new BsonDocument("$lte",
                    new DateTime(toYear, toMonth, toDay, 23, 0, 0)) }
                        }),
                    new BsonDocument("$sort",
                    new BsonDocument("EntryDate", -1)),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$DataJson.FormData.sourceContract" },
                            { "FxVaue",
                    new BsonDocument("$first",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.fxValuePendingRemittance"),
                                        6
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "UniqueId", "$_id" },
                            { "FxVaue", "$FxVaue" }
                        })
            };

            var usdtoInrPipeLine = new List<BsonDocument>
            {
                    new BsonDocument("$match",
                    new BsonDocument{
                        {"CompanyId",loggedInContext.CompanyGuid.ToString() },
                        { "DataJson.FormData.entryDate",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    "",
                                    " ",
                                    BsonNull.Value
                                }) } }),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "Location",
                    new BsonDocument("$toLower", "$DataJson.FormData.location") },
                            { "EntryDate",
                    new BsonDocument("$toDate", "$DataJson.FormData.entryDate") },
                            { "ProductGroup",
                    new BsonDocument("$toLower", "$DataJson.FormData.productGroup") }
                        }),
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            {"CompanyId",loggedInContext.CompanyGuid.ToString() },
                            { "DataSourceId", DailyRatesFormId },
                            { "ProductGroup", dashboardInputModel.ProductType.ToLower() },
                            { "EntryDate",
                    new BsonDocument("$lte",
                    new DateTime(toYear, toMonth, toDay, 23, 0, 0)) },
                            { "DataJson.FormData.usdToInr",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    BsonNull.Value,
                                    "",
                                    "-"
                                }) }
                        }),
                    new BsonDocument("$sort",
                    new BsonDocument("EntryDate", -1)),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$DataJson.FormData.commodity1" },
                            { "USDToINR",
                    new BsonDocument("$first",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.usdToInr"),
                                        6
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Commodity", "$_id" },
                            { "USDToINR", "$USDToINR" }
                        })
            };

            var dutyMTMPipeLine = new List<BsonDocument>
            {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            {"CompanyId",loggedInContext.CompanyGuid.ToString() },
                            { "DataJson.FormData.entryDate",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    "",
                                    " ",
                                    BsonNull.Value
                                }) },
                            { "DataJson.FormData.selectSourceContract",
                    new BsonDocument("$nin",
                    new BsonArray
                                {
                                    BsonNull.Value,
                                    ""
                                }) }
                        }),
                    new BsonDocument("$addFields",
                    new BsonDocument("EntryDate",
                    new BsonDocument("$toDate", "$DataJson.FormData.entryDate"))),
                    new BsonDocument("$match",
                    new BsonDocument{
                        {"CompanyId",loggedInContext.CompanyGuid.ToString() },
                        { "EntryDate",
                    new BsonDocument("$lte",
                    new DateTime(toYear, toMonth, toDay, 23, 0, 0)) }}),
                    new BsonDocument("$unwind",
                    new BsonDocument
                        {
                            { "path", "$DataJson.FormData" },
                            { "preserveNullAndEmptyArrays", false }
                        }),
                    new BsonDocument("$addFields",
                    new BsonDocument
                        {
                            { "QuantityMTM", "$DataJson.FormData.totalUnpaidDutyQuantityMt" },
                            { "SourceData",
                    new BsonDocument("$filter",
                    new BsonDocument
                                {
                                    { "input",
                    new BsonDocument("$objectToArray", "$DataJson.FormData") },
                                    { "as", "dataSet" },
                                    { "cond",
                    new BsonDocument("$eq",
                    new BsonArray
                                        {
                                            "$$dataSet.k",
                                            new BsonDocument("$concat",
                                            new BsonArray
                                                {
                                                    "selectSourceContract",
                                                    "$DataJson.FormData.selectSourceContract",
                                                    "lookupchilddata"
                                                })
                                        }) }
                                }) }
                        }),
                    new BsonDocument("$unwind",
                    new BsonDocument
                        {
                            { "path", "$SourceData" },
                            { "preserveNullAndEmptyArrays", false }
                        }),
                    new BsonDocument("$sort",
                    new BsonDocument("EntryDate", -1)),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id",
                    new BsonDocument
                            {
                                { "Commodity", "$SourceData.v.commodity1" },
                                { "UniqueId", "$DataJson.FormData.selectSourceContract" }
                            } },
                            { "QuantityMTM",
                    new BsonDocument("$first",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$QuantityMTM"),
                                        6
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Commodity", "$_id.Commodity" },
                            { "UniqueId", "$_id.UniqueId" },
                            { "QuantityMTM", "$QuantityMTM" }
                        })
            };

            var dutyInrPipeLine = new List<BsonDocument>
            {
                    new BsonDocument("$match",
                    new BsonDocument
                        {
                            {"CompanyId",loggedInContext.CompanyGuid.ToString() },
                            { "DataJson.FormData.startDate",
                    new BsonDocument("$ne", "") },
                            { "DataJson.FormData.productGroup", dashboardInputModel.ProductType.ToUpper() }
                        }),
                    new BsonDocument("$addFields",
                    new BsonDocument("EntryDate",
                    new BsonDocument("$toDate", "$DataJson.FormData.startDate"))),
                    new BsonDocument("$match",
                    new BsonDocument{
                        {"CompanyId",loggedInContext.CompanyGuid.ToString() },
                        { "EntryDate",
                    new BsonDocument("$lte",
                    new DateTime(toYear, toMonth, toDay, 23, 0, 0)) } }),
                    new BsonDocument("$sort",
                    new BsonDocument("EntryDate", -1)),
                    new BsonDocument("$group",
                    new BsonDocument
                        {
                            { "_id", "$DataJson.FormData.commodity" },
                            { "CustomsDutyInr",
                    new BsonDocument("$first",
                    new BsonDocument("$round",
                    new BsonArray
                                    {
                                        new BsonDocument("$toDecimal", "$DataJson.FormData.totalCustomsDutyInrPerMtWithIgst"),
                                        6
                                    })) }
                        }),
                    new BsonDocument("$project",
                    new BsonDocument
                        {
                            { "_id", 0 },
                            { "Commodity", "$_id" },
                            { "CustomsDutyInr", "$CustomsDutyInr" }
                        })
            };

            var mtmValuesData = datasetCollection.Aggregate<BsonDocument>(mtmValuePipeline, aggregateOptions).ToList();
            var vesselLocationsData = datasetCollection.Aggregate<BsonDocument>(vesselLocationsPipeLine, aggregateOptions).ToList();
            var fxRemittanceData = datasetCollection.Aggregate<BsonDocument>(fxRemittancePipeline, aggregateOptions).ToList();
            var usdtoInrData = datasetCollection.Aggregate<BsonDocument>(usdtoInrPipeLine, aggregateOptions).ToList();
            var dutyMTMData = datasetCollection.Aggregate<BsonDocument>(dutyMTMPipeLine, aggregateOptions).ToList();
            var dutyInrData = datasetCollection.Aggregate<BsonDocument>(dutyInrPipeLine, aggregateOptions).ToList();

            List<UnrealisedDataModel> mtmValuesList = BsonHelper.ConvertBsonDocumentListToModel<UnrealisedDataModel>(mtmValuesData);
            List<VesselModel> vesselLocationsList = BsonHelper.ConvertBsonDocumentListToModel<VesselModel>(vesselLocationsData);
            List<UnrealisedDataModel> fxRemittanceList = BsonHelper.ConvertBsonDocumentListToModel<UnrealisedDataModel>(fxRemittanceData);
            List<UnrealisedDataModel> usdtoInrList = BsonHelper.ConvertBsonDocumentListToModel<UnrealisedDataModel>(usdtoInrData);
            List<UnrealisedDataModel> dutyMTMList = BsonHelper.ConvertBsonDocumentListToModel<UnrealisedDataModel>(dutyMTMData);
            List<UnrealisedDataModel> dutyInrList = BsonHelper.ConvertBsonDocumentListToModel<UnrealisedDataModel>(dutyInrData);
            var closingBalanceList = GetConsolidatedClosingBalance(dashboardInputModel, loggedInContext, vessels, validationMessages);
            List<InstanceLevelPofitLossOutputModel> vesselUnrealisedData = new List<InstanceLevelPofitLossOutputModel>();
            mtmValuesList.RemoveAll(record => record.Commodity == null);

            foreach (VesselModel vessel in vessels)
            {
                string uniqueId = vessel.UniqueId;
                var _CBList = closingBalanceList.Where(x => x.UniqueId == uniqueId).ToList();
                string location = vesselLocationsList.Where(x => x.UniqueId == uniqueId).Select(x => x.Locaton).FirstOrDefault();
                decimal? finalClosingBalance = 0;
                decimal? fxVaue = (fxRemittanceList.Where(x => x.UniqueId == uniqueId).Select(x => x.FxVaue).FirstOrDefault());

                foreach (var data in _CBList)
                {
                    string commodity = data.Commodity.ToLower();
                    decimal? mtmvalue = 0;

                    if (!string.IsNullOrEmpty(location))
                    {
                        mtmvalue = mtmValuesList.Where(x => x.Location.ToLower() == location.ToLower() && x.Commodity.ToLower() == commodity)
                                                                        .Select(x => x.RateInr).FirstOrDefault();
                        if (mtmvalue == null || mtmvalue == 0)
                        {
                            mtmvalue = mtmValuesList.Where(x => x.Location.ToLower() == "central" && x.Commodity.ToLower() == commodity)
                                                    .Select(x => x.RateInr).FirstOrDefault();
                        }
                    }

                    if (data.IsSourceCommodity)
                    {
                        decimal? usdToInr = usdtoInrList.Where(x => x.Commodity.ToLower() == commodity).Select(x => x.USDToINR).FirstOrDefault();
                        decimal? dutyMTM = dutyMTMList.Where(x => x.Commodity.ToLower() == commodity && x.UniqueId == uniqueId).Select(x => x.QuantityMTM).FirstOrDefault();
                        decimal? dutyInr = dutyInrList.Where(x => x.Commodity.ToLower() == commodity).Select(x => x.CustomsDutyInr).FirstOrDefault();

                        finalClosingBalance = (finalClosingBalance ?? 0) + ((usdToInr * fxVaue) ?? 0) + ((dutyMTM * dutyInr) ?? 0);
                    }

                    finalClosingBalance = (finalClosingBalance ?? 0) + ((mtmvalue * data.ClosingBalance) ?? 0);
                }
                vesselUnrealisedData.Add(new InstanceLevelPofitLossOutputModel
                {
                    VesselName = uniqueId,
                    UnRealisedTotal = finalClosingBalance
                });
            }
            return vesselUnrealisedData;
        }

        private string GetSalesFormId(string companyName, LoggedInContext loggedInContext)
        {
            LoggingManager.Info("Getting hardcoded sales formId based on logged in context.");
            string formId = null;
            if (!string.IsNullOrWhiteSpace(companyName))
            {
                if (companyName.ToLower() == "ana-kakinada")
                    formId = "bae0b939-6e5f-4291-8892-30bd1823b0cd";
                else if (companyName.ToLower() == "umiro-india")
                    formId = "f92678f3-0aed-418b-963d-4ec29bf98f1d";
                else if (companyName.ToLower() == "ana-krishnapatnam")
                    formId = "e99919ea-d36b-469b-99da-3d1d9823e2f6";
                else if (companyName.ToLower() == "ana-chennai")
                    formId = "48ad8f08-9ae5-4009-a4c4-2c2d33e9bb89";
                else if (companyName.ToLower() == "ana+umiro")
                    formId = null; //sales form not existed
                else if (companyName.ToLower() == "sg-ana")
                    formId = "3c4abdbd-36f6-486c-937a-48f31b2502cd";
                else if (companyName.ToLower() == "ana-mumbai")
                    formId = "53839149-0623-442a-a6bf-fd846db70e5b";
                else if (companyName.ToLower() == "ana-mangalore")
                    formId = "a0dfd197-45c5-4344-b736-645102ab778a";
                else if (companyName.ToLower() == "ana-kandla")
                    formId = "c58946f2-215e-462a-962f-8c7ec3017257";
            }
            return formId;

        }
    }
}