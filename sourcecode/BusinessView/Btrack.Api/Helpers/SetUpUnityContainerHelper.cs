using Btrak.Dapper.Dal.Repositories;
using Btrak.Services.Audit;
using Btrak.Services.ConfigurationTypes;
using Btrak.Services.ConsideredHours;
using Btrak.Services.Goals;
using Btrak.Services.Projects;
using Btrak.Services.Status;
using Btrak.Dapper.Dal.Partial;
using Btrak.Services;
using Btrak.Services.ActTracker;
using Unity;
using Unity.Lifetime;
using Btrak.Services.BoardTypeApis;
using Btrak.Services.WorkFlow;
using Btrak.Services.Permission;
using Btrak.Services.BoardTypes;
using Btrak.Services.ButtonType;
using Btrak.Services.Communication;
using Btrak.Services.User;
using Btrak.Services.Employee;
using Btrak.Services.LeaveType;
using Btrak.Services.Role;
using Btrak.Services.TimeZone;
using Btrak.Services.UserStory;
using Btrak.Services.Features;
using Btrak.Services.TransitionDeadline;
using Btrak.Services.ProcessDashboardStatus;
using Btrak.Services.Dashboard;
using Btrak.Services.FileUpload;
using Btrak.Services.FileUploadDownload;
using Btrak.Services.Work;
using Btrak.Services.GenericForm;
using Btrak.Services.HrDashboard;
using Btrak.Services.ProductivityDashboard;
using Btrak.Services.TestRail;
using Btrak.Services.Comments;
using Btrak.Services.Branch;
using Btrak.Services.LeaveSessions;
using Btrak.Services.Leaves;
using Btrak.Services.HrManagement;
using Btrak.Services.FoodOrders;
using Btrak.Services.Notification;
using Btrak.Services.Chat;
using Btrak.Services.Canteen;
using Btrak.Services.CompanyLocation;
using Btrak.Services.Helpers;
using Btrak.Services.Helpers.TestRailValidationHelpers;
using ExpenseRepository = Btrak.Dapper.Dal.Partial.ExpenseRepository;
using Btrak.Services.WorkAllocationManagement;
using Btrak.Services.CompanyStructure;
using Btrak.Services.CompanyStructureManagement;
using Btrak.Services.EntityRole;
using Btrak.Services.EntityType;
using Btrak.Services.StatusReporting;
using Btrak.Services.MasterData;
using Btrak.Services.SoftLabels;
using Btrak.Services.MasterData.FeedbackMasterData;
using Btrak.Services.Currency;
using Btrak.Services.Assets;
using Btrak.Services.BurnDowns;
using Btrak.Services.Chromium;
using Btrak.Services.Products;
using Btrak.Services.Suppliers;
using Btrak.Services.TimeSheet;
using Btrak.Services.AdhocWork;
using Btrak.Services.CustomApplication;
using Btrak.Services.MyWork;
using Btrak.Services.ActivityTracker;
using Btrak.Services.SystemManagement;
using Btrak.Services.Widgets;
using Btrak.Services.DocumentManagement;
using Btrak.Services.BillingManagement;
using NotificationRepository = Btrak.Dapper.Dal.Partial.NotificationRepository;
using Btrak.Services.PubNub;
using Btrak.Services.Persistance;
using Btrak.Services.Feedback;
using FeedbackRepository = Btrak.Dapper.Dal.Partial.FeedbackRepository;
using Btrak.Services.CustomFields;
using Btrak.Services.Email;
using Btrak.Services.Templates;
using Btrak.Services.WorkFlowLibrary.ProjectManagement;
using Btrak.Services.WorkflowManagemet;
using Btrak.Services.WorkFlowTrigger;
using Btrak.Services.AutomatedWorkflowmanagement;
using Btrak.Services.RecentSearch;
using Btrak.Services.CustomTags;
using Btrak.Services.Roster;
using Btrak.Services.ComplianceAudit;
using ExpenseService = Btrak.Services.ExpenseService.ExpenseService;
using IExpenseService = Btrak.Services.ExpenseService.IExpenseService;
using Btrak.Services.Sprints;
using Btrak.Services.PayRoll;
using Btrak.Services.SystemConfiguration;
using Btrak.Services.Performance;
using Btrak.Services.Training;
using Btrak.Services.Payment;
using Btrak.Services.RepositoryCommits;
using Btrak.Services.Integration;
using Btrak.Services.Recruitment;
using Btrak.Services.CRM;
using Btrak.Services.Intro;
using Btrak.Services.MSMQPublisher;
using Btrak.Services.SMS;
using Btrak.Services.Productivity;
using Btrak.Services.Site;
using Btrak.Services.GRD;
using Btrak.Services.GroupeERomande;
using Btrak.Services.BankAccount;
using Btrak.Services.FormDataServices;
using Btrak.Services.Trading;
using Btrak.Services.DocumentStorageServices;
using Btrak.Services.Lives;
using Btrak.Services.PositionTable;
using Btrak.Services.MailTemplateActivity;
using Btrak.Services.PDFHTMLDesigner;
using Btrak.Services.ExcelToCustomApplicationRecords;

namespace BTrak.Api.Helpers
{
    public static class SetUpUnityContainerHelper
    {
        public static UnityContainer SetUpUnityContainer()
        {
            var unityContainer = new UnityContainer();

            unityContainer.RegisterType<IUpdateGoalService, UpdateGoalService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IProjectService, ProjectService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProjectRepository, ProjectRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IAuditService, AuditService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<AuditRepository, AuditRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IStatusService, StatusService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStoryStatuRepository, UserStoryStatuRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IGoalService, GoalService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<GoalRepository, GoalRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ICompanyStructureService, CompanyStructureService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CompanyStructureRepository, CompanyStructureRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ICompanyLocationService, CompanyLocationService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CompanyLocationRepository, CompanyLocationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IConfigurationTypeService, ConfigurationTypeService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IConfigurationSettingService, ConfigurationSettingService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ConfigurationTypeRepository, ConfigurationTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IProjectTypeService, ProjectTypeService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProjectTypeRepository, ProjectTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IConsideredHourService, ConsideredHourService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ConsiderHourRepository, ConsiderHourRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IProjectFeatureService, ProjectFeatureService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProjectFeatureRepository, ProjectFeatureRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IProjectMemberService, ProjectMemberService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserProjectRepository, UserProjectRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IUserStoryService, UserStoryService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStoryRepository, UserStoryRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStorySpentTimeRepository, UserStorySpentTimeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<LogTimeOptionRepository, LogTimeOptionRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IUserStoryReplanService, UserStoryReplanService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStoryReplanRepository, UserStoryReplanRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IUserStoryReplanTypeService, UserStoryReplanTypeService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStoryReplanTypeRepository, UserStoryReplanTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IGoalReplanService, GoalReplanService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<GoalReplanRepository, GoalReplanRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IProcessDashboardService, ProcessDashboardService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProcessDashboardRepository, ProcessDashboardRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IProcessDashboardStatusService, ProcessDashboardStatusService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProcessDashboardStatuRepository, ProcessDashboardStatuRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IFeatureService, FeatureService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<FeatureRepository, FeatureRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IGoalStatusService, GoalStatusService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<GoalStatuRepository, GoalStatuRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IBugPriorityService, BugPriorityService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BugPriorityRepository, BugPriorityRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IProductivityDashboardService, ProductivityDashboardService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProductivityDashboardRepository, ProductivityDashboardRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IHrDashboardService, HrDashboardService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<HrDashboardRepository, HrDashboardRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IGoalReplanTypeService, GoalReplanTypeService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<GoalReplanTypeRepository, GoalReplanTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ICommentsService, CommentsService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CommentRepository, CommentRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IHrManagementService, HrManagementService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ShiftTimingRepository, ShiftTimingRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmployeeShiftRepository, EmployeeShiftRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ContractTypeRepository, ContractTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<DepartmentRepository, DepartmentRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<DesignationRepository, DesignationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<PayGradeRepository, PayGradeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BreakTypeRepository, BreakTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CountryRepository, CountryRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<RegionRepository, RegionRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<RelationshipRepository, RelationshipRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IWorkFlowStatusService, WorkFlowStatusService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<WorkflowStatuRepository, WorkflowStatuRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IWorkFlowService, WorkFlowService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<WorkFlowRepository, WorkFlowRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IBoardTypeService, BoardTypeService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BoardTypeRepository, BoardTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IBoardTypeUiService, BoardTypeUiService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BoardTypeUiRepository, BoardTypeUiRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IPermissionService, PermissionService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CrudOperationRepository, CrudOperationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IWorkFlowEligibleStatusTransitionService, WorkFlowEligibleStatusTransitionService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<WorkflowEligibleStatusTransitionRepository, WorkflowEligibleStatusTransitionRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IRoleService, RoleService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<RoleRepository, RoleRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IRoleFeatureService, RoleFeatureService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<RoleFeatureRepository, RoleFeatureRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IBranchService, BranchService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BranchRepository, BranchRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IUserService, UserService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserRepository, UserRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<MailTemplateActivityRepository, MailTemplateActivityRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IEmployeeService, EmployeeService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmployeeRepository, EmployeeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IBoardTypeApiService, BoardTypeApiService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BoardTypeApiRepository, BoardTypeApiRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IButtonTypeService, ButtonTypeService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ButtonTypeRepository, ButtonTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ITimeZoneService, TimeZoneService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<TimeZoneRepository, TimeZoneRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IWorkAllocationManagementService, WorkAllocationManagementService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<WorkAllocationManagementRepository, WorkAllocationManagementRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ILeaveTypeService, LeaveTypeService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<LeaveTypeRepository, LeaveTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ITransitionDeadlineService, TransitionDeadlineService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<TransitionDeadlineRepository, TransitionDeadlineRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IUserStoryPriorityService, UserStoryPriorityService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStoryPriorityRepository, UserStoryPriorityRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IFileService, FileService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IFileStoreService, FileStoreService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<FileRepository, FileRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IWorkService, WorkService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<WorkRepository, WorkRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ITestSuiteService, TestSuiteService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IMilestoneService, MilestoneService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ITestRunService, TestRunService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IOverviewService, OverviewService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<TestSuitePartialRepository, TestSuitePartialRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<TestRailPartialRepository, TestRailPartialRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<TestSuiteValidationHelper, TestSuiteValidationHelper>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<TestRailValidationHelper, TestRailValidationHelper>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ITestRailFileService, TestRailFileService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<TestRailFileRepository, TestRailFileRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IReportService, ReportService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ICommunicationService, CommunicationService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ILeaveSessionsService, LeaveSessionsService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ILeavesManagementService, LeavesManagementService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<LeaveApplicationRepository, LeaveApplicationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IFoodOrderManagementService, FoodOrderManagementService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<FoodOrderRepository, FoodOrderRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<INotificationService, NotificationService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IChatService, ChatService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<MessageRepository, MessageRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<NotificationRepository, NotificationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ChannelMemberRepository, ChannelMemberRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ChannelRepository, ChannelRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ICanteenService, CanteenService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<Btrak.Dapper.Dal.Partial.CanteenFoodItemRepository, Btrak.Dapper.Dal.Partial.CanteenFoodItemRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CanteenManagementValidationHelpers, CanteenManagementValidationHelpers>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<MenuItemRepository, MenuItemRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ExpenseRepository, ExpenseRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ExpenseValidationHelper, ExpenseValidationHelper>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IUserStoryReviewCommentService, UserStoryReviewCommentService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStoryReviewCommentRepository, UserStoryReviewCommentRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IUserStorySubTypeService, UserStorySubTypeService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStorySubTypeRepository, UserStorySubTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IGenericFormService, GenericFormService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<GenericFormRepository, GenericFormRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IStatusReportingService, StatusReportingService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<StatusReportingRepository, StatusReportingRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ISoftLabelsService, SoftLabelsService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<SoftLabelsRepository, SoftLabelsRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IMasterDataManagementService, MasterDataManagementService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<MasterDataManagementRepository, MasterDataManagementRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CurrencyRepository, CurrencyRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CurrencyConversionRepository, CurrencyConversionRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<PaymentRepository, PaymentRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<RateTypeRepository, RateTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<PayGradeRateRepository, PayGradeRateRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmployeeEmergencyContactRepository, EmployeeEmergencyContactRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmploymentContractRepository, EmploymentContractRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmployeeJobRepository, EmployeeJobRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmployeeImmigrationRepository, EmployeeImmigrationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmployeeSalaryRepository, EmployeeSalaryRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmployeeReportToRepository, EmployeeReportToRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmployeeWorkExperienceRepository, EmployeeWorkExperienceRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmployeeEducationRepository, EmployeeEducationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<SkillRepository, SkillRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmployeeSkillRepository, EmployeeSkillRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmployeeLanguageRepository, EmployeeLanguageRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmployeeMembershipRepository, EmployeeMembershipRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BankDetailRepository, BankDetailRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ICompanyStructureManagementService, CompanyStructureManagementService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IEntityFeatureService, EntityFeatureService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EntityFeatureRepository, EntityFeatureRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IEntityRoleFeatureService, EntityRoleFeatureService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EntityRoleFeatureRepository, EntityRoleFeatureRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IUpsertFeedbackTypeService, UpsertFeedbackTypeService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<FeedbackTypeMasterDataRepository, FeedbackTypeMasterDataRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IEntityRoleService, EntityRoleService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EntityRoleRepository, EntityRoleRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IGenericFormMasterDataService, GenericFormMasterDataService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<GenericFormMasterDataRepository, GenericFormMasterDataRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStoryReplanTypeRepository, UserStoryReplanTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IAccessibleIpAddressService, AccessibleIpAddressService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<AccessibleIpAddressesRepository, AccessibleIpAddressesRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ICurrencyService, CurrencyService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<MasterTableRepository, MasterTableRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStoryReplanRepository, UserStoryReplanRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStoryRepository, UserStoryRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserRepository, UserRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BugPriorityRepository, BugPriorityRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProjectFeatureRepository, ProjectFeatureRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserProjectRepository, UserProjectRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProjectRepository, ProjectRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<GoalRepository, GoalRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<MessageRepository, MessageRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<NotificationRepository, NotificationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ChannelMemberRepository, ChannelMemberRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ChannelRepository, ChannelRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IAssetServices, AssetServices>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<AssetRepository, AssetRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BoardTypeApiRepository, BoardTypeApiRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BoardTypeUiRepository, BoardTypeUiRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BoardTypeRepository, BoardTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<WorkFlowRepository, WorkFlowRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BoardTypeUiRepository, BoardTypeUiRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BranchRepository, BranchRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BugPriorityRepository, BugPriorityRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ButtonTypeRepository, ButtonTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<FoodOrderRepository, FoodOrderRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<MessageRepository, MessageRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<NotificationRepository, NotificationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ChannelRepository, ChannelRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ChannelMemberRepository, ChannelMemberRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CommentRepository, CommentRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CompanyLocationRepository, CompanyLocationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CountryRepository, CountryRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<RegionRepository, RegionRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CompanyStructureRepository, CompanyStructureRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ConfigurationTypeRepository, ConfigurationTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ConfigurationTypeRepository, ConfigurationTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ConsiderHourRepository, ConsiderHourRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<MasterTableRepository, MasterTableRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmployeeRepository, EmployeeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ExpenseRepository, ExpenseRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<FeatureRepository, FeatureRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<FeedbackTypeMasterDataRepository, FeedbackTypeMasterDataRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<FileRepository, FileRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<FoodOrderRepository, FoodOrderRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<GenericFormMasterDataRepository, GenericFormMasterDataRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<GenericFormRepository, GenericFormRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<GoalReplanTypeRepository, GoalReplanTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<GoalStatuRepository, GoalStatuRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<GoalRepository, GoalRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<HrDashboardRepository, HrDashboardRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ShiftTimingRepository, ShiftTimingRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<EmployeeShiftRepository, EmployeeShiftRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ContractTypeRepository, ContractTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<DepartmentRepository, DepartmentRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CurrencyRepository, CurrencyRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CurrencyConversionRepository, CurrencyConversionRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<PaymentRepository, PaymentRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<DesignationRepository, DesignationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<PayGradeRepository, PayGradeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BreakTypeRepository, BreakTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BankDetailRepository, BankDetailRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<LeaveApplicationRepository, LeaveApplicationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<LeaveApplicationRepository, LeaveApplicationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<LeaveSessionRepository, LeaveSessionRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<LeaveTypeRepository, LeaveTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<LeaveTypeRepository, LeaveTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserRepository, UserRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<MasterDataManagementRepository, MasterDataManagementRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CrudOperationRepository, CrudOperationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProcessDashboardRepository, ProcessDashboardRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProcessDashboardStatuRepository, ProcessDashboardStatuRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProductivityDashboardRepository, ProductivityDashboardRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IProductServices, ProductServices>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProductRepository, ProductRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProjectFeatureRepository, ProjectFeatureRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserProjectRepository, UserProjectRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<MessageRepository, MessageRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<NotificationRepository, NotificationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ChannelMemberRepository, ChannelMemberRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ChannelRepository, ChannelRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProjectRepository, ProjectRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProjectTypeRepository, ProjectTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<RoleFeatureRepository, RoleFeatureRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserRepository, UserRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<SoftLabelsRepository, SoftLabelsRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<StatusReportingRepository, StatusReportingRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStoryStatuRepository, UserStoryStatuRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ISupplierServices, SupplierServices>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<SupplierRepository, SupplierRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ITimeSheetService, TimeSheetService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<TimeSheetRepository, TimeSheetRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<TimeZoneRepository, TimeZoneRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<TransitionDeadlineRepository, TransitionDeadlineRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStoryPriorityRepository, UserStoryPriorityRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStoryReviewCommentRepository, UserStoryReviewCommentRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStorySubTypeRepository, UserStorySubTypeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserRepository, UserRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<WorkAllocationManagementRepository, WorkAllocationManagementRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<WorkRepository, WorkRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<WorkflowEligibleStatusTransitionRepository, WorkflowEligibleStatusTransitionRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<WorkFlowRepository, WorkFlowRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ILeaveStatusService, LeaveStatusService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<LeaveStatusRepository, LeaveStatusRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IPaymentTypeService, PaymentTypeService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<PaymentTypeMasterDataRepository, PaymentTypeMasterDataRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<PaymentTypeMasterDataRepository, PaymentTypeMasterDataRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IChromiumService, ChromiumService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IBurndownService, BurndownService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IAdhocWorkService, AdhocWorkService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<AdhocWorkRepository, AdhocWorkRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IMyWorkService, MyWorkService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<MyWorkRepository, MyWorkRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ISystemManagementService, SystemManagementService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<SystemCurrencyRepository, SystemCurrencyRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<SystemCountryRepository, SystemCountryRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<SystemRoleRepository, SystemRoleRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<MyWorkRepository, MyWorkRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ActTrackerRepository, ActTrackerRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IActTrackerService, ActTrackerService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IActivityTrackerService, ActivityTrackerService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ActivityTrackerRepository, ActivityTrackerRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<WidgetRepository, WidgetRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IWidgetService, WidgetService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ICustomApplicationService, CustomApplicationService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CustomApplicationRepository, CustomApplicationRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IFeedbackService, FeedbackService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<FeedbackRepository, FeedbackRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IClientService, ClientService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ClientRepository, ClientRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IInvoiceService, InvoiceService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BillingInvoiceRepository, BillingInvoiceRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IScheduleService, ScheduleService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ScheduleRepository, ScheduleRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<Btrak.Services.BillingManagement.IExpenseService, Btrak.Services.BillingManagement.ExpenseService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BillingExpenseRepository, BillingExpenseRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IStoreManagementService, StoreManagementService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<StoreManagementRepository, StoreManagementRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<UserStoryLinkRepository, UserStoryLinkRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IUserStoryLinkService, UserStoryLinkService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IPersistanceService, PersistanceService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<PersistanceRepository, PersistanceRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ICustomFieldService, CustomFieldService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CustomFieldRepository, CustomFieldRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ITemplatesService, TemplatesService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<TemplatesRepository, TemplatesRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IProjectManagementWorkFlowService, ProjectManagementWorkFlowService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IEmailService, EmailService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IMailTemplateActivityService, MailTemplateActivityService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IWorkFlowTrigger, WorkflowTrigger>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IWorkflowManagementService, WorkflowManagementService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<WorkflowManagementRepository, WorkflowManagementRepository>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<IAutomatedWorkflowmanagementServices, AutomatedWorkflowmanagementServices>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<AutomatedWorkflowmanagementRepository, AutomatedWorkflowmanagementRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ISprintService, SprintService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<SprintRepository, SprintRepository>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<IRecentSearch, RecentSearchService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<RecentSearchRepository, RecentSearchRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ICustomTagService, CustomTagService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CustomTagRepository, CustomTagRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<RatesheetRepository, RatesheetRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IRosterService, RosterService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IEmployeeRosterCreation, EmployeeRosterCreation>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<IExpenseService, ExpenseService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ExpenseRepository, ExpenseRepository>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<IRepositoryCommitsService, RepositoryCommitsService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<RepositoryCommitsRepository, RepositoryCommitsRepository>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<IEstimateService, EstimateService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BillingEstimateRepository, BillingEstimateRepository>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<IPerformanceService, PerformanceService>(new HierarchicalLifetimeManager());
            unityContainer.RegisterType<PerformanceRepository, PerformanceRepository>(new HierarchicalLifetimeManager());

            unityContainer.RegisterType<IPayRollService, PayRollService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<PayRollRepository, PayRollRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IPubNubService, PubNubService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IComplianceAuditService, ComplianceAuditService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ComplianceAuditRepository, ComplianceAuditRepository>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<ITrainingCourseService, TrainingCourseService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<TrainingCourseRepository, TrainingCourseRepository>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<ISystemConfigurationService, SystemConfigurationService>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<ICustomApiAppService, CustomApiAppService>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<IPaymentService, PaymentService>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<IIntegrationService, IntegrationService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IntegrationRepository, IntegrationRepository>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<IRecruitmentService, RecruitmentService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<RecruitmentRepository, RecruitmentRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IRecruitmentMasterDataService, RecruitmentMasterDataService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<RecruitmentMasterDataRepository, RecruitmentMasterDataRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<CallRepository, CallRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ICallService, CallService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ITwilioWrapperClientService, TwilioWrapperClientService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ExternalServiceProviderRepository, ExternalServiceProviderRepository>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<IIntroService, IntroService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IntroRepository, IntroRepository>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<ITrackerActivityPublisher, TrackerActivityPublisher>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ITrackerScreenshotPublisher, TrackerScreenshotPublisher>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ITrackerSummaryPublisher, TrackerSummaryPublisher>(new PerResolveLifetimeManager());
            
            unityContainer.RegisterType<ISmsService, SmsService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<SmsRepository, SmsRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IProductivityService, ProductivityService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IDataSetService, DataSetService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IDataSourceService, DataSourceService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ProductivityDashboardRepositary, ProductivityDashboardRepositary>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<ILeadService, LeadService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<LeadTemplateRepository, LeadTemplateRepository>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<IRoleService, RoleService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<RoleRepository, RoleRepository>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<ISiteService, SiteService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<SiteRepository, SiteRepository>(new PerResolveLifetimeManager());

            unityContainer.RegisterType<IGRDService, GRDService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<GRDRepository, GRDRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IGroupeERomandeService, GroupeERomandeService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<GroupeERomandeRepository, GroupeERomandeRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IBankAccountService, BankAccountService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<BankAccountRepository, BankAccountRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ITradingService, TradingService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<ILivesService, LivesService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<TradingRepository, TradingRepository>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IDataSourceHistoryService, DataSourceHistoryService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IDocumentStorageService, DocumentStorageService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IPositionTableDashboardService, PositionTableDashboardService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IPDFHTMLDesignerService, PDFHTMLDesignerService>(new PerResolveLifetimeManager());
            unityContainer.RegisterType<IDailyUploadExcelService, DailyUploadExcelService>(new PerResolveLifetimeManager());
            
            return unityContainer;
        }
    }
}