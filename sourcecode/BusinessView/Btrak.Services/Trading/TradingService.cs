using Btrak.Dapper.Dal.Models;
using Btrak.Dapper.Dal.Partial;
using Btrak.Dapper.Dal.Repositories;
using Btrak.Models;
using Btrak.Models.BillingManagement;
using Btrak.Models.CompanyStructure;
using Btrak.Models.CompanyStructureManagement;
using Btrak.Models.Currency;
using Btrak.Models.File;
using Btrak.Models.FormDataServices;
using Btrak.Models.GenericForm;
using Btrak.Models.MasterData;
using Btrak.Models.SystemManagement;
using Btrak.Models.TradeManagement;
using Btrak.Models.User;
using Btrak.Services.BillingManagement;
using Btrak.Services.Chromium;
using Btrak.Services.CompanyStructure;
using Btrak.Services.CompanyStructureManagement;
using Btrak.Services.DocumentStorageServices;
using Btrak.Services.Email;
using Btrak.Services.FileUpload;
using Btrak.Services.FormDataServices;
using Btrak.Services.Helpers;
using Btrak.Services.HrManagement;
using BTrak.Common;
using BusinessView.Common;
using JsonDiffPatchDotNet;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Blob;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;
using System.Globalization;
using System.Web.Configuration;
using Uno.Extensions;
using static BTrak.Common.Enumerators;
using Btrak.Services.TimeZone;
using Btrak.Models.TimeZone;
using Btrak.Services.Lives;
using JsonDeserialiseData = BTrak.Common.JsonDeserialiseData;

namespace Btrak.Services.Trading
{
    public class TradingService : ITradingService
    {
        private readonly TradingRepository _tradingRepository;
        private readonly ClientRepository _clientRepository;
        private readonly IDataSourceService _dataSourceService;
        private readonly IDocumentStorageService _documentStorageService;
        private readonly IClientService _clientService;
        private readonly ICompanyStructureManagementService _companyStructureManagementService;
        private readonly ICompanyStructureService _companyStructureService;
        private readonly IHrManagementService _hrManagementService;
        private readonly IEmailService _emailService;
        private readonly GoalRepository _goalRepository;
        private readonly UserRepository _userRepository;
        private readonly IDataSetService _dataSetService;
        private readonly ILeadService _leadService;
        private readonly RoleFeatureRepository _roleFeatureRepository = new RoleFeatureRepository();
        private readonly CompanyStructureRepository _companyStructureRepository = new CompanyStructureRepository();
        private readonly MasterTableRepository _masterTable = new MasterTableRepository();
        private readonly IChromiumService _chromiumService;
        private readonly MasterDataManagementRepository _masterDataManagementRepository;
        private readonly IFileService _fileService;
        private readonly FileRepository _fileRepository;
        private readonly ITimeZoneService _timeZoneService;
        private readonly ILivesService _livesService;


        public TradingService(TradingRepository tradingRepository, ClientRepository clientRepository, IDataSourceService dataSourceService, IDocumentStorageService documentStorageService, IHrManagementService hrManagementService,
            IClientService clientService, ICompanyStructureManagementService companyStructureManagementService, IEmailService emailService, GoalRepository goalRepository, ChromiumService chromiumService
            , UserRepository userRepository, IFileService fileService, IDataSetService dataSetService, ICompanyStructureService companyStructureService, ILeadService leadService, MasterDataManagementRepository masterDataManagementRepository, FileRepository fileRepository,
            ITimeZoneService timeZoneService,ILivesService livesService)
        {
            _tradingRepository = tradingRepository;
            _clientRepository = clientRepository;
            _dataSourceService = dataSourceService;
            _clientService = clientService;
            _chromiumService = chromiumService;
            _companyStructureManagementService = companyStructureManagementService;
            _hrManagementService = hrManagementService;
            _emailService = emailService;
            _companyStructureService = companyStructureService;
            _goalRepository = goalRepository;
            _leadService = leadService;
            _userRepository = userRepository;
            _dataSetService = dataSetService;
            _documentStorageService = documentStorageService;
            _masterDataManagementRepository = masterDataManagementRepository;
            _fileService = fileService;
            _fileRepository = fileRepository;
            _timeZoneService = timeZoneService;
            _livesService = livesService;
        }

        public async Task<Guid?> UpsertContractTemplate(ContractTemplateModel ContractTemplateModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertContractTemplate", "Trading Service"));

            LoggingManager.Debug(ContractTemplateModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            FinalTemplateModel FinalTemplateModel = new FinalTemplateModel();
            FinalTemplateModel.ContractTemplateJson = ContractTemplateModel.ContractTemplateFormJson;
            FinalTemplateModel.ContractTypeId = ContractTemplateModel.ContractTypeId;
            FinalTemplateModel.TermsAndConditionId = ContractTemplateModel.TermsAndConditionId;

            DataSourceInputModel dataSourceInputModel = new DataSourceInputModel();
            dataSourceInputModel.Id = ContractTemplateModel.ContractTemplateId;
            dataSourceInputModel.Fields = JsonConvert.SerializeObject(FinalTemplateModel);
            dataSourceInputModel.CompanyId = loggedInContext.CompanyGuid;
            dataSourceInputModel.DataSourceType = "ContractTemplate";
            dataSourceInputModel.DataSourceTypeNumber = 2;
            dataSourceInputModel.Name = ContractTemplateModel.ContractTemplateName;
            dataSourceInputModel.IsArchived = ContractTemplateModel.IsArchived;
            dataSourceInputModel.FormBgColor = ContractTemplateModel.FormBgColor;
            Guid? result = await _dataSourceService.CreateDataSource(dataSourceInputModel, loggedInContext, validationMessages);
            if(validationMessages.Count == 0)
            {
                var formKeys = new List<Component>();
                if (!string.IsNullOrEmpty(ContractTemplateModel.FormKeys))
                {
                    formKeys = JsonConvert.DeserializeObject<List<Component>>(ContractTemplateModel.FormKeys);
                }

                ContractTemplateModel.ContractTemplateId = result;
                if (ContractTemplateModel.ContractTemplateId != null)
                {
                    var dataSourceKeyModel = new DataSourceKeysInputModel();
                    dataSourceKeyModel.DataSourceId = ContractTemplateModel.ContractTemplateId;
                    Guid? Id = await _dataSourceService.UpdateDataSourceKeys(dataSourceKeyModel, loggedInContext, validationMessages);
                }

                if (ContractTemplateModel.FormKeys != null)
                {
                    foreach (var comp in formKeys)
                    {
                        var dataSourceKeyInputModel = new DataSourceKeysInputModel();
                        dataSourceKeyInputModel.DataSourceId = ContractTemplateModel.ContractTemplateId;
                        dataSourceKeyInputModel.Key = comp.Key;
                        dataSourceKeyInputModel.Label = comp.Label;
                        dataSourceKeyInputModel.Type = comp.Type;
                        dataSourceKeyInputModel.UserView = comp.UserView == null ? comp.UserView : comp.UserView;
                        dataSourceKeyInputModel.UserEdit = comp.UserEdit == null ? comp.UserEdit : comp.UserEdit;
                        dataSourceKeyInputModel.RoleView = comp.RoleView == null ? comp.RoleView : comp.RoleView;
                        dataSourceKeyInputModel.RoleEdit = comp.RoleEdit == null ? comp.RoleEdit : comp.RoleEdit;
                        dataSourceKeyInputModel.RelatedFieldsLabel = comp.RelatedFieldsLabel == null ? comp.RelatedFieldsLabel : comp.RelatedFieldsLabel;
                        dataSourceKeyInputModel.RelatedFormsFields = comp.RelatedFormsFields == null ? comp.RelatedFormsFields : comp.RelatedFormsFields;
                        dataSourceKeyInputModel.FormName = comp.FormName;
                        dataSourceKeyInputModel.Relatedfield = comp.Relatedfield == null ? comp.Relatedfield : comp.Relatedfield;
                        dataSourceKeyInputModel.RelatedFieldsfinalData = comp.RelatedFieldsfinalData == null ? comp.RelatedFieldsfinalData : comp.RelatedFieldsfinalData;
                        dataSourceKeyInputModel.ConcateFormFields = comp.ConcateFormFields == null ? comp.ConcateFormFields : comp.ConcateFormFields;
                        dataSourceKeyInputModel.DateTimeForLinkedFields = comp.DateTimeForLinkedFields == null ? comp.DateTimeForLinkedFields : comp.DateTimeForLinkedFields;
                        dataSourceKeyInputModel.ConcatSplitKey = comp.ConcatSplitKey == null ? comp.ConcatSplitKey : comp.ConcatSplitKey;
                        dataSourceKeyInputModel.FieldName = comp.FieldName;
                        dataSourceKeyInputModel.SelectedFormName = comp.SelectedFormName;
                        Guid? newId = await _dataSourceService.CreateDataSourceKeys(dataSourceKeyInputModel, loggedInContext, validationMessages);
                    }

                }

                return result;
            }
            else
            {
                return null;
            }
            
        }
        public List<ContractTemplateModel> GetContractTemplates(ContractTemplateModel ContractTemplateModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetContractTemplates", "Trading Service"));

            LoggingManager.Debug(ContractTemplateModel.ToString());


            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            var dataSources = SearchDataSource(ContractTemplateModel.ContractTemplateId, null, "ContractTemplate", ContractTemplateModel.IsArchived, ContractTemplateModel.TemplateIds, loggedInContext, validationMessages).GetAwaiter().GetResult();
            return dataSources;
        }
        public async Task<List<ContractTemplateModel>> SearchDataSource(Guid? id, Guid? companyModuleId, string searchText, bool? isArchived, string formIds, LoggedInContext loggedInContext, List<ValidationMessage> validationmessages)
        {
            try
            {
                using (var client = new HttpClient())
                {
                    string serviceurl = "DataService/DataSourceApi/SearchDataSource?id=" + id + "&companyModuleId=" + companyModuleId + "&formIds=" + formIds + "&searchText=" + searchText + "&isArchived=" + isArchived;
                    client.BaseAddress = new Uri(WebConfigurationManager.AppSettings["MongoApiBaseUrl"]);

                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", loggedInContext.authorization);
                    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                    HttpResponseMessage response = new HttpResponseMessage();
                    response = await client.GetAsync(serviceurl).ConfigureAwait(false);
                    if (response.IsSuccessStatusCode)
                    {
                        string apiResponse = response.Content.ReadAsStringAsync().Result;
                        var data = JObject.Parse(apiResponse);
                        var dataSetResponse = (bool)data["success"] ? (object)data["data"] : null;
                        var result = JsonConvert.DeserializeObject<List<DataSourceOutputModel>>(JsonConvert.SerializeObject(dataSetResponse));
                        var rdata = result.Select(e => new ContractTemplateModel
                        {
                            ContractTemplateId = e.Id,
                            ContractTemplateName = e.Name,
                            Fields = e.Fields,
                            IsArchived = e.IsArchived,
                            CreatedDateTime = e.CreatedDateTime,
                            FormBgColor = e.FormBgColor

                        }).OrderByDescending(e => e.CreatedDateTime).ToList();
                        return rdata;

                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "SearchDataSets", "DataSourceService", exception.Message), exception);
                return null;
            }
        }
        public async Task<List<DataSetHistoryInputModel>> SearchContractHistory(Guid? dataSetId, string contractType, LoggedInContext loggedInContext, List<ValidationMessage> validationmessages)
        {
            try
            {
                using (var client = new HttpClient())
                {
                    string serviceurl = "DataService/DataSetHistoryApi/SearchDataSetHistory?dataSetId=" + dataSetId;
                    client.BaseAddress = new Uri(WebConfigurationManager.AppSettings["MongoApiBaseUrl"]);

                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", loggedInContext.authorization);
                    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                    HttpResponseMessage response = new HttpResponseMessage();
                    response = await client.GetAsync(serviceurl).ConfigureAwait(false);
                    if (response.IsSuccessStatusCode)
                    {
                        string apiResponse = response.Content.ReadAsStringAsync().Result;
                        var data = JObject.Parse(apiResponse);
                        var dataSetResponse = (bool)data["success"] ? (object)data["data"] : null;
                        var result = JsonConvert.DeserializeObject<List<DataSetHistoryInputModel>>(JsonConvert.SerializeObject(dataSetResponse));
                        var users = _tradingRepository.GetUsersForBinding(loggedInContext, validationmessages);
                        List<ClientInvoiceStatus> invoiceStatuses = new List<ClientInvoiceStatus>();
                        List<ContractStatusModel> purchaseStatuses = new List<ContractStatusModel>();
                        if (contractType == "Invoice Queue")
                        {
                            ClientInvoiceStatus ClientInvoiceStatus = new ClientInvoiceStatus();
                            invoiceStatuses = _clientRepository.GetAllInvoiceStatus(ClientInvoiceStatus, loggedInContext, validationmessages).ToList();
                        }
                        else
                        {
                            purchaseStatuses = _tradingRepository.GetPurchaseStatusForBinding(loggedInContext, validationmessages);
                        }
                        var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationmessages)));
                        var toleranceList = JsonConvert.DeserializeObject<List<ToleranceModel>>(JsonConvert.SerializeObject(GetFormDropdowns("tolerance", loggedInContext, validationmessages)));
                        var destinationOrLeadportList = JsonConvert.DeserializeObject<List<PaymentTermOutputModel>>(JsonConvert.SerializeObject(GetFormDropdowns("destination", loggedInContext, validationmessages)));
                        var countrysList = JsonConvert.DeserializeObject<List<CountryApiReturnModel>>(JsonConvert.SerializeObject(GetFormDropdowns("country", loggedInContext, validationmessages)));
                        var currencysList = JsonConvert.DeserializeObject<List<CurrencyOutputModel>>(JsonConvert.SerializeObject(GetFormDropdowns("currency", loggedInContext, validationmessages)));
                        Regex isGuid = new Regex(@"^({){0,1}[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}(}){0,1}$", RegexOptions.Compiled);
                        foreach (var r in result)
                        {
                            if (r.CreatedByUserId != null)
                            {
                                var user = (from u in users where (u.UserAuthenticationId == r.CreatedByUserId || u.Id == r.CreatedByUserId) select u).FirstOrDefault();
                                if (user != null)
                                {
                                    r.CreatedByUserName = user.Name;
                                    r.ProfileImage = user.ProfileImage;
                                }
                                else
                                {
                                    r.CreatedByUserName = null;
                                    r.ProfileImage = null;
                                }
                            }
                            else
                            {
                                r.CreatedByUserName = null;
                                r.ProfileImage = null;
                            }
                            if (r.Field == "StatusId" && contractType == "Invoice Queue")
                            {
                                if (r.OldValue != null)
                                    r.OldValue = (from ps in invoiceStatuses where ps.InvoiceStatusId == new Guid(r.OldValue) select ps).FirstOrDefault().StatusName;
                                if (r.NewValue != null)
                                    r.NewValue = (from ps in invoiceStatuses where ps.InvoiceStatusId == new Guid(r.NewValue) select ps).FirstOrDefault().StatusName;
                            }
                            else if (r.Field == "StatusId")
                            {
                                if (r.OldValue != null)
                                    r.OldValue = (from ps in purchaseStatuses where ps.ContractStatusId == new Guid(r.OldValue) select ps).FirstOrDefault().StatusName;
                                if (r.NewValue != null)
                                    r.NewValue = (from ps in purchaseStatuses where ps.ContractStatusId == new Guid(r.NewValue) select ps).FirstOrDefault().StatusName;
                            }
                            if (r.Field == "BrokerId")
                            {
                                if (!string.IsNullOrEmpty(r.OldValue) && isGuid.IsMatch(r.OldValue))
                                {
                                    Guid? brokerId = new Guid(r.OldValue);
                                    var user = _clientRepository.GetClientByUserId(null, null, loggedInContext, validationmessages, new Guid(r.OldValue));
                                    if (user != null)
                                    {
                                        r.OldValue = user.FirstName + " " + user.LastName;
                                    }
                                    else
                                    {
                                        r.OldValue = null;
                                    }
                                }
                                if (!string.IsNullOrEmpty(r.NewValue) && isGuid.IsMatch(r.NewValue))
                                {
                                    Guid? brokerId = new Guid(r.NewValue);
                                    var user = _clientRepository.GetClientByUserId(null, null, loggedInContext, validationmessages, brokerId);
                                    if (user != null)
                                    {
                                        r.NewValue = user.FirstName + " " + user.LastName;

                                    }
                                    else
                                    {
                                        r.NewValue = null;
                                    }

                                }
                            }
                            if (r.Field.ToLower().Contains("commodity") && r.Field != "IsSelectCommodityBroker")
                            {
                                if (!string.IsNullOrEmpty(r.OldValue) && isGuid.IsMatch(r.OldValue))
                                {
                                    r.OldValue =
                                        (from commodity in commodityList
                                         where commodity.ProductId == new Guid(r.OldValue)
                                         select commodity).FirstOrDefault().ProductName;
                                }
                                if (!string.IsNullOrEmpty(r.NewValue) && isGuid.IsMatch(r.NewValue))
                                {
                                    r.NewValue =
                                        (from commodity in commodityList
                                         where commodity.ProductId == new Guid(r.NewValue)
                                         select commodity).FirstOrDefault().ProductName;
                                }
                            }
                            if (r.Field.ToLower() == "tolerance")
                            {
                                if (!string.IsNullOrEmpty(r.OldValue) && isGuid.IsMatch(r.OldValue))
                                {
                                    r.OldValue =
                                        (from tolerance in toleranceList
                                         where tolerance.ToleranceId == new Guid(r.OldValue)
                                         select tolerance).FirstOrDefault().ToleranceName;
                                }
                                if (!string.IsNullOrEmpty(r.NewValue) && isGuid.IsMatch(r.NewValue))
                                {
                                    r.NewValue =
                                        (from tolerance in toleranceList
                                         where tolerance.ToleranceId == new Guid(r.NewValue)
                                         select tolerance).FirstOrDefault().ToleranceName;
                                }
                            }
                            if (r.Field.ToLower().Contains("destination") || r.Field.ToLower().Contains("leadport"))
                            {
                                if (!string.IsNullOrEmpty(r.OldValue) && isGuid.IsMatch(r.OldValue))
                                {
                                    r.OldValue =
                                        (from destinationOrLeadport in destinationOrLeadportList
                                         where destinationOrLeadport.Id == new Guid(r.OldValue)
                                         select destinationOrLeadport).FirstOrDefault().Name;
                                }
                                if (!string.IsNullOrEmpty(r.NewValue) && isGuid.IsMatch(r.NewValue))
                                {
                                    r.NewValue =
                                        (from destinationOrLeadport in destinationOrLeadportList
                                         where destinationOrLeadport.Id == new Guid(r.NewValue)
                                         select destinationOrLeadport).FirstOrDefault().Name;
                                }
                            }
                            if (r.Field.ToLower().Contains("countrycode"))
                            {
                                if (!string.IsNullOrEmpty(r.OldValue) && isGuid.IsMatch(r.OldValue))
                                {
                                    r.OldValue =
                                        (from country in countrysList
                                         where country.CountryId == new Guid(r.OldValue)
                                         select country).FirstOrDefault().CountryCode;
                                }
                                if (!string.IsNullOrEmpty(r.NewValue) && isGuid.IsMatch(r.NewValue))
                                {
                                    r.NewValue =
                                        (from country in countrysList
                                         where country.CountryId == new Guid(r.NewValue)
                                         select country).FirstOrDefault().CountryCode;
                                }
                            }
                            else if (r.Field.ToLower().Contains("country") || r.Field.ToLower().Contains("place"))
                            {
                                if (!string.IsNullOrEmpty(r.OldValue) && isGuid.IsMatch(r.OldValue))
                                {
                                    r.OldValue =
                                        (from country in countrysList
                                         where country.CountryId == new Guid(r.OldValue)
                                         select country).FirstOrDefault().CountryName;
                                }
                                if (!string.IsNullOrEmpty(r.NewValue) && isGuid.IsMatch(r.NewValue))
                                {
                                    r.NewValue =
                                        (from country in countrysList
                                         where country.CountryId == new Guid(r.NewValue)
                                         select country).FirstOrDefault().CountryName;
                                }
                            }

                            if (r.Field.ToLower().Contains("currency"))
                            {
                                if (!string.IsNullOrEmpty(r.OldValue) && isGuid.IsMatch(r.OldValue))
                                {
                                    r.OldValue =
                                        (from currency in currencysList
                                         where currency.CurrencyId == new Guid(r.OldValue)
                                         select currency).FirstOrDefault().CurrencyName;
                                }
                                if (!string.IsNullOrEmpty(r.NewValue) && isGuid.IsMatch(r.NewValue))
                                {
                                    r.NewValue =
                                        (from currency in currencysList
                                         where currency.CurrencyId == new Guid(r.NewValue)
                                         select currency).FirstOrDefault().CurrencyName;
                                }
                            }
                        }
                        return result;

                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "SearchDataSets", "DataSourceService", exception.Message), exception);
                return null;
            }
        }
        public object GetFormDropdowns(string DropDownType, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages, string Key = null, string KeyValue = null)
        {
            if (DropDownType.Contains("product"))
            {
                return _clientService.GetProductsList(new MasterProduct(), loggedInContext, validationMessages);
            }
            else if (DropDownType.Contains("country"))
            {
                return _companyStructureManagementService.GetCountries(new CountrySearchInputModel() { IsArchived = false }, validationMessages, loggedInContext);
            }
            else if (DropDownType.Contains("timeZones"))
            {
                return _timeZoneService.GetAllTimeZones(new TimeZoneInputModel() { IsArchived = false }, validationMessages);
            }
            else if (DropDownType.Contains("currency"))
            {
                return _hrManagementService.SearchCurrency(new CurrencySearchCriteriaInputModel(), loggedInContext, validationMessages);
            }
            else if (DropDownType.Contains("contractType"))
            {
                return _clientService.GetTradeContractTypes(new TradeContractTypesModel(), loggedInContext, validationMessages);
            }
            else if (DropDownType.Contains("commodityBroker"))
            {
                ClientInputModel clientInputModel = new ClientInputModel();
                clientInputModel.ClientTypeName = "Commodity Broker";
                return _clientService.GetClients(clientInputModel, loggedInContext, validationMessages).ToList();
            }
            else if (DropDownType.Contains("commodity"))
            {
                return _clientService.GetProductsList(new MasterProduct(), loggedInContext, validationMessages);
            }
            else if (DropDownType.Contains("destinationByCategory"))
            {
                PaymentTermSearchInputModel paymentInput = new PaymentTermSearchInputModel();

                if (Key != null && Key != string.Empty && KeyValue != null && KeyValue != string.Empty)
                {
                    if (Key.ToLower() == "PortCategoryId".ToLower())
                    {
                        paymentInput.PortCategoryId = new Guid(KeyValue);
                    }
                    return _leadService.GetPortDetails(paymentInput, loggedInContext, validationMessages);
                }
                else
                {
                    return null;
                }
            }
            else if (DropDownType.Contains("destination"))
            {
                return _leadService.GetPortDetails(new PaymentTermSearchInputModel(), loggedInContext, validationMessages);
            }
            else if (DropDownType.Contains("tolerance"))
            {
                return _tradingRepository.GetAllTolerances(new ToleranceModel(), loggedInContext, validationMessages).ToList();
            }
            else if (DropDownType.Contains("paymentCondtion"))
            {
                return _tradingRepository.GetAllPaymentConditions(new PaymentConditionModel(), loggedInContext, validationMessages).ToList();
            }
            else if (DropDownType.Contains("client"))
            {
                return _clientService.GetClients(new ClientInputModel(), loggedInContext, validationMessages).ToList();
            }
            else if (DropDownType.Contains("portagent"))
            {
                return _clientService.GetClients(new ClientInputModel() { ClientTypeName = "Port Agent" }, loggedInContext, validationMessages).ToList();
            }
            else if (DropDownType.Contains("vesselOwner"))
            {
                var data = _clientService.GetClients(new ClientInputModel() { ClientTypeName = "Vessel Owner" }, loggedInContext, validationMessages).ToList();
                var filterdData = data.Where(x => x.StatusName == "Verified").ToList();
                return filterdData;
            }
            else if (DropDownType.Contains("portCategory"))
            {
                return _tradingRepository.GetAllPortCategory(new PortCategorySearchInputModel() { IsArchived = false }, loggedInContext, validationMessages);
            }

            else if (DropDownType.Contains("livesclientslist"))
            {
                var clientInput = new ClientInputModel();
                clientInput.ReferenceType = "livesclientslist";

                List<ClientOutputModel> clientOutputModels = _clientService.GetClients(clientInput,  loggedInContext,  validationMessages);
                return clientOutputModels;
            }
            else
            {
                return null;
            }
        }
        public async Task<Guid?> UpsertContract(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertContractTemplate", "Trading Service"));

                LoggingManager.Debug(ContractModel.ToString());

                if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
                {
                    return null;
                }
                Guid? result;
                JObject formfield1 = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap1 = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield1)
                {
                    keyValueMap1.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (var keyValue in keyValueMap1)
                {
                    if (keyValue.Key == "brokerName" && (keyValue.Value != null && keyValue.Value != string.Empty))
                    {
                        ContractModel.BrokerId = ContractModel.ContractType != "Vessel" ? new Guid(keyValue.Value) : ContractModel.BrokerId;
                    }
                    if (keyValue.Key == "includeBroker" && (keyValue.Value != null && keyValue.Value != string.Empty))
                    {
                        ContractModel.IsSelectCommodityBroker = Convert.ToBoolean(keyValue.Value);
                    }
                }
                if (ContractModel.ContractType == "Invoice Queue")
                {
                    result = await UpsertInvoiceQueue(ContractModel, loggedInContext, validationMessages);
                }
                else
                {
                    FinalContractModel FinalContractModel = new FinalContractModel();
                    FinalContractModel.FormData = ContractModel.FormData;
                    FinalContractModel.ContractType = ContractModel.ContractType;
                    FinalContractModel.ClientId = ContractModel.ClientId;
                    FinalContractModel.StatusId = ContractModel.StatusId;
                    FinalContractModel.ContractPdf = ContractModel.ContractPdf;
                    FinalContractModel.BrokerId = ContractModel.BrokerId;
                    FinalContractModel.IsSelectCommodityBroker = ContractModel.IsSelectCommodityBroker;
                    FinalContractModel.IsSelectPercentage = ContractModel.IsSelectPercentage;
                    FinalContractModel.IsSelectValue = ContractModel.IsSelectValue;
                    FinalContractModel.IsSellerSignatureVerificationNeed = ContractModel.IsSellerSignatureVerificationNeed;
                    FinalContractModel.IsSGTraderSignatureVerificationNeed = ContractModel.IsSGTraderSignatureVerificationNeed;
                    FinalContractModel.IsVesselOwnerorBrokerSignatureVerificationNeed = ContractModel.IsVesselOwnerorBrokerSignatureVerificationNeed;
                    FinalContractModel.SellerSignatureRejectedComments = ContractModel.SellerSignatureRejectedComments;
                    FinalContractModel.SellerSignatureAcceptedComments = ContractModel.SellerSignatureAcceptedComments;
                    FinalContractModel.SgtraderSignatureRejectedComments = ContractModel.SgtraderSignatureRejectedComments;
                    FinalContractModel.SgtraderSignatureAcceptedComments = ContractModel.SgtraderSignatureAcceptedComments;
                    FinalContractModel.VesselOwnerorBrokerSignatureRejectedComments = ContractModel.VesselOwnerorBrokerSignatureRejectedComments;
                    FinalContractModel.VesselOwnerorBrokerSignatureAcceptedComments = ContractModel.VesselOwnerorBrokerSignatureAcceptedComments;
                    FinalContractModel.BrokeragePercentage = ContractModel.BrokeragePercentage;
                    FinalContractModel.BrokerageValue = ContractModel.BrokerageValue;
                    FinalContractModel.DraftAcceptComments = ContractModel.DraftAcceptComments;
                    FinalContractModel.DraftRejectComments = ContractModel.DraftRejectComments;
                    FinalContractModel.IsDraftRejected = ContractModel.IsDraftRejected;
                    FinalContractModel.IsContractLink = ContractModel.IsContractLink;
                    FinalContractModel.PurchaseContractIds = ContractModel.PurchaseContractIds;
                    FinalContractModel.SalesContractIds = ContractModel.SalesContractIds;
                    FinalContractModel.PurchaseQuantitySum = ContractModel.PurchaseQuantitySum;
                    FinalContractModel.SalesQuantitySum = ContractModel.SalesQuantitySum;
                    FinalContractModel.IsLinkingCompleted = ContractModel.IsLinkingCompleted;
                    FinalContractModel.SwitchBlDataSetId = ContractModel.SwitchBlDataSetId;
                    FinalContractModel.CancelComments = ContractModel.CancelComments;
                    FinalContractModel.CurrentPrice = ContractModel.CurrentPrice;
                    FinalContractModel.RFQUniqueId = ContractModel.RFQUniqueId;
                    FinalContractModel.TermsAndConditions = ContractModel.TermsAndConditions;
                    FinalContractModel.SellerSignatureAcceptance = ContractModel.SellerSignatureAcceptance;
                    FinalContractModel.SgSignatureAcceptance = ContractModel.SgSignatureAcceptance;
                    FinalContractModel.VesselOwnerorBrokerSignatureAcceptance = ContractModel.VesselOwnerorBrokerSignatureAcceptance;
                    FinalContractModel.RFQGuid = ContractModel.RFQGuid;
                    FinalContractModel.RFQId = ContractModel.RFQId;
                    FinalContractModel.TradeId = ContractModel.TradeId;
                    FinalContractModel.TradeStatus = ContractModel.TradeStatus;
                    FinalContractModel.IsShareCreditOrDebitNote = ContractModel.IsShareCreditOrDebitNote;
                    FinalContractModel.RemainingContractQuantity = ContractModel.RemainingContractQuantity;
                    FinalContractModel.IsCancelContract = ContractModel.IsCancelContract;
                    if (ContractModel.IsCreateLinkContract == true)
                    {
                        FinalContractModel.LinkCreatedDateTime = DateTime.UtcNow;
                    }
                    if (ContractModel.IsSellerSignatureDone)
                    {
                        FinalContractModel.IsSellerSignatureVerificationNeed = true;
                        FinalContractModel.IsSGTraderSignatureVerificationNeed = false;
                    }
                    if (ContractModel.IsSgTraderSignatureDone)
                    {
                        FinalContractModel.IsSellerSignatureVerificationNeed = false;
                        FinalContractModel.IsSGTraderSignatureVerificationNeed = true;
                    }
                    if (ContractModel.IsSellerSignatureAccepted == true)
                    {
                        FinalContractModel.SellerSignatureAcceptance = true;
                    }
                    if (ContractModel.IsSellerSignatureRejected == true)
                    {
                        FinalContractModel.SellerSignatureAcceptance = false;
                    }
                    if (ContractModel.IsSGTraderSignatureAccepted == true)
                    {
                        FinalContractModel.SgSignatureAcceptance = true;
                    }
                    if (ContractModel.IsSGTraderSignatureRejected == true)
                    {
                        FinalContractModel.SgSignatureAcceptance = false;
                    }

                    DataSetUpsertInputModel dataSetUpsertInputModel = new DataSetUpsertInputModel();
                    if (ContractModel.IsArchived == null)
                    {
                        ContractModel.IsArchived = false;
                    }

                    if (ContractModel.DataSetId == null)
                    {
                        List<ProductListOutPutModel> commoadityList = _clientService.GetProductsList(new MasterProduct(), loggedInContext, validationMessages);
                        var clientData = _clientRepository.GetClientByUserId(null, null, loggedInContext, validationMessages, ContractModel.ClientId);
                        var nameLength = clientData.FullName.Length;
                        string NameChar = string.Empty;
                        if (nameLength >= 5)
                        {
                            NameChar = clientData.FullName.Substring(0, 5);
                        }
                        else
                        {
                            NameChar = clientData.FullName.Substring(0, (nameLength - 1));
                        }

                        JObject formField = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                        Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                        foreach (KeyValuePair<string, JToken> keyValuePair in formField)
                        {
                            keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                        }
                        var commodity = string.Empty;
                        var contractNumber = string.Empty;
                        bool isContractNumberExists = false;

                        foreach (var keyValue in keyValueMap)
                        {
                            if (keyValue.Key == "commodityName")
                            {
                                if (keyValue.Value != "" && keyValue.Value != null)
                                {
                                    var commodityType = commoadityList.Find(x => x.ProductId.ToString() == keyValue.Value);
                                    commodity = commodityType.ProductName;
                                }
                                else
                                {
                                    commodity = "";
                                }
                            }
                            if (formField.ContainsKey("contractNumber") && keyValue.Key == "contractNumber" && keyValue.Value != "" && keyValue.Value != null)
                            {
                                isContractNumberExists = true;
                                contractNumber = keyValue.Value;
                            }
                        }

                        contractNumber = isContractNumberExists == false ? NameChar + "/MGV/" + commodity + "/" + DateTime.UtcNow.ToString("MMM/dd/yyyy") : contractNumber;

                        if (isContractNumberExists == false)
                        {
                            if (formField.ContainsKey("contractNumber"))
                            {
                                formField["contractNumber"] = contractNumber;
                            }
                            else
                            {
                                formField.Add("contractNumber", contractNumber);
                            }
                            FinalContractModel.FormData = formField; // JsonConvert.SerializeObject(formField);
                        }
                    }

                    if (ContractModel.IsPdfGenartion == true)
                    {
                        EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                        {
                            ClientId = ContractModel.ClientId,
                            EmailTemplateName = "ContractFinalPdfTemplate"
                        };

                        var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                        var html = template.EmailTemplate;

                        List<ProductListOutPutModel> commoadityList = _clientService.GetProductsList(new MasterProduct(), loggedInContext, validationMessages);

                        List<ToleranceModel> ToleranceList = _tradingRepository.GetAllTolerances(new ToleranceModel(), loggedInContext, validationMessages).ToList();
                        List<PaymentTermOutputModel> PortDetails = _leadService.GetPortDetails(new PaymentTermSearchInputModel(), loggedInContext, validationMessages).ToList();
                        List<CountryApiReturnModel> countryList = _companyStructureManagementService.GetCountries(new CountrySearchInputModel(), validationMessages, loggedInContext);
                        List<CurrencyOutputModel> currencyList = _hrManagementService.SearchCurrency(new CurrencySearchCriteriaInputModel(), loggedInContext, validationMessages);

                        JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                        Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                        DateTime dateValue;
                        var contractNumber = string.Empty;
                        var buyerAddressLine1 = string.Empty;
                        var buyerAddressLine2 = string.Empty;
                        var commodityName = string.Empty;
                        var quanityNumber = string.Empty;
                        var productName = string.Empty;
                        var tolerance = string.Empty;
                        var toleranceOther = string.Empty;
                        var priceCurrency = string.Empty;
                        var priceAmount = string.Empty;
                        var priceAmountDelimted = string.Empty;
                        var pricePerUnit = string.Empty;
                        var shipmentFromDate = string.Empty;
                        var shipmentToDate = string.Empty;
                        var sellerName = string.Empty;
                        var contact2 = string.Empty;
                        var sellerAddressLine1 = string.Empty;
                        var sellerAddressLine2 = string.Empty;
                        var sellerSignature = string.Empty;
                        var buyerSignature = string.Empty;
                        var buyerName = string.Empty;
                        var portOfLoading = string.Empty;
                        var portOfLoadingCountry = string.Empty;
                        var portOfDischarge = string.Empty;
                        var portOfDischargeCountry = string.Empty;
                        var measurementUnit = string.Empty;
                        var incoterms1 = string.Empty;
                        var incotermsAdditionalCommentsIfAny = string.Empty;
                        var other1 = string.Empty;
                        var commodityDescriptionIfAny = string.Empty;
                        var sellerContact = string.Empty;
                        string[] portLoading = new string[0];
                        string[] portDischarge = new string[0];

                        foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                        {
                            keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                        }
                        foreach (var keyValue in keyValueMap)
                        {
                            if (keyValue.Key == "contractNumber")
                            {
                                contractNumber = keyValue.Value;
                            }
                            if (keyValue.Key == "buyerAddressLine1")
                            {
                                buyerAddressLine1 = keyValue.Value;
                            }
                            if (keyValue.Key == "buyerAddressLine2")
                            {
                                buyerAddressLine2 = keyValue.Value;
                            }
                            if (keyValue.Key == "commodityName")
                            {
                                if (keyValue.Value != "" && keyValue.Value != null)
                                {
                                    var commodityType = commoadityList.Find(x => x.ProductId.ToString() == keyValue.Value.ToString());
                                    commodityName = commodityType.ProductName;
                                }
                                else
                                {
                                    commodityName = "";
                                }

                            }
                            if (keyValue.Key == "originLoadPort")
                            {
                                if (!string.IsNullOrEmpty(keyValue.Value))
                                {
                                    var data = keyValue.Value;
                                    string[] portLoadings = new string[0];
                                    portLoadings = JsonConvert.DeserializeObject<string[]>(data);
                                    if (portLoadings.Length > 0)
                                    {
                                        foreach (var port in portLoadings)
                                        {
                                            var portOfLoadingDetails = PortDetails.Find(x => x.Id.ToString() == port.ToString());
                                            if (portOfLoading == "")
                                            {
                                                portOfLoading = portOfLoadingDetails.Name;
                                            }
                                            else
                                            {
                                                portOfLoading = portOfLoading + ", " + portOfLoadingDetails.Name;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        portOfLoading = "";
                                    }
                                }
                                else
                                {
                                    portOfLoading = "";
                                }

                            }
                            if (keyValue.Key == "originCountry")
                            {
                                if (!string.IsNullOrEmpty(keyValue.Value))
                                {
                                    var data = keyValue.Value;
                                    string[] portLoadingCountry = new string[0];
                                    portLoadingCountry = JsonConvert.DeserializeObject<string[]>(data);
                                    if (portLoadingCountry.Length > 0)
                                    {
                                        foreach (var portCountry in portLoadingCountry)
                                        {
                                            var portOfLoadingCountryDetails = countryList.Find(x => x.CountryId.ToString() == portCountry);
                                            if (portOfLoadingCountry == "")
                                            {
                                                portOfLoadingCountry = portOfLoadingCountryDetails.CountryName;
                                            }
                                            else
                                            {
                                                portOfLoadingCountry = portOfLoadingCountry + ", " + portOfLoadingCountryDetails.CountryName;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        portOfLoadingCountry = "";
                                    }
                                }
                                else
                                {
                                    portOfLoadingCountry = "";
                                }
                            }
                            if (keyValue.Key == "portOfDischarge")
                            {
                                if (!string.IsNullOrEmpty(keyValue.Value))
                                {
                                    var data = keyValue.Value;
                                    portDischarge = JsonConvert.DeserializeObject<string[]>(data);
                                    if (portDischarge.Length > 0)
                                    {
                                        foreach (var port in portDischarge)
                                        {
                                            var portOfDischargeDetails = PortDetails.Find(x => x.Id.ToString() == port.ToString());
                                            if (portOfDischarge == "")
                                            {
                                                portOfDischarge = portOfDischargeDetails.Name;
                                            }
                                            else
                                            {
                                                portOfDischarge = portOfDischarge + ", " + portOfDischargeDetails.Name;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        portOfDischarge = "";
                                    }
                                }
                                else
                                {
                                    portOfDischarge = "";
                                }
                            }
                            if (keyValue.Key == "portOfDischargeCountry")
                            {
                                if (!string.IsNullOrEmpty(keyValue.Value))
                                {
                                    var data = keyValue.Value;
                                    string[] portDischargeCountryDetails = new string[0];
                                    portDischargeCountryDetails = JsonConvert.DeserializeObject<string[]>(data);
                                    if (portDischargeCountryDetails.Length > 0)
                                    {
                                        foreach (var portDischargeCountry in portDischargeCountryDetails)
                                        {
                                            var portOfDischargeCountryDetails = countryList.Find(x => x.CountryId.ToString() == portDischargeCountry);
                                            if (portOfDischargeCountry == "")
                                            {
                                                portOfDischargeCountry = portOfDischargeCountryDetails.CountryName;
                                            }
                                            else
                                            {
                                                portOfDischargeCountry = portOfDischargeCountry + ", " + portOfDischargeCountryDetails.CountryName;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        portOfDischargeCountry = "";
                                    }
                                }
                                else
                                {
                                    portOfDischargeCountry = "";
                                }
                            }
                            if (keyValue.Key == "quantityMeasurementUnit")
                            {
                                if (keyValue.Value == "metricTonnes")
                                {
                                    measurementUnit = "MT";
                                }
                                if (keyValue.Value == "pound")
                                {
                                    measurementUnit = "LBS";
                                }
                                if (keyValue.Value == "gallons")
                                {
                                    measurementUnit = "GL";
                                }
                                if (keyValue.Value == "kilogram")
                                {
                                    measurementUnit = "KG";
                                }
                                if (keyValue.Value == "cubicMeter")
                                {
                                    measurementUnit = "CBM";
                                }
                                if (keyValue.Value == null || keyValue.Value == "")
                                {
                                    measurementUnit = "";
                                }
                            }
                            if (keyValue.Key == "incoterms1")
                            {
                                if (keyValue.Value == "freeOnBoard")
                                {
                                    incoterms1 = "FOB (Free on Board)";
                                }
                                if (keyValue.Value == "freeCarrier")
                                {
                                    incoterms1 = "FCA (Free Carrier)";
                                }
                                if (keyValue.Value == "exWorks")
                                {
                                    incoterms1 = "EXW (Ex Works)";
                                }
                                if (keyValue.Value == "freeAlongsideShip")
                                {
                                    incoterms1 = "FAS (Free Alongside Ship)";
                                }
                                if (keyValue.Value == "deliveredAtPlace")
                                {
                                    incoterms1 = "DAP (Delivered at Place)";
                                }
                                if (keyValue.Value == "deliveredAtTerminal")
                                {
                                    incoterms1 = "DAT (Delivered at Terminal)";
                                }
                                if (keyValue.Value == "costInsuranceAndFreight")
                                {
                                    incoterms1 = "CIF (Cost, Insurance and Freight";
                                }
                                if (keyValue.Value == "carriageAndInsurancePaidTo")
                                {
                                    incoterms1 = "CIP (Carriage and Insurance Paid to)";
                                }
                                if (keyValue.Value == "costAndFreight")
                                {
                                    incoterms1 = "CFR (Cost and Freight)";
                                }
                                if (keyValue.Value == "deliveryDutyPaid")
                                {
                                    incoterms1 = "DDP (Delivery Duty Paid)";
                                }
                                if (keyValue.Value == "carriagePaidTo")
                                {
                                    incoterms1 = "CPT (Carriage paid to)";
                                }
                                if (keyValue.Value == null || keyValue.Value == "")
                                {
                                    incoterms1 = "";
                                }
                            }
                            if (keyValue.Key == "incotermsAdditionalCommentsIfAny")
                            {
                                incotermsAdditionalCommentsIfAny = keyValue.Value;
                            }
                            if (keyValue.Key == "quanityNumber")
                            {
                                if (keyValue.Value != null && keyValue.Value != "")
                                {
                                    quanityNumber = String.Format("{0:n}", Int32.Parse(keyValue.Value));
                                }
                                else 
                                {
                                    quanityNumber = keyValue.Value;
                                }
                            }
                            if (keyValue.Key == "other1")
                            {
                                other1 = keyValue.Value;
                            }
                            if (keyValue.Key == "tolerance")
                            {
                                if (keyValue.Value != "" && keyValue.Value != null)
                                {
                                    var ToleranceName = ToleranceList.Find(x => x.ToleranceId.ToString() == keyValue.Value);
                                    tolerance = ToleranceName.ToleranceName;
                                }
                                else
                                {
                                    tolerance = "";
                                }
                            }
                            if (keyValue.Key == "toleranceOther")
                            {
                                toleranceOther = keyValue.Value;
                            }
                            if (keyValue.Key == "priceCurrency")
                            {
                                if (keyValue.Value != "" && keyValue.Value != null)
                                {
                                    var currency = currencyList.Find(x => x.CurrencyId.ToString() == keyValue.Value);
                                    priceCurrency = currency.CurrencyName;
                                }
                                else
                                {
                                    priceCurrency = "";
                                }
                            }
                            if (keyValue.Key == "priceAmount")
                            {
                                if (keyValue.Value != null && keyValue.Value != "")
                                {
                                    priceAmountDelimted = String.Format("{0:n}", Int32.Parse(keyValue.Value));
                                }
                                else
                                {
                                    priceAmountDelimted = keyValue.Value;
                                }
                                priceAmount = keyValue.Value;
                            }
                            if (keyValue.Key == "pricePerUnit")
                            {
                                if (keyValue.Value != null && keyValue.Value != "")
                                {
                                    pricePerUnit = String.Format("{0:n}", Int32.Parse(keyValue.Value));
                                }
                                else
                                {
                                    pricePerUnit = keyValue.Value;
                                }
                            }
                            if (keyValue.Key == "shipmentFromDate")
                            {
                                if (keyValue.Value != null && keyValue.Value != "" && DateTime.TryParse(keyValue.Value, out dateValue) == true)
                                {
                                    var value = Convert.ToDateTime(keyValue.Value);
                                    shipmentFromDate = value.ToString("dd-MMM-yyyy");
                                }
                                else
                                {
                                    shipmentFromDate = keyValue.Value;
                                }
                            }
                            if (keyValue.Key == "shipmentToDate")
                            {
                                if (keyValue.Value != null && keyValue.Value != "" && DateTime.TryParse(keyValue.Value, out dateValue) == true)
                                {
                                    var value = Convert.ToDateTime(keyValue.Value);
                                    shipmentToDate = value.ToString("dd-MMM-yyyy");
                                }
                                else
                                {
                                    shipmentToDate = keyValue.Value;
                                }
                            }
                            if (keyValue.Key == "sellerName")
                            {
                                sellerName = keyValue.Value;
                            }
                            if (keyValue.Key == "buyerName")
                            {
                                buyerName = keyValue.Value;
                            }
                            if (keyValue.Key == "contact2")
                            {
                                contact2 = keyValue.Value;
                            }
                            if (keyValue.Key == "sellerContact")
                            {
                                sellerContact = keyValue.Value;
                            }
                            if (keyValue.Key == "sellerAddressLine1")
                            {
                                sellerAddressLine1 = keyValue.Value;
                            }
                            if (keyValue.Key == "sellerAddressLine2")
                            {
                                sellerAddressLine2 = keyValue.Value;
                            }
                            if (keyValue.Key == "commodityDescriptionIfAny")
                            {
                                commodityDescriptionIfAny = keyValue.Value;
                            }
                            if (keyValue.Key == "buyerSignature")
                            {
                                if (keyValue.Value != "" && keyValue.Value != null)
                                {
                                    var sigHtml = "<img src=##Src## alt='buyerSignature' style=\"width: 325px; height: 100px;\" />";
                                    buyerSignature = sigHtml.Replace("##Src##", keyValue.Value);
                                }
                                else
                                {
                                    buyerSignature = "";
                                }
                            }
                            if (keyValue.Key == "sellerSignature")
                            {
                                if (keyValue.Value != "" && keyValue.Value != null)
                                {
                                    var sigHtml = "<img src=##Src## alt='sellerSignature' style=\"width: 325px; height: 100px;\" />";
                                    sellerSignature = sigHtml.Replace("##Src##", keyValue.Value);
                                }
                                else
                                {
                                    sellerSignature = "";
                                }
                            }
                        }

                        if (priceAmount == "")
                        {
                            priceAmount = "0";
                            priceAmountDelimted = "0";
                        }

                        if (ContractModel.ContractType == "Sale")
                        {

                            html = html.Replace("##CompanyLogo##", "")
                                                 .Replace("##CompanyName##", "MGV COMMODITY PTE LTD")
                                                 .Replace("##CompanyAddress##", "77 HIGH STREET #4-11 HIGH STREET PLAZA, SINGAPORE 179433")
                                                 .Replace("##RegistrationNumberAndPhoneNumber##", "Registration No. 201618435E PHONE +65-63362665")
                                                 .Replace("##ContractType##", ContractModel.ContractType)
                                                 .Replace("##ContractNo##", contractNumber)
                                                 .Replace("##ContractDate##", DateTime.Today.ToString("dd MMMM yyyy"))
                                                 .Replace("##SellerAddress##", "MGV COMMODITY PTE LTD, 77 High Street, 04-11 High Street Plaza, Singapore 179433")
                                                 .Replace("##BuyerAddress##", buyerName + ", " + buyerAddressLine1 + " " + buyerAddressLine2)
                                                 .Replace("##ProductName##", commodityName)
                                                 .Replace("##PortOfLoading##", portOfLoading)
                                                 .Replace("##PortOfLoadingCountry##", portOfLoadingCountry)
                                                 .Replace("##Origin##", portOfLoading)
                                                 .Replace("##PortOfDischarge##", portOfDischarge)
                                                 .Replace("##PortOfDischargeCountry##", portOfDischargeCountry)
                                                 .Replace("##Specifications##", commodityDescriptionIfAny)
                                                 .Replace("##QuantityAndTolrance##", quanityNumber + ' ' + measurementUnit + ' ' + '&' + ' ' + tolerance + ' ' + toleranceOther)
                                                 .Replace("##Price##", priceCurrency + ' ' + priceAmountDelimted + '/' + pricePerUnit + " (" + (priceAmount != "" ? NumberToWords(Int32.Parse(priceAmount)) : "") + " Only)")
                                                 .Replace("##Basis##", incoterms1 + " " + incotermsAdditionalCommentsIfAny)
                                                 .Replace("##WeightPerQuantity##", "")
                                                 .Replace("##ShipmentPeriod##", shipmentFromDate + " to " + shipmentToDate)
                                                 .Replace("##PaymentTerm##", other1)
                                                 .Replace("##InsuranceAndTransferRisk##", "Buyer to arrange A Class Marine Insurance and bear all risk of loss of cargo or damage to the goods from the time the goods have shipped and tender is issued")
                                                 .Replace("##Documents##", "As Per Buyer Shipping Instructions")
                                                 .Replace("##TermsAndConditions##", ContractModel.TermsAndConditions)
                                                 .Replace("##SellerSignature##", sellerSignature)
                                                 .Replace("##BuyerSignature##", buyerSignature)
                                                  .Replace("##SellerName##", "MGV COMMODITY PTE LTD")
                                                 .Replace("##BuyerName##", buyerName)
                                                 ;
                        }
                        else
                        {
                            FileSearchCriteriaInputModel fileSearchCriteriaInputModel = new FileSearchCriteriaInputModel
                            {
                                ReferenceTypeId = new Guid("B79A8DD7-A83C-45D3-9365-18503A07B3BF"),
                                ReferenceId = ContractModel.ClientId
                            };

                            List<FileApiReturnModel> files = _fileService.SearchFile(fileSearchCriteriaInputModel, loggedInContext, validationMessages);
                            var image = string.Empty;
                            if (files.Count > 0)
                                image = "<img style = \"padding-top: 20px;padding-bottom: 25px; width: 350px;height: 100px;\" src = \"##CompanyLogo##\" alt = \"Company logo\" >".Replace("##CompanyLogo##", files[0].FilePath);
                            html = html.Replace("##CompanyLogo##", image)
                                                .Replace("##CompanyName##", sellerName)
                                                .Replace("##CompanyAddress##", sellerAddressLine1 + ' ' + sellerAddressLine2)
                                                .Replace("##RegistrationNumberAndPhoneNumber##", sellerContact)
                                                .Replace("##ContractType##", ContractModel.ContractType)
                                                .Replace("##ContractNo##", contractNumber)
                                                .Replace("##ContractDate##", DateTime.Today.ToString("dd MMMM yyyy"))
                                                .Replace("##SellerAddress##", sellerName + ", " + sellerAddressLine1 + ' ' + sellerAddressLine2)
                                                .Replace("##BuyerAddress##", "MGV COMMODITY PTE LTD, 77 High Street, 04-11 High Street Plaza, Singapore 179433")
                                                .Replace("##ProductName##", commodityName)
                                                .Replace("##Origin##", portOfLoading)
                                                .Replace("##PortOfLoading##", portOfLoading)
                                                .Replace("##PortOfLoadingCountry##", portOfLoadingCountry)
                                                .Replace("##PortOfDischarge##", portOfDischarge)
                                                .Replace("##PortOfDischargeCountry##", portOfDischargeCountry)
                                                .Replace("##Specifications##", commodityDescriptionIfAny)
                                                .Replace("##QuantityAndTolrance##", quanityNumber + ' ' + measurementUnit + ' ' + '&' + ' ' + tolerance + ' ' + toleranceOther)
                                                .Replace("##Price##", priceCurrency + ' ' + priceAmountDelimted + '/' + pricePerUnit + " (" + NumberToWords(Int32.Parse(priceAmount)) + " Only)")
                                                .Replace("##Basis##", incoterms1 + " " + incotermsAdditionalCommentsIfAny)
                                                .Replace("##WeightPerQuantity##", "")
                                                .Replace("##ShipmentPeriod##", shipmentFromDate + " to " + shipmentToDate)
                                                .Replace("##PaymentTerm##", other1)
                                                .Replace("##InsuranceAndTransferRisk##", "Buyer to arrange A Class Marine Insurance and bear all risk of loss of cargo or damage to the goods from the time the goods have shipped and tender is issued")
                                                .Replace("##Documents##", "As Per Buyer Shipping Instructions")
                                                .Replace("##TermsAndConditions##", ContractModel.TermsAndConditions)
                                                .Replace("##SellerName##", sellerName)
                                                .Replace("##BuyerName##", "MGV COMMODITY PTE LTD")
                                                .Replace("##SellerSignature##", sellerSignature)
                                                .Replace("##BuyerSignature##", buyerSignature)
                            ;
                        }
                        var companySettingsSearchInputModel = new CompanySettingsSearchInputModel();
                        companySettingsSearchInputModel.CompanyId = loggedInContext.CompanyGuid;
                        companySettingsSearchInputModel.IsSystemApp = null;
                        string storageAccountName = string.Empty;

                        var SwitchBlPdfOutput = await _chromiumService.GeneratePdf(html, null, ContractModel.ClientId.ToString());

                        List<CompanySettingsSearchOutputModel> companySettings = _masterDataManagementRepository.GetCompanySettings(companySettingsSearchInputModel, loggedInContext, validationMessages).ToList();
                        if (companySettings.Count > 0)
                        {
                            var storageAccountDetails = companySettings.Where(x => x.Key == "StorageAccountName").FirstOrDefault();
                            storageAccountName = storageAccountDetails?.Value;
                        }
                        CompanyOutputModel companyModel = _companyStructureService.GetCompanyById(loggedInContext.CompanyGuid, loggedInContext, validationMessages);

                        var directory = SetupCompanyFileContainer(companyModel, 6, loggedInContext.LoggedInUserId, storageAccountName);

                        var ContractFileName = "Contract";

                        var fileExtension = ".pdf";

                        var ContractConvertedFileName = ContractFileName + "-" + contractNumber + fileExtension;

                        CloudBlockBlob ContractConvertedBlockBlob = directory.GetBlockBlobReference(ContractConvertedFileName);

                        ContractConvertedBlockBlob.Properties.CacheControl = "public, max-age=2592000";

                        ContractConvertedBlockBlob.Properties.ContentType = "application/pdf";

                        Byte[] ContractBytes = SwitchBlPdfOutput.ByteStream;

                        ContractConvertedBlockBlob.UploadFromByteArray(ContractBytes, 0, ContractBytes.Length);

                        FinalContractModel.ContractPdf = ContractConvertedBlockBlob.Uri.AbsoluteUri;
                        ContractModel.ContractPdf = ContractConvertedBlockBlob.Uri.AbsoluteUri;
                    }

                    if (ContractModel.IsContractSealing)
                    {
                        var contractSignedDate = "Dated " + DateTime.UtcNow.ToString("dd-MMM-yyyy");
                        JObject formField = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                        Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                        foreach (KeyValuePair<string, JToken> keyValuePair in formField)
                        {
                            keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                        }

                        var contractNumber = string.Empty;

                        foreach (var keyValue in keyValueMap)
                        {
                            if (formField.ContainsKey("contractNumber") && keyValue.Key == "contractNumber" && keyValue.Value != "" && keyValue.Value != null)
                            {
                                contractNumber = keyValue.Value;
                                break;
                            }
                        }
                        contractNumber = contractNumber + " " + contractSignedDate;

                        if (formField.ContainsKey("contractNumber"))
                        {
                            formField["contractNumber"] = contractNumber;
                        }
                        else
                        {
                            formField.Add("contractNumber", contractNumber);
                        }
                        FinalContractModel.FormData = formField;
                    }

                    dataSetUpsertInputModel.IsArchived = ContractModel.IsArchived;
                    dataSetUpsertInputModel.DataJson = JsonConvert.SerializeObject(FinalContractModel);
                    dataSetUpsertInputModel.CompanyId = loggedInContext.CompanyGuid;
                    dataSetUpsertInputModel.DataSourceId = ContractModel.ContractTemplateId;
                    dataSetUpsertInputModel.Id = ContractModel.DataSetId;
                    ContractModel searchModel = new ContractModel();
                    searchModel.DataSetId = ContractModel.DataSetId;
                    var oldData = new ContractModel();
                    if (searchModel.DataSetId != null)
                    {
                        oldData = GetContracts(searchModel, loggedInContext, validationMessages).FirstOrDefault();
                        result = await _dataSetService.CreateDataSet(dataSetUpsertInputModel, loggedInContext, validationMessages);

                        TaskWrapper.ExecuteFunctionInNewThread(() =>
                        {
                            UserDataSetRelationModel userDataSetRelation = new UserDataSetRelationModel();

                            var clientsDetails = _clientRepository.GetClients(new ClientInputModel() , loggedInContext, validationMessages);
                            List<Guid?> users = new List<Guid?>();

                            users.Add(ContractModel.ClientId);

                            userDataSetRelation.DataSetIds = new List<Guid>();
                            userDataSetRelation.UserId = new List<Guid>();
                            userDataSetRelation.CompanyId = loggedInContext.CompanyGuid;
                            
                            userDataSetRelation.DataSetIds.Add((Guid)searchModel.DataSetId);

                            if(ContractModel.PurchaseContracts.Count > 0)
                            {
                                users.AddRange(ContractModel.PurchaseContracts.Select(t => t.ClientId));
                            }

                            if (ContractModel.SalesContracts.Count > 0)
                            {
                                users.AddRange(ContractModel.SalesContracts.Select(t => t.ClientId));
                            }

                             Parallel.ForEach(users, id =>
                             {
                                 Guid guid = (Guid)clientsDetails.Where(t => t.ClientId == id)?.FirstOrDefault()?.UserAuthenticationId;
                                 userDataSetRelation.UserId.Add(guid);
                             });


                            if (userDataSetRelation.UserId.Count > 0 && userDataSetRelation.DataSetIds.Count > 0)
                            {
                                var data = _dataSetService.CreateUserDataSetRelation(userDataSetRelation, null, loggedInContext, validationMessages);
                            }

                        });
                        
                        SaveHistory(ContractModel, oldData, validationMessages, loggedInContext);
                    }
                    else
                    {
                        result = await _dataSetService.CreateDataSet(dataSetUpsertInputModel, loggedInContext, validationMessages);
                        searchModel.DataSetId = result;
                        ContractModel.DataSetId = result;
                        SaveHistory(ContractModel, null, validationMessages, loggedInContext);

                        TaskWrapper.ExecuteFunctionInNewThread(() =>
                        {
                            UserDataSetRelationModel userDataSetRelation = new UserDataSetRelationModel();

                            var clientsDetails = _clientRepository.GetClients(new ClientInputModel(), loggedInContext, validationMessages);
                            List<Guid?> users = new List<Guid?>();

                            users.Add(ContractModel.ClientId);

                            userDataSetRelation.DataSetIds = new List<Guid>();
                            userDataSetRelation.UserId = new List<Guid>();
                            userDataSetRelation.CompanyId = loggedInContext.CompanyGuid;

                            userDataSetRelation.DataSetIds.Add((Guid)searchModel.DataSetId);

                            if (ContractModel.PurchaseContracts.Count > 0)
                            {
                                users.AddRange(ContractModel.PurchaseContracts.Select(t => t.ClientId));
                            }

                            if (ContractModel.SalesContracts.Count > 0)
                            {
                                users.AddRange(ContractModel.SalesContracts.Select(t => t.ClientId));
                            }

                            Parallel.ForEach(users, id =>
                            {
                                Guid guid = (Guid)clientsDetails.Where(t => t.ClientId == id)?.FirstOrDefault()?.UserAuthenticationId;
                                userDataSetRelation.UserId.Add(guid);
                            });


                            if (userDataSetRelation.UserId.Count > 0 && userDataSetRelation.DataSetIds.Count > 0)
                            {
                                var data = _dataSetService.CreateUserDataSetRelation(userDataSetRelation, null, loggedInContext, validationMessages);
                            }

                        });

                    }
                    TaskWrapper.ExecuteFunctionInNewThread(() =>
                    {
                        if (ContractModel.PurchaseContractIds != null && ContractModel.PurchaseContractIds.Count > 0)
                        {
                            foreach (var contractId in ContractModel.PurchaseContractIds)
                            {
                                ContractModel searchedModel = new ContractModel();
                                searchedModel.DataSetId = contractId;
                                oldData = GetContracts(searchedModel, loggedInContext, validationMessages).FirstOrDefault();
                                var dataSetHistoryModel = new DataSetHistoryInputModel();
                                dataSetHistoryModel.DataSetId = contractId;
                                dataSetHistoryModel.Field = "StatusId";
                                dataSetHistoryModel.OldValue = oldData.StatusId.ToString();
                                dataSetHistoryModel.NewValue = ContractModel.ContractStatusId.ToString();
                                if (oldData.StatusId != ContractModel.ContractStatusId)
                                {
                                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                                }


                                var dataSetUpdateModel = new UpdateDataSetJsonModel();
                                dataSetUpdateModel.Id = contractId;
                                List<ParamsKeyModel> paramsModel = new List<ParamsKeyModel>();

                                var jsonModel = new ParamsKeyModel();
                                jsonModel.KeyName = "StatusId";
                                jsonModel.KeyValue = ContractModel.ContractStatusId.ToString();
                                jsonModel.Type = "Guid";
                                paramsModel.Add(jsonModel);
                                dataSetUpdateModel.ParamsJsonModel = paramsModel;

                                var id = _dataSetService.UpdateDataSetJson(dataSetUpdateModel, loggedInContext, validationMessages);
                            }
                        }

                        if (ContractModel.SalesContractIds != null && ContractModel.SalesContractIds.Count > 0)
                        {
                            foreach (var contractId in ContractModel.SalesContractIds)
                            {
                                ContractModel salesSearchModel = new ContractModel();
                                salesSearchModel.DataSetId = contractId;
                                oldData = GetContracts(salesSearchModel, loggedInContext, validationMessages).FirstOrDefault();
                                var dataSetHistoryModel = new DataSetHistoryInputModel();
                                dataSetHistoryModel.DataSetId = contractId;
                                dataSetHistoryModel.Field = "StatusId";
                                dataSetHistoryModel.OldValue = oldData.StatusId.ToString();
                                dataSetHistoryModel.NewValue = ContractModel.ContractStatusId.ToString();
                                if (oldData.StatusId != ContractModel.ContractStatusId)
                                {
                                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                                }

                                var dataSetUpdateModel = new UpdateDataSetJsonModel();
                                dataSetUpdateModel.Id = contractId;
                                List<ParamsKeyModel> paramsModel = new List<ParamsKeyModel>();

                                var jsonModel = new ParamsKeyModel();
                                jsonModel.KeyName = "StatusId";
                                jsonModel.KeyValue = ContractModel.ContractStatusId.ToString();
                                jsonModel.Type = "Guid";
                                paramsModel.Add(jsonModel);
                                dataSetUpdateModel.ParamsJsonModel = paramsModel;

                                _dataSetService.UpdateDataSetJson(dataSetUpdateModel, loggedInContext, validationMessages);
                            }
                        }
                    });

                    TaskWrapper.ExecuteFunctionInNewThread(() =>
                    {
                        if (ContractModel.OpenedPurchaseContractIds != null && ContractModel.OpenedPurchaseContractIds.Count > 0)
                        {
                            foreach (var contractId in ContractModel.OpenedPurchaseContractIds)
                            {
                                ContractModel searchedModel = new ContractModel();
                                searchedModel.DataSetId = contractId;
                                oldData = GetContracts(searchedModel, loggedInContext, validationMessages).FirstOrDefault();
                                var dataSetHistoryModel = new DataSetHistoryInputModel();
                                dataSetHistoryModel.DataSetId = contractId;
                                dataSetHistoryModel.Field = "StatusId";
                                dataSetHistoryModel.OldValue = oldData.StatusId.ToString();
                                dataSetHistoryModel.NewValue = ContractModel.OpenContractStatusId.ToString();
                                if (oldData.StatusId != ContractModel.ContractStatusId)
                                {
                                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                                }


                                var dataSetUpdateModel = new UpdateDataSetJsonModel();
                                dataSetUpdateModel.Id = contractId;
                                List<ParamsKeyModel> paramsModel = new List<ParamsKeyModel>();

                                var jsonModel = new ParamsKeyModel();
                                jsonModel.KeyName = "StatusId";
                                jsonModel.KeyValue = ContractModel.OpenContractStatusId.ToString();
                                jsonModel.Type = "Guid";
                                paramsModel.Add(jsonModel);
                                dataSetUpdateModel.ParamsJsonModel = paramsModel;

                                var id = _dataSetService.UpdateDataSetJson(dataSetUpdateModel, loggedInContext, validationMessages);
                            }
                        }

                        if (ContractModel.OpenedSaleContractIds != null && ContractModel.OpenedSaleContractIds.Count > 0)
                        {
                            foreach (var contractId in ContractModel.OpenedSaleContractIds)
                            {
                                ContractModel salesSearchModel = new ContractModel();
                                salesSearchModel.DataSetId = contractId;
                                oldData = GetContracts(salesSearchModel, loggedInContext, validationMessages).FirstOrDefault();
                                var dataSetHistoryModel = new DataSetHistoryInputModel();
                                dataSetHistoryModel.DataSetId = contractId;
                                dataSetHistoryModel.Field = "StatusId";
                                dataSetHistoryModel.OldValue = oldData.StatusId.ToString();
                                dataSetHistoryModel.NewValue = ContractModel.OpenContractStatusId.ToString();
                                if (oldData.StatusId != ContractModel.ContractStatusId)
                                {
                                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                                }

                                var dataSetUpdateModel = new UpdateDataSetJsonModel();
                                dataSetUpdateModel.Id = contractId;
                                List<ParamsKeyModel> paramsModel = new List<ParamsKeyModel>();

                                var jsonModel = new ParamsKeyModel();
                                jsonModel.KeyName = "StatusId";
                                jsonModel.KeyValue = ContractModel.OpenContractStatusId.ToString();
                                jsonModel.Type = "Guid";
                                paramsModel.Add(jsonModel);
                                dataSetUpdateModel.ParamsJsonModel = paramsModel;

                                _dataSetService.UpdateDataSetJson(dataSetUpdateModel, loggedInContext, validationMessages);
                            }
                        }
                    });

                    if (ContractModel.VesselDetailsModel != null && ContractModel.VesselDetailsModel.Count > 0)
                    {
                        foreach (var contractDetails in ContractModel.VesselDetailsModel)
                        {
                            var purchaseContractIds = new List<Guid>();
                            var saleContractIds = new List<Guid>();
                            ContractModel searchVesselDetailsModel = new ContractModel();
                            searchVesselDetailsModel.DataSetId = contractDetails.VesselId;
                            oldData = GetContracts(searchVesselDetailsModel, loggedInContext, validationMessages).FirstOrDefault();
                            var isVesselOldNewPurchaseContractIdsEqual = false;
                            var isVesselOldNewSaleContractIdsEqual = false;
                            if (ContractModel.IsContractLink == true)
                            {
                                if (ContractModel.TradeId == null || ContractModel.TradeId == Guid.Empty)
                                {
                                    FinalContractModel.TradeId = Guid.NewGuid();
                                }
                                else
                                {
                                    if (oldData.PurchaseContractIds.Count == contractDetails.PurchaseContractIds.Count
                                        && oldData.SalesContractIds.Count == contractDetails.SalesContractIds.Count)
                                    {
                                        isVesselOldNewPurchaseContractIdsEqual = oldData.PurchaseContractIds.TrueForAll(oldPurchaseId => oldPurchaseId.Equals(contractDetails.PurchaseContractIds.Find(newPurchaseId => newPurchaseId == oldPurchaseId)));
                                        isVesselOldNewSaleContractIdsEqual = oldData.SalesContractIds.TrueForAll(oldSaleId => oldSaleId.Equals(contractDetails.SalesContractIds.Find(newSaleId => newSaleId == oldSaleId)));
                                    }
                                    FinalContractModel.TradeId = (isVesselOldNewPurchaseContractIdsEqual == true && isVesselOldNewSaleContractIdsEqual == true) ? ContractModel.TradeId : Guid.NewGuid();
                                }
                                FinalContractModel.TradeStatus = ContractModel.StatusName != null ? (ContractModel.ContractType.ToLower() == "vessel" && ContractModel.StatusName.ToLower().Contains("open")) ? "Cancelled" : "In Execution" : null;
                                dataSetUpsertInputModel.IsArchived = ContractModel.IsArchived;
                                dataSetUpsertInputModel.DataJson = JsonConvert.SerializeObject(FinalContractModel);
                                dataSetUpsertInputModel.CompanyId = loggedInContext.CompanyGuid;
                                dataSetUpsertInputModel.DataSourceId = ContractModel.ContractTemplateId;
                                dataSetUpsertInputModel.Id = ContractModel.DataSetId;
                                await _dataSetService.CreateDataSet(dataSetUpsertInputModel, loggedInContext, validationMessages);
                            }
                            if (oldData.PurchaseContractIds != null && oldData.PurchaseContractIds.Count > 0)
                            {
                                purchaseContractIds = oldData.PurchaseContractIds;
                            }
                            if (oldData.SalesContractIds != null && oldData.SalesContractIds.Count > 0)
                            {
                                saleContractIds = oldData.SalesContractIds;
                            }
                            if (isVesselOldNewPurchaseContractIdsEqual != true && isVesselOldNewSaleContractIdsEqual != true)
                            {
                                if (contractDetails.PurchaseContractIds != null)
                                {
                                    purchaseContractIds.AddRange(contractDetails.PurchaseContractIds);
                                }
                                if (contractDetails.SalesContractIds != null)
                                {
                                    saleContractIds.AddRange(contractDetails.SalesContractIds);
                                }
                            }
                            //if (contractDetails.PurchaseContractIds != null)
                            //{
                            //    foreach (var purchaseId in contractDetails.PurchaseContractIds)
                            //    {
                            //        purchaseContractIdList.Add(purchaseId);
                            //    }
                            //}
                            //if (contractDetails.SalesContractIds != null)
                            //{
                            //    foreach (var saleId in contractDetails.SalesContractIds)
                            //    {
                            //        saleContractIdList.Add(saleId);
                            //    }
                            //}

                            var purchaseQuantitySum = oldData.PurchaseQuantitySum;
                            var salesQuantitySum = oldData.SalesQuantitySum;
                            string purchaseSum = string.Empty;
                            string saleSum = string.Empty;

                            if (contractDetails.PurchaseQuantitySum == null)
                            {
                                contractDetails.PurchaseQuantitySum = 0;
                            }
                            if (contractDetails.SalesQuantitySum == null)
                            {
                                contractDetails.SalesQuantitySum = 0;
                            }

                            if (purchaseQuantitySum != null)
                            {
                                purchaseQuantitySum = purchaseQuantitySum + contractDetails.PurchaseQuantitySum;
                            }
                            else
                            {
                                purchaseQuantitySum = contractDetails.PurchaseQuantitySum;
                            }
                            if (salesQuantitySum != null)
                            {
                                salesQuantitySum = salesQuantitySum + contractDetails.SalesQuantitySum;
                            }
                            else
                            {
                                salesQuantitySum = contractDetails.SalesQuantitySum;
                            }
                            string purchaseIds = string.Empty;
                            if (purchaseContractIds.Count > 0)
                            {
                                purchaseIds = string.Join(",", purchaseContractIds);
                            }
                            else
                            {
                                purchaseIds = null;
                            }
                            string saleIds = string.Empty;
                            if (saleContractIds.Count > 0)
                            {
                                saleIds = string.Join(",", saleContractIds);
                            }
                            else
                            {
                                saleIds = null;
                            }

                            purchaseSum = purchaseQuantitySum.ToString();
                            saleSum = salesQuantitySum.ToString();

                            List<ParamsKeyModel> paramsModel = new List<ParamsKeyModel>();

                            var dataSetUpdateModel = new UpdateDataSetJsonModel();
                            dataSetUpdateModel.Id = contractDetails.VesselId;
                            var jsonModel = new ParamsKeyModel();
                            jsonModel.KeyName = "PurchaseContractIds";
                            jsonModel.KeyValue = purchaseIds;
                            jsonModel.Type = "List";
                            paramsModel.Add(jsonModel);

                            var salesJsonModel = new ParamsKeyModel();
                            salesJsonModel.KeyName = "SalesContractIds";
                            salesJsonModel.KeyValue = saleIds;
                            salesJsonModel.Type = "List";
                            paramsModel.Add(salesJsonModel);

                            var purchaseQuantityModel = new ParamsKeyModel();
                            purchaseQuantityModel.KeyName = "PurchaseQuantitySum";
                            purchaseQuantityModel.KeyValue = purchaseSum;
                            purchaseQuantityModel.Type = "decimal";
                            paramsModel.Add(purchaseQuantityModel);

                            var saleQuantityModel = new ParamsKeyModel();
                            saleQuantityModel.KeyName = "SalesQuantitySum";
                            saleQuantityModel.KeyValue = saleSum;
                            saleQuantityModel.Type = "decimal";
                            paramsModel.Add(saleQuantityModel);

                            var isContractLinkingModel = new ParamsKeyModel();
                            isContractLinkingModel.KeyName = "IsContractLink";
                            isContractLinkingModel.KeyValue = "true";
                            isContractLinkingModel.Type = "boolean";
                            paramsModel.Add(isContractLinkingModel);

                            var contractLinkCreatedModel = new ParamsKeyModel();
                            contractLinkCreatedModel.KeyName = "LinkCreatedDateTime";
                            contractLinkCreatedModel.KeyValue = DateTime.UtcNow.ToString();
                            contractLinkCreatedModel.Type = "DateTime?";
                            paramsModel.Add(isContractLinkingModel);

                            dataSetUpdateModel.ParamsJsonModel = paramsModel;

                            var id = _dataSetService.UpdateDataSetJson(dataSetUpdateModel, loggedInContext, validationMessages);
                        }
                    }

                    if (ContractModel.CancelledPurchaseContracts != null && ContractModel.CancelledPurchaseContracts.Count > 0)
                    {
                        foreach (var contract in ContractModel.CancelledPurchaseContracts)
                        {
                            ContractModel searchedModel = new ContractModel();
                            searchedModel.DataSetId = contract.DataSetId;
                            oldData = GetContracts(searchedModel, loggedInContext, validationMessages).FirstOrDefault();
                            var dataSetHistoryModel = new DataSetHistoryInputModel();
                            dataSetHistoryModel.DataSetId = contract.DataSetId;
                            dataSetHistoryModel.Field = "StatusId";
                            dataSetHistoryModel.OldValue = oldData.StatusId.ToString();
                            dataSetHistoryModel.NewValue = ContractModel.CancelledStatusId.ToString();
                            if (oldData.StatusId != ContractModel.ContractStatusId)
                            {
                                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                            }


                            var dataSetUpdateModel = new UpdateDataSetJsonModel();
                            dataSetUpdateModel.Id = contract.DataSetId;
                            List<ParamsKeyModel> paramsModel = new List<ParamsKeyModel>();

                            var jsonModel = new ParamsKeyModel();
                            jsonModel.KeyName = "StatusId";
                            jsonModel.KeyValue = ContractModel.CancelledStatusId.ToString();
                            jsonModel.Type = "Guid";
                            paramsModel.Add(jsonModel);

                            var commentsModel = new ParamsKeyModel();
                            commentsModel.KeyName = "CancelComments";
                            commentsModel.KeyValue = contract.CancelComments;
                            commentsModel.Type = "string";
                            paramsModel.Add(commentsModel);

                            var priceModel = new ParamsKeyModel();
                            priceModel.KeyName = "CurrentPrice";
                            priceModel.KeyValue = contract.CurrentPrice.ToString();
                            priceModel.Type = "decimal";
                            paramsModel.Add(priceModel);

                            dataSetUpdateModel.ParamsJsonModel = paramsModel;

                            var id = _dataSetService.UpdateDataSetJson(dataSetUpdateModel, loggedInContext, validationMessages);

                            SGTraderCancelContractEmail(ContractModel, loggedInContext, validationMessages);
                            if (contract.IsDebitNote == true || contract.IsCreditNote == true)
                            {
                                string contractType = string.Empty;
                                if (contract.IsDebitNote == true)
                                {
                                    contractType = "Payable";
                                }
                                else if (contract.IsCreditNote == true)
                                {
                                    contractType = "Receivable";
                                }

                                var InvoiceQueModel = new ContractModel();
                                InvoiceQueModel.ContractType = "Invoice Queue";
                                InvoiceQueModel.ContractId = contract.DataSetId;
                                InvoiceQueModel.DataSetId = contract.DataSetId;
                                //InvoiceQueModel.FormData = contract.TemplateData;
                                InvoiceQueModel.SgtraderInvoiceAcceptedComments = oldData.SgtraderInvoiceAcceptedComments;
                                InvoiceQueModel.SgtraderInvoiceRejectedComments = oldData.SgtraderInvoiceRejectedComments;
                                InvoiceQueModel.ContracterInvoiceAcceptedComments = oldData.ContracterInvoiceAcceptedComments;
                                InvoiceQueModel.ContracterInvoiceRejectedComments = oldData.ContracterInvoiceRejectedComments;
                                InvoiceQueModel.IsGeneratedToPayables = oldData.IsGeneratedToPayables;
                                InvoiceQueModel.BrokerId = oldData.BrokerId;
                                InvoiceQueModel.ClientId = oldData.ClientId;
                                InvoiceQueModel.IsDebitNote = contract.IsDebitNote;
                                InvoiceQueModel.IsCreditNote = contract.IsCreditNote;
                                InvoiceQueModel.ContractTemplateId = contract.ContractTemplateId;
                                if (!string.IsNullOrEmpty(contract.TemplateData))
                                {
                                    InvoiceQueModel.FormData = JsonConvert.DeserializeObject<Object>(contract.TemplateData);
                                }
                                else
                                {
                                    InvoiceQueModel.FormData = null;
                                }
                                var resultInvoice = await UpsertInvoiceQueueByAccept(InvoiceQueModel, contractType, loggedInContext, validationMessages);
                            }

                        }
                    }

                    if (ContractModel.CancelledSaleContracts != null && ContractModel.CancelledSaleContracts.Count > 0)
                    {
                        foreach (var contract in ContractModel.CancelledSaleContracts)
                        {
                            ContractModel searchedModel = new ContractModel();
                            searchedModel.DataSetId = contract.DataSetId;
                            oldData = GetContracts(searchedModel, loggedInContext, validationMessages).FirstOrDefault();
                            var dataSetHistoryModel = new DataSetHistoryInputModel();
                            dataSetHistoryModel.DataSetId = contract.DataSetId;
                            dataSetHistoryModel.Field = "StatusId";
                            dataSetHistoryModel.OldValue = oldData.StatusId.ToString();
                            dataSetHistoryModel.NewValue = ContractModel.CancelledStatusId.ToString();
                            if (oldData.StatusId != ContractModel.ContractStatusId)
                            {
                                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                            }


                            var dataSetUpdateModel = new UpdateDataSetJsonModel();
                            dataSetUpdateModel.Id = contract.DataSetId;
                            List<ParamsKeyModel> paramsModel = new List<ParamsKeyModel>();

                            var jsonModel = new ParamsKeyModel();
                            jsonModel.KeyName = "StatusId";
                            jsonModel.KeyValue = ContractModel.CancelledStatusId.ToString();
                            jsonModel.Type = "Guid";
                            paramsModel.Add(jsonModel);

                            var commentsModel = new ParamsKeyModel();
                            commentsModel.KeyName = "CancelComments";
                            commentsModel.KeyValue = contract.CancelComments;
                            commentsModel.Type = "string";
                            paramsModel.Add(commentsModel);

                            var priceModel = new ParamsKeyModel();
                            priceModel.KeyName = "CurrentPrice";
                            priceModel.KeyValue = contract.CurrentPrice.ToString();
                            priceModel.Type = "decimal";
                            paramsModel.Add(priceModel);

                            dataSetUpdateModel.ParamsJsonModel = paramsModel;

                            var id = _dataSetService.UpdateDataSetJson(dataSetUpdateModel, loggedInContext, validationMessages);

                            SGTraderCancelSalesContractEmail(ContractModel, loggedInContext, validationMessages);
                            if (contract.IsDebitNote == true || contract.IsCreditNote == true)
                            {
                                string contractType = string.Empty;
                                if (contract.IsDebitNote == true)
                                {
                                    contractType = "Payable";
                                }
                                else if (contract.IsCreditNote == true)
                                {
                                    contractType = "Receivable";
                                }

                                var InvoiceQueModel = new ContractModel();
                                InvoiceQueModel.ContractType = "Invoice Queue";
                                InvoiceQueModel.ContractId = contract.DataSetId;
                                InvoiceQueModel.DataSetId = contract.DataSetId;
                                InvoiceQueModel.SgtraderInvoiceAcceptedComments = oldData.SgtraderInvoiceAcceptedComments;
                                InvoiceQueModel.SgtraderInvoiceRejectedComments = oldData.SgtraderInvoiceRejectedComments;
                                InvoiceQueModel.ContracterInvoiceAcceptedComments = oldData.ContracterInvoiceAcceptedComments;
                                InvoiceQueModel.ContracterInvoiceRejectedComments = oldData.ContracterInvoiceRejectedComments;
                                InvoiceQueModel.IsGeneratedToPayables = oldData.IsGeneratedToPayables;
                                InvoiceQueModel.BrokerId = oldData.BrokerId;
                                InvoiceQueModel.ClientId = oldData.ClientId;
                                InvoiceQueModel.IsDebitNote = contract.IsDebitNote;
                                InvoiceQueModel.IsCreditNote = contract.IsCreditNote;
                                InvoiceQueModel.ContractTemplateId = contract.ContractTemplateId;
                                if (!string.IsNullOrEmpty(contract.TemplateData))
                                {
                                    InvoiceQueModel.FormData = JsonConvert.DeserializeObject<Object>(contract.TemplateData);
                                }
                                else
                                {
                                    InvoiceQueModel.FormData = null;
                                }

                                var resultInvoice = await UpsertInvoiceQueueByAccept(InvoiceQueModel, contractType, loggedInContext, validationMessages);
                            }

                        }
                    }

                    if (ContractModel.IsShareDraft)
                    {
                        if (ContractModel.ContractType == "Purchase" || ContractModel.ContractType.ToLower() == "buyer")
                        {
                            ShareDraftContractToSeller(ContractModel, loggedInContext, validationMessages);
                        }
                        else if (ContractModel.ContractType == "Sale")
                        {
                            ShareDraftContractToBuyer(ContractModel, loggedInContext, validationMessages);
                        }
                    }
                    else if (ContractModel.IsDraftAccepted)
                    {
                        if (ContractModel.ContractType == "Purchase" || ContractModel.ContractType.ToLower() == "buyer")
                        {
                            DraftSignatureEmailToSeller(ContractModel, loggedInContext, validationMessages);
                            DraftPurchaseContractApproveEmailToSGTrader(ContractModel, loggedInContext, validationMessages);
                        }
                        if (ContractModel.ContractType == "Sale")
                        {
                            DraftSignatureEmailToBuyer(ContractModel, loggedInContext, validationMessages);
                            DraftSaleContractApproveEmailToSGTrader(ContractModel, loggedInContext, validationMessages);
                        }
                    }
                    else if (ContractModel.IsDraftRejected)
                    {
                        if (ContractModel.ContractType == "Purchase" || ContractModel.ContractType.ToLower() == "buyer")
                        {
                            DraftPurchaseContractRejectEmailToSGTrader(ContractModel, loggedInContext, validationMessages);
                        }
                        if (ContractModel.ContractType == "Sale")
                        {
                            DraftSaleContractRejectEmailToSGTrader(ContractModel, loggedInContext, validationMessages);
                        }
                    }
                    else if (ContractModel.IsSellerSignatureDone)
                    {
                        if (ContractModel.ContractType == "Purchase" || ContractModel.ContractType.ToLower() == "buyer")
                        {
                            SellerSignatureVerificationMailToSgTrader(ContractModel, loggedInContext, validationMessages);
                        }
                        else if (ContractModel.ContractType == "Sale")
                        {
                            BuyerSignatureVerificationMailToSgTrader(ContractModel, loggedInContext, validationMessages);
                        }
                    }
                    else if (ContractModel.IsSgTraderSignatureDone)
                    {
                        if (ContractModel.ContractType == "Purchase" || ContractModel.ContractType.ToLower() == "buyer")
                        {
                            SgTraderSignatureVerificationMailToSeller(ContractModel, loggedInContext, validationMessages);
                        }
                        else if (ContractModel.ContractType == "Sale")
                        {
                            SgTraderSignatureVerificationMailToBuyer(ContractModel, loggedInContext, validationMessages);
                        }
                    }
                    else if (ContractModel.IsSellerSignatureAccepted)
                    {
                        if (ContractModel.ContractType == "Purchase" || ContractModel.ContractType.ToLower() == "buyer")
                        {
                            SellerSignatureAcceptEmail(ContractModel, loggedInContext, validationMessages);
                            SGTraderSignatureEmailForPurchaseContract(ContractModel, loggedInContext, validationMessages);
                        }
                        if (ContractModel.ContractType == "Sale")
                        {
                            BuyerSignatureAcceptEmail(ContractModel, loggedInContext, validationMessages);
                            SGTraderSignatureEmailForSellerContract(ContractModel, loggedInContext, validationMessages);
                        }
                    }
                    else if (ContractModel.IsSellerSignatureRejected)
                    {
                        if (ContractModel.ContractType == "Purchase" || ContractModel.ContractType.ToLower() == "buyer")
                        {
                            SellerSignatureRejectEmail(ContractModel, loggedInContext, validationMessages);
                        }
                        if (ContractModel.ContractType == "Sale")
                        {
                            BuyerSignatureRejectEmail(ContractModel, loggedInContext, validationMessages);
                        }
                    }
                    else if (ContractModel.IsSGTraderSignatureAccepted)
                    {
                        if (ContractModel.ContractType == "Purchase" || ContractModel.ContractType.ToLower() == "buyer")
                        {
                            SGTraderSignatureAcceptEmailBySeller(ContractModel, loggedInContext, validationMessages);
                        }
                        if (ContractModel.ContractType == "Sale")
                        {
                            SGTraderSignatureAcceptEmailByBuyer(ContractModel, loggedInContext, validationMessages);
                        }
                    }
                    else if (ContractModel.IsSGTraderSignatureRejected)
                    {
                        if (ContractModel.ContractType == "Purchase" || ContractModel.ContractType.ToLower() == "buyer")
                        {
                            SGTraderSignatureRejectEmailBySeller(ContractModel, loggedInContext, validationMessages);
                        }
                        if (ContractModel.ContractType == "Sale")
                        {
                            SGTraderSignatureRejectEmailByBuyer(ContractModel, loggedInContext, validationMessages);
                        }
                    }
                    else if (ContractModel.IsContractSealing)
                    {
                        if (ContractModel.BrokerId != null)
                        {
                            ContractModel.ContractTemplateId = null;
                            ContractModel.IsGeneratedToPayables = false;
                            ContractModel.StatusId = null;
                            var resultInvoice = await UpsertInvoiceQueueByAccept(ContractModel, "Payable", loggedInContext, validationMessages);
                        }
                        if (ContractModel.ContractType == "Purchase" || ContractModel.ContractType.ToLower() == "buyer")
                        {
                            PurchaseContractSealingEmail(ContractModel, loggedInContext, validationMessages);
                        }
                        if (ContractModel.ContractType == "Sale")
                        {
                            SellerContractSealingEmail(ContractModel, loggedInContext, validationMessages);
                        }
                    }
                    else if (ContractModel.IsCancelContract == true)
                    {
                        SGTraderCancelContractEmail(ContractModel, loggedInContext, validationMessages);
                        if (ContractModel.IsDebitNote == true || ContractModel.IsCreditNote == true)
                        {
                            string contractType = string.Empty;
                            if (ContractModel.IsDebitNote == true)
                            {
                                contractType = "Payable";
                            }
                            else if (ContractModel.IsCreditNote == true)
                            {
                                contractType = "Receivable";
                            }
                            if (!string.IsNullOrEmpty(ContractModel.TemplateData))
                            {
                                ContractModel.FormData = JsonConvert.DeserializeObject<Object>(ContractModel.TemplateData);
                            }

                            var resultInvoice = await UpsertInvoiceQueueByAccept(ContractModel, contractType, loggedInContext, validationMessages);
                        }
                    }
                }
                return result;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(exception);
                validationMessages.Add(new ValidationMessage()
                {
                    ValidationMessaage = exception.Message
                });
                return null;
            }
        }

        public static string NumberToWords(int number)
        {
            if (number == 0)
                return "zero";
            if (number < 0)
                return "minus " + NumberToWords(Math.Abs(number));
            string words = "";
            if ((number / 1000000) > 0)
            {
                words += NumberToWords(number / 1000000) + " million ";
                number %= 1000000;
            }
            if ((number / 1000) > 0)
            {
                words += NumberToWords(number / 1000) + " thousand ";
                number %= 1000;
            }
            if ((number / 100) > 0)
            {
                words += NumberToWords(number / 100) + " hundred ";
                number %= 100;
            }
            if (number > 0)
            {
                if (words != "")
                    words += "and ";
                var unitsMap = new[] { "Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "eighteen", "Nineteen" };
                var tensMap = new[] { "Zero", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety" };
                if (number < 20)
                    words += unitsMap[number];
                else
                {
                    words += tensMap[number / 10];
                    if ((number % 10) > 0)
                        words += " " + unitsMap[number % 10];
                }
            }
            return words;
        }

        public async Task<Guid?> UpsertVesselContract(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertVesselContract", "Trading Service"));

            LoggingManager.Debug(ContractModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }

            Guid? result;

            FinalVesselContractModel FinalContractModel = new FinalVesselContractModel();

            FinalContractModel.ClientId = ContractModel.ClientId;
            FinalContractModel.ContractId = ContractModel.ContractId;
            FinalContractModel.StatusId = ContractModel.StatusId;
            FinalContractModel.BrokerId = ContractModel.BrokerId;
            FinalContractModel.IsSelectPercentage = ContractModel.IsSelectPercentage;
            FinalContractModel.IsSelectCommodityBroker = ContractModel.IsSelectCommodityBroker;
            FinalContractModel.IsSelectValue = ContractModel.IsSelectValue;
            FinalContractModel.IsSGTraderSignatureVerificationNeed = ContractModel.IsSGTraderSignatureVerificationNeed;
            FinalContractModel.IsVesselOwnerorBrokerSignatureVerificationNeed = ContractModel.IsVesselOwnerorBrokerSignatureVerificationNeed;
            FinalContractModel.IsSGTraderSignatureVerified = ContractModel.IsSGTraderSignatureVerified;
            FinalContractModel.IsVesselOwnerorBrokerSignatureVerified = ContractModel.IsVesselOwnerorBrokerSignatureVerified;
            FinalContractModel.BrokeragePercentage = ContractModel.BrokeragePercentage;
            FinalContractModel.BrokerageValue = ContractModel.BrokerageValue;
            FinalContractModel.FormData = ContractModel.FormData;
            FinalContractModel.ContractType = ContractModel.ContractType;
            FinalContractModel.ContractPdf = ContractModel.ContractPdf;
            FinalContractModel.VesselOwnerorBrokerSignatureRejectedComments = ContractModel.VesselOwnerorBrokerSignatureRejectedComments;
            FinalContractModel.VesselOwnerorBrokerSignatureAcceptedComments = ContractModel.VesselOwnerorBrokerSignatureAcceptedComments;
            FinalContractModel.SgtraderSignatureRejectedComments = ContractModel.SgtraderSignatureRejectedComments;
            FinalContractModel.SgtraderSignatureAcceptedComments = ContractModel.SgtraderSignatureAcceptedComments;
            FinalContractModel.DraftRejectComments = ContractModel.DraftRejectComments;
            FinalContractModel.DraftAcceptComments = ContractModel.DraftAcceptComments;
            FinalContractModel.IsDraftRejected = ContractModel.IsDraftRejected;
            FinalContractModel.IsContractLink = ContractModel.IsContractLink;
            FinalContractModel.PurchaseContractIds = ContractModel.PurchaseContractIds;
            FinalContractModel.SalesContractIds = ContractModel.SalesContractIds;
            FinalContractModel.PurchaseQuantitySum = ContractModel.PurchaseQuantitySum;
            FinalContractModel.SalesQuantitySum = ContractModel.SalesQuantitySum;
            FinalContractModel.IsLinkingCompleted = ContractModel.IsLinkingCompleted;
            FinalContractModel.RFQGuid = ContractModel.RFQGuid;
            FinalContractModel.RFQId = ContractModel.RFQId;
            FinalContractModel.RFQUniqueId = ContractModel.RFQUniqueId;
            FinalContractModel.CancelComments = ContractModel.CancelComments;
            FinalContractModel.CurrentPrice = ContractModel.CurrentPrice;
            FinalContractModel.TermsAndConditions = ContractModel.TermsAndConditions;
            FinalContractModel.VesselOwnerorBrokerSignatureAcceptance = ContractModel.VesselOwnerorBrokerSignatureAcceptance;
            FinalContractModel.SgSignatureAcceptance = ContractModel.SgSignatureAcceptance;
            if (ContractModel.DataSetId == null)
            {
                List<ProductListOutPutModel> commoadityList = _clientService.GetProductsList(new MasterProduct(), loggedInContext, validationMessages);
                var clientData = _clientRepository.GetClientByUserId("Vessel Owner,Ship Broker", null, loggedInContext, validationMessages, ContractModel.ClientId);
                var nameLength = clientData.FullName.Length;
                string NameChar = string.Empty;
                if (nameLength >= 5)
                {
                    NameChar = clientData.FullName.Substring(0, 5);
                }
                else
                {
                    NameChar = clientData.FullName.Substring(0, (nameLength - 1));
                }

                JObject formField = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formField)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                var commodity = string.Empty;
                var contractNumber = string.Empty;
                bool isContractNumberExists = false;

                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            var commodityType = commoadityList.Find(x => x.ProductId.ToString() == keyValue.Value);
                            commodity = commodityType.ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (formField.ContainsKey("contractNumber") && keyValue.Key == "contractNumber" && keyValue.Value != "" && keyValue.Value != null)
                    {
                        isContractNumberExists = true;
                        contractNumber = keyValue.Value;
                    }
                }

                FinalContractModel.VesselContractNumber = isContractNumberExists == false ? NameChar + "/MGV/" + commodity + "/" + DateTime.UtcNow.ToString("MMM/dd/yyyy") : contractNumber;

                if (isContractNumberExists == false)
                {
                    if (formField.ContainsKey("contractNumber"))
                    {
                        formField["contractNumber"] = FinalContractModel.VesselContractNumber;
                    }
                    else
                    {
                        formField.Add("contractNumber", FinalContractModel.VesselContractNumber);
                    }
                    FinalContractModel.FormData = formField; // JsonConvert.SerializeObject(formField);
                }
            }

            if (ContractModel.IsPdfGenartion == true)
            {
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "VesselContractFinalPdfTemplate"
                };

                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate;

                List<ProductListOutPutModel> commoadityList = _clientService.GetProductsList(new MasterProduct(), loggedInContext, validationMessages);
                List<CountryApiReturnModel> countryList = _companyStructureManagementService.GetCountries(new CountrySearchInputModel(), validationMessages, loggedInContext);
                List<CurrencyOutputModel> currencyList = _hrManagementService.SearchCurrency(new CurrencySearchCriteriaInputModel(), loggedInContext, validationMessages);
                List<PaymentTermOutputModel> portsList = _leadService.GetPortDetails(new PaymentTermSearchInputModel(), loggedInContext, validationMessages);
                List<PortCategoryModel> portCategory = _tradingRepository.GetAllPortCategory(new PortCategorySearchInputModel(), loggedInContext, validationMessages);

                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                DateTime dateValue;
                var contractNumber = string.Empty;
                var contractDate = string.Empty;
                var contractPlace = string.Empty;
                var byAndBetween = string.Empty;
                var owner = string.Empty;
                var vessel = string.Empty;
                var charterer = string.Empty;
                var descriptionAndPositionOfVessel = string.Empty;
                var NetRegisteredTonnage = string.Empty;

                var TotalDeadWeigth = string.Empty;
                var vesselDeadWeight = string.Empty;
                var vesselMaximumCapacity = string.Empty;
                var vesselFlag = string.Empty;
                var vesselItineraryPlace = string.Empty;
                var vesselItineraryDay = string.Empty;

                var PartFullCargo = string.Empty;
                var commodity = string.Empty;
                var commodityDescription = string.Empty;
                var quantity = string.Empty;
                var quantityMeasurementUnit = string.Empty;

                var LoadingPort = string.Empty;
                var LoadPortCountry = string.Empty;

                var Readiness = string.Empty;

                var DischargingPort = string.Empty;
                var DischargePortCountry = string.Empty;

                var TotalLaytime = string.Empty;

                var FreightRate = string.Empty;
                var freightCurrency = string.Empty;
                var freightAmount = string.Empty;
                var frieghtPerUnit = string.Empty;

                var FreightPayableAt = string.Empty;

                var DenurragePerHour = string.Empty;
                var demurrageCurrency = string.Empty;
                var demurrageAmount = string.Empty;
                var perDayProrataBasis = string.Empty;

                var SpecialProvisions = string.Empty;

                var WitnessToSignatureOf1 = string.Empty;

                var WitnessToSignatureOf2 = string.Empty;

                var includeBroker = string.Empty;
                var brokerData = string.Empty;
                var brokerName = string.Empty;
                var brokerCompany = string.Empty;
                var brokerAdressLine1 = string.Empty;
                var brokerAdressLine2 = string.Empty;
                var brokerCountryCode = string.Empty;
                var brokerContact = string.Empty;
                var brokerCommision = string.Empty;
                string[] portLoading = new string[0];
                string[] portDischarge = new string[0];
                var portOfLoadingCategory = string.Empty;
                var portOfDischargeCategory = string.Empty;

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "vesselOwnerName")
                    {
                        owner = keyValue.Value;
                    }
                    if (keyValue.Key == "contractNumber")
                    {
                        contractNumber = keyValue.Value;
                    }
                    if (keyValue.Key == "vesselName")
                    {
                        vessel = keyValue.Value;
                    }
                    if (keyValue.Key == "chartererName")
                    {
                        charterer = keyValue.Value;
                    }
                    if (keyValue.Key == "vesselDeadWeight")
                    {
                        if (keyValue.Value != null && keyValue.Value != "")
                        {
                            vesselDeadWeight = String.Format("{0:n}", Int64.Parse(keyValue.Value));
                        }
                        else
                        {
                            vesselDeadWeight = keyValue.Value;
                        }
                        //vesselDeadWeight = keyValue.Value;
                    }
                    if (keyValue.Key == "vesselMaximumCapacity")
                    {
                        if (keyValue.Value != null && keyValue.Value != "")
                        {
                            vesselMaximumCapacity = String.Format("{0:n}", Int64.Parse(keyValue.Value));
                        }
                        else
                        {
                            vesselMaximumCapacity = keyValue.Value;
                        }
                        //vesselMaximumCapacity = keyValue.Value;
                    }
                    if (keyValue.Key == "vesselFlag")
                    {
                        vesselFlag = keyValue.Value;
                    }
                    if (keyValue.Key == "vesselItineraryPlace")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            var commodityType = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                            vesselItineraryPlace = commodityType.CountryName;
                        }
                        else
                        {
                            vesselItineraryPlace = "";
                        }
                    }
                    if (keyValue.Key == "vesselItineraryDay")
                    {
                        vesselItineraryDay = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            var commodityType = commoadityList.Find(x => x.ProductId.ToString() == keyValue.Value);
                            commodity = commodityType.ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "commodityDescriptionIfAny")
                    {
                        commodityDescription = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityNumber")
                    {
                        if (keyValue.Value != null && keyValue.Value != "")
                        {
                            quantity = String.Format("{0:n}", Int64.Parse(keyValue.Value));
                        }
                        else
                        {
                            quantity = keyValue.Value;
                        }
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        quantityMeasurementUnit = keyValue.Value;
                    }
                    if (keyValue.Key == "charterPartyDate2")
                    {
                        if (keyValue.Value != null && keyValue.Value != "" && DateTime.TryParse(keyValue.Value, out dateValue) == true)
                        {
                            var value = Convert.ToDateTime(keyValue.Value);
                            contractDate = value.ToString("dd-MMM-yyyy");
                        }
                        else
                        {
                            contractDate = keyValue.Value;
                        }
                    }
                    if (keyValue.Key == "contractPlace")
                    {
                        contractPlace = keyValue.Value;
                    }
                    if (keyValue.Key == "originCountry")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            var commodityType = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                            LoadPortCountry = commodityType.CountryName;
                        }
                        else
                        {
                            LoadPortCountry = "";
                        }
                    }
                    if (keyValue.Key == "portOfLoad")
                    {
                        if (keyValue.Value != null && keyValue.Value != "")
                        {
                            var data = keyValue.Value;
                            portLoading = JsonConvert.DeserializeObject<string[]>(data);
                            if (portLoading.Length > 0)
                            {
                                foreach (var port in portLoading)
                                {
                                    var value = portsList.Find(x => x.Id.ToString() == port.ToString());
                                    if (LoadingPort == "")
                                    {
                                        LoadingPort = value.Name;
                                    }
                                    else
                                    {
                                        LoadingPort = LoadingPort + ", " + value.Name;
                                    }
                                }
                            }
                            else
                            {
                                LoadingPort = "";
                            }
                        }
                        else
                        {
                            LoadingPort = "";
                        }
                    }
                    if (keyValue.Key == "destinationCountry")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            var commodityType = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                            DischargePortCountry = commodityType.CountryName;
                        }
                        else
                        {
                            DischargePortCountry = "";
                        }
                    }
                    if (keyValue.Key == "destinationDischargePort")
                    {
                        if (keyValue.Value != null && keyValue.Value != "")
                        {
                            var data = keyValue.Value;
                            portDischarge = JsonConvert.DeserializeObject<string[]>(data);
                            if (portDischarge.Length > 0)
                            {
                                foreach (var port in portDischarge)
                                {
                                    var value = portsList.Find(x => x.Id.ToString() == port.ToString());
                                    if (DischargingPort == "")
                                    {
                                        DischargingPort = value.Name;
                                    }
                                    else
                                    {
                                        DischargingPort = DischargingPort + ", " + value.Name;
                                    }
                                }
                            }
                            else
                            {
                                DischargingPort = "";
                            }
                        }
                        else
                        {
                            DischargingPort = "";
                        }
                    }
                    if (keyValue.Key == "portCategoryLoading")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            var category = portCategory.Find(x => x.Id.ToString() == keyValue.Value);
                            if (category != null)
                            {
                                portOfLoadingCategory = category.Name;
                            }
                            else
                            {
                                portOfLoadingCategory = "";
                            }
                        }
                        else
                        {
                            portOfLoadingCategory = "";
                        }
                    }
                    if (keyValue.Key == "portCategoryDischarge")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            var category = portCategory.Find(x => x.Id.ToString() == keyValue.Value);
                            if (category != null)
                            {
                                portOfDischargeCategory = category.Name;
                            }
                            else
                            {
                                portOfDischargeCategory = "";
                            }
                        }
                        else
                        {
                            portOfDischargeCategory = "";
                        }
                    }
                    if (keyValue.Key == "Laytime")
                    {
                        TotalLaytime = keyValue.Value;
                    }

                    if (keyValue.Key == "freightCurrency")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            var commodityType = currencyList.Find(x => x.CurrencyId.ToString() == keyValue.Value);
                            freightCurrency = commodityType.CurrencyName;
                        }
                        else
                        {
                            freightCurrency = "";
                        }
                    }
                    if (keyValue.Key == "freightAmount")
                    {
                        if (keyValue.Value != null && keyValue.Value != "")
                        {
                            freightAmount = String.Format("{0:n}", Int64.Parse(keyValue.Value));
                        }
                        else
                        {
                            freightAmount = keyValue.Value;
                        }
                        //freightAmount = keyValue.Value;
                    }
                    if (keyValue.Key == "frieghtPerUnit")
                    {
                        frieghtPerUnit = keyValue.Value;
                    }

                    if (keyValue.Key == "demurrageCurrency")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            var commodityType = currencyList.Find(x => x.CurrencyId.ToString() == keyValue.Value);
                            demurrageCurrency = commodityType.CurrencyName;
                        }
                        else
                        {
                            demurrageCurrency = "";
                        }
                    }
                    if (keyValue.Key == "demurrageAmount")
                    {
                        if (keyValue.Value != null && keyValue.Value != "")
                        {
                            demurrageAmount = String.Format("{0:n}", Int64.Parse(keyValue.Value));
                        }
                        else
                        {
                            demurrageAmount = keyValue.Value;
                        }
                        //demurrageAmount = keyValue.Value;
                    }
                    if (keyValue.Key == "perDayProrataBasis")
                    {
                        perDayProrataBasis = keyValue.Value;
                    }
                    if (keyValue.Key == "vesselOwnerSignature")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            var sigHtml = "<img src=##Src## alt='vesselOwnerSignature' style=\"width: 325px; height: 100px;\" />";
                            WitnessToSignatureOf1 = sigHtml.Replace("##Src##", keyValue.Value);
                        }
                        else
                        {
                            WitnessToSignatureOf1 = "";
                        }
                    }
                    if (keyValue.Key == "chartererSignature")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            var sigHtml = "<img src=##Src## alt='chartererSignature' style=\"width: 325px; height: 100px;\"/>";
                            WitnessToSignatureOf2 = sigHtml.Replace("##Src##", keyValue.Value);
                        }
                        else
                        {
                            WitnessToSignatureOf2 = "";
                        }
                    }
                    if (keyValue.Key == "paymentConditions")
                    {
                        FreightPayableAt = keyValue.Value;
                    }
                    if (keyValue.Key == "includeBroker")
                    {
                        includeBroker = keyValue.Value;
                    }
                    if (keyValue.Key == "brokerName")
                    {
                        brokerName = keyValue.Value;
                    }
                    if (keyValue.Key == "brokerCompany")
                    {
                        brokerCompany = keyValue.Value;
                    }
                    if (keyValue.Key == "brokerAddressLine1")
                    {
                        brokerAdressLine1 = keyValue.Value;
                    }
                    if (keyValue.Key == "brokerAddressLine2")
                    {
                        brokerAdressLine2 = keyValue.Value;
                    }
                    if (keyValue.Key == "brokerCountryCode")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            var commodityType = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                            brokerCountryCode = commodityType.CountryCode;
                        }
                        else
                        {
                            brokerCountryCode = "";
                        }
                    }
                    if (keyValue.Key == "brokerContact")
                    {
                        brokerContact = keyValue.Value;
                    }
                    if (keyValue.Key == "brokerCommission")
                    {
                        brokerCommision = keyValue.Value;

                    }
                }

                var weight = vesselDeadWeight + "Dwt" + " " + vesselMaximumCapacity + "Tonnes";
                TotalDeadWeigth = weight + " " + vesselFlag;

                descriptionAndPositionOfVessel = vessel + " " + TotalDeadWeigth + " " + vesselItineraryPlace + " " + vesselItineraryDay;

                PartFullCargo = commodity + " " + commodityDescription + " " + quantity + "" + quantityMeasurementUnit;

                LoadingPort = portOfLoadingCategory + " - " + LoadingPort + ", " + LoadPortCountry;
                DischargingPort = portOfDischargeCategory + " - " + DischargingPort + ", " + DischargePortCountry;
                FreightRate = freightCurrency + " " + freightAmount + " " + frieghtPerUnit;
                DenurragePerHour = demurrageCurrency + " " + demurrageAmount + " " + perDayProrataBasis;

                if (includeBroker.ToLower() == "false")
                {
                    brokerData = "";
                }
                else
                {
                    var data = "<div class=\"row\"><div class=\"col-12\"><p class=\"sub-heading\">Ship Broker Details.</p></div><div class=\"col-12\"><div class=\"col-6\"><p class=\"sub-heading\">Name: " + brokerName + "</p></div><div class=\"col-6\"><p class=\"sub-heading\">Company: " + brokerCompany + "</p></div>" +
                "</div><div class=\"col-12\"><div class=\"col-6\"><p class=\"sub-heading\">Address-Line 1: " + brokerAdressLine1 + "</p></div><div class=\"col-6\"><p class=\"sub-heading\">Address-Line 2: " + brokerAdressLine2 + "</p></div></div><div class=\"col-12\">" +
                "<div class=\"col-6\"><p class=\"sub-heading\">Country Code: " + brokerCountryCode + "</p></div><div class=\"col-6\"><p class=\"sub-heading\">Contact: " + brokerContact + "</p></div></div><div class=\"col-12\"><div class=\"col-6\"><p class=\"sub-heading\">Commision: " + brokerCommision + "</p>" +
                "</div><div class=\"col-6\"></div></div></div>";
                    brokerData = data;
                }

                html = html.Replace("##ContractDate##", contractDate).Replace("##ContractPlace##", contractPlace).Replace("##ByAndBetween##", byAndBetween).Replace("##Owner##", owner).Replace("##Vessel##", vessel).Replace("##Charterer##", charterer)
                        .Replace("##descriptionAndPositionOfVessel##", descriptionAndPositionOfVessel)
                        .Replace("##Tonnage##", NetRegisteredTonnage).Replace("##Deadweight##", TotalDeadWeigth).Replace("##PartFullCargo##", PartFullCargo).Replace("##LoadingPort##", LoadingPort).Replace("##ReadinessDate##", "")
                        .Replace("##DischargePort##", DischargingPort).Replace("##TotalLaytime##", TotalLaytime).Replace("##FreightRate##", FreightRate).Replace("##FreightPayableAt##", FreightPayableAt).Replace("##DemurragePerHour##", DenurragePerHour)
                        .Replace("##SepcialProvisions##", "").Replace("##WitnessToSignatureOf1##", WitnessToSignatureOf1).Replace("##WitnessToSignatureOf2##", WitnessToSignatureOf2).Replace("##ShipBrokerDetails##", brokerData)
                        .Replace("##By1##", owner).Replace("##By2##", charterer)

                        .Replace("##CharterParty##", "").Replace("##Owner##", "").Replace("##Tonnage##", "").Replace("##Deadweight##", "").Replace("##draftinsaltwater##", "").Replace("##Capacity##", "").Replace("##tons##", "").Replace("##Classed##", "")
                        .Replace("##Now##", "").Replace("##ReadinessDate##", "").Replace("##CancellingDate##", "").Replace("##forloading##", "")
                        .Replace("##fordischarging##", "").Replace("##degrees##", "").Replace("##hoursBefore##", "").Replace("##board##", "").Replace("##Motorship##", "").Replace("##Whereof##", "").Replace("##MasterAtThePort##", "")
                        .Replace("##Quantity##", "").Replace("##quantityUnit##", "").Replace("##port##", "").Replace("##payment##", "").Replace("##freight##", "").Replace("##Charterer##", "").Replace("##TenorandDate##", "").Replace("##DatedAt##", "");

                var companySettingsSearchInputModel = new CompanySettingsSearchInputModel();
                companySettingsSearchInputModel.CompanyId = loggedInContext.CompanyGuid;
                companySettingsSearchInputModel.IsSystemApp = null;
                string storageAccountName = string.Empty;

                var SwitchBlPdfOutput = await _chromiumService.GeneratePdf(html, null, ContractModel.ClientId.ToString());

                List<CompanySettingsSearchOutputModel> companySettings = _masterDataManagementRepository.GetCompanySettings(companySettingsSearchInputModel, loggedInContext, validationMessages).ToList();
                if (companySettings.Count > 0)
                {
                    var storageAccountDetails = companySettings.Where(x => x.Key == "StorageAccountName").FirstOrDefault();
                    storageAccountName = storageAccountDetails?.Value;
                }
                CompanyOutputModel companyModel = _companyStructureService.GetCompanyById(loggedInContext.CompanyGuid, loggedInContext, validationMessages);

                var directory = SetupCompanyFileContainer(companyModel, 6, loggedInContext.LoggedInUserId, storageAccountName);

                var ContractFileName = "Vessel Contract";

                var fileExtension = ".pdf";

                var ContractConvertedFileName = ContractFileName + "-" + contractNumber + fileExtension;

                CloudBlockBlob ContractConvertedBlockBlob = directory.GetBlockBlobReference(ContractConvertedFileName);

                ContractConvertedBlockBlob.Properties.CacheControl = "public, max-age=2592000";

                ContractConvertedBlockBlob.Properties.ContentType = "application/pdf";

                Byte[] ContractBytes = SwitchBlPdfOutput.ByteStream;

                ContractConvertedBlockBlob.UploadFromByteArray(ContractBytes, 0, ContractBytes.Length);

                FinalContractModel.ContractPdf = ContractConvertedBlockBlob.Uri.AbsoluteUri;
                ContractModel.ContractPdf = ContractConvertedBlockBlob.Uri.AbsoluteUri;
            }

            if (ContractModel.IsVesselOwnerorBrokerSignatureDone)
            {
                FinalContractModel.IsVesselOwnerorBrokerSignatureVerificationNeed = true;
                FinalContractModel.IsSGTraderSignatureVerificationNeed = false;
            }
            if (ContractModel.IsSgTraderSignatureDone)
            {
                FinalContractModel.IsVesselOwnerorBrokerSignatureVerificationNeed = false;
                FinalContractModel.IsSGTraderSignatureVerificationNeed = true;
            }

            if (ContractModel.IsVesselOwnerorBrokerSignatureAccepted == true)
            {
                FinalContractModel.VesselOwnerorBrokerSignatureAcceptance = true;
            }
            if (ContractModel.IsVesselOwnerorBrokerSignatureRejected == true)
            {
                FinalContractModel.VesselOwnerorBrokerSignatureAcceptance = false;
            }
            if (ContractModel.IsSGTraderSignatureAccepted == true)
            {
                FinalContractModel.SgSignatureAcceptance = true;
            }
            if (ContractModel.IsSGTraderSignatureRejected == true)
            {
                FinalContractModel.SgSignatureAcceptance = false;
            }

            if (ContractModel.IsContractSealing)
            {
                var contractSignedDate = "Dated " + DateTime.UtcNow.ToString("dd-MMM-yyyy");
                JObject formField = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formField)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }

                var contractNumber = string.Empty;

                foreach (var keyValue in keyValueMap)
                {
                    if (formField.ContainsKey("contractNumber") && keyValue.Key == "contractNumber" && keyValue.Value != "" && keyValue.Value != null)
                    {
                        contractNumber = keyValue.Value;
                        break;
                    }
                }
                contractNumber = contractNumber + " " + contractSignedDate;

                if (formField.ContainsKey("contractNumber"))
                {
                    formField["contractNumber"] = contractNumber;
                }
                else
                {
                    formField.Add("contractNumber", contractNumber);
                }
                FinalContractModel.FormData = formField;
                ContractModel.FormData = FinalContractModel.FormData;
            }


            DataSetUpsertInputModel dataSetUpsertInputModel = new DataSetUpsertInputModel();
            if (ContractModel.IsArchived == null)
            {
                ContractModel.IsArchived = false;
            }
            dataSetUpsertInputModel.IsArchived = ContractModel.IsArchived;
            dataSetUpsertInputModel.DataJson = JsonConvert.SerializeObject(FinalContractModel);
            dataSetUpsertInputModel.CompanyId = loggedInContext.CompanyGuid;
            dataSetUpsertInputModel.DataSourceId = ContractModel.ContractTemplateId;
            dataSetUpsertInputModel.Id = ContractModel.DataSetId;
            ContractModel searchModel = new ContractModel();
            searchModel.DataSetId = ContractModel.DataSetId;
            var oldData = new ContractModel();
            if (searchModel.DataSetId != null)
            {
                oldData = GetContracts(searchModel, loggedInContext, validationMessages).FirstOrDefault();
                result = await _dataSetService.CreateDataSet(dataSetUpsertInputModel, loggedInContext, validationMessages);
                SaveHistory(ContractModel, oldData, validationMessages, loggedInContext);
            }
            else
            {
                result = await _dataSetService.CreateDataSet(dataSetUpsertInputModel, loggedInContext, validationMessages);
                searchModel.DataSetId = result;
                ContractModel.DataSetId = result;
                SaveHistory(ContractModel, null, validationMessages, loggedInContext);
                await UpdateRFQRequestForVesselContract(ContractModel.RFQGuid, loggedInContext, validationMessages);
            }


            if (ContractModel.IsShareDraft)
            {
                ShareDraftContractToShipBrokerOrVesselOwner(ContractModel, loggedInContext, validationMessages);
            }
            else if (ContractModel.IsDraftAccepted)
            {
                DraftSignatureEmailToShipBrokerorVesselOwner(ContractModel, loggedInContext, validationMessages);
                DraftVesselContractApproveOrRejectEmailToSGTrader(ContractModel, loggedInContext, validationMessages, "accept");
            }
            else if (ContractModel.IsDraftRejected)
            {
                DraftVesselContractApproveOrRejectEmailToSGTrader(ContractModel, loggedInContext, validationMessages, "reject");
            }
            else if (ContractModel.IsVesselOwnerorBrokerSignatureDone)
            {
                VesselContractSignatureVerificationMail(ContractModel, loggedInContext, validationMessages, "trader");
            }
            else if (ContractModel.IsSgTraderSignatureDone)
            {
                VesselContractSignatureVerificationMail(ContractModel, loggedInContext, validationMessages, "shipbroker");
            }
            else if (ContractModel.IsVesselOwnerorBrokerSignatureAccepted)
            {
                VesselContractSignatureAcceptedMail(ContractModel, loggedInContext, validationMessages, "shipbroker");
                DraftVesselContractSignatureEmailToSGTrader(ContractModel, loggedInContext, validationMessages);
            }
            else if (ContractModel.IsVesselOwnerorBrokerSignatureRejected)
            {
                VesselContractSignatureRejectedMail(ContractModel, loggedInContext, validationMessages, "shipbroker");
            }
            else if (ContractModel.IsSGTraderSignatureAccepted)
            {
                VesselContractSignatureAcceptedMail(ContractModel, loggedInContext, validationMessages, "trader");
            }
            else if (ContractModel.IsSGTraderSignatureRejected)
            {
                VesselContractSignatureRejectedMail(ContractModel, loggedInContext, validationMessages, "trader");
            }
            else if (ContractModel.IsContractSealing)
            {
                VesselContractSealingEmail(ContractModel, loggedInContext, validationMessages);
                if (ContractModel.BrokerId != null)
                {
                    var brokerDetails = _clientRepository.GetClients(new ClientInputModel() { ClientId = ContractModel.BrokerId }, loggedInContext, validationMessages);
                    ContractModel.ContractTemplateId = null;
                    ContractModel.IsGeneratedToPayables = false;
                    ContractModel.StatusId = null;
                    ContractModel.IsSelectPercentage = true;
                    ContractModel.BrokeragePercentage = (int)brokerDetails[0].BrokerageValue;
                    var resultInvoice = await UpsertInvoiceQueueByAccept(ContractModel, "Payable", loggedInContext, validationMessages);
                }
            }
            else if (ContractModel.IsCancelContract == true)
            {
                SGTraderCancelContractEmail(ContractModel, loggedInContext, validationMessages);
                if (ContractModel.IsDebitNote == true || ContractModel.IsCreditNote == true)
                {
                    string contractType = string.Empty;
                    if (ContractModel.IsDebitNote == true)
                    {
                        contractType = "Payable";
                    }
                    else if (ContractModel.IsCreditNote == true)
                    {
                        contractType = "Receivable";
                    }
                    if (!string.IsNullOrEmpty(ContractModel.TemplateData))
                    {
                        ContractModel.FormData = JsonConvert.DeserializeObject<Object>(ContractModel.TemplateData);
                    }

                    var resultInvoice = await UpsertInvoiceQueueByAccept(ContractModel, contractType, loggedInContext, validationMessages);
                }

            }
            return result;
        }

        public async Task<Guid?> UpdateRFQRequestForVesselContract(Guid? RfqId, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpdateRFQRequestForVesselContract", "Trading Service"));

            LoggingManager.Debug(RfqId.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }

            var oldData = new ContractModel();
            ContractModel searchModel = new ContractModel();
            searchModel.ContractType = "rfqList";
            searchModel.ListType = "q88ForRfq";
            searchModel.DataSetId = RfqId;
            oldData = GetContracts(searchModel, loggedInContext, validationMessages).FirstOrDefault();

            DataSetUpsertInputModel dataSetUpsertInput = new DataSetUpsertInputModel();
            dataSetUpsertInput.Id = oldData.DataSetId;
            dataSetUpsertInput.DataSourceId = oldData.ContractTemplateId;
            dataSetUpsertInput.UpdatedByUserId = loggedInContext.LoggedInUserId;
            dataSetUpsertInput.UpdatedDateTime = DateTime.UtcNow;

            var dataSetModel = new DataSetConversionModel();
            dataSetModel.FormData = JsonConvert.DeserializeObject<Object>(oldData.FormData.ToString());
            dataSetModel.TemplateTypeId = oldData.TemplateTypeId;
            dataSetModel.StatusId = oldData.StatusId;
            dataSetModel.Version = oldData.Version;
            dataSetModel.RFQId = oldData.RFQId;
            dataSetModel.RFQUniqueId = oldData.RFQUniqueId;
            dataSetModel.ClientId = oldData.ClientId;
            dataSetModel.BrokerId = oldData.BrokerId;
            dataSetModel.ReferenceId = oldData.ReferenceId;
            dataSetModel.ContractType = "rfq";
            dataSetModel.AcceptedByTraderUserId = oldData.AcceptedByTraderUserId != null ? oldData.AcceptedByTraderUserId : null;
            dataSetModel.AcceptedByClientUserId = oldData.AcceptedByClientUserId != null ? oldData.AcceptedByClientUserId : null;
            dataSetModel.IsAccepted = oldData.IsAccepted;
            dataSetModel.IsRejected = oldData.IsRejected;
            dataSetModel.Q88SharedClientIds = oldData.Q88SharedClientIds;
            dataSetModel.Q88SharedUserIds = oldData.Q88SharedUserIds;
            dataSetModel.Q88AcceptedIds = oldData.Q88AcceptedIds;
            dataSetModel.Q88RejectedIds = oldData.Q88RejectedIds;
            dataSetModel.IsQ88Accepted = oldData.IsQ88Accepted;
            dataSetModel.RFQAcceptedDateTime = oldData.RFQAcceptedDateTime;
            dataSetModel.RFQRejectedDateTime = oldData.RFQRejectedDateTime;
            dataSetModel.IsRfqConvertedToVessel = true;

            dataSetModel.VesselConfirmationStatusId = oldData.VesselConfirmationStatusId;
            dataSetModel.VesselConfirmationTemplateId = oldData.VesselConfirmationTemplateId;
            dataSetModel.VesselConfirmationRejectedDateTime = oldData.VesselConfirmationRejectedDateTime;
            dataSetModel.VesselConfirmationRejectedByUserId = oldData.VesselConfirmationRejectedByUserId;
            dataSetModel.VesselConfirmationAcceptedDateTime = oldData.VesselConfirmationAcceptedDateTime;
            dataSetModel.VesselConfirmationAcceptedByClientUserId = oldData.VesselConfirmationAcceptedByClientUserId;
            dataSetModel.VesselConfirmationAcceptedByTraderUserId = oldData.VesselConfirmationAcceptedByTraderUserId;
            dataSetModel.IsVesselConfirmationAccepted = oldData.IsVesselConfirmationAccepted;
            dataSetModel.IsVesselConfirmationRejected = oldData.IsVesselConfirmationRejected;
            dataSetModel.VesselConfirmationFormData = oldData.VesselConfirmationFormData != null ? JsonConvert.DeserializeObject<Object>(oldData.VesselConfirmationFormData.ToString()) : null;


            dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(dataSetModel);

            Guid? result = await _dataSetService.CreateDataSet(dataSetUpsertInput, loggedInContext, validationMessages);
            SaveRfqToVesselContractHistory(oldData, loggedInContext, validationMessages, "accept");
            return result;
        }

        public async Task<Guid?> UpdateRFQRequestAutoRejectRFQs(Guid? RfqId, int? rfqId, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpdateRFQRequestAutoRejectRFQs", "Trading Service"));

            LoggingManager.Debug(RfqId.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }

            var rfQList = new List<ContractModel>();
            ContractModel searchModel = new ContractModel();
            searchModel = new ContractModel();
            searchModel.ContractType = "rfqList";
            searchModel.ListType = "q88ForRfq";
            searchModel.ParamsJson = new List<ParamsJsonModel>();
            ParamsJsonModel paramJson = new ParamsJsonModel();
            paramJson.KeyName = "RFQId";
            paramJson.KeyValue = rfqId.ToString();
            paramJson.Type = "number";
            searchModel.ParamsJson.Add(paramJson);
            rfQList = GetContracts(searchModel, loggedInContext, validationMessages).ToList();
            var result = RfqId;
            if (rfQList != null && rfQList.Count > 0)
            {
                DataSetUpsertInputModel dataSetUpsertInput = new DataSetUpsertInputModel();
                var dataSetModel = new DataSetConversionModel();
                RFQStatusModel status = _tradingRepository.GetAllRFQStatus(new RFQStatusModel() { StatusName = "Rejected" }, loggedInContext, validationMessages).FirstOrDefault();
                foreach (var rfq in rfQList)
                {
                    if (rfq.DataSetId != RfqId)
                    {
                        dataSetUpsertInput = new DataSetUpsertInputModel();
                        dataSetUpsertInput.Id = rfq.DataSetId;
                        dataSetUpsertInput.DataSourceId = rfq.ContractTemplateId;
                        dataSetUpsertInput.UpdatedByUserId = loggedInContext.LoggedInUserId;
                        dataSetUpsertInput.UpdatedDateTime = DateTime.UtcNow;

                        dataSetModel = new DataSetConversionModel();
                        dataSetModel.FormData = JsonConvert.DeserializeObject<Object>(rfq.FormData.ToString());
                        dataSetModel.TemplateTypeId = rfq.TemplateTypeId;
                        dataSetModel.StatusId = status.RFQStatusId;
                        dataSetModel.Version = rfq.Version;
                        dataSetModel.RFQId = rfq.RFQId;
                        dataSetModel.RFQUniqueId = rfq.RFQUniqueId;
                        dataSetModel.ClientId = rfq.ClientId;
                        dataSetModel.BrokerId = rfq.BrokerId;
                        dataSetModel.ReferenceId = rfq.ReferenceId;
                        dataSetModel.ContractType = "rfq";
                        dataSetModel.AcceptedByTraderUserId = rfq.AcceptedByTraderUserId != null ? rfq.AcceptedByTraderUserId : null;
                        dataSetModel.AcceptedByClientUserId = rfq.AcceptedByClientUserId != null ? rfq.AcceptedByClientUserId : null;
                        dataSetModel.IsAccepted = false;
                        dataSetModel.IsRejected = true;
                        dataSetModel.Q88SharedClientIds = rfq.Q88SharedClientIds;
                        dataSetModel.Q88SharedUserIds = rfq.Q88SharedUserIds;
                        dataSetModel.Q88AcceptedIds = rfq.Q88AcceptedIds;
                        dataSetModel.Q88RejectedIds = rfq.Q88RejectedIds;
                        dataSetModel.IsQ88Accepted = rfq.IsQ88Accepted;
                        dataSetModel.RFQAcceptedDateTime = rfq.RFQAcceptedDateTime;
                        dataSetModel.IsRfqConvertedToVessel = false;
                        dataSetUpsertInput.IsArchived = true;
                        dataSetUpsertInput.ArchivedByUserId = loggedInContext.LoggedInUserId;
                        dataSetUpsertInput.ArchivedDateTime = DateTime.UtcNow;
                        dataSetModel.RFQRejectedDateTime = dataSetUpsertInput.ArchivedDateTime;

                        dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(dataSetModel);

                        Guid? resultGuid = await _dataSetService.CreateDataSet(dataSetUpsertInput, loggedInContext, validationMessages);
                        if (resultGuid != null && resultGuid == rfq.DataSetId)
                        {
                            SaveRfqToVesselContractHistory(rfq, loggedInContext, validationMessages, "reject");
                        }
                    }
                }
            }
            return result;
        }

        public async Task<Guid?> UpsertSaleContract(ContractModel contractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertContractTemplate", "Trading Service"));
                LoggingManager.Debug(contractModel.ToString());
                if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
                {
                    return null;
                }
                DataSetUpsertInputModel dataSetUpsertInputModel = new DataSetUpsertInputModel
                {
                    IsArchived = contractModel.IsArchived,
                    DataJson = JsonConvert.SerializeObject(contractModel),
                    CompanyId = loggedInContext.CompanyGuid,
                    DataSourceId = contractModel.ContractTemplateId,
                    Id = contractModel.DataSetId
                };
                ContractModel searchSaleContractModel = new ContractModel
                {
                    DataSetId = contractModel.DataSetId
                };
                var oldContractData = new ContractModel();
                Guid? result;
                if (searchSaleContractModel.DataSetId != null)
                {
                    oldContractData = GetContracts(searchSaleContractModel, loggedInContext, validationMessages).FirstOrDefault();
                    SaveSaleContractHistory(contractModel, oldContractData, loggedInContext, validationMessages);
                    result = await _dataSetService.CreateDataSet(dataSetUpsertInputModel, loggedInContext, validationMessages);
                }
                else
                {
                    result = await _dataSetService.CreateDataSet(dataSetUpsertInputModel, loggedInContext, validationMessages);
                    //searchSaleContractModel.DataSetId = result;
                    //oldContractData = GetContracts(searchSaleContractModel, loggedInContext, validationMessages).FirstOrDefault();
                    contractModel.DataSetId = result;
                    SaveSaleContractHistory(contractModel, null, loggedInContext, validationMessages);
                }
                if (contractModel.IsShareDraft)
                {
                    if (contractModel.ContractType == "Purchase" || contractModel.ContractType.ToLower() == "buyer")
                    {
                        ShareDraftContractToSeller(contractModel, loggedInContext, validationMessages);
                    }
                    else if (contractModel.ContractType == "Sale")
                    {
                        ShareDraftContractToBuyer(contractModel, loggedInContext, validationMessages);
                    }
                }
                else if (contractModel.IsDraftAccepted)
                {
                    if (contractModel.ContractType == "Purchase" || contractModel.ContractType.ToLower() == "buyer")
                    {
                        DraftSignatureEmailToSeller(contractModel, loggedInContext, validationMessages);
                        DraftPurchaseContractApproveEmailToSGTrader(contractModel, loggedInContext, validationMessages);
                    }
                    if (contractModel.ContractType == "Sale")
                    {
                        DraftSignatureEmailToBuyer(contractModel, loggedInContext, validationMessages);
                        DraftSaleContractApproveEmailToSGTrader(contractModel, loggedInContext, validationMessages);
                    }
                }
                else if (contractModel.IsDraftRejected)
                {
                    if (contractModel.ContractType == "Purchase" || contractModel.ContractType.ToLower() == "buyer")
                    {
                        DraftPurchaseContractRejectEmailToSGTrader(contractModel, loggedInContext, validationMessages);
                    }
                    if (contractModel.ContractType == "Sale")
                    {
                        DraftSaleContractRejectEmailToSGTrader(contractModel, loggedInContext, validationMessages);
                    }
                }
                else if (contractModel.IsSellerSignatureDone)
                {
                    if (contractModel.ContractType == "Purchase" || contractModel.ContractType.ToLower() == "buyer")
                    {
                        SellerSignatureVerificationMailToSgTrader(contractModel, loggedInContext, validationMessages);
                    }
                    else if (contractModel.ContractType == "Sale")
                    {
                        BuyerSignatureVerificationMailToSgTrader(contractModel, loggedInContext, validationMessages);
                    }
                }
                else if (contractModel.IsSgTraderSignatureDone)
                {
                    if (contractModel.ContractType == "Purchase" || contractModel.ContractType.ToLower() == "buyer")
                    {
                        SgTraderSignatureVerificationMailToSeller(contractModel, loggedInContext, validationMessages);
                    }
                    else if (contractModel.ContractType == "Sale")
                    {
                        SgTraderSignatureVerificationMailToBuyer(contractModel, loggedInContext, validationMessages);
                    }
                }
                else if (contractModel.IsSellerSignatureAccepted)
                {
                    if (contractModel.ContractType == "Purchase" || contractModel.ContractType.ToLower() == "buyer")
                    {
                        SellerSignatureAcceptEmail(contractModel, loggedInContext, validationMessages);
                        SGTraderSignatureEmailForPurchaseContract(contractModel, loggedInContext, validationMessages);
                    }
                    if (contractModel.ContractType == "Sale")
                    {
                        BuyerSignatureAcceptEmail(contractModel, loggedInContext, validationMessages);
                        SGTraderSignatureEmailForSellerContract(contractModel, loggedInContext, validationMessages);
                    }
                }
                else if (contractModel.IsSellerSignatureRejected)
                {
                    if (contractModel.ContractType == "Purchase" || contractModel.ContractType.ToLower() == "buyer")
                    {
                        SellerSignatureRejectEmail(contractModel, loggedInContext, validationMessages);
                    }
                    if (contractModel.ContractType == "Sale")
                    {
                        BuyerSignatureRejectEmail(contractModel, loggedInContext, validationMessages);
                    }
                }
                else if (contractModel.IsSGTraderSignatureAccepted)
                {
                    if (contractModel.ContractType == "Purchase" || contractModel.ContractType.ToLower() == "buyer")
                    {
                        SGTraderSignatureAcceptEmailBySeller(contractModel, loggedInContext, validationMessages);
                    }
                    if (contractModel.ContractType == "Sale")
                    {
                        SGTraderSignatureAcceptEmailByBuyer(contractModel, loggedInContext, validationMessages);
                    }
                }
                else if (contractModel.IsSGTraderSignatureRejected)
                {
                    if (contractModel.ContractType == "Purchase" || contractModel.ContractType.ToLower() == "buyer")
                    {
                        SGTraderSignatureRejectEmailBySeller(contractModel, loggedInContext, validationMessages);
                    }
                    if (contractModel.ContractType == "Sale")
                    {
                        SGTraderSignatureRejectEmailByBuyer(contractModel, loggedInContext, validationMessages);
                    }
                }
                else if (contractModel.IsContractSealing)
                {
                    if (contractModel.ClientId != null)
                    {
                        contractModel.ContractTemplateId = null;
                        contractModel.IsGeneratedToPayables = false;
                        contractModel.StatusId = null;
                        var resultInvoice = await UpsertInvoiceQueueByAccept(contractModel, "Payable", loggedInContext, validationMessages);
                    }
                    if (contractModel.ContractType == "Purchase" || contractModel.ContractType.ToLower() == "buyer")
                    {
                        PurchaseContractSealingEmail(contractModel, loggedInContext, validationMessages);
                    }
                    if (contractModel.ContractType == "Sale")
                    {
                        SellerContractSealingEmail(contractModel, loggedInContext, validationMessages);
                    }
                }
                return result;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "UpsertSaleContract", "Trading Service", exception.Message), exception);
                return null;
            }
        }
        public async Task<Guid?> UpsertSwitchBlContract(SwitchBlContractModel switchBlContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertSwitchBlContract", "Trading Service"));
                LoggingManager.Debug(switchBlContractModel.ToString());
                if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
                {
                    return null;
                }
                FinalSwitchBlModel finalSwitchBlModel = new FinalSwitchBlModel
                {
                    SwitchBlDetails = switchBlContractModel.SwitchBlDetails,
                    SaleContractId = switchBlContractModel.DataSourceId,
                    StatusName = switchBlContractModel.StatusName,
                    VesselId = switchBlContractModel.VesselId,
                    VesselOwnerId = switchBlContractModel.VesselOwnerId,
                    BuyerAcceptComment = switchBlContractModel.BuyerAcceptComment,
                    BuyerRejectComment = switchBlContractModel.BuyerRejectComment,
                    VesselOwnerAcceptComment = switchBlContractModel.VesselOwnerAcceptComment,
                    VesselOwnerRejectComment = switchBlContractModel.VesselOwnerRejectComment
                };
                DataSetUpsertInputModel dataSetUpsertInputModel = new DataSetUpsertInputModel
                {
                    IsArchived = switchBlContractModel.IsArchived,
                    CompanyId = loggedInContext.CompanyGuid,
                    DataSourceId = switchBlContractModel.DataSourceId,
                    Id = switchBlContractModel.DataSetId
                };
                string draftBlNumber = string.Empty;
                int? blNumber = 0;
                //Generating blNumbers
                if (switchBlContractModel.StatusName == "BlsCreated")
                {
                    blNumber = FindHighestBlNumber(switchBlContractModel.SwitchBlDetails, draftBlNumber, blNumber);
                    switchBlContractModel = GenerateDraftBls(switchBlContractModel, blNumber, draftBlNumber);
                }
                finalSwitchBlModel.SwitchBlDetails = switchBlContractModel.SwitchBlDetails;
                dataSetUpsertInputModel.DataJson = JsonConvert.SerializeObject(finalSwitchBlModel);
                Guid? result = await _dataSetService.CreateDataSet(dataSetUpsertInputModel, loggedInContext, validationMessages);
                ContractModel searchVesselContractModel = new ContractModel
                {
                    DataSetId = switchBlContractModel.VesselId
                };

                if ((switchBlContractModel?.DataSetId != null && switchBlContractModel.OldData != null && switchBlContractModel.NewData != null) || switchBlContractModel.IsObjectChanged == true)
                {
                    TaskWrapper.ExecuteFunctionInNewThread(() =>
                    {
                        List<ParamsJsonModel> paramsJsonList = new List<ParamsJsonModel>();

                        paramsJsonList.Add(new ParamsJsonModel()
                        {
                            KeyName = "ContractType",
                            KeyValue = "ExecutionSteps",
                            Type = "string"
                        });

                        paramsJsonList.Add(new ParamsJsonModel()
                        {
                            KeyName = "ContractId",
                            KeyValue = switchBlContractModel.VesselId.ToString(),
                            Type = "guid"
                        });

                        paramsJsonList.Add(new ParamsJsonModel()
                        {
                            KeyName = "StatusName",
                            KeyValue = "Completed",
                            Type = "string"
                        });

                        paramsJsonList.Add(new ParamsJsonModel()
                        {
                            KeyName = "StepName",
                            KeyValue = "Switch Bill of Lading",
                            Type = "string"
                        });

                        string paramsJsons = JsonConvert.SerializeObject(paramsJsonList);

                        var dataSetsResultSwichBLS = _dataSetService.SearchExecutionStepsDataSets(null, null, null, paramsJsons, false, false, null, null, loggedInContext, validationMessages)?.GetAwaiter().GetResult();

                        foreach (var swichBl in dataSetsResultSwichBLS)
                        {
                            var dataSetUpdateModel = new UpdateDataSetJsonModel();
                            dataSetUpdateModel.Id = swichBl.Id;
                            List<ParamsKeyModel> paramsJsonUpdateModel = new List<ParamsKeyModel>();
                            paramsJsonUpdateModel.Add(new ParamsKeyModel()
                            {
                                KeyName = "StatusName",
                                KeyValue = "Initiated",
                                Type = "string"
                            });
                            dataSetUpdateModel.ParamsJsonModel = paramsJsonUpdateModel;

                            var updateId = _dataSetService.UpdateDataSetJson(dataSetUpdateModel, loggedInContext, validationMessages);

                            List<ParamsJsonModel> paramsJsonModels = new List<ParamsJsonModel>();

                            paramsJsonModels.Add(new ParamsJsonModel()
                            {
                                KeyName = "ContractType",
                                KeyValue = "ExecutionSteps",
                                Type = "string"
                            });

                            paramsJsonModels.Add(new ParamsJsonModel()
                            {
                                KeyName = "ContractId",
                                KeyValue = switchBlContractModel.VesselId.ToString(),
                                Type = "guid"
                            });

                            paramsJsonModels.Add(new ParamsJsonModel()
                            {
                                KeyName = "PurchaseId",
                                KeyValue = swichBl.DataJson.PurchaseId.ToString(),
                                Type = "guid"
                            });

                            paramsJsonModels.Add(new ParamsJsonModel()
                            {
                                KeyName = "StatusName",
                                KeyValue = "Rejected,Initiated,Accepted,Completed",
                                Type = "ListFilter"
                            });

                            paramsJsonModels.Add(new ParamsJsonModel()
                            {
                                KeyName = "StepName",
                                KeyValue = "Invoice to Buyer,Documents per Shipping Instruction,Letter of indemnity for switching BLs,Letter of indemnity for Discharging Cargo",
                                Type = "ListFilter"
                            });

                            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsonModels);

                            var dataSetsResult = _dataSetService.SearchExecutionStepsDataSets(null, null, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages)?.GetAwaiter().GetResult();

                            foreach (var data in dataSetsResult)
                            {
                                DataSetUpsertInputModel dataSetUpsertInput = new DataSetUpsertInputModel();

                                dataSetUpsertInput.IsArchived = false;
                                dataSetUpsertInput.CompanyId = loggedInContext.CompanyGuid;
                                dataSetUpsertInput.DataSourceId = data.DataSourceId;
                                dataSetUpsertInput.Id = data.Id;
                                data.DataJson.CanShowAlert = true;
                                data.DataJson.OldData = switchBlContractModel.OldData;
                                data.DataJson.NewData = switchBlContractModel.NewData;
                                dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(data.DataJson);

                                Guid? guid = _dataSetService.CreateExecutionDataSet(dataSetUpsertInput, loggedInContext, validationMessages).GetAwaiter().GetResult();
                            }
                        }
                    });
                }

                //Upserting dataSetId for a vessel contract
                var vesselContractData = GetContracts(searchVesselContractModel, loggedInContext, validationMessages).FirstOrDefault();

                //Upserting purchase contract remaining quantity
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    if (switchBlContractModel.PurchaseContracts != null && switchBlContractModel.PurchaseBlDetails != null)
                    {
                        foreach (var purchaseContract in switchBlContractModel.PurchaseContracts)
                        {
                            PurchaseExecutionModel searchPurchaseExecutionModel = new PurchaseExecutionModel
                            {
                                PurchaseId = purchaseContract.DataSetId,
                                DataSourceId = vesselContractData != null ? vesselContractData.DataSourceId : null,
                                ContractType = purchaseContract.ContractType,
                                ContractId = switchBlContractModel.VesselId
                            };
                            var purchaseBlDetails = switchBlContractModel.PurchaseBlDetails.Where(x => x.PurchaseId == purchaseContract.DataSetId).FirstOrDefault();
                            if (purchaseBlDetails != null)
                            {
                                List<PurchaseExecutionModel> purchaseExecutionStepsData = GetXPSteps(searchPurchaseExecutionModel, loggedInContext, validationMessages);
                                foreach (var purchaseExecutionStep in purchaseExecutionStepsData)
                                {
                                    if (purchaseExecutionStep.StepName.ToLower() == "purchase bl")
                                    {
                                        purchaseExecutionStep.BlDraftForm = purchaseBlDetails.BlDetails;
                                        UpsertXPSteps(purchaseExecutionStep, loggedInContext, validationMessages).GetAwaiter().GetResult();
                                    }
                                }
                            }
                        }
                    }
                });

                //Upserting sale contract remaining quantity
                TaskWrapper.ExecuteFunctionInNewThread(async () =>
                {
                    if (switchBlContractModel.SalesContracts != null)
                    {
                        foreach (var saleContract in switchBlContractModel.SalesContracts)
                        {
                            ContractModel searchSalesContractModel = new ContractModel
                            {
                                DataSetId = saleContract.DataSetId
                            };
                            if (saleContract.DataSetId == switchBlContractModel.DataSourceId)
                            {
                                var salesContractData = GetContracts(searchSalesContractModel, loggedInContext, validationMessages).FirstOrDefault();
                                validationMessages = new List<ValidationMessage>();
                                if (salesContractData != null)
                                {
                                    salesContractData.SwitchBlDataSetId = result;
                                    salesContractData.RemainingContractQuantity = saleContract.RemainingContractQuantity;
                                    await UpsertContract(salesContractData, loggedInContext, validationMessages);
                                }
                            }
                        }
                    }
                });
                if (switchBlContractModel.IsShareSwitchBlContract)
                {
                    if (switchBlContractModel.SwitchBlDetails != null && switchBlContractModel.SwitchBlDetails.Count > 0)
                    {
                        SwitchBlContractAcceptOrRejectMailToBuyer(switchBlContractModel.SwitchBlDetails[0].ClientId, switchBlContractModel.SelectedSaleContractId,
                                 result, loggedInContext, validationMessages);
                    }
                }

                if (switchBlContractModel.IsContractSharedToVesselOwner == true)
                {
                    SwitchBlContractAcceptOrRejectMailToVesselOwner(switchBlContractModel, loggedInContext, validationMessages);
                }

                if (switchBlContractModel.StatusName.ToLower() == "buyeraccepted")
                {
                    SwitchBlBuyerAcceptenceMailToSgTrader(switchBlContractModel, switchBlContractModel.SwitchBlDetails[0], null, loggedInContext, validationMessages);
                }

                if (switchBlContractModel.StatusName.ToLower() == "buyerrejected")
                {
                    SwitchBlBuyerRejectionMailToSgTrader(switchBlContractModel, switchBlContractModel.SwitchBlDetails[0], null, loggedInContext, validationMessages);
                }

                if (switchBlContractModel.StatusName.ToLower() == "vesselowneraccepted")
                {
                    SwitchBlBuyerAcceptenceMailToSgTrader(switchBlContractModel, switchBlContractModel.SwitchBlDetails[0], true, loggedInContext, validationMessages);
                }

                if (switchBlContractModel.StatusName.ToLower() == "vesselownerrejected")
                {
                    SwitchBlBuyerRejectionMailToSgTrader(switchBlContractModel, switchBlContractModel.SwitchBlDetails[0], true, loggedInContext, validationMessages);
                }

                return result;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "UpsertSwitchBlContract", "Trading Service", exception.Message), exception);
                validationMessages.Add(new ValidationMessage()
                {
                    ValidationMessaage = exception.Message
                });
                return null;
            }
        }
        public virtual SwitchBlContractModel GenerateDraftBls(SwitchBlContractModel switchBlContractModel, int? blNumber, string draftBlNumber)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GenerateDraftBls", "Trading Service"));
                var contractName = string.Empty;
                var saleContractDetails = switchBlContractModel.SalesContracts.Where(x => x.DataSetId == switchBlContractModel.DataSourceId).FirstOrDefault();
                if (saleContractDetails != null && saleContractDetails.FormData != null)
                {
                    JObject formfield = (JObject)JsonConvert.DeserializeObject(saleContractDetails.FormData.ToString());
                    Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                    foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                    {
                        keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                    }

                    foreach (var keyValue in keyValueMap)
                    {
                        if (keyValue.Key == "contractNumber")
                        {
                            contractName = keyValue.Value;
                        }
                    }
                }
                if (switchBlContractModel.DataSetId == null)
                {
                    if (switchBlContractModel.SwitchBlDetails != null)
                    {
                        foreach (var switchBlData in switchBlContractModel.SwitchBlDetails)
                        {
                            if (switchBlData.ActionType.ToLower() == "onetoone")
                            {
                                if (switchBlData.PurchaseContractDetails != null && switchBlData.PurchaseContractDetails.PurchaseContractId != null && switchBlData.PurchaseContractDetails.SaleContractId != null)
                                {
                                    blNumber += 1;
                                    draftBlNumber = GeneratingUniqueNameForDraftBlNumber(contractName, blNumber);
                                    switchBlData.PurchaseContractDetails.DraftBlNumber = draftBlNumber;
                                }
                            }
                            if (switchBlData.ActionType.ToLower() == "combine")
                            {
                                if (switchBlData.IsQuantitySplited)
                                {
                                    foreach (var splitData in switchBlData.SplitList)
                                    {
                                        blNumber += 1;
                                        draftBlNumber = GeneratingUniqueNameForDraftBlNumber(contractName, blNumber);
                                        splitData.DraftBlNumber = draftBlNumber;
                                    }
                                }
                                else
                                {
                                    blNumber += 1;
                                    draftBlNumber = GeneratingUniqueNameForDraftBlNumber(contractName, blNumber);
                                    switchBlData.DraftBlNumber = draftBlNumber;
                                }
                            }
                            if (switchBlData.ActionType.ToLower() == "split")
                            {
                                if (switchBlData.SplitList != null && switchBlData.SplitList.Count > 0)
                                {
                                    foreach (var splitData in switchBlData.SplitList)
                                    {
                                        blNumber += 1;
                                        draftBlNumber = GeneratingUniqueNameForDraftBlNumber(contractName, blNumber);
                                        splitData.DraftBlNumber = draftBlNumber;
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (switchBlContractModel.SwitchBlDetails != null)
                    {
                        foreach (var switchBlData in switchBlContractModel.SwitchBlDetails)
                        {
                            if (switchBlData.ActionType.ToLower() == "onetoone")
                            {
                                if (switchBlData.PurchaseContractDetails != null)
                                {
                                    if (string.IsNullOrEmpty(switchBlData.PurchaseContractDetails.DraftBlNumber))
                                    {
                                        blNumber += 1;
                                        draftBlNumber = GeneratingUniqueNameForDraftBlNumber(contractName, blNumber);
                                        switchBlData.PurchaseContractDetails.DraftBlNumber = draftBlNumber;
                                    }
                                }
                            }
                            if (switchBlData.ActionType.ToLower() == "combine")
                            {
                                if (switchBlData.IsQuantitySplited)
                                {
                                    foreach (var splitData in switchBlData.SplitList)
                                    {
                                        if (string.IsNullOrEmpty(splitData.DraftBlNumber))
                                        {
                                            blNumber += 1;
                                            draftBlNumber = GeneratingUniqueNameForDraftBlNumber(contractName, blNumber);
                                            splitData.DraftBlNumber = draftBlNumber;
                                        }
                                    }
                                }
                                else
                                {
                                    if (string.IsNullOrEmpty(switchBlData.DraftBlNumber))
                                    {
                                        blNumber += 1;
                                        draftBlNumber = GeneratingUniqueNameForDraftBlNumber(contractName, blNumber);
                                        switchBlData.DraftBlNumber = draftBlNumber;
                                    }
                                }
                            }
                            if (switchBlData.ActionType.ToLower() == "split")
                            {
                                if (switchBlData.SplitList != null && switchBlData.SplitList.Count > 0)
                                {
                                    foreach (var splitData in switchBlData.SplitList)
                                    {
                                        if (string.IsNullOrEmpty(splitData.DraftBlNumber))
                                        {
                                            blNumber += 1;
                                            draftBlNumber = GeneratingUniqueNameForDraftBlNumber(contractName, blNumber);
                                            splitData.DraftBlNumber = draftBlNumber;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return switchBlContractModel;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GenerateDraftBls", "Trading Service", exception.Message), exception);
                return null;
            }
        }
        public string GeneratingUniqueNameForDraftBlNumber(string contractName, int? blNumber)
        {
            var draftBlNumber = string.Empty;
            var trimedContractName = contractName.Length > 4 ? contractName.Substring(0, 4) : contractName;
            draftBlNumber =  $"BLB-{trimedContractName}-({blNumber})";
            return draftBlNumber;
        }
        public int? FindHighestBlNumber(List<SwitchBlDetailsModel> switchBlDetailsModels, string draftBlNumber, int? blNumber)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "FindHighestBlNumber", "Trading Service"));
                if (switchBlDetailsModels != null)
                {
                    foreach (var switchBlData in switchBlDetailsModels)
                    {
                        if (switchBlData.ActionType.ToLower() == "onetoone")
                        {
                            if (switchBlData.PurchaseContractDetails != null)
                            {
                                if (!string.IsNullOrEmpty(switchBlData.PurchaseContractDetails.DraftBlNumber))
                                {
                                    var switchBlDraftNumber = GetNumberFromString(switchBlData.PurchaseContractDetails.DraftBlNumber);
                                    blNumber = switchBlDraftNumber > blNumber ? switchBlDraftNumber : blNumber;
                                }
                            }
                        }
                        if (switchBlData.ActionType.ToLower() == "combine")
                        {
                            if (switchBlData.IsQuantitySplited)
                            {
                                foreach (var splitData in switchBlData.SplitList)
                                {
                                    if (!string.IsNullOrEmpty(splitData.DraftBlNumber))
                                    {
                                        var switchBlDraftNumber = GetNumberFromString(splitData.DraftBlNumber);
                                        blNumber = switchBlDraftNumber > blNumber ? switchBlDraftNumber : blNumber;
                                    }
                                }
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(switchBlData.DraftBlNumber))
                                {
                                    var switchBlDraftNumber = GetNumberFromString(switchBlData.DraftBlNumber);
                                    blNumber = switchBlDraftNumber > blNumber ? switchBlDraftNumber : blNumber;
                                }
                            }
                        }
                        if (switchBlData.ActionType.ToLower() == "split")
                        {
                            if (switchBlData.SplitList != null && switchBlData.SplitList.Count > 0)
                            {
                                foreach (var splitData in switchBlData.SplitList)
                                {
                                    if (!string.IsNullOrEmpty(splitData.DraftBlNumber))
                                    {
                                        var switchBlDraftNumber = GetNumberFromString(splitData.DraftBlNumber);
                                        blNumber = switchBlDraftNumber > blNumber ? switchBlDraftNumber : blNumber;
                                    }
                                }
                            }
                        }
                    }
                }
                return blNumber;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "FindHighestBlNumber", "Trading Service", exception.Message), exception);
                return 0;
            }
        }
        public int GetNumberFromString(string draftNumber)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetNumberFromString", "Trading Service"));
                var highestDraftBlNumber = Regex.Split(draftNumber, @"(\d)(?=\D*$)");
                if(highestDraftBlNumber.Length > 0)
                {
                    return int.Parse(highestDraftBlNumber[1]);
                }
                return 0;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "GetDigitsFromString", "Trading Service", exception.Message), exception);
                return 0;
            }
        }
        public async Task<Guid?> UpsertInvoiceQueue(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertContractTemplate", "Trading Service"));

            LoggingManager.Debug(ContractModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }

            ContractModel InvoiceQueModel = new ContractModel();
            InvoiceQueModel.ContractType = "Invoice Queue";
            InvoiceQueModel.ContractId = ContractModel.ContractId;
            InvoiceQueModel.FormData = ContractModel.FormData;
            InvoiceQueModel.SgtraderInvoiceAcceptedComments = ContractModel.SgtraderInvoiceAcceptedComments;
            InvoiceQueModel.SgtraderInvoiceRejectedComments = ContractModel.SgtraderInvoiceRejectedComments;
            InvoiceQueModel.ContracterInvoiceAcceptedComments = ContractModel.ContracterInvoiceAcceptedComments;
            InvoiceQueModel.ContracterInvoiceRejectedComments = ContractModel.ContracterInvoiceRejectedComments;
            InvoiceQueModel.IsGeneratedToPayables = ContractModel.IsGeneratedToPayables;
            InvoiceQueModel.InvoicePdfUrl = ContractModel.InvoicePdfUrl;
            InvoiceQueModel.InvoiceType = ContractModel.InvoiceType;
            InvoiceQueModel.BrokerId = ContractModel.BrokerId;
            InvoiceQueModel.InvoicePaymentStatusId = ContractModel.InvoicePaymentStatusId;
            InvoiceQueModel.StatusId = ContractModel.StatusId;
            InvoiceQueModel.ClientId = ContractModel.ClientId;
            InvoiceQueModel.IsDebitNote = ContractModel.IsDebitNote;
            InvoiceQueModel.IsCreditNote = ContractModel.IsCreditNote;
            InvoiceQueModel.TradeId = ContractModel.TradeId;
            InvoiceQueModel.TradeStatus = ContractModel.TradeStatus;
            InvoiceQueModel.IsAgentInvoiceAcceptedBySGTrader = ContractModel.IsAgentInvoiceAcceptedBySGTrader;
            InvoiceQueModel.IsShareCreditOrDebitNote = ContractModel.IsShareCreditOrDebitNote;
            ClientInvoiceStatus ClientInvoiceStatus = new ClientInvoiceStatus();
            List<ClientInvoiceStatus> invoicePaymentStatus = _clientService.GetAllInvoicePaymentStatus(ClientInvoiceStatus, loggedInContext, validationMessages);
            if (ContractModel.InvoicePaymentStatusId != null && ContractModel.InvoicePaymentStatusId != Guid.Empty)
            {
                foreach (var status in invoicePaymentStatus)
                {
                    if (status.StatusName.ToLower() == "Approved".ToLower() || status.StatusName.ToLower() == "disputed" && InvoiceQueModel.InvoicePaymentStatusId == status.InvoiceStatusId)
                    {
                        InvoiceQueModel.ApprovedDate = DateTime.UtcNow;
                    }
                    if (status.StatusName.ToLower() == "Paid".ToLower() && InvoiceQueModel.InvoicePaymentStatusId == status.InvoiceStatusId)
                    {
                        InvoiceQueModel.PaidDate = DateTime.UtcNow;
                    }
                }
            }
            ContractModel searchContract = new ContractModel();
            searchContract.DataSetId = ContractModel.DataSetId;
            var oldData = GetContracts(searchContract, loggedInContext, validationMessages).FirstOrDefault();
            if (ContractModel.IsInvoiceAcceptedBySgtrader == true && (ContractModel.IsCreditNote == true || ContractModel.IsDebitNote == true) && oldData.ContractPdf != null)
            {
                ContractModel.InvoicePdfUrl = oldData.ContractPdf;
            }
            if (ContractModel.IsInvoiceAcceptedBySgtrader)
            {
                InvoiceQueModel.InvoicePaymentStatusId = (from s in invoicePaymentStatus where s.InvoiceStatusName == "Created" select s.InvoiceStatusId).FirstOrDefault();
            }
            if (ContractModel.IsInvoiceAcceptedBySgtrader)
            {
                if (ContractModel.IsCreditNote == true && (ContractModel.InvoicePdfUrl == null || ContractModel.InvoicePdfUrl == ""))
                {
                    InvoiceQueModel.InvoicePdfUrl = await InvoiceAcceptanceBySgtraderEmailofCreditNote(ContractModel, loggedInContext, validationMessages);
                }
                else if (ContractModel.IsDebitNote == true && (ContractModel.InvoicePdfUrl == null || ContractModel.InvoicePdfUrl == ""))
                {
                    InvoiceQueModel.InvoicePdfUrl = await InvoiceAcceptanceBySgtraderEmailofDebitNote(ContractModel, loggedInContext, validationMessages);
                }
                else if (ContractModel.IsCreditNote != true && ContractModel.IsDebitNote != true && (ContractModel.InvoicePdfUrl == null || ContractModel.InvoicePdfUrl == ""))
                {
                    InvoiceQueModel.InvoicePdfUrl = await InvoiceAcceptanceBySgtraderEmailofCB(ContractModel, loggedInContext, validationMessages);
                }
                else if (ContractModel.InvoicePdfUrl != null && ContractModel.InvoicePdfUrl != "")
                {
                    InvoiceAcceptanceBySgtraderEmail(ContractModel, loggedInContext, validationMessages);
                }
            }

            DataSetUpsertInputModel dataSetInvoiceUpsertInputModel = new DataSetUpsertInputModel();
            InvoiceQueModel.ParamsJson = null;
            dataSetInvoiceUpsertInputModel.DataJson = JsonConvert.SerializeObject(InvoiceQueModel);
            dataSetInvoiceUpsertInputModel.DataSourceId = ContractModel.ContractTemplateId;
            dataSetInvoiceUpsertInputModel.CompanyId = loggedInContext.CompanyGuid;
            dataSetInvoiceUpsertInputModel.Id = oldData == null ? null : oldData.DataSetId;
            var invoiceId = await _dataSetService.CreateDataSet(dataSetInvoiceUpsertInputModel, loggedInContext, validationMessages);
            if (ContractModel.IsShareCreditOrDebitNote)
            {
                ShareCreditOrDebitNoteToContracterEmail(ContractModel, loggedInContext, validationMessages);
            }
            if (ContractModel.IsShareDraft)
            {
                ShareInvoiceToContracterEmail(ContractModel, loggedInContext, validationMessages);
            }
            else if (ContractModel.IsInvoiceAcceptedByContracter)
            {
                InvoiceAcceptanceByContracterEmail(ContractModel, loggedInContext, validationMessages);
                if (ContractModel.IsAgentInvoiceAcceptedBySGTrader)
                {
                    InvoiceAcceptenceMailToContracter(ContractModel, loggedInContext, validationMessages);
                }
                if (ContractModel.InvoicePdfUrl == null && ContractModel.IsCancelContract != true)
                {
                    UploadingInvoicePdfMailToContracter(ContractModel, loggedInContext, validationMessages);
                }
            }
            else if (ContractModel.IsInvoiceRejectedByContracter)
            {
                InvoiceRejectanceByContracterEmail(ContractModel, loggedInContext, validationMessages);
            }
            else if (ContractModel.IsInvoiceRejectedBySgtrader)
            {
                InvoiceRejectanceBySgtraderEmail(ContractModel, loggedInContext, validationMessages);
            }
            if (ContractModel.InvoicePdfUrl != null)
            {
                InvoicePdfMailToSGTrader(ContractModel, loggedInContext, validationMessages);
            }
            SaveHistory(ContractModel, oldData, validationMessages, loggedInContext);
            return invoiceId;
        }
        public async Task<Guid?> UpsertInvoiceQueueByAccept(ContractModel ContractModel, string invoiceType, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {

            if (ContractModel.ContractTemplateId == null)
            {
                CounterPartySettingsModel CounterPartySettingsModel = new CounterPartySettingsModel();
                CounterPartySettingsModel.ClientId = ContractModel.BrokerId;
                CounterPartySettingsModel.Key = "InvoiceTemplate";
                List<CounterPartySettingsModel> CounterPartySettings = _clientRepository.GetCounterPartySettings(CounterPartySettingsModel, loggedInContext, validationMessages);
                ContractModel.ContractTemplateId = new Guid(CounterPartySettings[0].Value != null ? CounterPartySettings[0].Value.Split(',')[0] : null);
            }
            ClientInvoiceStatus ClientInvoiceStatus = new ClientInvoiceStatus();
            List<ClientInvoiceStatus> invoiceStatus = _clientService.GetAllInvoiceStatus(ClientInvoiceStatus, loggedInContext, validationMessages);
            ContractModel InvoiceQueModel = new ContractModel();
            InvoiceQueModel.ContractType = "Invoice Queue";
            InvoiceQueModel.ContractId = ContractModel.DataSetId;
            InvoiceQueModel.FormData = ContractModel.FormData == null ? new object() : ContractModel.FormData;
            InvoiceQueModel.SgtraderInvoiceAcceptedComments = ContractModel.SgtraderInvoiceAcceptedComments;
            InvoiceQueModel.SgtraderInvoiceRejectedComments = ContractModel.SgtraderInvoiceRejectedComments;
            InvoiceQueModel.ContracterInvoiceAcceptedComments = ContractModel.ContracterInvoiceAcceptedComments;
            InvoiceQueModel.ContracterInvoiceRejectedComments = ContractModel.ContracterInvoiceRejectedComments;
            InvoiceQueModel.IsGeneratedToPayables = ContractModel.IsGeneratedToPayables;
            InvoiceQueModel.InvoicePdfUrl = ContractModel.InvoicePdfUrl;
            InvoiceQueModel.InvoiceType = invoiceType;
            InvoiceQueModel.BrokerId = ContractModel.BrokerId;
            InvoiceQueModel.StatusId = (from s in invoiceStatus where s.InvoiceStatusName == "Created" select s.InvoiceStatusId).FirstOrDefault();
            InvoiceQueModel.ClientId = ContractModel.ClientId;
            InvoiceQueModel.IsDebitNote = ContractModel.IsDebitNote;
            InvoiceQueModel.IsCreditNote = ContractModel.IsCreditNote;

            DataSetUpsertInputModel dataSetInvoiceUpsertInputModel = new DataSetUpsertInputModel();
            InvoiceQueModel.ParamsJson = null;
            dataSetInvoiceUpsertInputModel.DataJson = JsonConvert.SerializeObject(InvoiceQueModel);
            dataSetInvoiceUpsertInputModel.DataSourceId = ContractModel.ContractTemplateId;
            dataSetInvoiceUpsertInputModel.CompanyId = loggedInContext.CompanyGuid;
            dataSetInvoiceUpsertInputModel.Id = null;

            List<ProductListOutPutModel> commoadityList = _clientService.GetProductsList(new MasterProduct(), loggedInContext, validationMessages);

            var searchContract = new ContractModel();
            searchContract.DataSetId = ContractModel.DataSetId;
            var oldData = GetContracts(searchContract, loggedInContext, validationMessages).FirstOrDefault();
            var commodity = string.Empty;
            if (oldData != null)
            {
                var FormData = JsonConvert.SerializeObject(oldData.FormData);
                JObject formField = (JObject)JsonConvert.DeserializeObject(FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formField)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            var commodityType = commoadityList.Find(x => x.ProductId.ToString() == keyValue.Value.ToString().ToLower());
                            commodity = commodityType.ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "commodity")
                    {
                        commodity = keyValue.Value;
                    }
                }
            }
            dataSetInvoiceUpsertInputModel.CommodityName = commodity;
            var invoiceId = _dataSetService.CreateDataSet(dataSetInvoiceUpsertInputModel, loggedInContext, validationMessages).GetAwaiter().GetResult();


            ContractModel.DataSetId = invoiceId;
            var dataSetHistoryModel = new DataSetHistoryInputModel
            {
                DataSetId = invoiceId,
                Field = "InvoiceQueueCreated",
                OldValue = string.Empty,
                NewValue = ""
            };
            TaskWrapper.ExecuteFunctionInNewThread(() => _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages));

            return invoiceId;

        }
        public virtual void SaveHistory(ContractModel newData, ContractModel oldData, List<ValidationMessage> validationMessages, LoggedInContext loggedInContext, string type = "")
        {
            var originalJson = string.Empty;
            if (oldData != null)
            {
                originalJson = oldData.FormData == null ? "" : oldData.FormData.ToString();
            }
            UserDbEntity loggedInUserDetails = new UserDbEntity();
            if (loggedInContext.LoggedInUserId != Guid.Empty)
            {
                loggedInUserDetails = _userRepository.GetSingleUserDetails(loggedInContext.LoggedInUserId);
            }
            if (originalJson != null && !string.IsNullOrEmpty(originalJson) && oldData != null)
            {
                var jdp = new JsonDiffPatch();
                JToken diffJsonResult = jdp.Diff(JObject.Parse(originalJson), JObject.Parse(newData.FormData.ToString()));

                var dataSetHistoryModel = new DataSetHistoryInputModel();
                dataSetHistoryModel.CreatedByUserName = loggedInUserDetails != null ? loggedInUserDetails.FullName : null;
                if (diffJsonResult != null)
                {
                    List<PaymentTermOutputModel> portsList = _leadService.GetPortDetails(new PaymentTermSearchInputModel(), loggedInContext, validationMessages);
                    var oldObj = JObject.Parse(oldData.FormData.ToString());
                    var newObj = JObject.Parse(newData.FormData.ToString());
                    foreach (var record in diffJsonResult.Children())
                    {
                        if (record.Path != "vesselOwnerSignature" && record.Path != "chartererSignature" && record.Path != "sellerSignature" && record.Path != "buyerSignature" && record.Path != "contractNumber" &&
                            record.Path != "portCategoryDischarge" && record.Path != "portCategoryLoading" &&
                            (type == "" || (type == "vessel" && record.Path != "destinationDischargePort" && record.Path != "portOfLoad" && record.Path != "destinationDischargePort-multiple" && record.Path != "portOfLoad-multiple")))
                        {
                            dataSetHistoryModel = new DataSetHistoryInputModel();
                            dataSetHistoryModel.DataSetId = newData.DataSetId;
                            dataSetHistoryModel.Field = record.Path;
                            dataSetHistoryModel.OldValue = record.First.First.ToString();
                            dataSetHistoryModel.NewValue = record.First.Last.ToString();

                            _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                        }
                        if (record.Path == "portCategoryDischarge" && record.Path == "portCategoryLoading")
                        {
                            var first = record.First.First.ToString();
                            var last = record.First.Last.ToString();
                            if (first != last)
                            {
                                dataSetHistoryModel.DataSetId = newData.DataSetId;
                                dataSetHistoryModel.Field = record.Path;
                                dataSetHistoryModel.OldValue = record.First.First != null && record.First.First.ToString() != "" ?
                                    _tradingRepository.GetAllPortCategory(new PortCategorySearchInputModel() { Id = new Guid(record.First.First.ToString()) }, loggedInContext, validationMessages).FirstOrDefault()?.Name : "";
                                dataSetHistoryModel.NewValue = record.First.Last != null && record.First.Last.ToString() != "" ?
                                    _tradingRepository.GetAllPortCategory(new PortCategorySearchInputModel() { Id = new Guid(record.First.Last.ToString()) }, loggedInContext, validationMessages).FirstOrDefault()?.Name : "";
                                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                            }
                        }
                        if (type == "vessel" && record.Path.Contains("-multiple") && (record.Path == "destinationDischargePort-multiple" || record.Path == "portOfLoad-multiple"))
                        {
                            var first = oldObj.ContainsKey(record.Path.ToString()) ? oldObj[record.Path.ToString()].ToString() : "";
                            var last = newObj.ContainsKey(record.Path.ToString()) ? newObj[record.Path.ToString()].ToString() : "";
                            var oldValue = string.Empty;
                            var newValue = string.Empty;
                            if (record.Path == "destinationDischargePort-multiple" || record.Path == "portOfLoad-multiple")
                            {
                                var oldList = first.Split(',');
                                var newList = last.Split(',');
                                if (oldList.Count() > 0)
                                {
                                    foreach (var old in oldList)
                                    {
                                        if (oldValue == string.Empty)
                                        {
                                            oldValue = portsList.Find(x => x.Id.ToString() == old).Name;
                                        }
                                        else
                                        {
                                            oldValue = oldValue + ", " + portsList.Find(x => x.Id.ToString() == old).Name;
                                        }
                                    }
                                }
                                if (newList.Count() > 0)
                                {
                                    foreach (var newval in newList)
                                    {
                                        if (newValue == string.Empty)
                                        {
                                            newValue = portsList.Find(x => x.Id.ToString() == newval).Name;
                                        }
                                        else
                                        {
                                            newValue = newValue + ", " + portsList.Find(x => x.Id.ToString() == newval).Name;
                                        }
                                    }
                                }
                            }

                            if (first != last)
                            {
                                dataSetHistoryModel.DataSetId = newData.DataSetId;
                                dataSetHistoryModel.Field = record.Path;
                                dataSetHistoryModel.OldValue = oldValue;
                                dataSetHistoryModel.NewValue = newValue;
                                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                            }
                        }
                        if (record.Path == "contractNumber")
                        {
                            var old = JObject.Parse(originalJson);
                            var new1 = JObject.Parse(newData.FormData.ToString());
                            dataSetHistoryModel = new DataSetHistoryInputModel();
                            dataSetHistoryModel.DataSetId = newData.DataSetId;
                            dataSetHistoryModel.Field = record.Path;
                            dataSetHistoryModel.OldValue = old.ContainsKey("contractNumber") ? old["contractNumber"].ToString() : null;
                            dataSetHistoryModel.NewValue = new1.ContainsKey("contractNumber") ? new1["contractNumber"].ToString() : null;

                            _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                        }
                    }

                }
                if (newData.IsSelectCommodityBroker != oldData.IsSelectCommodityBroker)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "IsSelectCommodityBroker";
                    dataSetHistoryModel.OldValue = oldData.IsSelectCommodityBroker.ToString();
                    dataSetHistoryModel.NewValue = newData.IsSelectCommodityBroker.ToString();
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.DraftAcceptComments != oldData.DraftAcceptComments)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "DraftAcceptComments";
                    dataSetHistoryModel.OldValue = oldData.DraftAcceptComments != null ? oldData.DraftAcceptComments.ToString() : null;
                    dataSetHistoryModel.NewValue = newData.DraftAcceptComments != null ? newData.DraftAcceptComments.ToString() : null;
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.DraftRejectComments != oldData.DraftRejectComments)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "DraftRejectComments";
                    dataSetHistoryModel.OldValue = oldData.DraftRejectComments != null ? oldData.DraftRejectComments.ToString() : null;
                    dataSetHistoryModel.NewValue = newData.DraftRejectComments != null ? newData.DraftRejectComments.ToString() : null;
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.SgtraderSignatureAcceptedComments != oldData.SgtraderSignatureAcceptedComments)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "SgtraderSignatureAcceptedComments";
                    dataSetHistoryModel.OldValue = oldData.SgtraderSignatureAcceptedComments != null ? oldData.SgtraderSignatureAcceptedComments.ToString() : null;
                    dataSetHistoryModel.NewValue = newData.SgtraderSignatureAcceptedComments != null ? newData.SgtraderSignatureAcceptedComments.ToString() : null;
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.SellerSignatureAcceptedComments != oldData.SellerSignatureAcceptedComments)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "SellerSignatureAcceptedComments";
                    dataSetHistoryModel.OldValue = oldData.SellerSignatureAcceptedComments != null ? oldData.SellerSignatureAcceptedComments.ToString() : null;
                    dataSetHistoryModel.NewValue = newData.SellerSignatureAcceptedComments != null ? newData.SellerSignatureAcceptedComments.ToString() : null;
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.BrokerId != oldData.BrokerId)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "BrokerId";
                    dataSetHistoryModel.OldValue = oldData.BrokerId.ToString();
                    dataSetHistoryModel.NewValue = newData.BrokerId.ToString();
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.SgtraderSignatureRejectedComments != oldData.SgtraderSignatureRejectedComments)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "SgtraderSignatureRejectedComments";
                    dataSetHistoryModel.OldValue = oldData.SgtraderSignatureRejectedComments != null ? oldData.SgtraderSignatureRejectedComments.ToString() : null;
                    dataSetHistoryModel.NewValue = newData.SgtraderSignatureRejectedComments != null ? newData.SgtraderSignatureRejectedComments.ToString() : null;
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.SgtraderInvoiceAcceptedComments != oldData.SgtraderInvoiceAcceptedComments)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "SgtraderInvoiceAcceptedComments";
                    dataSetHistoryModel.OldValue = oldData.SgtraderInvoiceAcceptedComments != null ? oldData.SgtraderInvoiceAcceptedComments.ToString() : null;
                    dataSetHistoryModel.NewValue = newData.SgtraderInvoiceAcceptedComments != null ? newData.SgtraderInvoiceAcceptedComments.ToString() : null;
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.IsSelectPercentage != oldData.IsSelectPercentage)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "IsSelectPercentage";
                    dataSetHistoryModel.OldValue = oldData.IsSelectPercentage.ToString();
                    dataSetHistoryModel.NewValue = newData.IsSelectPercentage.ToString();
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.IsSelectValue != oldData.IsSelectValue)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "IsSelectValue";
                    dataSetHistoryModel.OldValue = oldData.IsSelectValue.ToString();
                    dataSetHistoryModel.NewValue = newData.IsSelectValue.ToString();
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.SgtraderInvoiceRejectedComments != oldData.SgtraderInvoiceRejectedComments)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "SgtraderInvoiceRejectedComments";
                    dataSetHistoryModel.OldValue = oldData.SgtraderInvoiceRejectedComments != null ? oldData.SgtraderInvoiceRejectedComments.ToString() : null;
                    dataSetHistoryModel.NewValue = newData.SgtraderInvoiceRejectedComments != null ? newData.SgtraderInvoiceRejectedComments.ToString() : null;
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.VesselOwnerorBrokerSignatureAcceptedComments != oldData.VesselOwnerorBrokerSignatureAcceptedComments)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "VesselOwnerorBrokerSignatureAcceptedComments";
                    dataSetHistoryModel.OldValue = oldData.VesselOwnerorBrokerSignatureAcceptedComments != null ? oldData.VesselOwnerorBrokerSignatureAcceptedComments.ToString() : null;
                    dataSetHistoryModel.NewValue = newData.VesselOwnerorBrokerSignatureAcceptedComments != null ? newData.VesselOwnerorBrokerSignatureAcceptedComments.ToString() : null;
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.ContracterInvoiceAcceptedComments != oldData.ContracterInvoiceAcceptedComments)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "ContracterInvoiceAcceptedComments";
                    dataSetHistoryModel.OldValue = oldData.ContracterInvoiceAcceptedComments != null ? oldData.ContracterInvoiceAcceptedComments.ToString() : null;
                    dataSetHistoryModel.NewValue = newData.ContracterInvoiceAcceptedComments != null ? newData.ContracterInvoiceAcceptedComments.ToString() : null;
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.BrokeragePercentage != oldData.BrokeragePercentage || (newData.BrokeragePercentage == 0 && oldData.BrokeragePercentage != 0))
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "BrokeragePercentage";
                    dataSetHistoryModel.OldValue = oldData.BrokeragePercentage.ToString();
                    dataSetHistoryModel.NewValue = newData.BrokeragePercentage.ToString();
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.BrokerageValue != oldData.BrokerageValue)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "BrokerageValue";
                    dataSetHistoryModel.OldValue = oldData.BrokerageValue.ToString();
                    dataSetHistoryModel.NewValue = newData.BrokerageValue.ToString();
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.ContracterInvoiceRejectedComments != oldData.ContracterInvoiceRejectedComments)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "ContracterInvoiceRejectedComments";
                    dataSetHistoryModel.OldValue = oldData.ContracterInvoiceRejectedComments != null ? oldData.ContracterInvoiceRejectedComments.ToString() : null;
                    dataSetHistoryModel.NewValue = newData.ContracterInvoiceRejectedComments != null ? newData.ContracterInvoiceRejectedComments.ToString() : null;
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.SellerSignatureRejectedComments != oldData.SellerSignatureRejectedComments)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "SellerSignatureRejectedComments";
                    dataSetHistoryModel.OldValue = oldData.SellerSignatureRejectedComments != null ? oldData.SellerSignatureRejectedComments.ToString() : null;
                    dataSetHistoryModel.NewValue = newData.SellerSignatureRejectedComments != null ? newData.SellerSignatureRejectedComments.ToString() : null;
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.VesselOwnerorBrokerSignatureRejectedComments != oldData.VesselOwnerorBrokerSignatureRejectedComments)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "VesselOwnerorBrokerSignatureRejectedComments";
                    dataSetHistoryModel.OldValue = oldData.VesselOwnerorBrokerSignatureRejectedComments != null ? oldData.VesselOwnerorBrokerSignatureRejectedComments.ToString() : null;
                    dataSetHistoryModel.NewValue = newData.VesselOwnerorBrokerSignatureRejectedComments != null ? newData.VesselOwnerorBrokerSignatureRejectedComments.ToString() : null;
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.StatusId != oldData.StatusId)
                {
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "StatusId";
                    dataSetHistoryModel.OldValue = oldData.StatusId.ToString();
                    dataSetHistoryModel.NewValue = newData.StatusId.ToString();
                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
            }
            else
            {
                var jdp = new JsonDiffPatch();
                JToken diffJsonResult = jdp.Diff(JObject.Parse("{}"), JObject.Parse(newData.FormData != null ? newData.FormData.ToString() : ""));

                if (diffJsonResult != null)
                {
                    var dataSetHistoryModel = new DataSetHistoryInputModel();
                    dataSetHistoryModel.CreatedByUserName = loggedInUserDetails != null ? loggedInUserDetails.FullName : null;
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "ContractCreated";
                    dataSetHistoryModel.OldValue = string.Empty;
                    dataSetHistoryModel.NewValue = newData.ToString();
                    TaskWrapper.ExecuteFunctionInNewThread(() => _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages));
                }
            }
        }
        public void SaveSaleContractHistory(ContractModel newContractData, ContractModel oldContractData, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            var originalJson = string.Empty;
            if (oldContractData != null)
            {
                originalJson = JsonConvert.SerializeObject(oldContractData.SaleContractFormModel);
            }
            if (originalJson != null && !string.IsNullOrEmpty(originalJson) && oldContractData != null)
            {
                var newJson = JsonConvert.SerializeObject(newContractData.SaleContractFormModel);
                var jdp = new JsonDiffPatch();
                JToken diffJsonResult = jdp.Diff(originalJson, newJson);

                DataSetHistoryInputModel dataSetHistoryModel = new DataSetHistoryInputModel();
                if (diffJsonResult != null && !newContractData.Equals(oldContractData))
                {
                    foreach (var record in diffJsonResult.Children())
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = record.Path;
                        dataSetHistoryModel.OldValue = record.First.First.ToString();
                        dataSetHistoryModel.NewValue = record.First.Last.ToString();

                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.ContractNumber != oldContractData.SaleContractFormModel.ContractNumber)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "ContractNumber";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.ContractNumber;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.ContractNumber;

                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.CommodityDescriptionIfAny != oldContractData.SaleContractFormModel.CommodityDescriptionIfAny)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "CommodityDescriptionIfAny";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.CommodityDescriptionIfAny;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.CommodityDescriptionIfAny;

                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.ContractType != oldContractData.SaleContractFormModel.ContractType)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "ContractType";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.ContractType;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.ContractType;

                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.QuanityNumber != oldContractData.SaleContractFormModel.QuanityNumber)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "QuanityNumber";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.QuanityNumber.ToString();
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.QuanityNumber.ToString();

                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.QuantityMeasurementUnit != oldContractData.SaleContractFormModel.QuantityMeasurementUnit)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "QuantityMeasurementUnit";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.QuantityMeasurementUnit;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.QuantityMeasurementUnit;

                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.Tolerance != oldContractData.SaleContractFormModel.Tolerance)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "Tolerance";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.Tolerance;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.Tolerance;

                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.LeadPort != oldContractData.SaleContractFormModel.LeadPort)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "LeadPort";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.LeadPort;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.LeadPort;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.OriginCountry != oldContractData.SaleContractFormModel.OriginCountry)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "OriginCountry";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.OriginCountry;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.OriginCountry;

                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.SellerName != oldContractData.SaleContractFormModel.SellerName)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "SellerName";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.SellerName;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.SellerName;

                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.SellerAddressLine1 != oldContractData.SaleContractFormModel.SellerAddressLine1)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "SellerAddressLine1";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.SellerAddressLine1;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.SellerAddressLine1;

                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.SellerAddressLine2 != oldContractData.SaleContractFormModel.SellerAddressLine2)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "SellerAddressLine2";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.SellerAddressLine2;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.SellerAddressLine2;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.SellerCountryCode != oldContractData.SaleContractFormModel.SellerCountryCode)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "SellerCountryCode";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.SellerCountryCode;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.SellerCountryCode;

                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.SellerContact != oldContractData.SaleContractFormModel.SellerContact)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "SellerContact";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.SellerContact;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.SellerContact;

                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.SellerSignature != oldContractData.SaleContractFormModel.SellerSignature)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "SellerSignature";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.SellerSignature;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.SellerSignature;

                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.SellerSignaturePlace != oldContractData.SaleContractFormModel.SellerSignaturePlace)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "SellerSignaturePlace";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.SellerSignaturePlace;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.SellerSignaturePlace;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.SellerSignatureDate != oldContractData.SaleContractFormModel.SellerSignatureDate)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "SellerSignatureDate";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.SellerSignatureDate.ToString();
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.SellerSignatureDate.ToString();
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BuyerName != oldContractData.SaleContractFormModel.BuyerName)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BuyerName";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BuyerName;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BuyerName;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BuyerAddressLine1 != oldContractData.SaleContractFormModel.BuyerAddressLine1)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BuyerAddressLine1";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BuyerAddressLine1;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BuyerAddressLine1;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BuyerAddressLine2 != oldContractData.SaleContractFormModel.BuyerAddressLine2)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BuyerAddressLine2";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BuyerAddressLine2;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BuyerAddressLine2;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BuyerCountryCode != oldContractData.SaleContractFormModel.BuyerCountryCode)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BuyerCountryCode";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BuyerCountryCode;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BuyerCountryCode;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BuyerContact != oldContractData.SaleContractFormModel.BuyerContact)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BuyerContact";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BuyerContact;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BuyerContact;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BuyerSignature != oldContractData.SaleContractFormModel.BuyerSignature)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BuyerSignature";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BuyerSignature;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BuyerSignature;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BuyerSignaturePlace != oldContractData.SaleContractFormModel.BuyerSignaturePlace)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BuyerSignaturePlace";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BuyerSignaturePlace;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BuyerSignaturePlace;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BuyerSignatureDate != oldContractData.SaleContractFormModel.BuyerSignatureDate)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BuyerSignatureDate";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BuyerSignatureDate.ToString();
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BuyerSignatureDate.ToString();
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.IncludeBroker != oldContractData.SaleContractFormModel.IncludeBroker)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "IncludeBroker";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.IncludeBroker.ToString();
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.IncludeBroker.ToString();
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.Commission != oldContractData.SaleContractFormModel.Commission)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "Commission";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.Commission;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.Commission;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BrokerName != oldContractData.SaleContractFormModel.BrokerName)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BrokerName";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BrokerName;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BrokerName;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BrokerCompany != oldContractData.SaleContractFormModel.BrokerCompany)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BrokerCompany";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BrokerCompany;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BrokerCompany;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BrokerAddressLine1 != oldContractData.SaleContractFormModel.BrokerAddressLine1)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BrokerAddressLine1";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BrokerAddressLine1;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BrokerAddressLine1;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BrokerAddressLine2 != oldContractData.SaleContractFormModel.BrokerAddressLine2)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BrokerAddressLine2";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BrokerAddressLine2;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BrokerAddressLine2;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BrokerCountryCode != oldContractData.SaleContractFormModel.BrokerCountryCode)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BrokerCountryCode";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BrokerCountryCode;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BrokerCountryCode;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BrokerContact != oldContractData.SaleContractFormModel.BrokerContact)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BrokerContact";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BrokerContact;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BrokerContact;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.FromDate != oldContractData.SaleContractFormModel.FromDate)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "FromDate";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.FromDate.ToString();
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.FromDate.ToString();
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.ToDate != oldContractData.SaleContractFormModel.ToDate)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "ToDate";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.ToDate.ToString();
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.ToDate.ToString();
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.PriceCurrency != oldContractData.SaleContractFormModel.PriceCurrency)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "PriceCurrency";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.PriceCurrency;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.PriceCurrency;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.PriceAmount != oldContractData.SaleContractFormModel.PriceAmount)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "PriceAmount";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.PriceAmount;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.PriceAmount;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.PricePerUnit != oldContractData.SaleContractFormModel.PricePerUnit)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "PricePerUnit";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.PricePerUnit;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.PricePerUnit;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.Incoterms != oldContractData.SaleContractFormModel.Incoterms)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "Incoterms";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.Incoterms;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.Incoterms;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.AdditionalCommentsIfAny != oldContractData.SaleContractFormModel.AdditionalCommentsIfAny)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "AdditionalCommentsIfAny";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.AdditionalCommentsIfAny;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.AdditionalCommentsIfAny;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.IrrevocableDocumentCredit != oldContractData.SaleContractFormModel.IrrevocableDocumentCredit)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "IrrevocableDocumentCredit";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.IrrevocableDocumentCredit.ToString();
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.IrrevocableDocumentCredit.ToString();
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.ElectronicFundsTransfer != oldContractData.SaleContractFormModel.ElectronicFundsTransfer)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "ElectronicFundsTransfer";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.ElectronicFundsTransfer.ToString();
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.ElectronicFundsTransfer.ToString();
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BeneficiaryName != oldContractData.SaleContractFormModel.BeneficiaryName)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BeneficiaryName";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BeneficiaryName;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BeneficiaryName;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.AccountNumber != oldContractData.SaleContractFormModel.AccountNumber)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "AccountNumber";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.AccountNumber;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.AccountNumber;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BankName != oldContractData.SaleContractFormModel.BankName)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BankName";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BankName;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BankName;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.BankAddress != oldContractData.SaleContractFormModel.BankAddress)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "BankAddress";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.BankAddress;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.BankAddress;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.SWIFT != oldContractData.SaleContractFormModel.SWIFT)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "SWIFT";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.SWIFT;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.SWIFT;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.CorrespondentAddress != oldContractData.SaleContractFormModel.CorrespondentAddress)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "CorrespondentAddress";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.CorrespondentAddress;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.CorrespondentAddress;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.ABAOrSWIFT != oldContractData.SaleContractFormModel.ABAOrSWIFT)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "ABAOrSWIFT";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.ABAOrSWIFT;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.ABAOrSWIFT;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.PlaceOfIssue != oldContractData.SaleContractFormModel.PlaceOfIssue)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "PlaceOfIssue";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.PlaceOfIssue;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.PlaceOfIssue;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.PlaceOfConformation != oldContractData.SaleContractFormModel.PlaceOfConformation)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "PlaceOfConformation";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.PlaceOfConformation;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.PlaceOfConformation;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.ByPaymentAtSight != oldContractData.SaleContractFormModel.ByPaymentAtSight)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "ByPaymentAtSight";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.ByPaymentAtSight;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.ByPaymentAtSight;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.ByDeferredPaymentAt != oldContractData.SaleContractFormModel.ByDeferredPaymentAt)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "ByDeferredPaymentAt";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.ByDeferredPaymentAt;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.ByDeferredPaymentAt;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.ByAcceptanceOfDraftAt != oldContractData.SaleContractFormModel.ByAcceptanceOfDraftAt)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "ByAcceptanceOfDraftAt";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.ByAcceptanceOfDraftAt;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.ByAcceptanceOfDraftAt;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.ByNegotiation != oldContractData.SaleContractFormModel.ByNegotiation)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "ByNegotiation";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.ByNegotiation;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.ByNegotiation;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.Days != oldContractData.SaleContractFormModel.Days)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "Days";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.Days.ToString();
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.Days.ToString();
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.Allowed != oldContractData.SaleContractFormModel.Allowed)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "Allowed";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.Allowed.ToString();
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.Allowed.ToString();
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.NotAllowed != oldContractData.SaleContractFormModel.NotAllowed)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "NotAllowed";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.NotAllowed.ToString();
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.NotAllowed.ToString();
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.DaysBeforeDayOfDelivery != oldContractData.SaleContractFormModel.DaysBeforeDayOfDelivery)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "NotAllowed";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.DaysBeforeDayOfDelivery;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.DaysBeforeDayOfDelivery;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.OtherText != oldContractData.SaleContractFormModel.OtherText)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "OtherText";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.OtherText;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.OtherText;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.DocumentsRequired != oldContractData.SaleContractFormModel.DocumentsRequired)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "DocumentsRequired";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.DocumentsRequired;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.DocumentsRequired;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.PlaceOfArbitration != oldContractData.SaleContractFormModel.PlaceOfArbitration)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "PlaceOfArbitration";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.PlaceOfArbitration;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.PlaceOfArbitration;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (newContractData.SaleContractFormModel.PlaceOfLitigation != oldContractData.SaleContractFormModel.PlaceOfLitigation)
                    {
                        dataSetHistoryModel.DataSetId = newContractData.DataSetId;
                        dataSetHistoryModel.Field = "PlaceOfLitigation";
                        dataSetHistoryModel.OldValue = oldContractData.SaleContractFormModel.PlaceOfLitigation;
                        dataSetHistoryModel.NewValue = newContractData.SaleContractFormModel.PlaceOfLitigation;
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                }
            }
            else
            {
                if (newContractData != null)
                {
                    var dataSetHistoryModel = new DataSetHistoryInputModel
                    {
                        DataSetId = newContractData.DataSetId,
                        Field = "ContractCreated",
                        OldValue = string.Empty,
                        NewValue = newContractData.ToString()
                    };
                    TaskWrapper.ExecuteFunctionInNewThread(() => _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages));
                }
            }
        }
        public virtual List<ContractModel> GetContracts(ContractModel contractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetGenericFormKey", "GenericForm Api"));
            List<ContractModel> contractReturnModel = new List<ContractModel>();
            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }

            //UnsoldQTYEmailAlert();

            Boolean IsLinking = contractModel.ParamsJson == null ? false : (contractModel.ParamsJson.Count > 1 ? contractModel.ParamsJson[1].KeyName == "IsContractLink" && contractModel.ParamsJson[1].KeyValue == "true" ? true : false : false);

            Guid featureId = Guid.Empty;

            if (contractModel.ParamsJson != null && contractModel.ParamsJson.Count >= 1)
            {
                featureId = contractModel.ParamsJson[0].KeyValue.ToLower() == "purchase" ? Guid.Parse("AEC24CC9-B83F-4A1C-8692-814D43093606") :
                                 contractModel.ParamsJson[0].KeyValue.ToLower() == "sale" ? Guid.Parse("DE1BD201-CE21-48EC-B2BC-43EC7C5CFB32") :
                                 contractModel.ParamsJson[0].KeyValue.ToLower() == "vessel" && IsLinking == false ? Guid.Parse("40299F24-F6BF-488B-B86C-F4F651AC0910") :
                                 contractModel.ParamsJson[0].KeyValue.ToLower() == "vesselforlinking" ? Guid.Parse("40299F24-F6BF-488B-B86C-F4F651AC0910") :
                                 contractModel.ParamsJson[0].KeyValue.ToLower() == "vessel" && IsLinking == true ? Guid.Parse("6BA90895-FC5A-440F-A7BB-1144212D066C") :
                                 contractModel.ParamsJson[0].KeyValue.ToLower() == "invoice queue" ? Guid.Parse("6A7B22DF-D2D4-4893-AC3C-7CC8E901B0A1") :
                                   Guid.Empty;
            }

            if(contractModel.IsAtLinkedContractEdit == true)
            {
                ContractStatusModel contractStatusModel = new ContractStatusModel();

                var statusesList = _clientService.GetAllContractStatus(contractStatusModel, loggedInContext, validationMessages);

                string statusIds = string.Join(",", statusesList?.Where(t => (t.StatusName == "In Execution" || t.StatusName == "Sealed/Open" || t.StatusName == "Linked"))?.Select(t => t.ContractStatusId.ToString()));

                if(statusIds != null)
                {
                    contractModel.ParamsJson.Add(new ParamsJsonModel()
                    {
                        KeyName = "StatusId",
                        KeyValue = statusIds,
                        Type = "ListFilter"
                    });
                }

            }

            ClientAccessModel clientAccess = _tradingRepository.GetClientAccss(featureId, null, loggedInContext, validationMessages);
                
            if (contractModel.ListType == "rfqList" || contractModel.ListType == "rfqListForVessel" || contractModel.ListType == "q88ForRfq")
            {
                if (contractModel.ListType != "q88ForRfq")
                {
                    var clientData = _clientRepository.GetClientByUserId(null, loggedInContext.LoggedInUserId, loggedInContext, validationMessages, null);
                    //_clientRepository.GetClientByUserId("Vessel Owner,Ship Broker", loggedInContext.LoggedInUserId, loggedInContext, validationMessages, null);
                    validationMessages = new List<ValidationMessage>();
                    if (clientData != null && clientData.UserId != null && clientData.ClientId != null)
                    {
                        var paramsJson = new ParamsJsonModel()
                        {
                            KeyName = "ReferenceId",
                            KeyValue = clientData.UserId.ToString(),
                            Type = "Guid"
                        };
                        if (contractModel.ParamsJson == null)
                        {
                            contractModel.ParamsJson = new List<ParamsJsonModel>();
                        }
                        contractModel.ParamsJson.Add(paramsJson);
                    }
                }
                else if (contractModel.ListType == "q88ForRfq" || contractModel.ListType == "rfqListForVessel")
                {
                    contractModel.ListType = "rfqList";
                }
            }
            if (contractModel.ParamsJson != null && contractModel.ParamsJson.Count > 0)
            {
                if ((contractModel.IsLinking == false || contractModel.IsLinking == null) && clientAccess.CanHaveAcess == false)
                {
                    var clientData = _clientRepository.GetClientByUserId(null, loggedInContext.LoggedInUserId, loggedInContext, validationMessages, null);
                    bool isListFilterNeed = false;

                    if(clientData != null && clientData?.ClientTypeName != null && clientData?.ClientId != null)
                    {
                        if (clientData.ClientTypeName.ToLower() != "ship broker"  && clientData.ClientTypeName.ToLower() != "vessel owner" 
                        && IsLinking == true)
                        {
                            isListFilterNeed = true;
                            contractModel.ParamsJson.Add(new ParamsJsonModel
                            {
                                KeyName = "isFilterLinkContracts"
                            });
                        }
                    }

                    if ((contractModel.ParamsJson[0].KeyValue.ToLower() == "purchase" || contractModel.ParamsJson[0].KeyValue.ToLower() == "buyer" || contractModel.ParamsJson[0].KeyValue.ToLower() == "invoice queue" || contractModel.ParamsJson[0].KeyValue.ToLower() == "sale"
                    || contractModel.ParamsJson[0].KeyValue.ToLower() == "vessel" || contractModel.ParamsJson[0].KeyValue.ToLower() == "vesselforlinking")&& isListFilterNeed == false)
                    {
                        
                        validationMessages = new List<ValidationMessage>();
                        if (clientData != null && clientData.ClientTypeName != null && clientData.ClientId != null)
                        {
                            if (clientData.ClientTypeName.ToLower() == "commodity broker" || clientData.ClientTypeName.ToLower() == "ship broker")
                            {
                                var paramsJson = new ParamsJsonModel()
                                {
                                    KeyName = "BrokerId",
                                    KeyValue = clientData.ClientId.ToString(),
                                    Type = "Guid"
                                };
                                contractModel.ParamsJson.Add(paramsJson);
                            }
                            else if (clientData.ClientTypeName.ToLower() == "purchase" || clientData.ClientTypeName.ToLower() == "buyer")
                            {
                                if (contractModel.ParamsJson[0].KeyValue.ToLower() != "vessel")
                                {
                                    var paramsJson1 = new ParamsJsonModel()
                                    {
                                        KeyName = "ClientId",
                                        KeyValue = clientData.ClientId.ToString(),
                                        Type = "Guid"
                                    };
                                    contractModel.ParamsJson.Add(paramsJson1);
                                }
                            }
                            else
                            {
                                var paramsJson2 = new ParamsJsonModel()
                                {
                                    KeyName = "ClientId",
                                    KeyValue = clientData.ClientId.ToString(),
                                    Type = "Guid"
                                };
                                contractModel.ParamsJson.Add(paramsJson2);
                            }
                        }
                        //else
                        //{
                        //    var paramsJson = new ParamsJsonModel()
                        //    {
                        //        KeyName = "CreatedByUserId",
                        //        KeyValue = loggedInContext.UserAuthenticationId.ToString(), //loggedInContext.LoggedInUserId.ToString(),
                        //        Type = "Guid"
                        //    };
                        //    contractModel.ParamsJson.Add(paramsJson);
                        //}
                    }
                }

            }

            string paramsJsonModel = contractModel.ParamsJson != null ? contractModel.ParamsJson.Count > 0 ? JsonConvert.SerializeObject(contractModel.ParamsJson) : null : null;
            var dataSets = _dataSetService.SearchDataSets(contractModel.DataSetId, contractModel.DataSourceId, contractModel.SearchText, paramsJsonModel, contractModel.IsArchived,
                contractModel.IsPagingRequired, contractModel.PageNumber, contractModel.PageSize, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult();

            if (dataSets != null && dataSets.Count > 0 && contractModel.ListType == "rfqListForVessel")
            {
                var users = _tradingRepository.GetUsersForBinding(loggedInContext, validationMessages);
                contractReturnModel = dataSets.Select(e => new ContractModel
                {
                    DataSetId = e.Id,
                    ContractTemplateId = e.DataSourceId,
                    FormData = e.DataJson.FormData,
                    ClientId = e.DataJson.ClientId,
                    StatusId = e.DataJson.StatusId,
                    BrokerId = e.DataJson.BrokerId,
                    ContractType = e.DataJson.ContractType,
                    CreatedByUserId = e.CreatedByUserId,
                    ReferenceId = e.DataJson.ReferenceId,
                    ReferenceUserName = e.DataJson.ReferenceId != null ? (from u in users where u.Id == e.DataJson.ReferenceId select u.Name).FirstOrDefault() : null,
                    TemplateTypeId = e.DataJson.TemplateTypeId,
                    RFQId = e.DataJson.RFQId,
                    RFQUniqueId = e.DataJson.RFQUniqueId,
                    IsRfqConvertedToVessel = e.DataJson?.IsRfqConvertedToVessel,
                    VesselContractId = e.VesselContractId
                }).ToList();
            }
            else if (dataSets != null && dataSets.Count > 0 && contractModel.ParamsJson != null && contractModel.ParamsJson.Count > 0 &&  contractModel.ParamsJson[0].KeyValue.ToLower() == "vesselforlinking")
            {
                ContractStatusModel contractStatusModel = new ContractStatusModel();
                var statuses = _clientService.GetAllContractStatus(contractStatusModel, loggedInContext, validationMessages);
                contractReturnModel = dataSets.Select(e => new ContractModel
                {
                    DataSetId = e.Id,
                    FormData = e.DataJson.FormData,
                    StatusName = e.DataJson.StatusId != null && statuses != null ? (from s in statuses where s.ContractStatusId == e.DataJson.StatusId select s.StatusName).FirstOrDefault() : null,
                    IsContractLink = e.DataJson.IsContractLink
                }).ToList();
            }
            else if (dataSets != null && dataSets.Count > 0 && contractModel.ListType == "rfqList")
            {
                var users = _tradingRepository.GetUsersForBinding(loggedInContext, validationMessages);
                ContractStatusModel contractStatusModel = new ContractStatusModel();
                var statuses = _clientService.GetAllContractStatus(contractStatusModel, loggedInContext, validationMessages);

                var documentSets = _documentStorageService.SearchFiles(null, null, "q88",null,null, loggedInContext, validationMessages).GetAwaiter().GetResult();
                List<FileApiServiceReturnModel> documentList = new List<FileApiServiceReturnModel>();
                if (documentSets != null)
                {
                    var document = JsonConvert.SerializeObject(documentSets);
                    documentList = JsonConvert.DeserializeObject<List<FileApiServiceReturnModel>>(document);
                }

                contractReturnModel = dataSets.Select(e => new ContractModel
                {
                    DataSetId = e.Id,
                    ContractTemplateId = e.DataSourceId,
                    FormData = e.DataJson.FormData,
                    ContractData = e.ContractData,
                    ClientId = e.DataJson.ClientId,
                    ContractPdf = e.DataJson.ContractPdf,
                    StatusId = e.DataJson.StatusId,
                    StatusName = e.DataJson.StatusId != null && statuses != null ? (from s in statuses where s.ContractStatusId == e.DataJson.StatusId select s.StatusName).FirstOrDefault() : null,
                    StatusColor = e.DataJson.StatusId != null && statuses != null ? (from s in statuses where s.ContractStatusId == e.DataJson.StatusId select s.ContractStatusColor).FirstOrDefault() : null,
                    BrokerId = e.DataJson.BrokerId,
                    IsSellerSignatureVerificationNeed = e.DataJson.IsSellerSignatureVerificationNeed,
                    IsSGTraderSignatureVerificationNeed = e.DataJson.IsSGTraderSignatureVerificationNeed,
                    DraftRejectComments = e.DataJson.DraftRejectComments,
                    DraftAcceptComments = e.DataJson.DraftAcceptComments,
                    SellerSignatureRejectedComments = e.DataJson.SellerSignatureRejectedComments,
                    SellerSignatureAcceptedComments = e.DataJson.SellerSignatureAcceptedComments,
                    SgtraderSignatureRejectedComments = e.DataJson.SgtraderSignatureRejectedComments,
                    SgtraderSignatureAcceptedComments = e.DataJson.SgtraderSignatureAcceptedComments,
                    IsSelectPercentage = e.DataJson.IsSelectPercentage,
                    IsSelectCommodityBroker = e.DataJson.IsSelectCommodityBroker,
                    IsSelectValue = e.DataJson.IsSelectValue,
                    DataSourceFormJson = e.DataSourceFormJson,
                    BrokeragePercentage = e.DataJson.BrokeragePercentage,
                    BrokerageValue = e.DataJson.BrokerageValue,
                    ContractType = e.DataJson.ContractType,
                    CreatedByUserId = e.CreatedByUserId,
                    CreatedByUserName = e.CreatedByUserId != null ? (from u in users where u.Id == e.CreatedByUserId select u.Name).FirstOrDefault() : null,
                    ReferenceId = e.DataJson.ReferenceId,
                    ReferenceUserName = e.DataJson.ReferenceId != null ? (from u in users where u.Id == e.DataJson.ReferenceId select u.Name).FirstOrDefault() : null,
                    TemplateTypeId = e.DataJson.TemplateTypeId,
                    Version = e.DataJson.Version,
                    TotalCount = (int)e.TotalCount,
                    CreatedDateTime = e.CreatedDateTime,
                    SaleContractFormModel = JsonConvert.DeserializeObject<SaleContractFormModel>(JsonConvert.SerializeObject(e.DataJson)),
                    RFQId = e.DataJson.RFQId,
                    RFQUniqueId = e.DataJson.RFQUniqueId,
                    IsAccepted = e.DataJson.IsAccepted,
                    IsRejected = e.DataJson.IsRejected,
                    AcceptedByClientUserId = e.DataJson.AcceptedByClientUserId,
                    AcceptedByTraderUserId = e.DataJson.AcceptedByTraderUserId,
                    Q88SharedClientIds = e.DataJson.Q88SharedClientIds,
                    Q88SharedUserIds = e.DataJson.Q88SharedUserIds,
                    Q88AcceptedIds = e.DataJson.Q88AcceptedIds,
                    Q88RejectedIds = e.DataJson.Q88RejectedIds,
                    Q88Reject = e.DataJson.Q88Reject,
                    IsQ88Uploaded = (documentSets != null && ((from d in documentList where d.ReferenceTypeId == e.Id select d.ReferenceTypeName).FirstOrDefault() == "q88")) ? true : false,
                    IsQ88Accepted = e.DataJson?.IsQ88Accepted,
                    RFQAcceptedDateTime = e.DataJson?.RFQAcceptedDateTime,
                    RFQRejectedDateTime = e.DataJson?.RFQRejectedDateTime,
                    IsRfqConvertedToVessel = e.DataJson?.IsRfqConvertedToVessel,
                    VesselContractId = e.VesselContractId,
                    VesselConfirmationStatusId = e.DataJson.VesselConfirmationStatusId,
                    IsVesselConfirmationAccepted = e.DataJson.IsVesselConfirmationAccepted,
                    IsVesselConfirmationRejected = e.DataJson.IsVesselConfirmationRejected,
                    VesselConfirmationTemplateId = e.DataJson.VesselConfirmationTemplateId,
                    VesselConfirmationFormData = e.DataJson.VesselConfirmationFormData,
                    VesselConfirmationAcceptedDateTime = e.DataJson.VesselConfirmationAcceptedDateTime,
                    VesselConfirmationRejectedDateTime = e.DataJson.VesselConfirmationRejectedDateTime,
                    VesselConfirmationAcceptedByClientUserId = e.DataJson.VesselConfirmationAcceptedByClientUserId,
                    VesselConfirmationAcceptedByTraderUserId = e.DataJson.VesselConfirmationAcceptedByTraderUserId,
                    VesselConfirmationRejectedByUserId = e.DataJson.VesselConfirmationRejectedByUserId,
                    IsQ88Rejected = e.DataJson.IsQ88Rejected,
                    VesselConfirmationId = e.DataJson.VesselConfirmationId,
                    IsQ88Reshared = e.DataJson.IsQ88Reshared
                }).ToList();

            }
            else if (dataSets != null && dataSets.Count > 0)
            {
                if (contractModel.ContractType == "Invoice Queue")
                {
                    var users = _tradingRepository.GetUsersForBinding(loggedInContext, validationMessages);
                    ClientInputModel clientInputModel = new ClientInputModel();
                    List<ClientOutputModel> clientList = _clientRepository.GetClients(clientInputModel, loggedInContext, validationMessages);
                    ClientInvoiceStatus clientInvoiceStatus = new ClientInvoiceStatus();
                    List<ClientInvoiceStatus> invoiceStatus = _clientService.GetAllInvoiceStatus(clientInvoiceStatus, loggedInContext, validationMessages);
                    List<ClientInvoiceStatus> invoicePaymentStatus = _clientService.GetAllInvoicePaymentStatus(clientInvoiceStatus, loggedInContext, validationMessages);
                    contractReturnModel = dataSets.Select(e => new ContractModel
                    {
                        DataSetId = e.Id,
                        ContractTemplateId = e.DataSourceId,
                        FormData = e.DataJson.FormData,
                        InvoicePaymentStatusId = e.DataJson.InvoicePaymentStatusId,
                        ContractData = e.ContractData,
                        ClientId = e.DataJson.ClientId,
                        ContractId = e.DataJson.ContractId,
                        ClientName = e.DataJson.ClientId != null && clientList != null ? (from s in clientList where s.ClientId == e.DataJson.ClientId select s.FullName).FirstOrDefault() : null,
                        ContractPdf = e.DataJson.ContractPdf,
                        StatusId = e.DataJson.StatusId,
                        StatusName = e.DataJson.StatusId != null && invoiceStatus != null ? (from s in invoiceStatus where s.InvoiceStatusId == e.DataJson.StatusId select s.InvoiceStatusName).FirstOrDefault() : null,
                        StatusColor = e.DataJson.StatusId != null && invoiceStatus != null ? (from s in invoiceStatus where s.InvoiceStatusId == e.DataJson.StatusId select s.InvoiceStatusColor).FirstOrDefault() : null,
                        InvoiceStatusName = e.DataJson.InvoicePaymentStatusId != null && invoicePaymentStatus != null ? (from s in invoicePaymentStatus where s.InvoiceStatusId == new Guid(e.DataJson.InvoicePaymentStatusId.ToString()) select s.StatusName).FirstOrDefault() : null,
                        InvoiceStatusColor = e.DataJson.InvoicePaymentStatusId != null && invoicePaymentStatus != null ? (from s in invoicePaymentStatus where s.InvoiceStatusId == new Guid(e.DataJson.InvoicePaymentStatusId.ToString()) select s.InvoiceStatusColor).FirstOrDefault() : null,
                        BrokerId = e.DataJson.BrokerId,
                        BrokerName = e.DataJson.BrokerId != null && clientList != null ? (from s in clientList where s.ClientId == e.DataJson.BrokerId select s.FullName).FirstOrDefault() : null,
                        DraftRejectComments = e.DataJson.DraftRejectComments,
                        DraftAcceptComments = e.DataJson.DraftAcceptComments,
                        IsSellerSignatureVerificationNeed = e.DataJson.IsSellerSignatureVerificationNeed,
                        IsSGTraderSignatureVerificationNeed = e.DataJson.IsSGTraderSignatureVerificationNeed,
                        SellerSignatureRejectedComments = e.DataJson.SellerSignatureRejectedComments,
                        SellerSignatureAcceptedComments = e.DataJson.SellerSignatureAcceptedComments,
                        SgtraderSignatureRejectedComments = e.DataJson.SgtraderSignatureRejectedComments,
                        SgtraderSignatureAcceptedComments = e.DataJson.SgtraderSignatureAcceptedComments,
                        SgtraderInvoiceAcceptedComments = e.DataJson.SgtraderInvoiceAcceptedComments,
                        SgtraderInvoiceRejectedComments = e.DataJson.SgtraderInvoiceRejectedComments,
                        ContracterInvoiceAcceptedComments = e.DataJson.ContracterInvoiceAcceptedComments,
                        InvoicePdfUrl = e.DataJson.InvoicePdfUrl,
                        ContracterInvoiceRejectedComments = e.DataJson.ContracterInvoiceRejectedComments,
                        IsSelectPercentage = e.DataJson.IsSelectPercentage,
                        IsSelectCommodityBroker = e.DataJson.IsSelectCommodityBroker,
                        IsGeneratedToPayables = e.DataJson.IsGeneratedToPayables,
                        IsSelectValue = e.DataJson.IsSelectValue,
                        DataSourceFormJson = e.DataSourceFormJson,
                        BrokeragePercentage = e.DataJson.BrokeragePercentage,
                        BrokerageValue = e.DataJson.BrokerageValue,
                        ContractType = e.DataJson.ContractType,
                        InvoiceType = e.DataJson.InvoiceType,
                        ApprovedDate = e.DataJson.ApprovedDate,
                        PaidDate = e.DataJson.PaidDate,
                        CreatedByUserId = e.CreatedByUserId,
                        CreatedByUserName = e.CreatedByUserId != null ? (from u in users where u.Id == e.CreatedByUserId select u.Name).FirstOrDefault() : null,
                        ReferenceId = e.DataJson.ReferenceId,
                        ReferenceUserName = e.DataJson.ReferenceId != null ? (from u in users where u.Id == e.DataJson.ReferenceId select u.Name).FirstOrDefault() : null,
                        TemplateTypeId = e.DataJson.TemplateTypeId,
                        Version = e.DataJson.Version,
                        TotalCount = (int)e.TotalCount,
                        CreatedDateTime = e.CreatedDateTime,
                        RFQId = e.DataJson.RFQId,
                        InvoiceId = e.DataJson.InvoiceId,
                        IsAccepted = e.DataJson.IsAccepted,
                        IsRejected = e.DataJson.IsRejected,
                        IsCreditNote = e.DataJson.IsCreditNote,
                        IsDebitNote = e.DataJson.IsDebitNote,
                        VesselContractId = e.VesselContractId,
                        TradeId = e.DataJson.TradeId,
                        TradeStatus = e.DataJson.TradeStatus
                    }).ToList();
                }
                else if (contractModel.ContractType == "Vessel")
                {
                    List<UserMiniModel> users = _tradingRepository.GetUsersForBinding(loggedInContext, validationMessages);
                    ContractStatusModel contractStatusModel = new ContractStatusModel();
                    var statuses = _clientService.GetAllContractStatus(contractStatusModel, loggedInContext, validationMessages);
                    contractReturnModel = dataSets.Select(e => new ContractModel
                    {
                        DataSetId = e.Id,
                        ContractTemplateId = e.DataSourceId,
                        FormData = e.DataJson.FormData,
                        ContractData = e.ContractData,
                        ClientId = e.DataJson.ClientId,
                        ContractPdf = e.DataJson.ContractPdf,
                        StatusId = e.DataJson.StatusId,
                        StatusName = e.DataJson.StatusId != null && statuses != null ? (from s in statuses where s.ContractStatusId == e.DataJson.StatusId select s.StatusName).FirstOrDefault() : null,
                        StatusColor = e.DataJson.StatusId != null && statuses != null ? (from s in statuses where s.ContractStatusId == e.DataJson.StatusId select s.ContractStatusColor).FirstOrDefault() : null,
                        BrokerId = e.DataJson.BrokerId,
                        IsSellerSignatureVerificationNeed = e.DataJson.IsSellerSignatureVerificationNeed,
                        IsSGTraderSignatureVerificationNeed = e.DataJson.IsSGTraderSignatureVerificationNeed,
                        DraftRejectComments = e.DataJson.DraftRejectComments,
                        DraftAcceptComments = e.DataJson.DraftAcceptComments,
                        SellerSignatureRejectedComments = e.DataJson.SellerSignatureRejectedComments,
                        SellerSignatureAcceptedComments = e.DataJson.SellerSignatureAcceptedComments,
                        SgtraderSignatureRejectedComments = e.DataJson.SgtraderSignatureRejectedComments,
                        SgtraderSignatureAcceptedComments = e.DataJson.SgtraderSignatureAcceptedComments,
                        IsSelectPercentage = e.DataJson.IsSelectPercentage,
                        IsSelectCommodityBroker = e.DataJson.IsSelectCommodityBroker,
                        IsSelectValue = e.DataJson.IsSelectValue,
                        DataSourceFormJson = e.DataSourceFormJson,
                        BrokeragePercentage = e.DataJson.BrokeragePercentage,
                        BrokerageValue = e.DataJson.BrokerageValue,
                        ContractType = e.DataJson.ContractType,
                        CreatedByUserId = e.CreatedByUserId,
                        CreatedByUserName = e.CreatedByUserId != null ? (from u in users where u.Id == e.CreatedByUserId select u.Name).FirstOrDefault() : null,
                        ReferenceId = e.DataJson.ReferenceId,
                        ReferenceUserName = e.DataJson.ReferenceId != null ? (from u in users where u.Id == e.DataJson.ReferenceId select u.Name).FirstOrDefault() : null,
                        TemplateTypeId = e.DataJson.TemplateTypeId,
                        Version = e.DataJson.Version,
                        TotalCount = (int)e.TotalCount,
                        CreatedDateTime = e.CreatedDateTime,
                        SaleContractFormModel = JsonConvert.DeserializeObject<SaleContractFormModel>(JsonConvert.SerializeObject(e.DataJson)),
                        RFQId = e.DataJson.RFQId,
                        IsAccepted = e.DataJson.IsAccepted,
                        IsRejected = e.DataJson.IsRejected,
                        AcceptedByClientUserId = e.DataJson.AcceptedByClientUserId,
                        AcceptedByTraderUserId = e.DataJson.AcceptedByTraderUserId,
                        Q88SharedClientIds = e.DataJson.Q88SharedClientIds,
                        Q88SharedUserIds = e.DataJson.Q88SharedUserIds,
                        Q88AcceptedIds = e.DataJson.Q88AcceptedIds,
                        Q88RejectedIds = e.DataJson.Q88RejectedIds,
                        IsContractLink = e.DataJson.IsContractLink,
                        IsCancelContract = e.DataJson.IsCancelContract,
                        PurchaseContractIds = e.DataJson.PurchaseContractIds,
                        SalesContractIds = e.DataJson.SalesContractIds,
                        PurchaseQuantitySum = e.DataJson.PurchaseQuantitySum,
                        SalesQuantitySum = e.DataJson.SalesQuantitySum,
                        PurchaseContracts = getPurchaseContractsList(e.PurchaseContracts, statuses, users),
                        SalesContracts = getSaleContractsList(e.SalesContracts, statuses, users),
                        IsLinkingCompleted = e.DataJson.IsLinkingCompleted,
                        SwitchBlContractsModel = JsonConvert.DeserializeObject<SwitchBlContractModel>(JsonConvert.SerializeObject(e.DataJson)),
                        IsVesselOwnerorBrokerSignatureVerificationNeed = e.DataJson.IsVesselOwnerorBrokerSignatureVerificationNeed,
                        IsSGTraderSignatureVerified = e.DataJson.IsSGTraderSignatureVerified,
                        IsVesselOwnerorBrokerSignatureVerified = e.DataJson.IsVesselOwnerorBrokerSignatureVerified,
                        VesselOwnerorBrokerSignatureRejectedComments = e.DataJson.VesselOwnerorBrokerSignatureRejectedComments,
                        VesselOwnerorBrokerSignatureAcceptedComments = e.DataJson.VesselOwnerorBrokerSignatureAcceptedComments,
                        SwitchBlDataSetId = e.DataJson.SwitchBlDataSetId,
                        RFQGuid = e.DataJson.RFQGuid,
                        RemainingContractQuantity = e.DataJson.RemainingContractQuantity,
                        DataSourceId = e.DataSourceId,
                        TermsAndConditions = e.DataJson.TermsAndConditions,
                        SgSignatureAcceptance = e.DataJson.SgSignatureAcceptance,
                        VesselOwnerorBrokerSignatureAcceptance = e.DataJson.VesselOwnerorBrokerSignatureAcceptance,
                        RFQUniqueId = e.DataJson.RFQUniqueId
                    }).ToList();
                }
                else
                {
                    List<UserMiniModel> users = _tradingRepository.GetUsersForBinding(loggedInContext, validationMessages);
                    ContractStatusModel contractStatusModel = new ContractStatusModel();
                    var statuses = _clientService.GetAllContractStatus(contractStatusModel, loggedInContext, validationMessages);
                    contractReturnModel = dataSets.Select(e => new ContractModel
                    {
                        DataSetId = e.Id,
                        ContractTemplateId = e.DataSourceId,
                        FormData = e.DataJson.FormData,
                        ContractData = e.ContractData,
                        ClientId = e.DataJson.ClientId,
                        ContractPdf = e.DataJson.ContractPdf,
                        StatusId = e.DataJson.StatusId,
                        StatusName = e.DataJson.StatusId != null && statuses != null ? (from s in statuses where s.ContractStatusId == e.DataJson.StatusId select s.StatusName).FirstOrDefault() : null,
                        StatusColor = e.DataJson.StatusId != null && statuses != null ? (from s in statuses where s.ContractStatusId == e.DataJson.StatusId select s.ContractStatusColor).FirstOrDefault() : null,
                        BrokerId = e.DataJson.BrokerId,
                        IsSellerSignatureVerificationNeed = e.DataJson.IsSellerSignatureVerificationNeed,
                        IsSGTraderSignatureVerificationNeed = e.DataJson.IsSGTraderSignatureVerificationNeed,
                        DraftRejectComments = e.DataJson.DraftRejectComments,
                        DraftAcceptComments = e.DataJson.DraftAcceptComments,
                        SellerSignatureRejectedComments = e.DataJson.SellerSignatureRejectedComments,
                        SellerSignatureAcceptedComments = e.DataJson.SellerSignatureAcceptedComments,
                        SgtraderSignatureRejectedComments = e.DataJson.SgtraderSignatureRejectedComments,
                        SgtraderSignatureAcceptedComments = e.DataJson.SgtraderSignatureAcceptedComments,
                        IsSelectPercentage = e.DataJson.IsSelectPercentage,
                        IsSelectCommodityBroker = e.DataJson.IsSelectCommodityBroker,
                        IsSelectValue = e.DataJson.IsSelectValue,
                        DataSourceFormJson = e.DataSourceFormJson,
                        BrokeragePercentage = e.DataJson.BrokeragePercentage,
                        BrokerageValue = e.DataJson.BrokerageValue,
                        ContractType = e.DataJson.ContractType,
                        CreatedByUserId = e.CreatedByUserId,
                        CreatedByUserName = e.CreatedByUserId != null ? (from u in users where u.Id == e.CreatedByUserId select u.Name).FirstOrDefault() : null,
                        ReferenceId = e.DataJson.ReferenceId,
                        ReferenceUserName = e.DataJson.ReferenceId != null ? (from u in users where u.Id == e.DataJson.ReferenceId select u.Name).FirstOrDefault() : null,
                        TemplateTypeId = e.DataJson.TemplateTypeId,
                        Version = e.DataJson.Version,
                        TotalCount = (int)e.TotalCount,
                        CreatedDateTime = e.CreatedDateTime,
                        UpdatedDateTime = e.UpdatedDateTime,
                        SaleContractFormModel = JsonConvert.DeserializeObject<SaleContractFormModel>(JsonConvert.SerializeObject(e.DataJson)),
                        RFQId = e.DataJson.RFQId,
                        IsAccepted = e.DataJson.IsAccepted,
                        IsRejected = e.DataJson.IsRejected,
                        AcceptedByClientUserId = e.DataJson.AcceptedByClientUserId,
                        AcceptedByTraderUserId = e.DataJson.AcceptedByTraderUserId,
                        Q88SharedClientIds = e.DataJson.Q88SharedClientIds,
                        Q88SharedUserIds = e.DataJson.Q88SharedUserIds,
                        Q88AcceptedIds = e.DataJson.Q88AcceptedIds,
                        Q88RejectedIds = e.DataJson.Q88RejectedIds,
                        IsContractLink = e.DataJson.IsContractLink,
                        PurchaseContractIds = e.DataJson.PurchaseContractIds,
                        SalesContractIds = e.DataJson.SalesContractIds,
                        PurchaseQuantitySum = e.DataJson.PurchaseQuantitySum,
                        SalesQuantitySum = e.DataJson.SalesQuantitySum,
                        PurchaseContracts = getPurchaseContractsList(e.PurchaseContracts, statuses, users),
                        SalesContracts = getSaleContractsList(e.SalesContracts, statuses, users),
                        IsLinkingCompleted = e.DataJson.IsLinkingCompleted,
                        SwitchBlDataSetId = e.DataJson.SwitchBlDataSetId,
                        RemainingContractQuantity = e.DataJson.RemainingContractQuantity,
                        VesselContractId = e.VesselContractId,
                        DataSourceId = e.DataSourceId,
                        TermsAndConditions = e.DataJson.TermsAndConditions,
                        SellerSignatureAcceptance = e.DataJson.SellerSignatureAcceptance,
                        SgSignatureAcceptance = e.DataJson.SgSignatureAcceptance,
                        LinkCreatedDateTime = e.DataJson.LinkCreatedDateTime,
                        RFQGuid = e.DataJson.RFQGuid,
                        SwitchBlContractsModel = JsonConvert.DeserializeObject<SwitchBlContractModel>(JsonConvert.SerializeObject(e.DataJson)),
                        RFQUniqueId = e.DataJson.RFQUniqueId,
                        IsCancelContract = e.DataJson.IsCancelContract,
                    }).ToList();
                }
            }

            return contractReturnModel;
        }

        public List<RFQListContractModel> GetRFQListForVesselContracts(ContractModel contractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetGenericFormKey", "GenericForm Api"));
            List<RFQListContractModel> contractReturnModel = new List<RFQListContractModel>();
            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }

            if (contractModel.ListType == "rfqList" || contractModel.ListType == "rfqListForVessel")
            {
                var clientData = _clientRepository.GetClientByUserId("Vessel Owner,Ship Broker", loggedInContext.LoggedInUserId, loggedInContext, validationMessages, null);
                validationMessages = new List<ValidationMessage>();
                if (clientData != null && clientData.UserId != null && clientData.ClientId != null)
                {
                    var paramsJson = new ParamsJsonModel()
                    {
                        KeyName = "ReferenceId",
                        KeyValue = clientData.UserId.ToString(),
                        Type = "Guid"
                    };
                    if (contractModel.ParamsJson == null)
                    {
                        contractModel.ParamsJson = new List<ParamsJsonModel>();
                    }
                    contractModel.ParamsJson.Add(paramsJson);
                }
            }
            if (contractModel.ParamsJson != null && contractModel.ParamsJson.Count > 0)
            {
                if (contractModel.IsLinking == false || contractModel.IsLinking == null)
                {
                    if (contractModel.ParamsJson[0].KeyValue.ToLower() == "purchase" || contractModel.ParamsJson[0].KeyValue.ToLower() == "buyer" || contractModel.ParamsJson[0].KeyValue.ToLower() == "invoice queue" || contractModel.ParamsJson[0].KeyValue.ToLower() == "sale"
                    || contractModel.ParamsJson[0].KeyValue.ToLower() == "vessel")
                    {
                        var clientData = _clientRepository.GetClientByUserId(null, loggedInContext.LoggedInUserId, loggedInContext, validationMessages, null);
                        validationMessages = new List<ValidationMessage>();
                        if (clientData != null && clientData.ClientTypeName != null && clientData.ClientId != null)
                        {
                            if (clientData.ClientTypeName.ToLower() == "commodity broker")
                            {
                                var paramsJson = new ParamsJsonModel()
                                {
                                    KeyName = "BrokerId",
                                    KeyValue = clientData.ClientId.ToString(),
                                    Type = "Guid"
                                };
                                contractModel.ParamsJson.Add(paramsJson);
                            }
                            else if (clientData.ClientTypeName.ToLower() == "purchase" || clientData.ClientTypeName.ToLower() == "buyer")
                            {
                                var paramsJson1 = new ParamsJsonModel()
                                {
                                    KeyName = "ClientId",
                                    KeyValue = clientData.ClientId.ToString(),
                                    Type = "Guid"
                                };
                                contractModel.ParamsJson.Add(paramsJson1);
                            }
                            else
                            {
                                var paramsJson2 = new ParamsJsonModel()
                                {
                                    KeyName = "ClientId",
                                    KeyValue = clientData.ClientId.ToString(),
                                    Type = "Guid"
                                };
                                contractModel.ParamsJson.Add(paramsJson2);
                            }
                        }
                    }
                }

            }

            string paramsJsonModel = contractModel.ParamsJson != null ? contractModel.ParamsJson.Count > 0 ? JsonConvert.SerializeObject(contractModel.ParamsJson) : null : null;
            var dataSets = _dataSetService.SearchDataSets(contractModel.DataSetId, contractModel.DataSourceId, contractModel.SearchText, paramsJsonModel, contractModel.IsArchived,
                contractModel.IsPagingRequired, contractModel.PageNumber, contractModel.PageSize, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult();

            if (dataSets != null && contractModel.ListType == "rfqListForVessel")
            {
                var users = _tradingRepository.GetUsersForBinding(loggedInContext, validationMessages);
                contractReturnModel = dataSets.Select(e => new RFQListContractModel
                {
                    DataSetId = e.Id,
                    ContractTemplateId = e.DataSourceId,
                    FormData = e.DataJson.FormData,
                    ClientId = e.DataJson.ClientId,
                    StatusId = e.DataJson.StatusId,
                    BrokerId = e.DataJson.BrokerId,
                    ContractType = e.DataJson.ContractType,
                    CreatedByUserId = e.CreatedByUserId,
                    ReferenceId = e.DataJson.ReferenceId,
                    ReferenceUserName = e.DataJson.ReferenceId != null ? (from u in users where u.Id == e.DataJson.ReferenceId select u.Name).FirstOrDefault() : null,
                    TemplateTypeId = e.DataJson.TemplateTypeId,
                    RFQId = e.DataJson.RFQId,
                    VesselContractId = e.VesselContractId
                }).ToList();
            }

            return contractReturnModel;
        }
        public virtual List<FinalSwitchBlModel> GetSwitchBlContracts(SwitchBlContractModel switchBlContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetGenericFormKey", "GenericForm Api"));
            List<FinalSwitchBlModel> switchBlContractReturnModels = new List<FinalSwitchBlModel>();
            FinalSwitchBlModel switchBlReturnModel = new FinalSwitchBlModel();
            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            if (switchBlContractModel.SaleContractIds != null && switchBlContractModel.SaleContractIds.Count > 0)
            {
                foreach (var saleContractId in switchBlContractModel.SaleContractIds)
                {
                    switchBlContractModel.DataSourceId = saleContractId;
                    string paramsJsonModel = switchBlContractModel.ParamsJson != null ? switchBlContractModel.ParamsJson.Count > 0 ? JsonConvert.SerializeObject(switchBlContractModel.ParamsJson) : null : null;
                    var dataSets = _dataSetService.SearchDataSets(switchBlContractModel.DataSetId, switchBlContractModel.DataSourceId, switchBlContractModel.SearchText, paramsJsonModel, switchBlContractModel.IsArchived,
                        switchBlContractModel.IsPagingRequired, switchBlContractModel.PageNumber, switchBlContractModel.PageSize, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult();

                    if (dataSets != null && dataSets.Count > 0)
                    {
                        switchBlReturnModel = new FinalSwitchBlModel
                        {
                            DataSetId = dataSets[0].Id,
                            DataSourceId = dataSets[0].DataSourceId,
                            SaleContractId = dataSets[0].DataSourceId,
                            VesselOwnerId = dataSets[0].DataJson.VesselOwnerId,
                            StatusName = dataSets[0].DataJson.StatusName,
                            VesselId = dataSets[0].DataJson.VesselId,
                            SwitchBlDetails = JsonConvert.DeserializeObject<List<SwitchBlDetailsModel>>(JsonConvert.SerializeObject(dataSets[0].DataJson.SwitchBlDetails))
                        };
                        switchBlContractReturnModels.Add(switchBlReturnModel);
                    }
                }
            }

            return switchBlContractReturnModels;
        }
        public SwitchBlBuyerContractOutputModel GetSwitchBlBuyerContracts(SwitchBlBuyerContractInputModel switchBlBuyerContractInputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetGenericFormKey", "GenericForm Api"));
                List<SwitchBlContractModel> switchBlContractReturnModels = new List<SwitchBlContractModel>();
                SwitchBlBuyerContractOutputModel switchBlBuyerContractDetails = new SwitchBlBuyerContractOutputModel();
                List<BuyerSwitchBlContractDetails> buyerSwitchBlContractDetails = new List<BuyerSwitchBlContractDetails>();


                if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
                {
                    return null;
                }

                string paramsJsonModel = switchBlBuyerContractInputModel.ParamsJson != null ? switchBlBuyerContractInputModel.ParamsJson.Count > 0 ?
                    JsonConvert.SerializeObject(switchBlBuyerContractInputModel.ParamsJson) : null : null;
                var dataSets = _dataSetService.SearchDataSets(switchBlBuyerContractInputModel.DataSetId, switchBlBuyerContractInputModel.DataSourceId,
                    switchBlBuyerContractInputModel.SearchText, paramsJsonModel, switchBlBuyerContractInputModel.IsArchived,
                    switchBlBuyerContractInputModel.IsPagingRequired, switchBlBuyerContractInputModel.PageNumber, switchBlBuyerContractInputModel.PageSize, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult();

                if (dataSets != null && dataSets.Count > 0)
                {
                    switchBlContractReturnModels = dataSets.Select(e => new SwitchBlContractModel
                    {
                        VesselId = e.DataJson.VesselId,
                        BuyerAcceptComment = e.DataJson.BuyerAcceptComment,
                        BuyerRejectComment = e.DataJson.BuyerRejectComment,
                        VesselOwnerAcceptComment = e.DataJson.VesselOwnerAcceptComment,
                        VesselOwnerRejectComment = e.DataJson.VesselOwnerRejectComment,
                        StatusName = e.DataJson.StatusName,
                        CreatedByUserId = e.CreatedByUserId,
                        SwitchBlDetails = JsonConvert.DeserializeObject<List<SwitchBlDetailsModel>>(JsonConvert.SerializeObject(e.DataJson.SwitchBlDetails))
                    }).ToList();
                    foreach (var switchBlContract in switchBlContractReturnModels)
                    {
                        switchBlBuyerContractDetails.SgTraderSwitchBlContractDetails = switchBlContract;
                        if (switchBlContract.SwitchBlDetails != null && switchBlContract.SwitchBlDetails.Count > 0)
                        {
                            foreach (var switchBl in switchBlContract.SwitchBlDetails)
                            {
                                if (switchBl.ActionType.ToLower() == "onetoone")
                                {
                                    if (switchBl.PurchaseContractDetails != null && switchBl.PurchaseContractDetails.SaleContractId != null && switchBl.PurchaseContractDetails.PurchaseContractId != null)
                                    {
                                        if (switchBl.PurchaseContractDetails.SaleContractId == switchBlBuyerContractInputModel.ContractId)
                                        {
                                            buyerSwitchBlContractDetails.Add(new BuyerSwitchBlContractDetails
                                            {
                                                Quantity = switchBl.PurchaseContractDetails.Quantity,
                                                PurchaseBlId = switchBl.PurchaseContractDetails.PurchaseBlId,
                                                BlNumber = switchBl.PurchaseContractDetails.DraftBlNumber,
                                                Consignee = switchBl.PurchaseContractDetails.Consignee,
                                                Consigner = switchBl.PurchaseContractDetails.Consigner,
                                                NotifyParty = switchBl.PurchaseContractDetails.NotifyParty,
                                                VesselBlNumber = switchBl.PurchaseContractDetails.VesselBlNumber,
                                                Master = switchBl.PurchaseContractDetails.Master,
                                                OceanCarriageStowage = switchBl.PurchaseContractDetails.OceanCarriageStowage,
                                                CreatedDateTime = switchBlContract.CreatedDateTime,
                                                IsShareSwitchBlContract = switchBl.IsShareSwitchBlContract,
                                                IsSwitchBlBuyerContractAccepted = switchBl.IsSwitchBlBuyerContractAccepted,
                                                IsSwitchBlBuyerContractRejected = switchBl.IsSwitchBlBuyerContractRejected,
                                                IsSwitchBlVesselOwnerAccepted = switchBl.IsSwitchBlVesselOwnerAccepted,
                                                IsSwitchBlVesselOwnerRejected = switchBl.IsSwitchBlVesselOwnerRejected,
                                                BuyerAcceptComment = switchBlContract.BuyerAcceptComment,
                                                BuyerRejectComment = switchBlContract.BuyerRejectComment,
                                                VesselOwnerAcceptComment = switchBlContract.VesselOwnerAcceptComment,
                                                VesselOwnerRejectComment = switchBlContract.VesselOwnerRejectComment,
                                                StatusName = switchBlContract.StatusName
                                            });
                                        }
                                        else if (switchBlBuyerContractInputModel.ContractId == null)
                                        {
                                            buyerSwitchBlContractDetails.Add(new BuyerSwitchBlContractDetails
                                            {
                                                Quantity = switchBl.PurchaseContractDetails.Quantity,
                                                BlNumber = switchBl.PurchaseContractDetails.DraftBlNumber,
                                                PurchaseBlId = switchBl.PurchaseContractDetails.PurchaseBlId,
                                                Consignee = switchBl.PurchaseContractDetails.Consignee,
                                                Consigner = switchBl.PurchaseContractDetails.Consigner,
                                                NotifyParty = switchBl.PurchaseContractDetails.NotifyParty,
                                                VesselBlNumber = switchBl.PurchaseContractDetails.VesselBlNumber,
                                                Master = switchBl.PurchaseContractDetails.Master,
                                                OceanCarriageStowage = switchBl.PurchaseContractDetails.OceanCarriageStowage,
                                                CreatedDateTime = switchBlContract.CreatedDateTime,
                                                IsShareSwitchBlContract = switchBl.IsShareSwitchBlContract,
                                                IsSwitchBlBuyerContractAccepted = switchBl.IsSwitchBlBuyerContractAccepted,
                                                IsSwitchBlBuyerContractRejected = switchBl.IsSwitchBlBuyerContractRejected,
                                                IsSwitchBlVesselOwnerAccepted = switchBl.IsSwitchBlVesselOwnerAccepted,
                                                IsSwitchBlVesselOwnerRejected = switchBl.IsSwitchBlVesselOwnerRejected,
                                                BuyerAcceptComment = switchBlContract.BuyerAcceptComment,
                                                BuyerRejectComment = switchBlContract.BuyerRejectComment,
                                                VesselOwnerAcceptComment = switchBlContract.VesselOwnerAcceptComment,
                                                VesselOwnerRejectComment = switchBlContract.VesselOwnerRejectComment,
                                                StatusName = switchBlContract.StatusName

                                            });
                                        }
                                    }
                                }
                                if (switchBl.ActionType.ToLower() == "combine")
                                {
                                    if (switchBl.IsQuantitySplited)
                                    {
                                        if (switchBl.PurchaseContractDetails.SaleContractId == switchBlBuyerContractInputModel.ContractId)
                                        {
                                            foreach (var splitData in switchBl.SplitList)
                                            {
                                                buyerSwitchBlContractDetails.Add(new BuyerSwitchBlContractDetails
                                                {
                                                    Quantity = splitData.Quantity,
                                                    BlNumber = splitData.DraftBlNumber,
                                                    Consignee = splitData.Consignee,
                                                    Consigner = splitData.Consigner,
                                                    NotifyParty = splitData.NotifyParty,
                                                    VesselBlNumber = splitData.VesselBlNumber,
                                                    Master = splitData.Master,
                                                    OceanCarriageStowage = splitData.OceanCarriageStowage,
                                                    CreatedDateTime = switchBlContract.CreatedDateTime,
                                                    IsShareSwitchBlContract = switchBl.IsShareSwitchBlContract,
                                                    IsSwitchBlBuyerContractAccepted = switchBl.IsSwitchBlBuyerContractAccepted,
                                                    IsSwitchBlBuyerContractRejected = switchBl.IsSwitchBlBuyerContractRejected,
                                                    IsSwitchBlVesselOwnerAccepted = switchBl.IsSwitchBlVesselOwnerAccepted,
                                                    IsSwitchBlVesselOwnerRejected = switchBl.IsSwitchBlVesselOwnerRejected,
                                                    BuyerAcceptComment = switchBlContract.BuyerAcceptComment,
                                                    BuyerRejectComment = switchBlContract.BuyerRejectComment,
                                                    VesselOwnerAcceptComment = switchBlContract.VesselOwnerAcceptComment,
                                                    VesselOwnerRejectComment = switchBlContract.VesselOwnerRejectComment,
                                                    StatusName = switchBlContract.StatusName

                                                });
                                            }
                                        }
                                        else if (switchBlBuyerContractInputModel.ContractId == null)
                                        {
                                            foreach (var splitData in switchBl.SplitList)
                                            {
                                                buyerSwitchBlContractDetails.Add(new BuyerSwitchBlContractDetails
                                                {
                                                    Quantity = splitData.Quantity,
                                                    BlNumber = splitData.DraftBlNumber,
                                                    Consignee = splitData.Consignee,
                                                    Consigner = splitData.Consigner,
                                                    NotifyParty = splitData.NotifyParty,
                                                    VesselBlNumber = splitData.VesselBlNumber,
                                                    Master = splitData.Master,
                                                    OceanCarriageStowage = splitData.OceanCarriageStowage,
                                                    CreatedDateTime = switchBlContract.CreatedDateTime,
                                                    IsShareSwitchBlContract = switchBl.IsShareSwitchBlContract,
                                                    IsSwitchBlBuyerContractAccepted = switchBl.IsSwitchBlBuyerContractAccepted,
                                                    IsSwitchBlBuyerContractRejected = switchBl.IsSwitchBlBuyerContractRejected,
                                                    IsSwitchBlVesselOwnerAccepted = switchBl.IsSwitchBlVesselOwnerAccepted,
                                                    IsSwitchBlVesselOwnerRejected = switchBl.IsSwitchBlVesselOwnerRejected,
                                                    BuyerAcceptComment = switchBlContract.BuyerAcceptComment,
                                                    BuyerRejectComment = switchBlContract.BuyerRejectComment,
                                                    VesselOwnerAcceptComment = switchBlContract.VesselOwnerAcceptComment,
                                                    VesselOwnerRejectComment = switchBlContract.VesselOwnerRejectComment,
                                                    StatusName = switchBlContract.StatusName

                                                });
                                            }
                                        }

                                    }
                                    else
                                    {
                                        if ((switchBl.PurchaseContractDetailsList.Count > 0 && (switchBl.PurchaseContractDetailsList[0].SaleContractId == switchBlBuyerContractInputModel.ContractId)))
                                        {
                                            float? totalQuantity = 0;
                                            List<Guid?> purchaseBlIdList = new List<Guid?>();
                                            switchBl.PurchaseContractDetailsList.ForEach(x => totalQuantity += x.Quantity);
                                            switchBl.PurchaseContractDetailsList.ForEach(x => purchaseBlIdList.Add(x.PurchaseBlId));
                                            buyerSwitchBlContractDetails.Add(new BuyerSwitchBlContractDetails
                                            {
                                                Quantity = totalQuantity,
                                                BlNumber = switchBl.DraftBlNumber,
                                                PurchaseBlIdList = purchaseBlIdList,
                                                Consignee = switchBl.Consignee,
                                                Consigner = switchBl.Consigner,
                                                NotifyParty = switchBl.NotifyParty,
                                                VesselBlNumber = switchBl.VesselBlNumber,
                                                Master = switchBl.Master,
                                                OceanCarriageStowage = switchBl.OceanCarriageStowage,
                                                CreatedDateTime = switchBlContract.CreatedDateTime,
                                                IsShareSwitchBlContract = switchBl.IsShareSwitchBlContract,
                                                IsSwitchBlBuyerContractAccepted = switchBl.IsSwitchBlBuyerContractAccepted,
                                                IsSwitchBlBuyerContractRejected = switchBl.IsSwitchBlBuyerContractRejected,
                                                IsSwitchBlVesselOwnerAccepted = switchBl.IsSwitchBlVesselOwnerAccepted,
                                                IsSwitchBlVesselOwnerRejected = switchBl.IsSwitchBlVesselOwnerRejected,
                                                BuyerAcceptComment = switchBlContract.BuyerAcceptComment,
                                                BuyerRejectComment = switchBlContract.BuyerRejectComment,
                                                VesselOwnerAcceptComment = switchBlContract.VesselOwnerAcceptComment,
                                                VesselOwnerRejectComment = switchBlContract.VesselOwnerRejectComment,
                                                StatusName = switchBlContract.StatusName

                                            });
                                        }
                                        else if (switchBlBuyerContractInputModel.ContractId == null)
                                        {
                                            float? totalQuantity = 0;
                                            List<Guid?> purchaseBlIdList = new List<Guid?>();
                                            switchBl.PurchaseContractDetailsList.ForEach(x => totalQuantity += x.Quantity);
                                            switchBl.PurchaseContractDetailsList.ForEach(x => purchaseBlIdList.Add(x.PurchaseBlId));
                                            buyerSwitchBlContractDetails.Add(new BuyerSwitchBlContractDetails
                                            {
                                                Quantity = totalQuantity,
                                                BlNumber = switchBl.DraftBlNumber,
                                                PurchaseBlIdList = purchaseBlIdList,
                                                Consignee = switchBl.Consignee,
                                                Consigner = switchBl.Consigner,
                                                NotifyParty = switchBl.NotifyParty,
                                                VesselBlNumber = switchBl.VesselBlNumber,
                                                Master = switchBl.Master,
                                                OceanCarriageStowage = switchBl.OceanCarriageStowage,
                                                CreatedDateTime = switchBlContract.CreatedDateTime,
                                                IsShareSwitchBlContract = switchBl.IsShareSwitchBlContract,
                                                IsSwitchBlBuyerContractAccepted = switchBl.IsSwitchBlBuyerContractAccepted,
                                                IsSwitchBlBuyerContractRejected = switchBl.IsSwitchBlBuyerContractRejected,
                                                IsSwitchBlVesselOwnerAccepted = switchBl.IsSwitchBlVesselOwnerAccepted,
                                                IsSwitchBlVesselOwnerRejected = switchBl.IsSwitchBlVesselOwnerRejected,
                                                BuyerAcceptComment = switchBlContract.BuyerAcceptComment,
                                                BuyerRejectComment = switchBlContract.BuyerRejectComment,
                                                VesselOwnerAcceptComment = switchBlContract.VesselOwnerAcceptComment,
                                                VesselOwnerRejectComment = switchBlContract.VesselOwnerRejectComment,
                                                StatusName = switchBlContract.StatusName

                                            });
                                        }

                                    }
                                }
                                if (switchBl.SplitList != null && switchBl.SplitList.Count > 0 && switchBl.ActionType.ToLower() == "split")
                                {
                                    if (switchBl.PurchaseContractDetails.SaleContractId == switchBlBuyerContractInputModel.ContractId)
                                    {
                                        foreach (var split in switchBl.SplitList)
                                        {
                                            buyerSwitchBlContractDetails.Add(new BuyerSwitchBlContractDetails
                                            {
                                                Quantity = split.Quantity,
                                                BlNumber = split.DraftBlNumber,
                                                Consignee = split.Consignee,
                                                Consigner = split.Consigner,
                                                NotifyParty = split.NotifyParty,
                                                VesselBlNumber = split.VesselBlNumber,
                                                Master = split.Master,
                                                OceanCarriageStowage = split.OceanCarriageStowage,
                                                CreatedDateTime = switchBlContract.CreatedDateTime,
                                                IsShareSwitchBlContract = switchBl.IsShareSwitchBlContract,
                                                IsSwitchBlBuyerContractAccepted = switchBl.IsSwitchBlBuyerContractAccepted,
                                                IsSwitchBlBuyerContractRejected = switchBl.IsSwitchBlBuyerContractRejected,
                                                IsSwitchBlVesselOwnerAccepted = switchBl.IsSwitchBlVesselOwnerAccepted,
                                                IsSwitchBlVesselOwnerRejected = switchBl.IsSwitchBlVesselOwnerRejected,
                                                BuyerAcceptComment = switchBlContract.BuyerAcceptComment,
                                                BuyerRejectComment = switchBlContract.BuyerRejectComment,
                                                VesselOwnerAcceptComment = switchBlContract.VesselOwnerAcceptComment,
                                                VesselOwnerRejectComment = switchBlContract.VesselOwnerRejectComment,
                                                StatusName = switchBlContract.StatusName

                                            });
                                        }
                                    }
                                    else if (switchBlBuyerContractInputModel.ContractId == null)
                                    {
                                        foreach (var split in switchBl.SplitList)
                                        {
                                            buyerSwitchBlContractDetails.Add(new BuyerSwitchBlContractDetails
                                            {
                                                Quantity = split.Quantity,
                                                BlNumber = split.DraftBlNumber,
                                                Consignee = split.Consignee,
                                                Consigner = split.Consigner,
                                                NotifyParty = split.NotifyParty,
                                                VesselBlNumber = split.VesselBlNumber,
                                                Master = split.Master,
                                                OceanCarriageStowage = split.OceanCarriageStowage,
                                                CreatedDateTime = switchBlContract.CreatedDateTime,
                                                IsShareSwitchBlContract = switchBl.IsShareSwitchBlContract,
                                                IsSwitchBlBuyerContractAccepted = switchBl.IsSwitchBlBuyerContractAccepted,
                                                IsSwitchBlBuyerContractRejected = switchBl.IsSwitchBlBuyerContractRejected,
                                                IsSwitchBlVesselOwnerAccepted = switchBl.IsSwitchBlVesselOwnerAccepted,
                                                IsSwitchBlVesselOwnerRejected = switchBl.IsSwitchBlVesselOwnerRejected,
                                                BuyerAcceptComment = switchBlContract.BuyerAcceptComment,
                                                BuyerRejectComment = switchBlContract.BuyerRejectComment,
                                                VesselOwnerAcceptComment = switchBlContract.VesselOwnerAcceptComment,
                                                VesselOwnerRejectComment = switchBlContract.VesselOwnerRejectComment,
                                                StatusName = switchBlContract.StatusName

                                            });
                                        }
                                    }

                                }
                                switchBlBuyerContractDetails.BuyerSwitchBlContractDetails = buyerSwitchBlContractDetails;
                            }
                        }
                    }
                }

                return switchBlBuyerContractDetails;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(exception);
                validationMessages.Add(new ValidationMessage()
                {
                    ValidationMessaage = exception.Message
                });
                return null;
            }
        }
        public List<PurchaseContractDraftBlDetails> GetPurchaseContractDraftBlDetails(PurchaseExecutionModel purchaseExecutionModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            try
            {
                List<PurchaseContractDraftBlDetails> purchaseContractDraftBls = new List<PurchaseContractDraftBlDetails>();
                var portDetails = _leadService.GetPortDetails(new PaymentTermSearchInputModel(), loggedInContext, validationMessages);
                List<CountryApiReturnModel> countryList = _companyStructureManagementService.GetCountries(new CountrySearchInputModel(), validationMessages, loggedInContext);
                if (purchaseExecutionModel != null)
                {
                    if (purchaseExecutionModel.PurchaseIds != null)
                    {
                        foreach (var purchaseId in purchaseExecutionModel.PurchaseIds)
                        {
                            purchaseExecutionModel.PurchaseId = purchaseId;
                            List<PurchaseExecutionModel> purchaseExecutionStepsData = GetXPSteps(purchaseExecutionModel, loggedInContext, validationMessages);
                            PurchaseContractDraftBlDetails purchaseContractDraftBlDetails = new PurchaseContractDraftBlDetails();
                            if (purchaseExecutionStepsData != null && purchaseExecutionStepsData.Count > 0)
                            {
                                foreach (var purchaseExecutionStep in purchaseExecutionStepsData)
                                {
                                    if (purchaseExecutionStep.StepName.ToLower() == "purchase bl")
                                    {
                                        purchaseContractDraftBlDetails.FormData = purchaseExecutionStep.FormData;
                                        purchaseContractDraftBlDetails.FormJson = purchaseExecutionStep.FormJson;
                                        purchaseContractDraftBlDetails.DataSourceFormJson = purchaseExecutionStep.DataSourceFormJson;
                                        purchaseContractDraftBlDetails.ContractId = purchaseExecutionStep.ContractId;
                                        purchaseContractDraftBlDetails.PurchaseId = purchaseExecutionStep.PurchaseId;
                                        purchaseContractDraftBlDetails.DataSourceId = purchaseExecutionStep.DataSourceId;
                                        purchaseContractDraftBlDetails.StatusName = purchaseExecutionStep.StatusName;
                                        if (purchaseExecutionStep.BlDraftForm != null && purchaseExecutionStep.BlDraftForm.Count > 0)
                                        {
                                            if (portDetails != null && portDetails.Count > 0 && countryList != null && countryList.Count > 0)
                                            {
                                                purchaseExecutionStep.BlDraftForm.ForEach(x => x.PortOfDischargeName = portDetails.Where(y => y.Id == x.PortOfDischarge).FirstOrDefault().Name);
                                                purchaseExecutionStep.BlDraftForm.ForEach(x => x.PortOfDischargeCountryName = countryList.Where(y => y.CountryId == x.PortOfDischargeCountry).FirstOrDefault().CountryName);
                                                purchaseExecutionStep.BlDraftForm.ForEach(x => x.PortOfLoadingName = portDetails.Where(y => y.Id == x.PortOfLoading).FirstOrDefault().Name);
                                                purchaseExecutionStep.BlDraftForm.ForEach(x => x.PortOfLoadingCountryName = countryList.Where(y => y.CountryId == x.PortOfLoadingCountry).FirstOrDefault().CountryName);
                                            }
                                            purchaseContractDraftBlDetails.BlDetails = purchaseExecutionStep.BlDraftForm;
                                        }
                                    }
                                }
                                purchaseContractDraftBls.Add(purchaseContractDraftBlDetails);
                            }
                        }
                    }
                }
                return purchaseContractDraftBls;
            }
            catch (Exception exception)
            {
                LoggingManager.Error(exception);
                validationMessages.Add(new ValidationMessage()
                {
                    ValidationMessaage = exception.Message
                });
                return null;
            }
        }
        public List<ContractModel> getPurchaseContractsList(List<DataSetOutputModel> purchaseContracts, List<ContractStatusModel> statuses, List<UserMiniModel> users)
        {
            List<ContractModel> purchaseContractsList = new List<ContractModel>();
            if (purchaseContracts != null && purchaseContracts.Count > 0)
            {
                purchaseContractsList = purchaseContracts.Select(e => new ContractModel
                {
                    DataSetId = e.Id,
                    ContractTemplateId = e.DataSourceId,
                    FormData = e.DataJson.FormData,
                    ContractData = e.ContractData,
                    ClientId = e.DataJson.ClientId,
                    ContractPdf = e.DataJson.ContractPdf,
                    StatusId = e.DataJson.StatusId,
                    StatusName = e.DataJson.StatusId != null && statuses != null ? (from s in statuses where s.ContractStatusId == e.DataJson.StatusId select s.StatusName).FirstOrDefault() : null,
                    StatusColor = e.DataJson.StatusId != null && statuses != null ? (from s in statuses where s.ContractStatusId == e.DataJson.StatusId select s.ContractStatusColor).FirstOrDefault() : null,
                    BrokerId = e.DataJson.BrokerId,
                    IsSellerSignatureVerificationNeed = e.DataJson.IsSellerSignatureVerificationNeed,
                    IsSGTraderSignatureVerificationNeed = e.DataJson.IsSGTraderSignatureVerificationNeed,
                    DraftRejectComments = e.DataJson.DraftRejectComments,
                    DraftAcceptComments = e.DataJson.DraftAcceptComments,
                    SellerSignatureRejectedComments = e.DataJson.SellerSignatureRejectedComments,
                    SellerSignatureAcceptedComments = e.DataJson.SellerSignatureAcceptedComments,
                    SgtraderSignatureRejectedComments = e.DataJson.SgtraderSignatureRejectedComments,
                    SgtraderSignatureAcceptedComments = e.DataJson.SgtraderSignatureAcceptedComments,
                    IsSelectPercentage = e.DataJson.IsSelectPercentage,
                    IsSelectCommodityBroker = e.DataJson.IsSelectCommodityBroker,
                    IsSelectValue = e.DataJson.IsSelectValue,
                    DataSourceFormJson = e.DataSourceFormJson,
                    BrokeragePercentage = e.DataJson.BrokeragePercentage,
                    BrokerageValue = e.DataJson.BrokerageValue,
                    ContractType = e.DataJson.ContractType,
                    CreatedByUserId = e.CreatedByUserId,
                    CreatedByUserName = e.CreatedByUserId != null ? (from u in users where u.Id == e.CreatedByUserId select u.Name).FirstOrDefault() : null,
                    ReferenceId = e.DataJson.ReferenceId,
                    ReferenceUserName = e.DataJson.ReferenceId != null ? (from u in users where u.Id == e.DataJson.ReferenceId select u.Name).FirstOrDefault() : null,
                    TemplateTypeId = e.DataJson.TemplateTypeId,
                    Version = e.DataJson.Version,
                    CreatedDateTime = e.CreatedDateTime,

                    RFQId = e.DataJson.RFQId,
                    IsAccepted = e.DataJson.IsAccepted,
                    IsRejected = e.DataJson.IsRejected,
                    AcceptedByClientUserId = e.DataJson.AcceptedByClientUserId,
                    AcceptedByTraderUserId = e.DataJson.AcceptedByTraderUserId,
                    Q88SharedClientIds = e.DataJson.Q88SharedClientIds,
                    Q88SharedUserIds = e.DataJson.Q88SharedUserIds,
                    Q88AcceptedIds = e.DataJson.Q88AcceptedIds,
                    Q88RejectedIds = e.DataJson.Q88RejectedIds,
                    IsContractLink = e.DataJson.IsContractLink,
                    PurchaseContractIds = e.DataJson.PurchaseContractIds,
                    SalesContractIds = e.DataJson.SalesContractIds,
                    PurchaseQuantitySum = e.DataJson.PurchaseQuantitySum,
                    SalesQuantitySum = e.DataJson.SalesQuantitySum,
                    RemainingContractQuantity = e.DataJson.RemainingContractQuantity
                }).ToList();
            }

            return purchaseContractsList;
        }
        public List<ContractModel> getSaleContractsList(List<DataSetOutputModel> salesContracts, List<ContractStatusModel> statuses, List<UserMiniModel> users)
        {
            List<ContractModel> salesContractsList = new List<ContractModel>();
            if (salesContracts != null && salesContracts.Count > 0)
            {
                salesContractsList = salesContracts.Select(e => new ContractModel
                {
                    DataSetId = e.Id,
                    ContractTemplateId = e.DataSourceId,
                    FormData = e.DataJson.FormData,
                    ContractData = e.ContractData,
                    ClientId = e.DataJson.ClientId,
                    ContractPdf = e.DataJson.ContractPdf,
                    StatusId = e.DataJson.StatusId,
                    StatusName = e.DataJson.StatusId != null && statuses != null ? (from s in statuses where s.ContractStatusId == e.DataJson.StatusId select s.StatusName).FirstOrDefault() : null,
                    StatusColor = e.DataJson.StatusId != null && statuses != null ? (from s in statuses where s.ContractStatusId == e.DataJson.StatusId select s.ContractStatusColor).FirstOrDefault() : null,
                    BrokerId = e.DataJson.BrokerId,
                    IsSellerSignatureVerificationNeed = e.DataJson.IsSellerSignatureVerificationNeed,
                    IsSGTraderSignatureVerificationNeed = e.DataJson.IsSGTraderSignatureVerificationNeed,
                    DraftRejectComments = e.DataJson.DraftRejectComments,
                    DraftAcceptComments = e.DataJson.DraftAcceptComments,
                    SellerSignatureRejectedComments = e.DataJson.SellerSignatureRejectedComments,
                    SellerSignatureAcceptedComments = e.DataJson.SellerSignatureAcceptedComments,
                    SgtraderSignatureRejectedComments = e.DataJson.SgtraderSignatureRejectedComments,
                    SgtraderSignatureAcceptedComments = e.DataJson.SgtraderSignatureAcceptedComments,
                    IsSelectPercentage = e.DataJson.IsSelectPercentage,
                    IsSelectCommodityBroker = e.DataJson.IsSelectCommodityBroker,
                    IsSelectValue = e.DataJson.IsSelectValue,
                    DataSourceFormJson = e.DataSourceFormJson,
                    BrokeragePercentage = e.DataJson.BrokeragePercentage,
                    BrokerageValue = e.DataJson.BrokerageValue,
                    ContractType = e.DataJson.ContractType,
                    CreatedByUserId = e.CreatedByUserId,
                    CreatedByUserName = e.CreatedByUserId != null ? (from u in users where u.Id == e.CreatedByUserId select u.Name).FirstOrDefault() : null,
                    ReferenceId = e.DataJson.ReferenceId,
                    ReferenceUserName = e.DataJson.ReferenceId != null ? (from u in users where u.Id == e.DataJson.ReferenceId select u.Name).FirstOrDefault() : null,
                    TemplateTypeId = e.DataJson.TemplateTypeId,
                    Version = e.DataJson.Version,
                    CreatedDateTime = e.CreatedDateTime,
                    SaleContractFormModel = JsonConvert.DeserializeObject<SaleContractFormModel>(JsonConvert.SerializeObject(e.DataJson)),
                    RFQId = e.DataJson.RFQId,
                    IsAccepted = e.DataJson.IsAccepted,
                    IsRejected = e.DataJson.IsRejected,
                    AcceptedByClientUserId = e.DataJson.AcceptedByClientUserId,
                    AcceptedByTraderUserId = e.DataJson.AcceptedByTraderUserId,
                    Q88SharedClientIds = e.DataJson.Q88SharedClientIds,
                    Q88SharedUserIds = e.DataJson.Q88SharedUserIds,
                    Q88AcceptedIds = e.DataJson.Q88AcceptedIds,
                    Q88RejectedIds = e.DataJson.Q88RejectedIds,
                    IsContractLink = e.DataJson.IsContractLink,
                    PurchaseContractIds = e.DataJson.PurchaseContractIds,
                    SalesContractIds = e.DataJson.SalesContractIds,
                    PurchaseQuantitySum = e.DataJson.PurchaseQuantitySum,
                    SalesQuantitySum = e.DataJson.SalesQuantitySum,
                    RemainingContractQuantity = e.DataJson.RemainingContractQuantity
                }).ToList();
            }

            return salesContractsList;
        }
        public string ShareDraftContractToSeller(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            var currencyList = JsonConvert.DeserializeObject<List<CurrencyOutputModel>>(JsonConvert.SerializeObject(GetFormDropdowns("currency", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "ShareDraftContractToSellerTemplate", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId;
                var messageBody = "Please find the purchase contract draft for your next action." + RouteAddress;

                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "ShareDraftContractToSellerTemplate"
                };
                EmailTemplateModel EmailTemplateModel1 = new EmailTemplateModel
                {
                    ClientId = ContractModel.BrokerId,
                    EmailTemplateName = "ShareDraftContractBrokerageToCBTemplate"
                };
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                var currencySymbol = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "priceCurrency")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            currencySymbol = (from currenci in currencyList
                                              where currenci.CurrencyId == new Guid(keyValue.Value)
                                              select currenci).FirstOrDefault().CurrencySymbol;
                        }
                        else
                        {
                            currencySymbol = "";
                        }
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }

                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                var brokerageValue = string.Empty;
                var quantity1 = string.Empty;
                var price1 = string.Empty;
                if (ContractModel.IsSelectPercentage)
                {
                    brokerageValue = "<tr> <td class='o_bg-white o_px-md o_py o_sans o_text o_text-secondary' align='center' style='font-family:Helvetica,Arial,sans-serif;margin-top:0;margin-bottom:0;font-size:16px;line-height:24px;background-color:#fff;color:#424651;padding-left:24px;padding-right:24px'>Brokerage Percentage:</td><td class='o_bg-white o_px-md o_py o_sans o_text o_text-secondary' align='center' style='font-family:Helvetica,Arial,sans-serif;margin-top:0;margin-bottom:0;font-size:16px;line-height:24px;background-color:#fff;color:#424651;padding-left:24px;padding-right:24px'>" + ContractModel.BrokeragePercentage + "</td> </tr> <tr> <td class='o_bg-white o_px-md o_py o_sans o_text o_text-secondary' align='center' style='font-family:Helvetica,Arial,sans-serif;margin-top:0;margin-bottom:0;font-size:16px;line-height:24px;background-color:#fff;color:#424651;padding-left:24px;padding-right:24px;padding-bottom:16px'>Brokerage Amount:</td> <td class='o_bg-white o_px-md o_py o_sans o_text o_text-secondary' align='center' style='font-family:Helvetica,Arial,sans-serif;margin-top:0;margin-bottom:0;font-size:16px;line-height:24px;background-color:#fff;color:#424651;padding-left:24px;padding-right:24px;padding-bottom:16px'>" + currencySymbol + String.Format("{0:#,0.00}", (ContractModel.BrokeragePercentage * Int32.Parse(quantity) * Int32.Parse(price)) / 100) + "</td></tr>";
                }
                else
                {
                    brokerageValue = "<tr><td class='o_bg-white o_px-md o_py o_sans o_text o_text-secondary' align='center' style='font-family: Helvetica, Arial, sans-serif;margin-top: 0px;margin-bottom: 0px;font-size: 16px;line-height: 24px;background-color: #ffffff;color: #424651;padding-left: 24px;padding-right: 24px;'>Brokerage Value:</td> <td class='o_bg-white o_px-md o_py o_sans o_text o_text-secondary' align='center' style='font-family: Helvetica, Arial, sans-serif;margin-top: 0px;margin-bottom: 0px;font-size: 16px;line-height: 24px;background-color: #ffffff;color: #424651;padding-left: 24px;padding-right: 24px;'>" + String.Format("{0:n}", ContractModel.BrokerageValue) + "</td> </tr>";
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity1 = quantity;
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price1 = price;
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var value = Int32.Parse(quantity1) * Int32.Parse(price1);
                var value1 = String.Format("{0:#,0.00}", value);
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var messageBody1 = "Brokerage Confirmation - " + contractName + " " + RouteAddress;
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                if (ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker)
                {
                    var template1 = _clientService.GetAllEmailTemplates(EmailTemplateModel1, loggedInContext, validationMessages).ToList()[0];
                    var html1 = template1.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                        .Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity)
                        .Replace("##PriceAmount##", currencySymbol + price)
                        .Replace("##ContractAmount##", currencySymbol + value1)
                        .Replace("##BrokerageValue##", brokerageValue)
                        .Replace("##SiteUrl##", RouteAddress)
                        .Replace("##siteUrl##", RouteAddress)
                        .Replace("##CompanyLogo##", CompanyLogo);
                    var subject1 = template1.EmailSubject.Replace("##ContractId##", contractName.ToString())
                        .Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity)
                        .Replace("##PriceAmount##", price)
                        .Replace("##MeasurementUnit##", measurementUnit);
                    if (ccEmails[0] != "")
                    {
                        EmailGenericModel emailModel1 = new EmailGenericModel
                        {
                            SmtpServer = smtpDetails?.SmtpServer,
                            SmtpServerPort = smtpDetails?.SmtpServerPort,
                            SmtpMail = smtpDetails?.SmtpMail,
                            SmtpPassword = smtpDetails?.SmtpPassword,
                            ToAddresses = ccEmails,
                            //CCMails = ccEmails[0] == "" ? null : ccEmails,
                            HtmlContent = html1,
                            Subject = subject1,
                            MailAttachments = null,
                            IsPdf = true
                        };
                        _emailService.SendMail(loggedInContext, emailModel1);
                        _emailService.SendSMS(brokerList[0].MobileNo, messageBody1, loggedInContext);
                    }
                }
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", currencySymbol + price)
                    .Replace("##BrokerageValue##", "")
                    .Replace("##ContractAmount##", currencySymbol + value1)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##SiteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", currencySymbol + price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        //CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string ShareDraftContractToBuyer(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            var currencyList = JsonConvert.DeserializeObject<List<CurrencyOutputModel>>(JsonConvert.SerializeObject(GetFormDropdowns("currency", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "ShareDraftContractToBuyerTemplate", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/sales-contract";
                var messageBody = "Please find the sales contract draft for your next action." + RouteAddress;

                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "ShareDraftContractToBuyerTemplate"
                };
                EmailTemplateModel EmailTemplateModel1 = new EmailTemplateModel
                {
                    ClientId = ContractModel.BrokerId,
                    EmailTemplateName = "ShareDraftContractBrokerageToCBTemplate"
                };
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var currencySymbol = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceCurrency")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            currencySymbol = (from currenci in currencyList
                                              where currenci.CurrencyId == new Guid(keyValue.Value)
                                              select currenci).FirstOrDefault().CurrencySymbol;
                        }
                        else
                        {
                            currencySymbol = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                var messageBody1 = "Brokerage Confirmation - " + contractName + " " + RouteAddress;
                var brokerageValue = string.Empty;
                var quantity1 = string.Empty;
                var price1 = string.Empty;
                if (ContractModel.IsSelectPercentage)
                {
                    brokerageValue = "<tr> <td class='o_bg-white o_px-md o_py o_sans o_text o_text-secondary' align='center' style='font-family:Helvetica,Arial,sans-serif;margin-top:0;margin-bottom:0;font-size:16px;line-height:24px;background-color:#fff;color:#424651;padding-left:24px;padding-right:24px'>Brokerage Percentage:</td><td class='o_bg-white o_px-md o_py o_sans o_text o_text-secondary' align='center' style='font-family:Helvetica,Arial,sans-serif;margin-top:0;margin-bottom:0;font-size:16px;line-height:24px;background-color:#fff;color:#424651;padding-left:24px;padding-right:24px'>" + ContractModel.BrokeragePercentage + "</td> </tr> <tr> <td class='o_bg-white o_px-md o_py o_sans o_text o_text-secondary' align='center' style='font-family:Helvetica,Arial,sans-serif;margin-top:0;margin-bottom:0;font-size:16px;line-height:24px;background-color:#fff;color:#424651;padding-left:24px;padding-right:24px;padding-bottom:16px'>Brokerage Amount:</td> <td class='o_bg-white o_px-md o_py o_sans o_text o_text-secondary' align='center' style='font-family:Helvetica,Arial,sans-serif;margin-top:0;margin-bottom:0;font-size:16px;line-height:24px;background-color:#fff;color:#424651;padding-left:24px;padding-right:24px;padding-bottom:16px'>" + currencySymbol + String.Format("{0:#,0.00}", (ContractModel.BrokeragePercentage * Int32.Parse(quantity) * Int32.Parse(price)) / 100) + "</td></tr>";
                }
                else
                {
                    brokerageValue = "<tr><td class='o_bg-white o_px-md o_py o_sans o_text o_text-secondary' align='center' style='font-family: Helvetica, Arial, sans-serif;margin-top: 0px;margin-bottom: 0px;font-size: 16px;line-height: 24px;background-color: #ffffff;color: #424651;padding-left: 24px;padding-right: 24px;'>Brokerage Value:</td> <td class='o_bg-white o_px-md o_py o_sans o_text o_text-secondary' align='center' style='font-family: Helvetica, Arial, sans-serif;margin-top: 0px;margin-bottom: 0px;font-size: 16px;line-height: 24px;background-color: #ffffff;color: #424651;padding-left: 24px;padding-right: 24px;'>" + String.Format("{0:n}", ContractModel.BrokerageValue) + "</td> </tr>";
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity1 = quantity;
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price1 = price;
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var value = Int32.Parse(quantity1) * Int32.Parse(price1);
                var value1 = String.Format("{0:#,0.00}", value);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                if (ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker)
                {
                    var template1 = _clientService.GetAllEmailTemplates(EmailTemplateModel1, loggedInContext, validationMessages).ToList()[0];
                    var html1 = template1.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                        .Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity)
                        .Replace("##PriceAmount##", currencySymbol + price)
                        .Replace("##ContractAmount##", currencySymbol + value1)
                        .Replace("##BrokerageValue##", brokerageValue)
                        .Replace("##SiteUrl##", RouteAddress)
                        .Replace("##siteUrl##", RouteAddress)
                        .Replace("##CompanyLogo##", CompanyLogo);
                    var subject1 = template1.EmailSubject.Replace("##ContractId##", contractName.ToString())
                        .Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity)
                        .Replace("##PriceAmount##", price)
                        .Replace("##MeasurementUnit##", measurementUnit);
                    if (ccEmails[0] != "")
                    {
                        EmailGenericModel emailModel1 = new EmailGenericModel
                        {
                            SmtpServer = smtpDetails?.SmtpServer,
                            SmtpServerPort = smtpDetails?.SmtpServerPort,
                            SmtpMail = smtpDetails?.SmtpMail,
                            SmtpPassword = smtpDetails?.SmtpPassword,
                            ToAddresses = ccEmails,
                            //CCMails = ccEmails[0] == "" ? null : ccEmails,
                            HtmlContent = html1,
                            Subject = subject1,
                            MailAttachments = null,
                            IsPdf = true
                        };
                        _emailService.SendMail(loggedInContext, emailModel1);
                        _emailService.SendSMS(brokerList[0].MobileNo, messageBody1, loggedInContext);
                    }
                }
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", currencySymbol + price)
                    .Replace("##BrokerageValue##", "")
                    .Replace("##ContractAmount##", currencySymbol + value1)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##SiteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", currencySymbol + price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        //CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string DraftSignatureEmailToBuyer(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "DraftSignatureEmailToBuyerTemplate", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/sales-contract/signature";
                var messageBody = "Please find the sales contract for your signatures." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "DraftSignatureEmailToBuyerTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string DraftSignatureEmailToSeller(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "DraftSignatureEmailToBuyerTemplate", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/purchase-contract/signature";
                var messageBody = "Please find the purchase contract draft acceptance from Seller / Commodity Brokers side for your next action on signatures and/ stamping." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "DraftSignatureEmailToSellerTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string DraftSaleContractApproveEmailToSGTrader(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "DraftSaleContractApproveEmailToSGTraderTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/sales-contract";
                var messageBody = "Please find the sales contract draft acceptance from Buyer / Commodity Broker for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "DraftSaleContractApproveEmailToSGTraderTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo)
                    .Replace("##Comments##", ContractModel.DraftAcceptComments);

                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string DraftPurchaseContractApproveEmailToSGTrader(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "DraftPurchaseContractApproveEmailToSGTraderTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId;
                var messageBody = "Please find the purchase contract draft for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "DraftPurchaseContractApproveEmailToSGTraderTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo)
                    .Replace("##Comments##", ContractModel.DraftAcceptComments);

                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string DraftPurchaseContractRejectEmailToSGTrader(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "DraftPurchaseContractRejectEmailToSGTraderTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId;
                var messageBody = "Please find the purchase contract draft rejection from Seller / Commodity Brokers side for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "DraftPurchaseContractRejectEmailToSGTraderTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo)
                    .Replace("##Comments##", ContractModel.DraftRejectComments);

                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string DraftSaleContractRejectEmailToSGTrader(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "DraftSaleContractRejectEmailToSGTraderTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/sales-contract";
                var messageBody = "Please find the sales contract draft rejection from Buyer / Commodity Broker for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "DraftSaleContractRejectEmailToSGTraderTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo)
                    .Replace("##Comments##", ContractModel.DraftRejectComments);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SellerSignatureAcceptEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SellerSignatureAcceptEmailTemplate", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId;
                var messageBody = "Please find the seller signature for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "SellerSignatureAcceptEmailTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##Comments##", ContractModel.SellerSignatureAcceptedComments)
                    .Replace("##PriceAmount##", price)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string BuyerSignatureAcceptEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "BuyerSignatureAcceptEmailTemplate", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/sales-contract";
                var messageBody = "Please find the buyer signature for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "BuyerSignatureAcceptEmailTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##Comments##", ContractModel.SellerSignatureAcceptedComments)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SellerSignatureRejectEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SellerSignatureRejectEmailTemplate", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/purchase-contract/signature";
                var messageBody = "Please find the signature rejection for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "SellerSignatureRejectEmailTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##Comments##", ContractModel.SellerSignatureRejectedComments)
                    .Replace("##PriceAmount##", price)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string BuyerSignatureRejectEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "BuyerSignatureRejectEmailTemplate", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/sales-contract/signature";
                var messageBody = "Please find the signature rejection for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "BuyerSignatureRejectEmailTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##Comments##", ContractModel.SellerSignatureRejectedComments)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SGTraderSignatureEmailForPurchaseContract(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SGTraderSignatureEmailForPurchaseContractTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/purchase-contract/sgSign";
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                var messageBody = "Please find the purchase contract for your signatures." + RouteAddress;
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "SGTraderSignatureEmailForPurchaseContractTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SGTraderSignatureEmailForSellerContract(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SGTraderSignatureEmailForSellerContractTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/sales-contract/sgSign";
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                var messageBody = "Please find the sales contract for your signatures." + RouteAddress;
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "SGTraderSignatureEmailForSellerContractTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SGTraderSignatureAcceptEmailBySeller(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SGTraderSignatureAcceptEmailBySellerTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId;
                var messageBody = "Please find the signature acceptance for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "SGTraderSignatureAcceptEmailBySellerTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##Comments##", ContractModel.SgtraderSignatureAcceptedComments)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SGTraderSignatureAcceptEmailByBuyer(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SGTraderSignatureAcceptEmailByBuyerTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/sales-contract";
                var messageBody = "Please find the signature acceptance for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "SGTraderSignatureAcceptEmailByBuyerTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##Comments##", ContractModel.SgtraderSignatureAcceptedComments)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SGTraderSignatureRejectEmailBySeller(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SGTraderSignatureRejectEmailBySellerTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/purchase-contract/sgSign";
                var messageBody = "Please find the signature rejection for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "SGTraderSignatureRejectEmailBySellerTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##Comments##", ContractModel.SgtraderSignatureRejectedComments)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SGTraderSignatureRejectEmailByBuyer(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SGTraderSignatureRejectEmailByBuyerTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/sales-contract/sgSign";
                var messageBody = "Please find the signature rejection for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "SGTraderSignatureRejectEmailByBuyerTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##Comments##", ContractModel.SgtraderSignatureRejectedComments)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SellerSignatureVerificationMailToSgTrader(ContractModel contractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(contractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel
            {
                ClientId = contractModel.BrokerId
            };
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var companyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SellerSignatureVerificationMailToSgTraderTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && contractModel.BrokerId != null && contractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var routeAddress = siteDomain + "/trading/viewcontract/" + contractModel.DataSetId;
                var messageBody = "Please verify the seller signature for your next action." + routeAddress;
                JObject formField = (JObject)JsonConvert.DeserializeObject(contractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formField)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                {
                    ClientId = contractModel.ClientId,
                    EmailTemplateName = "SellerSignatureVerificationMailToSgTraderTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##SiteUrl##", routeAddress)
                    .Replace("##siteUrl##", routeAddress)
                    .Replace("##CompanyLogo##", companyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string BuyerSignatureVerificationMailToSgTrader(ContractModel contractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(contractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel
            {
                ClientId = contractModel.BrokerId
            };
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var companyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "BuyerSignatureVerificationMailToSgTraderTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && contractModel.BrokerId != null && contractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var routeAddress = siteDomain + "/trading/viewcontract/" + contractModel.DataSetId + "/sales-contract";
                var messageBody = "Please verify the buyer signature for your next action." + routeAddress;
                JObject formField = (JObject)JsonConvert.DeserializeObject(contractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formField)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                {
                    ClientId = contractModel.ClientId,
                    EmailTemplateName = "BuyerSignatureVerificationMailToSgTraderTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##SiteUrl##", routeAddress)
                    .Replace("##siteUrl##", routeAddress)
                    .Replace("##CompanyLogo##", companyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SgTraderSignatureVerificationMailToSeller(ContractModel contractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel
            {
                ClientId = contractModel.ClientId
            };
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = contractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var companyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SgTraderSignatureVerificationMailToSellerTemplate", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && contractModel.BrokerId != null && contractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var routeAddress = siteDomain + "/trading/viewcontract/" + contractModel.DataSetId;
                var messageBody = "Please verify the SgTrader signature for your next action." + routeAddress;
                JObject formField = (JObject)JsonConvert.DeserializeObject(contractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formField)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                {
                    ClientId = contractModel.ClientId,
                    EmailTemplateName = "SgTraderSignatureVerificationMailToSellerTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##SiteUrl##", routeAddress)
                    .Replace("##siteUrl##", routeAddress)
                    .Replace("##CompanyLogo##", companyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SgTraderSignatureVerificationMailToBuyer(ContractModel contractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel
            {
                ClientId = contractModel.ClientId
            };
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = contractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var companyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SgTraderSignatureVerificationMailToBuyerTemplate", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && contractModel.BrokerId != null && contractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var routeAddress = siteDomain + "/trading/viewcontract/" + contractModel.DataSetId + "/sales-contract";
                var messageBody = "Please verify the SgTrader signature for your next action." + routeAddress;
                JObject formField = (JObject)JsonConvert.DeserializeObject(contractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formField)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                {
                    ClientId = contractModel.ClientId,
                    EmailTemplateName = "SgTraderSignatureVerificationMailToBuyerTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##SiteUrl##", routeAddress)
                    .Replace("##siteUrl##", routeAddress)
                    .Replace("##CompanyLogo##", companyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string PurchaseContractSealingEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "PurchaseContractSealingEmailTemplate", "Trading Service"));
            {
                var toEmails = (clientList[0].Email + "\n" + usersList[0].Email).Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId;
                var messageBody = "Please find the contract is sealed and ready for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "PurchaseContractSealingEmailTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var webClient = new WebClient();
                byte[] fileBytes = webClient.DownloadData(ContractModel.ContractPdf);
                Stream stream = new MemoryStream(fileBytes);
                List<StreamWithType> fileStream = new List<StreamWithType>();
                fileStream.Add(new StreamWithType() { FileStream = stream, FileName = (contractName != null && contractName != "") ? contractName : "contract", FileType = ".pdf", IsPdf = true });


                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##SiteUrl##", RouteAddress)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        MailAttachmentsWithFileType = fileStream,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SellerContractSealingEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SellerContractSealingEmailTemplate", "Trading Service"));
            {
                var toEmails = (clientList[0].Email + "\n" + usersList[0].Email).Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/sales-contract";
                var messageBody = "Please find the contract is sealed and ready for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "SellerContractSealingEmailTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "barrels")
                        {
                            measurementUnit = "BBL";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "litres")
                        {
                            measurementUnit = "L";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var webClient = new WebClient();
                byte[] fileBytes = webClient.DownloadData(ContractModel.ContractPdf);
                Stream stream = new MemoryStream(fileBytes);
                List<StreamWithType> fileStream = new List<StreamWithType>();
                fileStream.Add(new StreamWithType() { FileStream = stream, FileName = (contractName != null && contractName != "") ? contractName : "contract", FileType = ".pdf", IsPdf = true });

                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##SiteUrl##", RouteAddress)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo)
                    .Replace("##MeasurementUnit##", measurementUnit);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        MailAttachmentsWithFileType = fileStream,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string ShareInvoiceToContracterEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.BrokerId != null ? ContractModel.BrokerId : ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "ShareInvoiceToContracterEmailTemplate", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewinvoice/" + ContractModel.DataSetId;
                var messageBody = "Please find the invoice for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.ContractData.FormData.ToString());
                JObject formfield1 = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                Dictionary<string, string> keyValueMap1 = new Dictionary<string, string>();
                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> keyValuePair1 in formfield1)
                {
                    keyValueMap1.Add(keyValuePair1.Key, keyValuePair1.Value.ToString());
                }
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var invoiceId = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                foreach (var keyValue1 in keyValueMap1)
                {
                    if (keyValue1.Key == "invoiceId")
                    {
                        invoiceId = keyValue1.Value;
                    }
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "ShareInvoiceToContracterEmailTemplate"
                };
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##InvoiceNo##", invoiceId).Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string ShareCreditOrDebitNoteToContracterEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.BrokerId != null ? ContractModel.BrokerId : ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "ShareInvoiceToContracterEmailTemplate", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewinvoice/" + ContractModel.DataSetId;
                var messageBody = "Please find the invoice for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.ContractData.FormData.ToString());
                JObject formfield1 = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                Dictionary<string, string> keyValueMap1 = new Dictionary<string, string>();
                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> keyValuePair1 in formfield1)
                {
                    keyValueMap1.Add(keyValuePair1.Key, keyValuePair1.Value.ToString());
                }
                var contractName = string.Empty;
                var invoiceId = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                }

                foreach (var keyValue1 in keyValueMap1)
                {
                    if (keyValue1.Key == "invoiceId")
                    {
                        invoiceId = keyValue1.Value;
                    }
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "ShareCreditOrDebitNoteToContracterEmailTemplate"
                };
                var creditOrDebitNote = ContractModel.IsCreditNote == true ? "CreditNote" :
                    ContractModel.IsDebitNote == true ? "DebitNote" : "Invoice";
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##ContractId##", contractName)
                    .Replace("##CreditOrDebitNote##", creditOrDebitNote)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##InvoiceNo##", invoiceId).Replace("##ContractId##", contractName)
                    .Replace("##CreditOrDebitNote##", creditOrDebitNote);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });
                return "";
            }
        }
        public string InvoiceAcceptanceByContracterEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "InvoiceAcceptanceByContracterEmailTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewinvoice/" + ContractModel.DataSetId;
                var messageBody = "Please find the invoice for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.ContractData.FormData.ToString());
                JObject formfield1 = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                Dictionary<string, string> keyValueMap1 = new Dictionary<string, string>();
                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> keyValuePair1 in formfield1)
                {
                    keyValueMap1.Add(keyValuePair1.Key, keyValuePair1.Value.ToString());
                }
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var invoiceId = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                foreach (var keyValue1 in keyValueMap1)
                {
                    if (keyValue1.Key == "invoiceId")
                    {
                        invoiceId = keyValue1.Value;
                    }
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "InvoiceAcceptanceByContracterEmailTemplate"
                };
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public async Task<string> InvoiceAcceptanceBySgtraderEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.BrokerId != null ? ContractModel.BrokerId : ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";

            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "InvoiceAcceptanceBySgtraderEmailTemplate", "Trading Service"));
            {
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.ContractData.FormData.ToString());
                JObject formfield1 = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                Dictionary<string, string> keyValueMap1 = new Dictionary<string, string>();
                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> keyValuePair1 in formfield1)
                {
                    keyValueMap1.Add(keyValuePair1.Key, keyValuePair1.Value.ToString());
                }
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var invoiceId = string.Empty;
                var issueDate = DateTime.UtcNow.ToString("dd-MMM-yyyy");

                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                foreach (var keyValue1 in keyValueMap1)
                {
                    if (keyValue1.Key == "invoiceId")
                    {
                        invoiceId = keyValue1.Value;
                    }
                }

                var webClient = new WebClient();
                byte[] fileBytes = webClient.DownloadData(ContractModel.InvoicePdfUrl);
                Stream stream = new MemoryStream(fileBytes);
                List<StreamWithType> fileStream = new List<StreamWithType>();
                fileStream.Add(new StreamWithType() { FileStream = stream, FileName = (contractName != null && contractName != "") ? contractName : "contract", FileType = ".pdf", IsPdf = true });

                var toEmails = (clientList[0].Email + "\n" + usersList[0].Email).Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewinvoice/" + ContractModel.DataSetId;
                var messageBody = "Please find the invoice for your next action." + RouteAddress;
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "InvoiceAcceptanceBySgtraderEmailTemplate"
                };
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        MailAttachmentsWithFileType = fileStream,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return ContractModel.InvoicePdfUrl;
            }
        }
        public string UploadingInvoicePdfMailToContracter(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.BrokerId != null ? ContractModel.BrokerId : ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UploadInvoicePdfMailToContracter", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewinvoice/" + ContractModel.DataSetId;
                var messageBody = "Invoice is accepted by the SGTrader.Please upload the pdf for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.ContractData.FormData.ToString());
                JObject formfield1 = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                Dictionary<string, string> keyValueMap1 = new Dictionary<string, string>();
                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> keyValuePair1 in formfield1)
                {
                    keyValueMap1.Add(keyValuePair1.Key, keyValuePair1.Value.ToString());
                }
                var contractName = string.Empty;
                var invoiceId = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                }
                foreach (var keyValue1 in keyValueMap1)
                {
                    if (keyValue1.Key == "invoiceId")
                    {
                        invoiceId = keyValue1.Value;
                    }
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "UploadInvoicePdfMailToContracter"
                };
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##ContractId##", contractName)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##InvoiceNo##", invoiceId).Replace("##ContractId##", contractName);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string InvoicePdfMailToSGTrader(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "InvoicePdfMailToSGTrader", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewinvoice/" + ContractModel.DataSetId;
                var messageBody = "Please find out the below pdf for invoice information." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.ContractData.FormData.ToString());
                JObject formfield1 = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                Dictionary<string, string> keyValueMap1 = new Dictionary<string, string>();
                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> keyValuePair1 in formfield1)
                {
                    keyValueMap1.Add(keyValuePair1.Key, keyValuePair1.Value.ToString());
                }
                var contractName = string.Empty;
                var invoiceId = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                }
                foreach (var keyValue1 in keyValueMap1)
                {
                    if (keyValue1.Key == "invoiceId")
                    {
                        invoiceId = keyValue1.Value;
                    }
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "InvoicePdfMailToSGTrader"
                };
                var webClient = new WebClient();
                byte[] fileBytes = webClient.DownloadData(ContractModel.InvoicePdfUrl);
                Stream stream = new MemoryStream(fileBytes);
                List<StreamWithType> fileStream = new List<StreamWithType>();
                fileStream.Add(new StreamWithType() { FileStream = stream, FileName = (contractName != null && contractName != "") ? contractName : "contract", FileType = ".pdf", IsPdf = true });
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##ContractId##", contractName)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##ContractId##", contractName);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        MailAttachmentsWithFileType = fileStream,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });
                ContractModel.InvoiceType = "Payable";
                return "";
            }
        }
        public async Task<string> InvoiceAcceptanceBySgtraderEmailofCB(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            var currencyList = JsonConvert.DeserializeObject<List<CurrencyOutputModel>>(JsonConvert.SerializeObject(GetFormDropdowns("currency", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";

            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "PurchaseContractIds",
                KeyValue = ContractModel.ContractId.ToString(),
                Type = "ListFilter"
            });

            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);

            var vesselContractData = _dataSetService.SearchDataSets(null, null, ContractModel.SearchText, paramsJsonModel, ContractModel.IsArchived,
                                  false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().ToList();
            ContractModel vesselData = new ContractModel();
            if (vesselContractData != null && vesselContractData.Count > 0)
            {
                vesselData = vesselContractData.Select(e => new ContractModel
                {
                    FormData = e.DataJson.FormData,
                }).ToList()[0];
            }
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "InvoiceAcceptanceBySgtraderEmailofCB", "Trading Service"));
            {
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.ContractData.FormData.ToString());
                JObject formfield1 = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                JObject vesselformfield = new JObject();
                if (vesselData.FormData != null)
                {
                    vesselformfield = (JObject)JsonConvert.DeserializeObject(vesselData.FormData.ToString());
                }
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                Dictionary<string, string> keyValueMap1 = new Dictionary<string, string>();
                Dictionary<string, string> vesselKeyValueMap = new Dictionary<string, string>();
                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> keyValuePair1 in formfield1)
                {
                    keyValueMap1.Add(keyValuePair1.Key, keyValuePair1.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> vesselKeyValuePair in vesselformfield)
                {
                    vesselKeyValueMap.Add(vesselKeyValuePair.Key, vesselKeyValuePair.Value.ToString());
                }
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var invoiceId = string.Empty;
                var issueDate = DateTime.UtcNow.ToString("dd-MMM-yyyy");
                var invoiceNumber = string.Empty;
                var portOfLoading = string.Empty;
                var portOfDischarge = string.Empty;
                var paymentTerms = string.Empty;
                var draweesBank = string.Empty;
                var blnoAndDate = string.Empty;
                var contractName = string.Empty;
                var vesselName = string.Empty;
                var currencySymbol = string.Empty;
                var currency = string.Empty;
                var clientAddressLine1 = clientList != null ? clientList[0].AddressLine1 : string.Empty;
                var clientAddressLine2 = clientList != null ? clientList[0].AddressLine2 : string.Empty;
                var clientName = clientList != null ? clientList[0].FirstName + " " + clientList[0].LastName : string.Empty;
                var iecCode = clientList != null ? clientList[0].IECCode : string.Empty;
                var mailId = clientList != null ? clientList[0].Email : string.Empty;
                var iecCodeAndMailIDText = iecCode != null && iecCode != string.Empty ? $"IEC Code - {iecCode} Mail Id - {mailId}" : $"Mail Id - {mailId}";

                foreach (var keyValue1 in vesselKeyValueMap)
                {
                    if (keyValue1.Key == "vesselName")
                    {
                        vesselName = keyValue1.Value;
                    }
                    if (keyValue1.Key == "destinationDischargePort")
                    {
                        portOfDischarge = keyValue1.Value;
                    }
                    if (keyValue1.Key == "portOfLoad")
                    {
                        portOfLoading = keyValue1.Value;
                    }
                }
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "priceCurrency")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            currency = (from currenci in currencyList
                                        where currenci.CurrencyId == new Guid(keyValue.Value)
                                        select currenci).FirstOrDefault().CurrencyCode;
                            currencySymbol = (from currenci in currencyList
                                              where currenci.CurrencyId == new Guid(keyValue.Value)
                                              select currenci).FirstOrDefault().CurrencySymbol;
                        }
                        else
                        {
                            currency = "";
                            currencySymbol = "";
                        }
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                }
                var amount1 = (int.Parse((price == "" ? "0".ToString() : price)) * int.Parse((quantity == "" ? "0".ToString() : quantity)));
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                foreach (var keyValue1 in keyValueMap1)
                {
                    if (keyValue1.Key == "invoiceId")
                    {
                        invoiceId = keyValue1.Value;
                    }
                }

                var html1 = string.Empty;
                EmailTemplateModel EmailTemplateModel1 = new EmailTemplateModel
                {
                    ClientId = ContractModel.BrokerId,
                    EmailTemplateName = "InvoiceAcceptanceBySgtraderEmailTemplateofCBInvoice"
                };

                var template1 = _clientService.GetAllEmailTemplates(EmailTemplateModel1, loggedInContext, validationMessages).ToList();
                html1 = template1[0].EmailTemplate;
                var amountInWords = NumberToWords(amount1);
                invoiceNumber = invoiceId;
                html1 = html1.Replace("##InvoiceNumber##", invoiceNumber)
                    .Replace("##IssueDate##", issueDate)
                    .Replace("##AmountinWords##", "( " + currency + currencySymbol + " " + amountInWords + "Only )")
                    .Replace("##ClientName##", clientName)
                    .Replace("##ClientAddressLine1##", clientAddressLine1)
                    .Replace("##ClientAddressLine2##", clientAddressLine2)
                    .Replace("##IECCodeAndMailIdText##", iecCodeAndMailIDText)
                    .Replace("##PortLoad##", portOfLoading)
                    .Replace("##PortDischarge##", portOfDischarge)
                    .Replace("##BLNoAndDate##", blnoAndDate)
                    .Replace("##PaymentTerms##", paymentTerms)
                    .Replace("##Currency##", currency)
                    .Replace("##CurrencySymbol##", currencySymbol)
                    .Replace("##VesselName##", vesselName)
                    .Replace("##DraweesBank##", draweesBank)
                    .Replace("##CommodityName##", commodity)
                    .Replace("##Quantity##", quantity)
                    .Replace("##UnitPrice##", price)
                    .Replace("##Amount##", (String.Format("{0:n}", amount1)));

                var companySettingsSearchInputModel = new CompanySettingsSearchInputModel();
                companySettingsSearchInputModel.CompanyId = loggedInContext.CompanyGuid;
                companySettingsSearchInputModel.IsSystemApp = null;
                string storageAccountName = string.Empty;

                var PdfOutput = await _chromiumService.GenerateExecutionPdf(html1, null, invoiceNumber).ConfigureAwait(false);

                List<CompanySettingsSearchOutputModel> companySettings = _masterDataManagementRepository.GetCompanySettings(companySettingsSearchInputModel, loggedInContext, validationMessages).ToList();
                if (companySettings.Count > 0)
                {
                    var storageAccountDetails = companySettings.Where(x => x.Key == "StorageAccountName").FirstOrDefault();
                    storageAccountName = storageAccountDetails?.Value;
                }
                CompanyOutputModel companyModel = _companyStructureService.GetCompanyById(loggedInContext.CompanyGuid, loggedInContext, validationMessages);

                var directory = SetupCompanyFileContainer(companyModel, 6, loggedInContext.LoggedInUserId, storageAccountName);

                var ContractFileName = invoiceNumber;

                var fileExtension = ".pdf";

                var ContractConvertedFileName = ContractFileName + fileExtension;

                CloudBlockBlob ContractConvertedBlockBlob = directory.GetBlockBlobReference(ContractConvertedFileName);

                ContractConvertedBlockBlob.Properties.CacheControl = "public, max-age=2592000";

                ContractConvertedBlockBlob.Properties.ContentType = "application/pdf";

                Byte[] ContractBytes = PdfOutput.ByteStream;

                ContractConvertedBlockBlob.UploadFromByteArray(ContractBytes, 0, ContractBytes.Length);

                ContractModel.InvoicePdfUrl = ContractConvertedBlockBlob.Uri.AbsoluteUri;
                var webClient = new WebClient();
                byte[] fileBytes = webClient.DownloadData(ContractModel.InvoicePdfUrl);
                Stream stream = new MemoryStream(fileBytes);
                List<StreamWithType> fileStream = new List<StreamWithType>();
                fileStream.Add(new StreamWithType() { FileStream = stream, FileName = (contractName != null && contractName != "") ? contractName : "contract", FileType = ".pdf", IsPdf = true });

                var toEmails = (clientList[0].Email + "\n" + usersList[0].Email).Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewinvoice/" + ContractModel.DataSetId;
                var messageBody = "Please find the invoice for your next action." + RouteAddress;
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "InvoiceAcceptanceBySgtraderEmailTemplate"
                };
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, (HttpContext.Current != null ? HttpContext.Current.Request.Url.Authority : null));
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        MailAttachmentsWithFileType = fileStream,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });
                ContractModel.InvoiceType = "Recievables";
                return ContractModel.InvoicePdfUrl;
            }
        }
        public async Task<string> InvoiceAcceptanceBySgtraderEmailofCreditNote(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";

            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "PurchaseContractIds",
                KeyValue = ContractModel.ContractId.ToString(),
                Type = "ListFilter"
            });

            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);

            var vesselContractData = _dataSetService.SearchDataSets(null, null, ContractModel.SearchText, paramsJsonModel, ContractModel.IsArchived,
                                  false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().ToList();
            ContractModel vesselData = new ContractModel();
            if (vesselContractData != null && vesselContractData.Count > 0)
            {
                vesselData = vesselContractData.Select(e => new ContractModel
                {
                    FormData = e.DataJson.FormData,
                }).ToList()[0];
            }
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "InvoiceAcceptanceBySgtraderEmailofCreditNote", "Trading Service"));
            {
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.ContractData.FormData.ToString());
                JObject formfield1 = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                JObject vesselformfield = new JObject();
                if (vesselData.FormData != null)
                {
                    vesselformfield = (JObject)JsonConvert.DeserializeObject(vesselData.FormData.ToString());
                }
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                Dictionary<string, string> keyValueMap1 = new Dictionary<string, string>();
                Dictionary<string, string> vesselKeyValueMap = new Dictionary<string, string>();
                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> keyValuePair1 in formfield1)
                {
                    keyValueMap1.Add(keyValuePair1.Key, keyValuePair1.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> vesselKeyValuePair in vesselformfield)
                {
                    vesselKeyValueMap.Add(vesselKeyValuePair.Key, vesselKeyValuePair.Value.ToString());
                }
                var contractName = string.Empty;
                var contractDate = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var currentPrice = ContractModel.CurrentPrice;
                var pricediff = string.Empty;
                var currency = string.Empty;
                var invoiceId = string.Empty;
                var issueDate = DateTime.UtcNow.ToString("dd-MMM-yyyy");
                var invoiceNumber = string.Empty;
                var portOfLoading = string.Empty;
                var portOfDischarge = string.Empty;
                var paymentTerms = string.Empty;
                var unitPrice = string.Empty;
                var clientAddressLine1 = clientList[0].AddressLine1;
                var clientAddressLine2 = clientList[0].AddressLine2;
                var clientName = clientList[0].FirstName + " " + clientList[0].LastName;
                var clientEmail = clientList[0].Email;
                var clientBankDetails = clientList[0].PanNumber;

                foreach (var keyValue1 in vesselKeyValueMap)
                {
                    if (keyValue1.Key == "destinationDischargePort")
                    {
                        portOfDischarge = keyValue1.Value;
                    }
                    if (keyValue1.Key == "portOfLoad")
                    {
                        portOfLoading = keyValue1.Value;
                    }
                }
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "currency")
                    {
                        currency = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                }
                pricediff = String.Format("{0:n}", ((Int32.Parse((quantity != null && quantity != string.Empty) ? quantity : "0") * Int32.Parse((price != null && price != string.Empty) ? price : "0")) - (Int32.Parse((quantity != null && quantity != string.Empty) ? quantity : "0") * currentPrice)));
                var amount = String.Format("{0:n}", ((Int32.Parse((quantity != null && quantity != string.Empty) ? quantity : "0") * Int32.Parse((price != null && price != string.Empty) ? price : "0"))));
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                foreach (var keyValue1 in keyValueMap1)
                {
                    if (keyValue1.Key == "invoiceId")
                    {
                        invoiceId = keyValue1.Value;
                    }
                }

                var html1 = string.Empty;

                EmailTemplateModel EmailTemplateModel1 = new EmailTemplateModel
                {
                    ClientId = ContractModel.BrokerId,
                    EmailTemplateName = "InvoiceAcceptanceBySgtraderEmailTemplateofCreditNote"
                };

                var template1 = _clientService.GetAllEmailTemplates(EmailTemplateModel1, loggedInContext, validationMessages).ToList()[0];
                html1 = template1.EmailTemplate;

                invoiceNumber = invoiceId;
                html1 = html1.Replace("##InvoiceNumber##", invoiceNumber)
                    .Replace("##IssueDate##", issueDate)
                    .Replace("##ClientName##", clientName)
                    .Replace("##ClientAddressLine1##", clientAddressLine1)
                    .Replace("##ClientAddressLine2##", clientAddressLine2)
                    .Replace("##ClientEmail##", clientEmail)
                    .Replace("##ClientBankDetails##", clientBankDetails)
                    .Replace("##ContractDate##", contractDate)
                    .Replace("##ContractNo##", contractName)
                    .Replace("##PortLoad##", portOfLoading)
                    .Replace("##PortDischarge##", portOfDischarge)
                    .Replace("##PaymentTerms##", paymentTerms)
                    .Replace("##CommodityName##", commodity)
                    .Replace("##Quantity##", quantity)
                    .Replace("##UnitPrice##", unitPrice)
                    .Replace("##CurrentPrice##", currentPrice.ToString())
                    .Replace("##PriceDifferential##", pricediff)
                    .Replace("##Total##", amount)
                    .Replace("##Currency##", currency)
                    .Replace("##Amount##", amount);

                var companySettingsSearchInputModel = new CompanySettingsSearchInputModel();
                companySettingsSearchInputModel.CompanyId = loggedInContext.CompanyGuid;
                companySettingsSearchInputModel.IsSystemApp = null;
                string storageAccountName = string.Empty;

                var PdfOutput = await _chromiumService.GenerateExecutionPdf(html1, null, invoiceNumber).ConfigureAwait(false);

                List<CompanySettingsSearchOutputModel> companySettings = _masterDataManagementRepository.GetCompanySettings(companySettingsSearchInputModel, loggedInContext, validationMessages).ToList();
                if (companySettings.Count > 0)
                {
                    var storageAccountDetails = companySettings.Where(x => x.Key == "StorageAccountName").FirstOrDefault();
                    storageAccountName = storageAccountDetails?.Value;
                }
                CompanyOutputModel companyModel = _companyStructureService.GetCompanyById(loggedInContext.CompanyGuid, loggedInContext, validationMessages);

                var directory = SetupCompanyFileContainer(companyModel, 6, loggedInContext.LoggedInUserId, storageAccountName);

                var ContractFileName = invoiceNumber;

                var fileExtension = ".pdf";

                var ContractConvertedFileName = ContractFileName + fileExtension;

                CloudBlockBlob ContractConvertedBlockBlob = directory.GetBlockBlobReference(ContractConvertedFileName);

                ContractConvertedBlockBlob.Properties.CacheControl = "public, max-age=2592000";

                ContractConvertedBlockBlob.Properties.ContentType = "application/pdf";

                Byte[] ContractBytes = PdfOutput.ByteStream;

                ContractConvertedBlockBlob.UploadFromByteArray(ContractBytes, 0, ContractBytes.Length);

                ContractModel.InvoicePdfUrl = ContractConvertedBlockBlob.Uri.AbsoluteUri;
                var webClient = new WebClient();
                byte[] fileBytes = webClient.DownloadData(ContractModel.InvoicePdfUrl);
                Stream stream = new MemoryStream(fileBytes);
                List<StreamWithType> fileStream = new List<StreamWithType>();
                fileStream.Add(new StreamWithType() { FileStream = stream, FileName = (contractName != null && contractName != "") ? contractName : "contract", FileType = ".pdf", IsPdf = true });

                var toEmails = (clientList[0].Email + "\n" + usersList[0].Email).Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewinvoice/" + ContractModel.DataSetId;
                var messageBody = "Please find the invoice for your next action." + RouteAddress;
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "InvoiceAcceptanceBySgtraderEmailTemplate"
                };
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, (HttpContext.Current != null ? HttpContext.Current.Request.Url.Authority : null));
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        MailAttachmentsWithFileType = fileStream,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return ContractModel.InvoicePdfUrl;
            }
        }
        public async Task<string> InvoiceAcceptanceBySgtraderEmailofDebitNote(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";

            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "PurchaseContractIds",
                KeyValue = ContractModel.ContractId.ToString(),
                Type = "ListFilter"
            });

            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);

            var vesselContractData = _dataSetService.SearchDataSets(null, null, ContractModel.SearchText, paramsJsonModel, ContractModel.IsArchived,
                                  false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().ToList();
            ContractModel vesselData = new ContractModel();
            if (vesselContractData != null && vesselContractData.Count > 0)
            {
                vesselData = vesselContractData.Select(e => new ContractModel
                {
                    FormData = e.DataJson.FormData,
                }).ToList()[0];
            }
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "InvoiceAcceptanceBySgtraderEmailofDebitNote", "Trading Service"));
            {
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.ContractData.FormData.ToString());
                JObject formfield1 = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                JObject vesselformfield = new JObject();
                if (vesselData.FormData != null)
                {
                    vesselformfield = (JObject)JsonConvert.DeserializeObject(vesselData.FormData.ToString());
                }
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                Dictionary<string, string> keyValueMap1 = new Dictionary<string, string>();
                Dictionary<string, string> vesselKeyValueMap = new Dictionary<string, string>();
                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> keyValuePair1 in formfield1)
                {
                    keyValueMap1.Add(keyValuePair1.Key, keyValuePair1.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> vesselKeyValuePair in vesselformfield)
                {
                    vesselKeyValueMap.Add(vesselKeyValuePair.Key, vesselKeyValuePair.Value.ToString());
                }
                var contractName = string.Empty;
                var contractDate = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var currentPrice = ContractModel.CurrentPrice;
                var pricediff = string.Empty;
                var currency = string.Empty;
                var invoiceId = string.Empty;
                var issueDate = DateTime.UtcNow.ToString("dd-MMM-yyyy");
                var invoiceNumber = string.Empty;
                var portOfLoading = string.Empty;
                var portOfDischarge = string.Empty;
                var paymentTerms = string.Empty;
                var unitPrice = string.Empty;
                var clientAddressLine1 = clientList[0].AddressLine1;
                var clientAddressLine2 = clientList[0].AddressLine2;
                var clientName = clientList[0].FirstName + " " + clientList[0].LastName;
                var clientEmail = clientList[0].Email;
                var clientBankDetails = clientList[0].PanNumber;

                foreach (var keyValue1 in vesselKeyValueMap)
                {
                    if (keyValue1.Key == "destinationDischargePort")
                    {
                        portOfDischarge = keyValue1.Value;
                    }
                    if (keyValue1.Key == "portOfLoad")
                    {
                        portOfLoading = keyValue1.Value;
                    }
                }
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "currency")
                    {
                        currency = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                }
                pricediff = String.Format("{0:n}", ((Int32.Parse((quantity != null && quantity != string.Empty) ? quantity : "0") * Int32.Parse((price != null && price != string.Empty) ? price : "0")) - (Int32.Parse((quantity != null && quantity != string.Empty) ? quantity : "0") * currentPrice)));
                var amount = String.Format("{0:n}", ((Int32.Parse((quantity != null && quantity != string.Empty) ? quantity : "0") * Int32.Parse((price != null && price != string.Empty) ? price : "0"))));
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                foreach (var keyValue1 in keyValueMap1)
                {
                    if (keyValue1.Key == "invoiceId")
                    {
                        invoiceId = keyValue1.Value;
                    }
                }

                var html1 = string.Empty;

                EmailTemplateModel EmailTemplateModel1 = new EmailTemplateModel
                {
                    ClientId = ContractModel.BrokerId,
                    EmailTemplateName = "InvoiceAcceptanceBySgtraderEmailTemplateofCreditNote"
                };

                var template1 = _clientService.GetAllEmailTemplates(EmailTemplateModel1, loggedInContext, validationMessages).ToList()[0];
                html1 = template1.EmailTemplate;

                invoiceNumber = invoiceId;
                html1 = html1.Replace("##InvoiceNumber##", invoiceNumber)
                    .Replace("##IssueDate##", issueDate)
                    .Replace("##ClientName##", clientName)
                    .Replace("##ClientAddressLine1##", clientAddressLine1)
                    .Replace("##ClientAddressLine2##", clientAddressLine2)
                    .Replace("##ClientEmail##", clientEmail)
                    .Replace("##ClientBankDetails##", clientBankDetails)
                    .Replace("##ContractDate##", contractDate)
                    .Replace("##ContractNo##", contractName)
                    .Replace("##PortLoad##", portOfLoading)
                    .Replace("##PortDischarge##", portOfDischarge)
                    .Replace("##PaymentTerms##", paymentTerms)
                    .Replace("##CommodityName##", commodity)
                    .Replace("##Quantity##", quantity)
                    .Replace("##UnitPrice##", price)
                    .Replace("##CurrentPrice##", currentPrice.ToString())
                    .Replace("##PriceDifferential##", pricediff)
                    .Replace("##Total##", amount)
                    .Replace("##Currency##", currency)
                    .Replace("##Amount##", amount);

                var companySettingsSearchInputModel = new CompanySettingsSearchInputModel();
                companySettingsSearchInputModel.CompanyId = loggedInContext.CompanyGuid;
                companySettingsSearchInputModel.IsSystemApp = null;
                string storageAccountName = string.Empty;

                var PdfOutput = await _chromiumService.GenerateExecutionPdf(html1, null, invoiceNumber).ConfigureAwait(false);

                List<CompanySettingsSearchOutputModel> companySettings = _masterDataManagementRepository.GetCompanySettings(companySettingsSearchInputModel, loggedInContext, validationMessages).ToList();
                if (companySettings.Count > 0)
                {
                    var storageAccountDetails = companySettings.Where(x => x.Key == "StorageAccountName").FirstOrDefault();
                    storageAccountName = storageAccountDetails?.Value;
                }
                CompanyOutputModel companyModel = _companyStructureService.GetCompanyById(loggedInContext.CompanyGuid, loggedInContext, validationMessages);

                var directory = SetupCompanyFileContainer(companyModel, 6, loggedInContext.LoggedInUserId, storageAccountName);

                var ContractFileName = invoiceNumber;

                var fileExtension = ".pdf";

                var ContractConvertedFileName = ContractFileName + fileExtension;

                CloudBlockBlob ContractConvertedBlockBlob = directory.GetBlockBlobReference(ContractConvertedFileName);

                ContractConvertedBlockBlob.Properties.CacheControl = "public, max-age=2592000";

                ContractConvertedBlockBlob.Properties.ContentType = "application/pdf";

                Byte[] ContractBytes = PdfOutput.ByteStream;

                ContractConvertedBlockBlob.UploadFromByteArray(ContractBytes, 0, ContractBytes.Length);

                ContractModel.InvoicePdfUrl = ContractConvertedBlockBlob.Uri.AbsoluteUri;
                var webClient = new WebClient();
                byte[] fileBytes = webClient.DownloadData(ContractModel.InvoicePdfUrl);
                Stream stream = new MemoryStream(fileBytes);
                List<StreamWithType> fileStream = new List<StreamWithType>();
                fileStream.Add(new StreamWithType() { FileStream = stream, FileName = (contractName != null && contractName != "") ? contractName : "contract", FileType = ".pdf", IsPdf = true });

                var toEmails = (clientList[0].Email + "\n" + usersList[0].Email).Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewinvoice/" + ContractModel.DataSetId;
                var messageBody = "Please find the invoice for your next action." + RouteAddress;
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "InvoiceAcceptanceBySgtraderEmailTemplate"
                };
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, (HttpContext.Current != null ? HttpContext.Current.Request.Url.Authority : null));
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        MailAttachmentsWithFileType = fileStream,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return ContractModel.InvoicePdfUrl;
            }
        }
        public string InvoiceRejectanceByContracterEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "InvoiceRejectanceByContracterEmailTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewinvoice/" + ContractModel.DataSetId;
                var messageBody = "Please find the invoice for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.ContractData.FormData.ToString());
                JObject formfield1 = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                Dictionary<string, string> keyValueMap1 = new Dictionary<string, string>();
                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> keyValuePair1 in formfield1)
                {
                    keyValueMap1.Add(keyValuePair1.Key, keyValuePair1.Value.ToString());
                }
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var invoiceId = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                foreach (var keyValue1 in keyValueMap1)
                {
                    if (keyValue1.Key == "invoiceId")
                    {
                        invoiceId = keyValue1.Value;
                    }
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "InvoiceRejectanceByContracterEmailTemplate"
                };
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##Comments##", ContractModel.ContracterInvoiceRejectedComments)
                    .Replace("##PriceAmount##", price)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string InvoiceAcceptenceMailToContracter(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.BrokerId != null ? ContractModel.BrokerId : ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "InviceConformationMailToSGTrader", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewinvoice/" + ContractModel.DataSetId;
                var messageBody = "Please find the invoice for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.ContractData.FormData.ToString());
                JObject formfield1 = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                Dictionary<string, string> keyValueMap1 = new Dictionary<string, string>();
                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> keyValuePair1 in formfield1)
                {
                    keyValueMap1.Add(keyValuePair1.Key, keyValuePair1.Value.ToString());
                }
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var invoiceId = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                foreach (var keyValue1 in keyValueMap1)
                {
                    if (keyValue1.Key == "invoiceId")
                    {
                        invoiceId = keyValue1.Value;
                    }
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "InviceAcceptenceMailToSGTrader"
                };
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##ContractId##", contractName)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##ContractId##", contractName);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string InvoiceRejectanceBySgtraderEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.BrokerId != null ? ContractModel.BrokerId : ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "InvoiceRejectanceBySgtraderEmailTemplate", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewinvoice/" + ContractModel.DataSetId;
                var messageBody = "Please find the invoice for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.ContractData.FormData.ToString());
                JObject formfield1 = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                Dictionary<string, string> keyValueMap1 = new Dictionary<string, string>();
                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                foreach (KeyValuePair<string, JToken> keyValuePair1 in formfield1)
                {
                    keyValueMap1.Add(keyValuePair1.Key, keyValuePair1.Value.ToString());
                }
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var invoiceId = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                foreach (var keyValue1 in keyValueMap1)
                {
                    if (keyValue1.Key == "invoiceId")
                    {
                        invoiceId = keyValue1.Value;
                    }
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "InvoiceRejectanceBySgtraderEmailTemplate"
                };
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##Comments##", ContractModel.SgtraderInvoiceRejectedComments)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##InvoiceNo##", invoiceId)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SwitchBlContractAcceptOrRejectMailToBuyer(Guid? clientId, Guid? saleContractId, Guid? dataSetId
            , LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel
            {
                ClientId = clientId
            };
            ContractModel searchSaleContractModel = new ContractModel
            {
                DataSetId = saleContractId
            };
            var saleContractData = GetContracts(searchSaleContractModel, loggedInContext, validationMessages).FirstOrDefault();
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var companyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SwitchBlContractAcceptOrRejectMailToBuyerTemplate", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var routeAddress = siteDomain + "/trading/switch-bl-decision/" + dataSetId + '/' + clientId + '/' + saleContractId;

                EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                {
                    ClientId = clientId,
                    EmailTemplateName = "SwitchBlContractAcceptOrRejectMailToBuyerTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                var counterPartyName = clientList[0].FullName;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(saleContractData.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }

                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var messageBody = "Please accept/reject the switchbl for your next action.";
                var template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##siteUrl##", routeAddress)
                    .Replace("##CompanyLogo##", companyLogo)
                    .Replace("##MeasurementUnit##", measurementUnit)
                    .Replace("##CounterPartyName##", counterPartyName);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SwitchBlBuyerAcceptenceMailToSgTrader(SwitchBlContractModel switchBlContractModel, SwitchBlDetailsModel switchBlDetailsModel,
            bool? isVesselOwnerAccepted, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            var clientId = isVesselOwnerAccepted == true ? switchBlContractModel.VesselOwnerId : switchBlDetailsModel.ClientId;
            ClientInputModel clientInputModel = new ClientInputModel
            {
                ClientId = clientId
            };
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            ContractModel searchSaleContractModel = new ContractModel
            {
                DataSetId = switchBlDetailsModel.SaleContractId
            };
            var saleContractData = GetContracts(searchSaleContractModel, loggedInContext, validationMessages).FirstOrDefault();
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(switchBlContractModel.CreatedByUserId, loggedInContext, validationMessages);
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var companyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SwitchBlBuyerAcceptenceMailToSgTrader", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                //var ccEmails = brokerList != null && switchBlDetailsModel.BrokerId != null && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var routeAddress = siteDomain + "/trading/switch-bl/" + switchBlContractModel.VesselId;
                var messageBody = "Please find the buyer accepted swichbl for your next action." + routeAddress;

                EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                {
                    ClientId = clientId,
                    EmailTemplateName = "SwitchBlBuyerAcceptenceMailToSgTraderTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                var counterPartyName = usersList[0].FullName;
                var acceptComment = string.Empty;
                //if (switchBlContractModel.VesselOwnerAcceptComment != null && switchBlContractModel.BuyerAcceptComment != null)
                    acceptComment = isVesselOwnerAccepted == true ? switchBlContractModel.VesselOwnerAcceptComment : switchBlContractModel.BuyerAcceptComment;
                var buyerName = clientList != null ? clientList[0].FullName : string.Empty;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(saleContractData.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }

                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##siteUrl##", routeAddress)
                    .Replace("##CompanyLogo##", companyLogo)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##MeasurementUnit##", measurementUnit)
                    .Replace("##CounterPartyName##", counterPartyName)
                    .Replace("##Comments##", acceptComment)
                    .Replace("##BuyerName##", buyerName);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName)
                    .Replace("##PriceAmount##", price)
                    .Replace("##BuyerName##", buyerName);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SwitchBlBuyerRejectionMailToSgTrader(SwitchBlContractModel switchBlContractModel, SwitchBlDetailsModel switchBlDetailsModel,
            bool? isVesselOwnerRejected, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            var clientId = isVesselOwnerRejected == true ? switchBlContractModel.VesselOwnerId : switchBlDetailsModel.ClientId;
            ClientInputModel clientInputModel = new ClientInputModel
            {
                ClientId = clientId
            };
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            ContractModel searchSaleContractModel = new ContractModel
            {
                DataSetId = switchBlContractModel.SwitchBlDetails[0].SaleContractId
            };
            var saleContractData = GetContracts(searchSaleContractModel, loggedInContext, validationMessages).FirstOrDefault();
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(switchBlContractModel.CreatedByUserId, loggedInContext, validationMessages);
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var companyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SwitchBlBuyerRejectionMailToSgTrader", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var routeAddress = siteDomain + "/trading/switch-bl/" + switchBlContractModel.VesselId;
                var messageBody = "Please find the buyer rejected swichbl for your next action." + routeAddress;

                EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                {
                    ClientId = clientId,
                    EmailTemplateName = "SwitchBlBuyerRejectionMailToSgTraderTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                var counterPartyName = usersList[0].FullName;
                var rejectComment = string.Empty;
                //if (switchBlContractModel.VesselOwnerRejectComment != null || switchBlContractModel.BuyerRejectComment != null)
                    rejectComment = isVesselOwnerRejected == true ? switchBlContractModel.VesselOwnerRejectComment : switchBlContractModel.BuyerRejectComment;
                var buyerName = clientList != null ? clientList[0].FullName : string.Empty;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(saleContractData.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }

                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##siteUrl##", routeAddress)
                    .Replace("##CompanyLogo##", companyLogo)
                    .Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##MeasurementUnit##", measurementUnit)
                    .Replace("##CounterPartyName##", counterPartyName)
                    .Replace("##Comments##", rejectComment)
                    .Replace("##Comment##", rejectComment)
                    .Replace("##BuyerName##", buyerName);
                var subject = template.EmailSubject.Replace("##PriceAmount##", price)
                    .Replace("##BuyerName##", buyerName);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SwitchBlContractAcceptOrRejectMailToVesselOwner(SwitchBlContractModel switchBlContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel
            {
                ClientId = switchBlContractModel.VesselOwnerId
            };
            ContractModel searchVesselContractModel = new ContractModel
            {
                DataSetId = switchBlContractModel.VesselId
            };
            var vesselContractData = GetContracts(searchVesselContractModel, loggedInContext, validationMessages).FirstOrDefault();
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));

            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var companyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SwitchBlContractMailToVesselOwner", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var routeAddress = siteDomain + "/trading/vessel-owner/switch-bl-decision/" + switchBlContractModel.DataSetId + '/' + switchBlContractModel.SelectedClientId + '/' + switchBlContractModel.DataSourceId;

                EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                {
                    ClientId = switchBlContractModel.VesselOwnerId,
                    EmailTemplateName = "SwitchBlContractMailToVesselOwnerTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                var counterPartyName = clientList[0].FullName;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(vesselContractData.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }

                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var messageBody = "Please accept/reject the switchbl for your next action." + routeAddress;
                var template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##MeasurementUnit##", measurementUnit)
                    .Replace("##CounterPartyName##", counterPartyName)
                    .Replace("##siteUrl##", routeAddress)
                    .Replace("##CompanyLogo##", companyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName)
                    .Replace("##Quantity##", quantity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }
        public string SGTraderCancelContractEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SGTraderContractCancelEmailTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId;
                if (ContractModel.ContractType == "Sale")
                {
                    RouteAddress = RouteAddress + "/sales-contract";
                }
                else if(ContractModel.ContractType == "Vessel")
                {
                    RouteAddress = siteDomain + "/trading/view-vesselcontract/" + ContractModel.DataSetId;
                }
                var messageBody = "Contract cancelled" + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "SGTraderContractCancelEmailTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##Comments##", ContractModel.CancelComments)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo)
                    .Replace("##MeasurementUnit##", measurementUnit);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }

        public string SGTraderCancelSalesContractEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SGTraderContractCancelEmailTemplate", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && ContractModel.IsSelectCommodityBroker && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/viewcontract/" + ContractModel.DataSetId + "/sales-contract";
                var messageBody = "Contract cancelled" + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "SGTraderContractCancelEmailTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quanityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int32.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##Comments##", ContractModel.CancelComments)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo)
                    .Replace("##MeasurementUnit##", measurementUnit);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }

        public string ShareDraftContractToShipBrokerOrVesselOwner(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "ShareDraftContractToShipBrokerOrVesselOwner", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var toCCMails = brokerList != null && ContractModel.BrokerId != null && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');

                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/view-vesselcontract/" + ContractModel.DataSetId;
                var messageBody = "Please find the vessel contract draft for your next action." + RouteAddress;

                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "RFQToVesselContractDraftTemplate"
                };
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var rfqId = "RFQ-" + ContractModel.RFQId;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    //if (keyValue.Key == "priceAmount")
                    //{
                    //    price = keyValue.Value;
                    //}
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int64.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int64.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity).Replace("##Commodity##", commodity).Replace("##siteUrl##", RouteAddress)
                    .Replace("##RFQId##", rfqId.ToString()).Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString());
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ContractModel.BrokerId != null ? toCCMails : null,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                    if (ContractModel.BrokerId != null && brokerList != null)
                    {
                        var brokerMobileNo = brokerList[0].CountryCode + brokerList[0].MobileNo;
                        _emailService.SendSMS(brokerMobileNo, messageBody, loggedInContext);
                    }
                });

                return "";
            }
        }

        public string DraftSignatureEmailToShipBrokerorVesselOwner(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "DraftSignatureEmailToShipBrokerorVesselOwner", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/view-vesselcontract/" + ContractModel.DataSetId + "/signature";
                var messageBody = "Please find the vessel contract draft acceptance from Ship Broker / Vessel Owner side for your next action on signatures and/ stamping." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "DraftVesselContractSignatureAcceptanceForShipBrokerorVesselOwnerTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int64.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int64.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity).Replace("##Comments##", ContractModel.DraftAcceptComments)
                    .Replace("##Commodity##", commodity)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);

                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString()).Replace("##Quantity##", quantity).Replace("##Commodity##", commodity);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                    if (ContractModel.BrokerId != null && brokerList != null)
                    {
                        var brokerMobileNo = brokerList[0].CountryCode + brokerList[0].MobileNo;
                        _emailService.SendSMS(brokerMobileNo, messageBody, loggedInContext);
                    }
                });

                return "";
            }
        }

        public string DraftVesselContractSignatureEmailToSGTrader(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);

            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);

            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "DraftVesselContractSignatureEmailToSGTrader", "Trading Service"));
            {
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/view-vesselcontract/" + ContractModel.DataSetId + "/sgSign";
                var messageBody = "Please find the vessel contract draft acceptance from SGTrader side for your next action on signatures and/ stamping." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "DraftVesselContractSignatureAcceptanceForSGTraderTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int64.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int64.Parse(price));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("Comment: ##Comments##", "")
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);

                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString()).Replace("##Quantity##", quantity).Replace("##Commodity##", commodity);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = null,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }

        public string DraftVesselContractApproveOrRejectEmailToSGTrader(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages, string type)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;

            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "DraftVesselContractApproveOrRejectEmailToSGTrader", "Trading Service"));
            {
                EmailTemplateModel template = new EmailTemplateModel();
                string html = string.Empty;
                string subject = string.Empty;
                var toEmails = usersList[0].Email.Trim().Split('\n');
                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/view-vesselcontract/" + ContractModel.DataSetId;
                var messageBody = string.Empty;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }

                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int64.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int64.Parse(price));
                }

                if (type == "accept")
                {
                    EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = ContractModel.ClientId,
                        EmailTemplateName = "DraftVesselContractAcceptedTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity).Replace("##Commodity##", commodity).Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo).Replace("##Comments##", ContractModel.DraftAcceptComments).Replace("##Comment##", ContractModel.DraftAcceptComments); ;
                    subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString()).Replace("##Quantity##", quantity).Replace("##Commodity##", commodity);
                    messageBody = "Please find the vessel contract draft acceptance from Ship Broker / Vessel Owner for your next action." + RouteAddress;
                }
                else if (type == "reject")
                {
                    EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = ContractModel.ClientId,
                        EmailTemplateName = "DraftVesselContractRejectTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity).Replace("##Commodity##", commodity).Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo).Replace("##Comments##", ContractModel.DraftRejectComments).Replace("##Comment##", ContractModel.DraftRejectComments);
                    subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString()).Replace("##Quantity##", quantity).Replace("##Commodity##", commodity);
                    messageBody = "Please find the vessel contract draft rejection from Ship Broker / Vessel Owner for your next action." + RouteAddress;
                }

                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }

        public string VesselContractSignatureVerificationMail(ContractModel contractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages, string mailFor)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(contractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = contractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = contractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);

            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var companyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "VesselContractSignatureVerificationMail", "Trading Service"));
            {
                string[] toEmails = { };
                var mobileNo = string.Empty;
                var messageBody = string.Empty;
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                string html = string.Empty;
                string subject = string.Empty;
                var toCCMails = brokerList != null && contractModel.BrokerId != null && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');

                EmailTemplateModel template = new EmailTemplateModel();

                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var routeAddress = siteDomain + "/trading/view-vesselcontract/" + contractModel.DataSetId;

                JObject formField = (JObject)JsonConvert.DeserializeObject(contractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formField)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }

                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int64.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int64.Parse(price));
                }
                if (mailFor == "trader")
                {
                    EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = contractModel.ClientId,
                        EmailTemplateName = "VesselOwnerorShipBrokerSignatureVerificationMailToSgTraderTemplate"
                    };

                    messageBody = "Please verify the Vessel Owner / Ship Broker signature for your next action." + routeAddress;
                    template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##ContractId##", contractName)
                        .Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity)
                        .Replace("##SiteUrl##", routeAddress)
                        .Replace("##siteUrl##", routeAddress)
                        .Replace("##CompanyLogo##", companyLogo);
                    subject = template.EmailSubject.Replace("##ContractId##", contractName)
                        .Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity);
                    toEmails = usersList[0].Email.Trim().Split('\n');
                    mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                }
                else if (mailFor == "shipbroker")
                {
                    EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = contractModel.ClientId,
                        EmailTemplateName = "SgTraderSignatureVerificationMailToVesselOwnerorShipBrokerTemplate"
                    };
                    messageBody = "Please verify the SGTrader signature for your next action." + routeAddress;
                    template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##ContractId##", contractName)
                        .Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity)
                        .Replace("##SiteUrl##", routeAddress)
                        .Replace("##siteUrl##", routeAddress)
                        .Replace("##CompanyLogo##", companyLogo);
                    subject = template.EmailSubject.Replace("##ContractId##", contractName)
                        .Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity);

                    toEmails = clientList[0].Email.Trim().Split('\n');
                    mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                }

                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = (mailFor == "shipbroker" && contractModel.BrokerId != null && toCCMails[0] != "") ? toCCMails : null,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                    if (mailFor == "shipbroker" && contractModel.BrokerId != null && brokerList != null)
                    {
                        var brokerMobileNo = brokerList[0].CountryCode + brokerList[0].MobileNo;
                        _emailService.SendSMS(brokerMobileNo, messageBody, loggedInContext);
                    }
                });

                return "";
            }
        }

        public string VesselContractSignatureAcceptedMail(ContractModel contractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages, string mailFor)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(contractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = contractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = contractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);

            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var companyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "VesselContractSignatureVerificationMail", "Trading Service"));
            {
                string[] toEmails = { };
                var mobileNo = string.Empty;
                var messageBody = string.Empty;
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                string html = string.Empty;
                string subject = string.Empty;
                var toCCMails = brokerList != null && contractModel.BrokerId != null && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');

                EmailTemplateModel template = new EmailTemplateModel();

                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var routeAddress = siteDomain + "/trading/view-vesselcontract/" + contractModel.DataSetId;

                JObject formField = (JObject)JsonConvert.DeserializeObject(contractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formField)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }

                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int64.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int64.Parse(price));
                }
                if (mailFor == "trader")
                {
                    EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = contractModel.ClientId,
                        EmailTemplateName = "VesselContractSignatureAcceptByShipBrokerorVesselOwnerTemplate"
                    };

                    messageBody = "Please find the signature acceptance for your next action." + routeAddress;
                    template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##ContractId##", contractName).Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity).Replace("##SiteUrl##", routeAddress)
                        .Replace("##siteUrl##", routeAddress).Replace("##CompanyLogo##", companyLogo)
                        .Replace("##Comments##", contractModel.SgtraderSignatureAcceptedComments).Replace("##Comment##", contractModel.SgtraderSignatureAcceptedComments);
                    subject = template.EmailSubject.Replace("##ContractId##", contractName)
                        .Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity);
                    toEmails = usersList[0].Email.Trim().Split('\n');
                    mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                }
                else if (mailFor == "shipbroker")
                {
                    EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = contractModel.ClientId,
                        EmailTemplateName = "VesselContractSignatureAcceptBySGTraderTemplate"
                    };
                    messageBody = "Please find the signature acceptance for your next action." + routeAddress;
                    template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##ContractId##", contractName).Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity).Replace("##SiteUrl##", routeAddress)
                        .Replace("##siteUrl##", routeAddress).Replace("##CompanyLogo##", companyLogo)
                        .Replace("##Comments##", contractModel.VesselOwnerorBrokerSignatureAcceptedComments).Replace("##Comment##", contractModel.VesselOwnerorBrokerSignatureAcceptedComments);
                    subject = template.EmailSubject.Replace("##ContractId##", contractName)
                        .Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity);

                    toEmails = clientList[0].Email.Trim().Split('\n');
                    mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                }

                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = (mailFor == "shipbroker" && contractModel.BrokerId != null && toCCMails[0] != "") ? toCCMails : null,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                    if (mailFor == "shipbroker" && contractModel.BrokerId != null && brokerList != null)
                    {
                        var brokerMobileNo = brokerList[0].CountryCode + brokerList[0].MobileNo;
                        _emailService.SendSMS(brokerMobileNo, messageBody, loggedInContext);
                    }
                });

                return "";
            }
        }

        public string VesselContractSignatureRejectedMail(ContractModel contractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages, string mailFor)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(contractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = contractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = contractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);

            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var companyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "VesselContractSignatureVerificationMail", "Trading Service"));
            {
                string[] toEmails = { };
                var mobileNo = string.Empty;
                var messageBody = string.Empty;
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                string html = string.Empty;
                string subject = string.Empty;
                var toCCMails = brokerList != null && contractModel.BrokerId != null && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');

                EmailTemplateModel template = new EmailTemplateModel();

                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var routeAddress = siteDomain + "/trading/view-vesselcontract/" + contractModel.DataSetId;

                JObject formField = (JObject)JsonConvert.DeserializeObject(contractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formField)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }

                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int64.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int64.Parse(price));
                }
                if (mailFor == "trader")
                {
                    routeAddress = routeAddress + "/sgSign";
                    EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = contractModel.ClientId,
                        EmailTemplateName = "VesselContractSignatureRejectByShipBrokerorVesselOwnerTemplate"
                    };

                    messageBody = "Please find the signature rejection for your next action." + routeAddress;
                    template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##ContractId##", contractName).Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity).Replace("##SiteUrl##", routeAddress)
                        .Replace("##siteUrl##", routeAddress).Replace("##Comments##", contractModel.SgtraderSignatureRejectedComments)
                        .Replace("##Comment##", contractModel.SgtraderSignatureRejectedComments)
                        .Replace("##CompanyLogo##", companyLogo);
                    subject = template.EmailSubject.Replace("##ContractId##", contractName)
                        .Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity);
                    toEmails = usersList[0].Email.Trim().Split('\n');
                    mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                }
                else if (mailFor == "shipbroker")
                {
                    routeAddress = routeAddress + "/signature";
                    EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = contractModel.ClientId,
                        EmailTemplateName = "VesselContractSignatureRejectBySGTraderTemplate"
                    };
                    messageBody = "Please find the signature rejection for your next action." + routeAddress;
                    template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##ContractId##", contractName).Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity).Replace("##SiteUrl##", routeAddress)
                        .Replace("##siteUrl##", routeAddress).Replace("##Comments##", contractModel.VesselOwnerorBrokerSignatureRejectedComments)
                        .Replace("##Comment##", contractModel.VesselOwnerorBrokerSignatureRejectedComments)
                        .Replace("##CompanyLogo##", companyLogo);
                    subject = template.EmailSubject.Replace("##ContractId##", contractName)
                        .Replace("##Quantity##", quantity)
                        .Replace("##Commodity##", commodity);

                    toEmails = clientList[0].Email.Trim().Split('\n');
                    mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                }

                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = (mailFor == "shipbroker" && contractModel.BrokerId != null && toCCMails[0] != "") ? toCCMails : null,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                    if (mailFor == "shipbroker" && contractModel.BrokerId != null && brokerList != null)
                    {
                        var brokerMobileNo = brokerList[0].CountryCode + brokerList[0].MobileNo;
                        _emailService.SendSMS(brokerMobileNo, messageBody, loggedInContext);
                    }
                });

                return "";
            }
        }

        public string VesselContractSealingEmail(ContractModel ContractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(ContractModel.CreatedByUserId, loggedInContext, validationMessages);
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = ContractModel.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            clientInputModel.ClientId = ContractModel.BrokerId;
            List<ClientOutputModel> brokerList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "VesselContractSealingEmail", "Trading Service"));
            {
                var toEmails = (clientList[0].Email + "\n" + usersList[0].Email).Trim().Split('\n');
                var ccEmails = brokerList != null && ContractModel.BrokerId != null && brokerList.Count > 0 ? brokerList[0].Email.Trim().Split('\n') : "".Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/view-vesselcontract/" + ContractModel.DataSetId;
                var messageBody = "Please find the contract is sealed and ready for your next action." + RouteAddress;
                JObject formfield = (JObject)JsonConvert.DeserializeObject(ContractModel.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = ContractModel.ClientId,
                    EmailTemplateName = "VesselContractSealingEmailTemplate"
                };
                var contractName = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;
                var price = string.Empty;
                var measurementUnit = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "contractNumber")
                    {
                        contractName = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityNumber")
                    {
                        quantity = keyValue.Value;
                    }
                    if (keyValue.Key == "commodityName")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "priceAmount")
                    {
                        price = keyValue.Value;
                    }
                    if (keyValue.Key == "quantityMeasurementUnit")
                    {
                        if (keyValue.Value == "metricTonnes")
                        {
                            measurementUnit = "MT";
                        }
                        if (keyValue.Value == "pound")
                        {
                            measurementUnit = "LBS";
                        }
                        if (keyValue.Value == "gallons")
                        {
                            measurementUnit = "GL";
                        }
                        if (keyValue.Value == "kilogram")
                        {
                            measurementUnit = "KG";
                        }
                        if (keyValue.Value == "cubicMeter")
                        {
                            measurementUnit = "CBM";
                        }
                        if (keyValue.Value == null || keyValue.Value == "")
                        {
                            measurementUnit = "";
                        }
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int64.Parse(quantity));
                }
                if (price != null && price != string.Empty)
                {
                    price = String.Format("{0:n}", Int64.Parse(price));
                }
                var webClient = new WebClient();
                byte[] fileBytes = webClient.DownloadData(ContractModel.ContractPdf);
                Stream stream = new MemoryStream(fileBytes);
                List<StreamWithType> fileStream = new List<StreamWithType>();
                fileStream.Add(new StreamWithType() { FileStream = stream, FileName = (contractName != null && contractName != "") ? contractName : "contract", FileType = ".pdf", IsPdf = true });

                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##SiteUrl##", RouteAddress)
                    .Replace("##siteUrl##", RouteAddress)
                    .Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                    .Replace("##Quantity##", quantity)
                    .Replace("##Commodity##", commodity)
                    .Replace("##PriceAmount##", price)
                    .Replace("##MeasurementUnit##", measurementUnit);
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = ccEmails[0] == "" ? null : ccEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        MailAttachmentsWithFileType = fileStream,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                    if (ContractModel.BrokerId != null && brokerList != null)
                    {
                        var brokerMobileNo = brokerList[0].CountryCode + brokerList[0].MobileNo;
                        _emailService.SendSMS(brokerMobileNo, messageBody, loggedInContext);
                    }
                });

                return "";
            }
        }

        public Guid? UpsertTolerance(ToleranceModel ToleranceModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertLegalEntity", "Trade Service"));

            LoggingManager.Debug(ToleranceModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            Guid? result = _tradingRepository.UpsertTolerance(ToleranceModel, loggedInContext, validationMessages);
            return result;
        }
        public List<ToleranceModel> GetAllTolerances(ToleranceModel ToleranceModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetAllTolerances", "Trade Service"));

            LoggingManager.Debug(ToleranceModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            List<ToleranceModel> result = _tradingRepository.GetAllTolerances(ToleranceModel, loggedInContext, validationMessages).ToList();
            return result;
        }
        public Guid? UpsertPaymentCondition(PaymentConditionModel PaymentConditionModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertPaymentCondition", "Trade Service"));

            LoggingManager.Debug(PaymentConditionModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            Guid? result = _tradingRepository.UpsertPaymentCondition(PaymentConditionModel, loggedInContext, validationMessages);
            return result;
        }
        public List<PaymentConditionModel> GetAllPaymentConditions(PaymentConditionModel PaymentConditionModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetAllPaymentConditions", "Trade Service"));

            LoggingManager.Debug(PaymentConditionModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            List<PaymentConditionModel> result = _tradingRepository.GetAllPaymentConditions(PaymentConditionModel, loggedInContext, validationMessages).ToList();
            return result;
        }
        public List<TradeTemplateTypes> GetTradeTemplateTypes(TradeTemplateTypes TradeTemplateTypes, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetTradeTemplateTypes", "Trade Service"));

            LoggingManager.Debug(TradeTemplateTypes.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            List<TradeTemplateTypes> result = _tradingRepository.GetTradeTemplateTypes(TradeTemplateTypes, loggedInContext, validationMessages).ToList();
            return result;
        }
        public async Task<Guid?> UpsertTradeTemplate(TradeTemplateModel TradeTemplateModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertTradeTemplate", "Trading Service"));

            LoggingManager.Debug(TradeTemplateModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            FinalTradeTemplateModel FinalTemplateModel = new FinalTradeTemplateModel();
            FinalTemplateModel.TradeTemplateJson = TradeTemplateModel.TradeTemplateFormJson;
            FinalTemplateModel.TemplateTypeId = TradeTemplateModel.TemplateTypeId;

            DataSourceInputModel dataSourceInputModel = new DataSourceInputModel();
            dataSourceInputModel.Id = TradeTemplateModel.TradeTemplateId;
            dataSourceInputModel.Fields = JsonConvert.SerializeObject(FinalTemplateModel);
            dataSourceInputModel.CompanyId = loggedInContext.CompanyGuid;
            dataSourceInputModel.DataSourceType = "TradeTemplate";
            dataSourceInputModel.DataSourceTypeNumber = 3;
            dataSourceInputModel.Name = TradeTemplateModel.TradeTemplateName;
            dataSourceInputModel.FormBgColor = TradeTemplateModel.FormBgColor;
            dataSourceInputModel.IsArchived = TradeTemplateModel.IsArchived;
            Guid? result = await _dataSourceService.CreateDataSource(dataSourceInputModel, loggedInContext, validationMessages);
            TradeTemplateModel.TradeTemplateId = result;
            if (TradeTemplateModel.TradeTemplateId != null)
            {
                var dataSourceKeyModel = new DataSourceKeysInputModel();
                dataSourceKeyModel.DataSourceId = TradeTemplateModel.TradeTemplateId;
                Guid? Id = await _dataSourceService.UpdateDataSourceKeys(dataSourceKeyModel, loggedInContext, validationMessages);
            }
            var formKeys = new List<Component>();
            if (!string.IsNullOrEmpty(TradeTemplateModel.FormKeys))
            {
                formKeys = JsonConvert.DeserializeObject<List<Component>>(TradeTemplateModel.FormKeys);
            }

            if (formKeys != null)
            {
                foreach (var comp in formKeys)
                {
                    var dataSourceKeyInputModel = new DataSourceKeysInputModel();
                    dataSourceKeyInputModel.DataSourceId = TradeTemplateModel.TradeTemplateId;
                    dataSourceKeyInputModel.Key = comp.Key;
                    dataSourceKeyInputModel.Label = comp.Label;
                    dataSourceKeyInputModel.Type = comp.Type;
                    dataSourceKeyInputModel.UserView = comp.UserView == null ? comp.UserView : comp.UserView;
                    dataSourceKeyInputModel.UserEdit = comp.UserEdit == null ? comp.UserEdit : comp.UserEdit;
                    dataSourceKeyInputModel.RoleView = comp.RoleView == null ? comp.RoleView : comp.RoleView;
                    dataSourceKeyInputModel.RoleEdit = comp.RoleEdit == null ? comp.RoleEdit : comp.RoleEdit;
                    dataSourceKeyInputModel.RelatedFieldsLabel = comp.RelatedFieldsLabel == null ? comp.RelatedFieldsLabel : comp.RelatedFieldsLabel;
                    dataSourceKeyInputModel.RelatedFormsFields = comp.RelatedFormsFields == null ? comp.RelatedFormsFields : comp.RelatedFormsFields;
                    dataSourceKeyInputModel.FormName = comp.FormName;
                    dataSourceKeyInputModel.Relatedfield = comp.Relatedfield == null ? comp.Relatedfield : comp.Relatedfield;
                    dataSourceKeyInputModel.RelatedFieldsfinalData = comp.RelatedFieldsfinalData == null ? comp.RelatedFieldsfinalData : comp.RelatedFieldsfinalData;
                    dataSourceKeyInputModel.ConcateFormFields = comp.ConcateFormFields == null ? comp.ConcateFormFields : comp.ConcateFormFields;
                    dataSourceKeyInputModel.DateTimeForLinkedFields = comp.DateTimeForLinkedFields == null ? comp.DateTimeForLinkedFields : comp.DateTimeForLinkedFields;
                    dataSourceKeyInputModel.ConcatSplitKey = comp.ConcatSplitKey == null ? comp.ConcatSplitKey : comp.ConcatSplitKey;
                    dataSourceKeyInputModel.FieldName = comp.FieldName;
                    dataSourceKeyInputModel.SelectedFormName = comp.SelectedFormName;
                    Guid? newId = await _dataSourceService.CreateDataSourceKeys(dataSourceKeyInputModel, loggedInContext, validationMessages);
                }

            }
            return result;
        }

        private int checkClientNameCount(List<string> clientNames, string name)
        {
            if (clientNames.Count == 0)
            {
                return 1;
            }
            else
            {
                int i = clientNames.Where(x => x == name).Count();
                i = i + 1;
                return i;
            }
        }

        public async Task<Guid?> UpsertRFQRequestAndSend(RFQRequestModel rFQRequestModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertRFQRequestAndSend", "Trading Service"));

            LoggingManager.Debug(rFQRequestModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }

            List<string> clientNames = new List<string>();

            List<DataSetUpsertInputModel> dataSetUpsertInputModel = new List<DataSetUpsertInputModel>();

            if (rFQRequestModel.ClientId != null && rFQRequestModel.ClientId.Count > 0)
            {
                foreach (var rfRequest in rFQRequestModel.ClientId)
                {
                    var userId = _clientRepository.GetUserIdByClient(rfRequest, loggedInContext, validationMessages);
                    var userName = _clientRepository.GetUserNameByClientId(rfRequest, loggedInContext, validationMessages);
                    var trimuser = userName.Length > 4 ? userName.Substring(0, 4) : userName;
                    var count = checkClientNameCount(clientNames, trimuser);
                    clientNames.Add(trimuser);
                    var uniqueId = trimuser + "-" + count;
                    DataSetUpsertInputModel dataSetUpsertInput = new DataSetUpsertInputModel();
                    dataSetUpsertInput.IsArchived = rFQRequestModel.IsArchived;
                    var dataSetModel = new DataSetConversionModel();
                    dataSetModel.FormData = JsonConvert.DeserializeObject<Object>(rFQRequestModel.DataJson);
                    dataSetModel.ClientId = rfRequest;
                    dataSetModel.BrokerId = null;
                    dataSetModel.ReferenceId = userId;
                    dataSetModel.TemplateTypeId = rFQRequestModel.TemplateTypeId;
                    dataSetModel.StatusId = rFQRequestModel.StatusId;
                    dataSetModel.ContractType = "rfq";
                    dataSetModel.Version = 0;
                    dataSetModel.IsRejected = false;
                    dataSetModel.RFQUniqueId = uniqueId;
                    dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(dataSetModel); //JsonConvert.SerializeObject(rFQRequestModel.DataJson);
                    dataSetUpsertInput.CompanyId = loggedInContext.CompanyGuid;
                    dataSetUpsertInput.DataSourceId = rFQRequestModel.DataSourceId;
                    dataSetUpsertInput.CreatedDateTime = DateTime.UtcNow;
                    dataSetUpsertInput.CreatedByUserId = loggedInContext.LoggedInUserId;
                    dataSetUpsertInputModel.Add(dataSetUpsertInput);
                }
            }
            if (rFQRequestModel.BrokerId != null && rFQRequestModel.BrokerId.Count > 0)
            {
                foreach (var rfRequest in rFQRequestModel.BrokerId)
                {
                    var userId = _clientRepository.GetUserIdByClient(rfRequest, loggedInContext, validationMessages);
                    var userName = _clientRepository.GetUserNameByClientId(rfRequest, loggedInContext, validationMessages);
                    var trimuser = userName.Length > 4 ? userName.Substring(0, 4) : userName;
                    var count = checkClientNameCount(clientNames, trimuser);
                    clientNames.Add(trimuser);
                    var uniqueId = trimuser + "-" + count;
                    DataSetUpsertInputModel dataSetUpsertInput = new DataSetUpsertInputModel();
                    dataSetUpsertInput.IsArchived = rFQRequestModel.IsArchived;
                    var dataSetModel = new DataSetConversionModel();
                    dataSetModel.FormData = JsonConvert.DeserializeObject<Object>(rFQRequestModel.DataJson);
                    dataSetModel.BrokerId = rfRequest;
                    dataSetModel.ClientId = null;
                    dataSetModel.ReferenceId = userId;
                    dataSetModel.TemplateTypeId = rFQRequestModel.TemplateTypeId;
                    dataSetModel.StatusId = rFQRequestModel.StatusId;
                    dataSetModel.ContractType = "rfq";
                    dataSetModel.Version = 0;
                    dataSetModel.IsRejected = false;
                    dataSetModel.RFQUniqueId = uniqueId;
                    dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(dataSetModel); //JsonConvert.SerializeObject(rFQRequestModel.DataJson);
                    dataSetUpsertInput.CompanyId = loggedInContext.CompanyGuid;
                    dataSetUpsertInput.DataSourceId = rFQRequestModel.DataSourceId;
                    dataSetUpsertInput.CreatedDateTime = DateTime.UtcNow;
                    dataSetUpsertInput.CreatedByUserId = loggedInContext.LoggedInUserId;
                    dataSetUpsertInputModel.Add(dataSetUpsertInput);
                }
            }

            //List<RFQReferenceOutputModel> 
            var result = await _dataSetService.CreateMultipleDataSet(dataSetUpsertInputModel, loggedInContext, validationMessages);
            var responseJson = JsonConvert.DeserializeObject<JsonDeserialiseData>(result);
            if (responseJson.Success)
            {
                var jsonResponse = JsonConvert.SerializeObject(responseJson.Data);
                var rfqList = JsonConvert.DeserializeObject<List<RFQReferenceOutputModel>>(jsonResponse);
                ShareRFQRequestEmail(rFQRequestModel, rfqList, loggedInContext, validationMessages);
                SaveRfqCreateHistory(rfqList, loggedInContext, validationMessages);
                return rfqList[0].Id;
            }
            else
            {
                if (responseJson?.ApiResponseMessages.Count > 0)
                {
                    var validationMessage = new ValidationMessage()
                    {
                        ValidationMessaage = responseJson.ApiResponseMessages[0].Message,
                        ValidationMessageType = MessageTypeEnum.Error,
                        Field = responseJson.ApiResponseMessages[0].FieldName
                    };
                    validationMessages.Add(validationMessage);
                }
                return null;
            }
        }
        public async Task<Guid?> UpdateRFQRequest(RFQRequestInputModel rFQRequestModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpdateRFQRequest", "Trading Service"));

            LoggingManager.Debug(rFQRequestModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }

            var oldData = new ContractModel();
            ContractModel searchModel = new ContractModel();
            searchModel.ContractType = "rfqList";
            searchModel.ListType = "rfqList";
            searchModel.DataSetId = rFQRequestModel.DataSetId;
            if (rFQRequestModel.IsRequestVesselConfirmation == false && rFQRequestModel.VesselConfirmationTemplateId != null)
            {
                List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();
                paramsJsons.Add(new ParamsJsonModel()
                {
                    KeyName = "VesselConfirmationIdForRFQ",
                    KeyValue = "VesselConfirmationIdForRFQ"
                });
                searchModel.ParamsJson = paramsJsons;
            }
            oldData = GetContracts(searchModel, loggedInContext, validationMessages).FirstOrDefault();

            DataSetUpsertInputModel dataSetUpsertInput = new DataSetUpsertInputModel();
            dataSetUpsertInput.Id = rFQRequestModel.DataSetId;
            dataSetUpsertInput.DataSourceId = rFQRequestModel.DataSourceId;
            dataSetUpsertInput.UpdatedByUserId = loggedInContext.LoggedInUserId;
            dataSetUpsertInput.UpdatedDateTime = DateTime.UtcNow;

            var dataSetModel = new DataSetConversionModel();
            dataSetModel.FormData = JsonConvert.DeserializeObject<Object>(rFQRequestModel.DataJson);
            dataSetModel.TemplateTypeId = rFQRequestModel.TemplateTypeId;
            dataSetModel.StatusId = rFQRequestModel.StatusId;
            dataSetModel.Version = rFQRequestModel.Version != null ? ((int)rFQRequestModel.Version + 1) : 1;
            dataSetModel.RFQId = rFQRequestModel.RFQId;
            dataSetModel.RFQUniqueId = oldData.RFQUniqueId;
            dataSetModel.ClientId = oldData.ClientId;
            dataSetModel.BrokerId = oldData.BrokerId;
            dataSetModel.ReferenceId = oldData.ReferenceId;
            dataSetModel.ContractType = "rfq";
            dataSetModel.AcceptedByTraderUserId = oldData.AcceptedByTraderUserId != null ? oldData.AcceptedByTraderUserId : null;
            dataSetModel.AcceptedByClientUserId = oldData.AcceptedByClientUserId != null ? oldData.AcceptedByClientUserId : null;
            dataSetModel.IsAccepted = oldData.IsAccepted;
            dataSetModel.IsRejected = oldData.IsRejected;
            dataSetModel.Q88SharedClientIds = oldData.Q88SharedClientIds;
            dataSetModel.Q88SharedUserIds = oldData.Q88SharedUserIds;
            dataSetModel.Q88AcceptedIds = oldData.Q88AcceptedIds;
            dataSetModel.Q88RejectedIds = oldData.Q88RejectedIds;
            dataSetModel.IsQ88Accepted = oldData.IsQ88Accepted;
            dataSetModel.IsQ88Rejected = oldData.IsQ88Rejected;
            dataSetModel.RFQAcceptedDateTime = oldData.RFQAcceptedDateTime;
            dataSetModel.RFQRejectedDateTime = oldData.RFQRejectedDateTime;
            dataSetModel.VesselConfirmationStatusId = rFQRequestModel.VesselConfirmationStatusId;
            dataSetModel.VesselConfirmationTemplateId = rFQRequestModel.VesselConfirmationTemplateId;
            dataSetModel.VesselConfirmationRejectedDateTime = oldData.VesselConfirmationRejectedDateTime;
            dataSetModel.VesselConfirmationRejectedByUserId = oldData.VesselConfirmationRejectedByUserId;
            dataSetModel.VesselConfirmationAcceptedDateTime = oldData.VesselConfirmationAcceptedDateTime;
            dataSetModel.VesselConfirmationAcceptedByClientUserId = oldData.VesselConfirmationAcceptedByClientUserId;
            dataSetModel.VesselConfirmationAcceptedByTraderUserId = oldData.VesselConfirmationAcceptedByTraderUserId;
            dataSetModel.IsVesselConfirmationAccepted = oldData.IsVesselConfirmationAccepted;
            dataSetModel.IsVesselConfirmationRejected = oldData.IsVesselConfirmationRejected;
            dataSetModel.VesselConfirmationFormData = rFQRequestModel.VesselConfirmationFormData != null ? JsonConvert.DeserializeObject<Object>(rFQRequestModel.VesselConfirmationFormData) : null;


            var clientData = _clientRepository.GetClientByUserId("Vessel Owner,Ship Broker", loggedInContext.LoggedInUserId, loggedInContext, validationMessages, null);
            if (rFQRequestModel.IsRejected == true)
            {
                if (rFQRequestModel.IsVesselConfirmationChange == null || rFQRequestModel.IsVesselConfirmationChange == false)
                {
                    dataSetModel.IsRejected = rFQRequestModel.IsRejected;
                    dataSetModel.RejectedComments = rFQRequestModel.RejectedComments;
                    RFQStatusModel status = _tradingRepository.GetAllRFQStatus(new RFQStatusModel() { StatusName = "Rejected" }, loggedInContext, validationMessages).FirstOrDefault();
                    dataSetModel.StatusId = status.RFQStatusId;
                    dataSetUpsertInput.IsArchived = true;
                    dataSetUpsertInput.ArchivedByUserId = loggedInContext.LoggedInUserId;
                    dataSetUpsertInput.ArchivedDateTime = DateTime.UtcNow;
                    dataSetModel.RFQRejectedDateTime = dataSetUpsertInput.ArchivedDateTime;
                }
                else
                {
                    dataSetModel.IsVesselConfirmationRejected = true;
                    dataSetUpsertInput.IsArchived = true;
                    VesselConfirmationStatusModel status = _tradingRepository.GetAllVesselConfirmationStatus(new VesselConfirmationStatusModel() { StatusNameSearch = "Rejected" }, loggedInContext, validationMessages).FirstOrDefault();
                    dataSetModel.VesselConfirmationStatusId = status.StatusId;
                    dataSetModel.VesselConfirmationRejectedDateTime = DateTime.UtcNow;
                    dataSetModel.VesselConfirmationRejectedByUserId = loggedInContext.LoggedInUserId;
                    dataSetUpsertInput.ArchivedByUserId = loggedInContext.LoggedInUserId;
                    dataSetUpsertInput.ArchivedDateTime = DateTime.UtcNow;
                }
            }
            else
            {
                if (rFQRequestModel.IsAccepted == true)
                {
                    if (rFQRequestModel.IsVesselConfirmationChange == null || rFQRequestModel.IsVesselConfirmationChange == false)
                    {
                        if (clientData != null && clientData.UserId != null && clientData.ClientId != null)
                        {
                            dataSetModel.AcceptedByClientUserId = loggedInContext.LoggedInUserId;
                        }
                        else
                        {
                            dataSetModel.AcceptedByTraderUserId = loggedInContext.LoggedInUserId;
                        }

                        if (dataSetModel.AcceptedByClientUserId != null && dataSetModel.AcceptedByTraderUserId != null)
                        {
                            RFQStatusModel status = _tradingRepository.GetAllRFQStatus(new RFQStatusModel() { StatusName = "Approved" }, loggedInContext, validationMessages).FirstOrDefault();
                            dataSetModel.StatusId = status.RFQStatusId;
                            dataSetModel.IsAccepted = true;
                            dataSetModel.IsRejected = false;
                            dataSetModel.RFQAcceptedDateTime = DateTime.UtcNow;
                        }
                    }
                    else
                    {
                        if (clientData != null && clientData.UserId != null && clientData.ClientId != null)
                        {
                            dataSetModel.VesselConfirmationAcceptedByClientUserId = loggedInContext.LoggedInUserId;
                        }
                        else
                        {
                            dataSetModel.VesselConfirmationAcceptedByTraderUserId = loggedInContext.LoggedInUserId;
                        }

                        if (dataSetModel.VesselConfirmationAcceptedByClientUserId != null && dataSetModel.VesselConfirmationAcceptedByTraderUserId != null)
                        {
                            VesselConfirmationStatusModel status = _tradingRepository.GetAllVesselConfirmationStatus(new VesselConfirmationStatusModel() { StatusNameSearch = "Approved" }, loggedInContext, validationMessages).FirstOrDefault();
                            dataSetModel.VesselConfirmationStatusId = status.StatusId;
                            dataSetModel.IsVesselConfirmationAccepted = true;
                            dataSetModel.IsVesselConfirmationRejected = false;
                            dataSetModel.VesselConfirmationAcceptedDateTime = DateTime.UtcNow;
                        }
                    }
                }
                else if (rFQRequestModel.IsAccepted == null || rFQRequestModel.IsAccepted == false)
                {
                    if (rFQRequestModel.IsVesselConfirmationChange == null || rFQRequestModel.IsVesselConfirmationChange == false)
                    {
                        dataSetModel.AcceptedByClientUserId = null;
                        dataSetModel.AcceptedByTraderUserId = null;
                        RFQStatusModel status = _tradingRepository.GetAllRFQStatus(new RFQStatusModel() { StatusName = "Open" }, loggedInContext, validationMessages).FirstOrDefault();
                        dataSetModel.StatusId = status.RFQStatusId;
                        dataSetModel.IsAccepted = false;
                        dataSetModel.IsRejected = false;
                        dataSetModel.RFQRejectedDateTime = null;
                    }
                    else if (rFQRequestModel.IsRequestVesselConfirmation == true)
                    {
                        dataSetModel.VesselConfirmationAcceptedByClientUserId = null;
                        dataSetModel.VesselConfirmationAcceptedByTraderUserId = null;
                        dataSetModel.IsVesselConfirmationAccepted = false;
                        dataSetModel.IsVesselConfirmationRejected = false;
                        dataSetModel.VesselConfirmationRejectedDateTime = null;
                        dataSetModel.Version = 0;
                    }
                    else
                    {
                        dataSetModel.VesselConfirmationAcceptedByClientUserId = null;
                        dataSetModel.VesselConfirmationAcceptedByTraderUserId = null;
                        if (oldData.VesselConfirmationTemplateId != null)
                        {
                            VesselConfirmationStatusModel status = _tradingRepository.GetAllVesselConfirmationStatus(new VesselConfirmationStatusModel() { StatusNameSearch = "Received" }, loggedInContext, validationMessages).FirstOrDefault();
                            dataSetModel.VesselConfirmationStatusId = status.StatusId;
                        }
                        dataSetModel.IsVesselConfirmationAccepted = false;
                        dataSetModel.IsVesselConfirmationRejected = false;
                        dataSetModel.VesselConfirmationRejectedDateTime = null;
                    }
                }
            }

            if (oldData.IsQ88Accepted == true)
            {
                VesselConfirmationStatusModel status = _tradingRepository.GetAllVesselConfirmationStatus(new VesselConfirmationStatusModel() { StatusNameSearch = "Q88 Approved" }, loggedInContext, validationMessages).FirstOrDefault();
                dataSetModel.VesselConfirmationStatusId = status.StatusId;
            }

            dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(dataSetModel);

            Guid? result = await _dataSetService.CreateDataSet(dataSetUpsertInput, loggedInContext, validationMessages);

            if (rFQRequestModel.IsVesselConfirmationChange == true)
            {
                await UpsertVesselConfirmation(dataSetModel, oldData, loggedInContext, validationMessages);
            }

            var clientId = oldData.ClientId != null ? oldData.ClientId : oldData.BrokerId;
            if ((rFQRequestModel.IsVesselConfirmationChange == true && dataSetModel.Version >= 2) || ((rFQRequestModel.IsVesselConfirmationChange == null || rFQRequestModel.IsVesselConfirmationChange == false)
                && (dataSetModel.Version >= 2 || dataSetModel.IsAccepted == true || dataSetModel.IsRejected == true)))
            {
                if (rFQRequestModel.IsVesselConfirmationChange == null || rFQRequestModel.IsVesselConfirmationChange == false)
                {
                    SaveRfqHistory(rFQRequestModel, oldData, loggedInContext, validationMessages);

                    if (dataSetModel.IsAccepted == true && rFQRequestModel.DataSetId == result)
                    {
                        await UpdateRFQRequestAutoRejectRFQs(rFQRequestModel.DataSetId, rFQRequestModel.RFQId, loggedInContext, validationMessages);
                    }
                }
                else
                {
                    if (dataSetModel.Version == 0)
                    {
                        SaveVesselConfirmationHistory(rFQRequestModel, oldData, loggedInContext, validationMessages, "create");
                    }
                    else
                    {
                        SaveVesselConfirmationHistory(rFQRequestModel, oldData, loggedInContext, validationMessages, "");
                    }
                }
            }
            else
            {
                if (rFQRequestModel.IsVesselConfirmationChange == null || rFQRequestModel.IsVesselConfirmationChange == false)
                {
                    SaveRfqFilledHistory(rFQRequestModel, loggedInContext, validationMessages);

                    if (dataSetModel.IsAccepted == true && rFQRequestModel.DataSetId == result)
                    {
                        await UpdateRFQRequestAutoRejectRFQs(rFQRequestModel.DataSetId, rFQRequestModel.RFQId, loggedInContext, validationMessages);
                    }
                }
                else
                {
                    if (dataSetModel.Version == 0)
                    {
                        SaveVesselConfirmationHistory(rFQRequestModel, oldData, loggedInContext, validationMessages, "create");
                    }
                    else
                    {
                        SaveVesselConfirmationHistory(rFQRequestModel, oldData, loggedInContext, validationMessages, "received");
                    }
                }
            }

            //if(rFQRequestModel.IsQ88Uploaded == false && oldData.IsQ88Uploaded == true)
            //{
            //    SaveRfqQ88UploadDeleteHistory(rFQRequestModel, "upload", loggedInContext, validationMessages);
            //}
            //if (rFQRequestModel.IsQ88Uploaded == true && oldData.IsQ88Uploaded == false)
            //{
            //    SaveRfqQ88UploadDeleteHistory(rFQRequestModel, "delete", loggedInContext, validationMessages);
            //}

            if (rFQRequestModel.IsRejected == true)
            {
                if (rFQRequestModel.IsVesselConfirmationChange == null || rFQRequestModel.IsVesselConfirmationChange == false)
                {
                    SendRFQRequestAcceptOrRejectEmail(rFQRequestModel, oldData, loggedInContext, validationMessages, "rejected", clientId, false);
                }
                else
                {
                    SendVesselConfirmationRequestUpdateEmail(rFQRequestModel, oldData, loggedInContext, validationMessages, "reject", clientId, false);
                }
            }
            else
            {
                if (rFQRequestModel.IsAccepted == true)
                {
                    if (rFQRequestModel.IsVesselConfirmationChange == null || rFQRequestModel.IsVesselConfirmationChange == false)
                    {
                        if (clientData != null && clientData.UserId != null && clientData.ClientId != null)
                        {
                            SendRFQRequestAcceptOrRejectEmail(rFQRequestModel, oldData, loggedInContext, validationMessages, "accepted", clientId, true);
                        }
                        else
                        {
                            SendRFQRequestAcceptOrRejectEmail(rFQRequestModel, oldData, loggedInContext, validationMessages, "accepted", clientId, false);
                        }
                    }
                    else
                    {
                        if (clientData != null && clientData.UserId != null && clientData.ClientId != null)
                        {
                            SendVesselConfirmationRequestUpdateEmail(rFQRequestModel, oldData, loggedInContext, validationMessages, "accept", clientId, true);
                        }
                        else
                        {
                            SendVesselConfirmationRequestUpdateEmail(rFQRequestModel, oldData, loggedInContext, validationMessages, "accept", clientId, false);
                        }
                    }
                }
                else
                {
                    if (rFQRequestModel.IsVesselConfirmationChange == null || rFQRequestModel.IsVesselConfirmationChange == false)
                    {
                        if (clientData != null && clientData.UserId != null && clientData.ClientId != null)
                        {
                            if (dataSetModel.Version == 1)
                            {
                                SendRFQRequestUpdateEmail(rFQRequestModel, oldData, loggedInContext, validationMessages, "filled", clientId, true);
                            }
                            else
                            {
                                SendRFQRequestUpdateEmail(rFQRequestModel, oldData, loggedInContext, validationMessages, "update", clientId, true);
                            }
                        }
                        else
                        {
                            SendRFQRequestUpdateEmail(rFQRequestModel, oldData, loggedInContext, validationMessages, "update", clientId, false);
                        }
                    }
                    else
                    {
                        if (clientData != null && clientData.UserId != null && clientData.ClientId != null)
                        {
                            if (dataSetModel.Version == 1)
                            {
                                SendVesselConfirmationRequestUpdateEmail(rFQRequestModel, oldData, loggedInContext, validationMessages, "filled", clientId, true);
                            }
                            else
                            {
                                SendVesselConfirmationRequestUpdateEmail(rFQRequestModel, oldData, loggedInContext, validationMessages, "update", clientId, true);
                            }
                        }
                        else
                        {
                            if (oldData.VesselConfirmationTemplateId == null && rFQRequestModel.VesselConfirmationTemplateId != null)
                            {
                                SendVesselConfirmationRequestToClient(rFQRequestModel, oldData, loggedInContext, validationMessages, clientId);
                            }
                            else
                            {
                                SendVesselConfirmationRequestUpdateEmail(rFQRequestModel, oldData, loggedInContext, validationMessages, "update", clientId, false);
                            }
                        }
                    }
                }
            }
            return result;
        }

        private async Task<Guid?> UpsertVesselConfirmation(DataSetConversionModel dataSet, ContractModel oldData, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertVesselConfirmation", "Trading Service"));

            LoggingManager.Debug(dataSet.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }

            DataSetUpsertInputModel dataSetUpsertInput = new DataSetUpsertInputModel();
            dataSetUpsertInput.Id = oldData.VesselConfirmationId;
            dataSetUpsertInput.DataSourceId = dataSet.VesselConfirmationTemplateId;
            dataSetUpsertInput.UpdatedByUserId = loggedInContext.LoggedInUserId;
            dataSetUpsertInput.UpdatedDateTime = DateTime.UtcNow;

            var dataSetModel = new DataSetConversionModel();
            dataSetModel.FormData = dataSet.VesselConfirmationFormData;
            dataSetModel.TemplateTypeId = oldData.DataSetId;
            dataSetModel.StatusId = dataSet.VesselConfirmationStatusId;
            dataSetModel.Version = null;
            dataSetModel.RFQId = dataSet.RFQId;
            dataSetModel.RFQUniqueId = dataSet.RFQUniqueId;
            dataSetModel.ClientId = dataSet.ClientId;
            dataSetModel.BrokerId = dataSet.BrokerId;
            dataSetModel.ReferenceId = dataSet.ReferenceId;
            dataSetModel.ContractType = "VesselConfirmation";
            dataSetModel.InvoiceType = "";
            dataSetModel.AcceptedByTraderUserId = dataSet.VesselConfirmationAcceptedByTraderUserId != null ? dataSet.VesselConfirmationAcceptedByTraderUserId : null;
            dataSetModel.AcceptedByClientUserId = dataSet.VesselConfirmationAcceptedByClientUserId != null ? dataSet.VesselConfirmationAcceptedByClientUserId : null;
            dataSetModel.IsAccepted = dataSet.IsVesselConfirmationAccepted;
            dataSetModel.IsRejected = dataSet.IsVesselConfirmationRejected;
            dataSetModel.Q88SharedClientIds = dataSet.Q88SharedClientIds;
            dataSetModel.Q88SharedUserIds = dataSet.Q88SharedUserIds;
            dataSetModel.Q88AcceptedIds = dataSet.Q88AcceptedIds;
            dataSetModel.Q88RejectedIds = dataSet.Q88RejectedIds;
            dataSetModel.IsQ88Accepted = dataSet.IsQ88Accepted;
            dataSetModel.IsQ88Rejected = dataSet.IsQ88Rejected;
            dataSetModel.RFQAcceptedDateTime = dataSet.VesselConfirmationAcceptedDateTime;
            dataSetModel.RFQRejectedDateTime = dataSet.VesselConfirmationRejectedDateTime;
            dataSetModel.VesselConfirmationStatusId = dataSet.VesselConfirmationStatusId;
            dataSetModel.VesselConfirmationTemplateId = dataSet.VesselConfirmationTemplateId;
            dataSetModel.VesselConfirmationRejectedDateTime = dataSet.VesselConfirmationRejectedDateTime;
            dataSetModel.VesselConfirmationRejectedByUserId = dataSet.VesselConfirmationRejectedByUserId;
            dataSetModel.VesselConfirmationAcceptedDateTime = dataSet.VesselConfirmationAcceptedDateTime;
            dataSetModel.VesselConfirmationAcceptedByClientUserId = dataSet.VesselConfirmationAcceptedByClientUserId;
            dataSetModel.VesselConfirmationAcceptedByTraderUserId = dataSet.VesselConfirmationAcceptedByTraderUserId;
            dataSetModel.IsVesselConfirmationAccepted = dataSet.IsVesselConfirmationAccepted;
            dataSetModel.IsVesselConfirmationRejected = dataSet.IsVesselConfirmationRejected;
            dataSetModel.VesselConfirmationFormData = dataSet.VesselConfirmationFormData;

            dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(dataSetModel);
            Guid? result = await _dataSetService.CreateDataSet(dataSetUpsertInput, loggedInContext, validationMessages);

            return null;
        }

        public async Task<Guid?> ShareQ88Document(ShareQ88InputModel shareQ88InputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "ShareQ88Document", "Trading Service"));

            LoggingManager.Debug(shareQ88InputModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }

            var oldData = new ContractModel();
            ContractModel searchModel = new ContractModel();
            searchModel.ContractType = "rfqList";
            searchModel.ListType = "rfqList";
            searchModel.DataSetId = shareQ88InputModel.DataSetId;
            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();
            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "VesselConfirmationIdForRFQ",
                KeyValue = "VesselConfirmationIdForRFQ"
            });
            searchModel.ParamsJson = paramsJsons;
            //List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();
            //paramsJsons.Add(new ParamsJsonModel()
            //{
            //    KeyName = "rfqList",
            //    KeyValue = "rfqList"
            //});
            //searchModel.ParamsJson = paramsJsons;
            oldData = GetContracts(searchModel, loggedInContext, validationMessages).FirstOrDefault();

            DataSetUpsertInputModel dataSetUpsertInput = new DataSetUpsertInputModel();
            dataSetUpsertInput.Id = shareQ88InputModel.DataSetId;
            dataSetUpsertInput.DataSourceId = oldData.ContractTemplateId;
            dataSetUpsertInput.UpdatedByUserId = loggedInContext.LoggedInUserId;
            dataSetUpsertInput.UpdatedDateTime = DateTime.UtcNow;

            var dataSetModel = new DataSetConversionModel();
            dataSetModel.FormData = oldData.FormData;
            dataSetModel.ClientId = oldData.ClientId;
            dataSetModel.BrokerId = oldData.BrokerId;
            dataSetModel.ReferenceId = oldData.ReferenceId;
            dataSetModel.TemplateTypeId = oldData.TemplateTypeId;
            dataSetModel.StatusId = oldData.StatusId;
            dataSetModel.Version = oldData.Version;
            dataSetModel.RFQId = oldData.RFQId;
            dataSetModel.RFQUniqueId = oldData.RFQUniqueId;
            dataSetModel.ContractType = "rfq";
            dataSetModel.AcceptedByClientUserId = oldData.AcceptedByClientUserId;
            dataSetModel.AcceptedByTraderUserId = oldData.AcceptedByTraderUserId;
            dataSetModel.IsAccepted = oldData.IsAccepted;
            dataSetModel.IsRejected = oldData.IsRejected;
            dataSetModel.ClientId = oldData.ClientId;
            dataSetModel.BrokerId = oldData.BrokerId;
            dataSetModel.ReferenceId = oldData.ReferenceId;
            dataSetModel.Q88SharedClientIds = oldData.Q88SharedClientIds;
            dataSetModel.Q88SharedUserIds = oldData.Q88SharedUserIds;
            dataSetModel.Q88AcceptedIds = oldData.Q88AcceptedIds;
            dataSetModel.Q88RejectedIds = oldData.Q88RejectedIds;
            dataSetModel.IsQ88Accepted = oldData.IsQ88Accepted;
            dataSetModel.IsQ88Rejected = oldData.IsQ88Rejected;
            dataSetModel.RFQAcceptedDateTime = oldData.RFQAcceptedDateTime;
            dataSetModel.RFQRejectedDateTime = oldData.RFQRejectedDateTime;

            dataSetModel.VesselConfirmationTemplateId = oldData.VesselConfirmationTemplateId;
            dataSetModel.VesselConfirmationStatusId = oldData.VesselConfirmationStatusId;
            dataSetModel.VesselConfirmationRejectedDateTime = oldData.VesselConfirmationRejectedDateTime;
            dataSetModel.VesselConfirmationRejectedByUserId = oldData.VesselConfirmationRejectedByUserId;
            dataSetModel.VesselConfirmationAcceptedDateTime = oldData.VesselConfirmationAcceptedDateTime;
            dataSetModel.VesselConfirmationAcceptedByClientUserId = oldData.VesselConfirmationAcceptedByClientUserId;
            dataSetModel.VesselConfirmationAcceptedByTraderUserId = oldData.VesselConfirmationAcceptedByTraderUserId;
            dataSetModel.IsVesselConfirmationAccepted = oldData.IsVesselConfirmationAccepted;
            dataSetModel.IsVesselConfirmationRejected = oldData.IsVesselConfirmationRejected;
            dataSetModel.VesselConfirmationFormData = oldData.VesselConfirmationFormData;

            if (oldData.Q88RejectedIds != null && oldData.Q88RejectedIds.Count > 0)
            {
                dataSetModel.Q88RejectedIds = new List<Guid>();
            }

            List<Guid> clientIds = new List<Guid>();
            if (dataSetModel.Q88SharedClientIds == null || (oldData.IsQ88Rejected == true && oldData.IsQ88Reshared == false))
            {
                dataSetModel.Q88SharedClientIds = new List<Guid>();
                dataSetModel.Q88SharedUserIds = new List<Guid>();
                if (oldData.IsQ88Rejected == true && oldData.IsQ88Reshared == false)
                {
                    dataSetModel.IsQ88Reshared = true;
                    dataSetModel.Q88AcceptedIds = null;
                    dataSetModel.Q88RejectedIds = null;
                    dataSetModel.Q88Reject = null;
                }
            }

            if (shareQ88InputModel.BankerId != null && shareQ88InputModel.BankerId.Count > 0)
            {
                //dataSetModel.Q88SharedClientIds.AddRange(shareQ88InputModel.BankerId);
                clientIds.AddRange(shareQ88InputModel.BankerId);
                foreach (var e in shareQ88InputModel.BankerId)
                {
                    var index = dataSetModel.Q88SharedClientIds.Count() > 0 ? dataSetModel.Q88SharedClientIds.FindIndex(x => x == e) : -1;
                    if (index == -1)
                    {
                        dataSetModel.Q88SharedClientIds.Add(e);
                        var id = _clientRepository.GetUserAuthenticationIdByClient(e, loggedInContext, validationMessages);
                        if (id != null)
                        {
                            dataSetModel.Q88SharedUserIds.Add(new Guid(id.ToString()));
                        }
                    }
                }
            }
            if (shareQ88InputModel.SellerId != null && shareQ88InputModel.SellerId.Count > 0)
            {
                //dataSetModel.Q88SharedClientIds.AddRange(shareQ88InputModel.SellerId);
                clientIds.AddRange(shareQ88InputModel.SellerId);
                foreach (var e in shareQ88InputModel.SellerId)
                {
                    var index = dataSetModel.Q88SharedClientIds.Count() > 0 ? dataSetModel.Q88SharedClientIds.FindIndex(x => x == e) : -1;
                    if (index == -1)
                    {
                        dataSetModel.Q88SharedClientIds.Add(e);
                        var id = _clientRepository.GetUserAuthenticationIdByClient(e, loggedInContext, validationMessages);
                        if (id != null)
                        {
                            dataSetModel.Q88SharedUserIds.Add(new Guid(id.ToString()));
                        }
                    }
                }
            }
            if (shareQ88InputModel.BuyerId != null && shareQ88InputModel.BuyerId.Count > 0)
            {
                //dataSetModel.Q88SharedClientIds.AddRange(shareQ88InputModel.BuyerId);
                clientIds.AddRange(shareQ88InputModel.BuyerId);
                foreach (var e in shareQ88InputModel.BuyerId)
                {
                    var index = dataSetModel.Q88SharedClientIds.Count() > 0 ? dataSetModel.Q88SharedClientIds.FindIndex(x => x == e) : -1;
                    if (index == -1)
                    {
                        dataSetModel.Q88SharedClientIds.Add(e);
                        var id = _clientRepository.GetUserAuthenticationIdByClient(e, loggedInContext, validationMessages);
                        if (id != null)
                        {
                            dataSetModel.Q88SharedUserIds.Add(new Guid(id.ToString()));
                        }
                    }
                }
            }

            if (clientIds.Count > 0)
            {
                VesselConfirmationStatusModel status = _tradingRepository.GetAllVesselConfirmationStatus(new VesselConfirmationStatusModel() { StatusNameSearch = "Q88 Shared" }, loggedInContext, validationMessages).FirstOrDefault();
                dataSetModel.VesselConfirmationStatusId = status.StatusId;
            }

            dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(dataSetModel);

            Guid? result = await _dataSetService.CreateDataSet(dataSetUpsertInput, loggedInContext, validationMessages);

            await UpsertVesselConfirmation(dataSetModel, oldData, loggedInContext, validationMessages);

            if (clientIds.Count > 0)
            {
                SaveQ88ShareHistory(shareQ88InputModel, oldData, clientIds, loggedInContext, validationMessages);
            }
            ShareQ88Email(clientIds, oldData, loggedInContext, validationMessages);
            return result;
        }

        public async Task<Guid?> UpdateQ88DocumentStatus(UpdateQ88InputModel updateQ88InputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "ShareQ88Document", "Trading Service"));

            LoggingManager.Debug(updateQ88InputModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }

            var oldData = new ContractModel();
            ContractModel searchModel = new ContractModel();
            searchModel.ContractType = "rfqList";
            searchModel.ListType = "q88ForRfq";
            searchModel.DataSetId = updateQ88InputModel.DataSetId;
            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();
            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "VesselConfirmationIdForRFQ",
                KeyValue = "VesselConfirmationIdForRFQ"
            });
            searchModel.ParamsJson = paramsJsons;
            //List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();
            //paramsJsons.Add(new ParamsJsonModel()
            //{
            //    KeyName = "rfqList",
            //    KeyValue = "rfqList"
            //});
            //searchModel.ParamsJson = paramsJsons;
            oldData = GetContracts(searchModel, loggedInContext, validationMessages).FirstOrDefault();

            DataSetUpsertInputModel dataSetUpsertInput = new DataSetUpsertInputModel();
            dataSetUpsertInput.Id = updateQ88InputModel.DataSetId;
            dataSetUpsertInput.DataSourceId = oldData.ContractTemplateId;
            dataSetUpsertInput.UpdatedByUserId = loggedInContext.LoggedInUserId;
            dataSetUpsertInput.UpdatedDateTime = DateTime.UtcNow;

            var dataSetModel = new DataSetConversionModel();
            dataSetModel.FormData = oldData.FormData;
            dataSetModel.ClientId = oldData.ClientId;
            dataSetModel.BrokerId = oldData.BrokerId;
            dataSetModel.ReferenceId = oldData.ReferenceId;
            dataSetModel.TemplateTypeId = oldData.TemplateTypeId;
            dataSetModel.StatusId = oldData.StatusId;
            dataSetModel.Version = oldData.Version;
            dataSetModel.RFQId = oldData.RFQId;
            dataSetModel.RFQUniqueId = oldData.RFQUniqueId;
            dataSetModel.ContractType = "rfq";
            dataSetModel.AcceptedByClientUserId = oldData.AcceptedByClientUserId;
            dataSetModel.AcceptedByTraderUserId = oldData.AcceptedByTraderUserId;
            dataSetModel.IsAccepted = oldData.IsAccepted;
            dataSetModel.IsRejected = oldData.IsRejected;
            dataSetModel.ClientId = oldData.ClientId;
            dataSetModel.BrokerId = oldData.BrokerId;
            dataSetModel.ReferenceId = oldData.ReferenceId;
            dataSetModel.Q88SharedClientIds = oldData.Q88SharedClientIds;
            dataSetModel.Q88SharedUserIds = oldData.Q88SharedUserIds;
            dataSetModel.Q88AcceptedIds = oldData.Q88AcceptedIds;
            dataSetModel.Q88RejectedIds = oldData.Q88RejectedIds;
            dataSetModel.IsQ88Accepted = oldData.IsQ88Accepted;
            dataSetModel.IsQ88Rejected = oldData.IsQ88Rejected;
            dataSetModel.RFQAcceptedDateTime = oldData.RFQAcceptedDateTime;
            dataSetModel.RFQRejectedDateTime = oldData.RFQRejectedDateTime;

            dataSetModel.VesselConfirmationTemplateId = oldData.VesselConfirmationTemplateId;
            dataSetModel.VesselConfirmationStatusId = oldData.VesselConfirmationStatusId;
            dataSetModel.VesselConfirmationRejectedDateTime = oldData.VesselConfirmationRejectedDateTime;
            dataSetModel.VesselConfirmationRejectedByUserId = oldData.VesselConfirmationRejectedByUserId;
            dataSetModel.VesselConfirmationAcceptedDateTime = oldData.VesselConfirmationAcceptedDateTime;
            dataSetModel.VesselConfirmationAcceptedByClientUserId = oldData.VesselConfirmationAcceptedByClientUserId;
            dataSetModel.VesselConfirmationAcceptedByTraderUserId = oldData.VesselConfirmationAcceptedByTraderUserId;
            dataSetModel.IsVesselConfirmationAccepted = oldData.IsVesselConfirmationAccepted;
            dataSetModel.IsVesselConfirmationRejected = oldData.IsVesselConfirmationRejected;
            dataSetModel.VesselConfirmationFormData = oldData.VesselConfirmationFormData;
            //if (dataSetModel.Q88SharedClientIds == null)
            //{
            //    dataSetModel.Q88SharedClientIds = new List<Guid>();
            //    dataSetModel.Q88SharedUserIds = new List<Guid>();
            //}

            var userAuthenticationId = _clientRepository.GetUserAuthenticationIdByUserId(loggedInContext.LoggedInUserId, loggedInContext, validationMessages);
            if (updateQ88InputModel.IsRejected == true)
            {
                if (dataSetModel.Q88RejectedIds == null)
                {
                    dataSetModel.Q88RejectedIds = new List<Guid>();
                    dataSetModel.Q88Reject = new List<Q88RejectedModel>();
                }
                if(dataSetModel.Q88Reject == null)
                {
                    dataSetModel.Q88Reject = new List<Q88RejectedModel>();
                }

                var userIndex = dataSetModel.Q88SharedUserIds.FindIndex(x => x == userAuthenticationId);
                if (userIndex > -1)
                {
                    var index = dataSetModel.Q88RejectedIds.FindIndex(x => x == userAuthenticationId);
                    if (index == -1)
                    {
                        dataSetModel.Q88RejectedIds.Add(new Guid(userAuthenticationId.ToString()));
                        var reject = new Q88RejectedModel
                        {
                            RejectedByUserId = loggedInContext.LoggedInUserId,
                            Comment = updateQ88InputModel.RejectedComments
                        };
                        dataSetModel.Q88Reject.Add(reject);
                        //RFQStatusModel status = _tradingRepository.GetAllRFQStatus(new RFQStatusModel() { StatusName = "Rejected" }, loggedInContext, validationMessages).FirstOrDefault();
                        //dataSetModel.StatusId = status.RFQStatusId;
                        //dataSetModel.IsRejected = true;
                        if (oldData.IsVesselConfirmationAccepted == true)
                        {
                            dataSetUpsertInput.IsArchived = true;
                            dataSetUpsertInput.ArchivedByUserId = loggedInContext.LoggedInUserId;
                            dataSetUpsertInput.ArchivedDateTime = DateTime.UtcNow;
                            dataSetModel.RFQRejectedDateTime = dataSetUpsertInput.ArchivedDateTime;
                        }
                        else
                        {
                            dataSetModel.IsQ88Rejected = true;
                            dataSetModel.IsQ88Reshared = false;
                        }
                        VesselConfirmationStatusModel status = _tradingRepository.GetAllVesselConfirmationStatus(new VesselConfirmationStatusModel() { StatusNameSearch = "Q88 Rejected" }, loggedInContext, validationMessages).FirstOrDefault();
                        dataSetModel.VesselConfirmationStatusId = status.StatusId;
                    }
                    else
                    {
                        validationMessages.Add(new ValidationMessage
                        {
                            ValidationMessaage = "You have already Rejected Q88 Document."
                        });
                    }
                }
                else
                {
                    validationMessages.Add(new ValidationMessage
                    {
                        ValidationMessaage = "You don't have Permission to Reject Q88 Document."
                    });
                    return null;
                }
            }
            else if (updateQ88InputModel.IsAccepted == true)
            {
                if (dataSetModel.Q88AcceptedIds == null)
                {
                    dataSetModel.Q88AcceptedIds = new List<Guid>();
                }

                var userIndex = dataSetModel.Q88SharedUserIds.FindIndex(x => x == userAuthenticationId);
                if (userIndex > -1)
                {
                    var index = dataSetModel.Q88AcceptedIds.FindIndex(x => x == userAuthenticationId);
                    if (index == -1)
                    {
                        dataSetModel.Q88AcceptedIds.Add(new Guid(userAuthenticationId.ToString()));
                    }
                    else
                    {
                        validationMessages.Add(new ValidationMessage
                        {
                            ValidationMessaage = "You have already Accepted Q88 Document."
                        });
                        return null;
                    }

                    if (dataSetModel.Q88AcceptedIds.Count() == oldData.Q88SharedUserIds.Count())
                    {
                        dataSetModel.IsQ88Accepted = true;
                        VesselConfirmationStatusModel status = _tradingRepository.GetAllVesselConfirmationStatus(new VesselConfirmationStatusModel() { StatusNameSearch = "Q88 Approved" }, loggedInContext, validationMessages).FirstOrDefault();
                        dataSetModel.VesselConfirmationStatusId = status.StatusId;
                    }
                }
                else
                {
                    validationMessages.Add(new ValidationMessage
                    {
                        ValidationMessaage = "You don't have Permission to Accept Q88 Document."
                    });
                    return null;
                }
            }

            dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(dataSetModel);

            Guid? result = await _dataSetService.CreateDataSet(dataSetUpsertInput, loggedInContext, validationMessages);

            await UpsertVesselConfirmation(dataSetModel, oldData, loggedInContext, validationMessages);

            if (updateQ88InputModel.IsRejected == true)
            {
                SaveQ88History(updateQ88InputModel, oldData, loggedInContext, validationMessages);
                SendUpadteQ88Email(updateQ88InputModel, oldData, loggedInContext, validationMessages);
            }
            else if (updateQ88InputModel.IsAccepted == true)
            {
                SaveQ88History(updateQ88InputModel, oldData, loggedInContext, validationMessages);
                SendUpadteQ88Email(updateQ88InputModel, oldData, loggedInContext, validationMessages);
            }

            return result;
        }

        public void SaveVesselConfirmationHistory(RFQRequestInputModel newData, ContractModel oldData, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages, string type)
        {
            UserDbEntity loggedInUserDetails = new UserDbEntity();
            if (loggedInContext.LoggedInUserId != Guid.Empty)
            {
                loggedInUserDetails = _userRepository.GetSingleUserDetails(loggedInContext.LoggedInUserId);
            }
            var dataSetHistoryModel = new DataSetHistoryInputModel();
            dataSetHistoryModel.CreatedByUserName = loggedInUserDetails != null ? loggedInUserDetails.FullName : null;

            if (type == "create")
            {
                dataSetHistoryModel = new DataSetHistoryInputModel();
                dataSetHistoryModel.DataSetId = newData.DataSetId;
                dataSetHistoryModel.Field = "Vessel Confirmation";
                dataSetHistoryModel.OldValue = "-";
                dataSetHistoryModel.NewValue = "Requested";
                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
            }
            else if (type == "received")
            {
                dataSetHistoryModel = new DataSetHistoryInputModel();
                dataSetHistoryModel.DataSetId = newData.DataSetId;
                dataSetHistoryModel.Field = "Vessel Confirmation";
                dataSetHistoryModel.OldValue = "-";
                dataSetHistoryModel.NewValue = "Received";
                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
            }
            else
            {
                var originalJson = string.Empty;
                if (oldData != null)
                {
                    originalJson = oldData.VesselConfirmationFormData == null ? "" : oldData.VesselConfirmationFormData.ToString();
                }
                if (originalJson != null && !string.IsNullOrEmpty(originalJson) && oldData != null)
                {
                    var jdp = new JsonDiffPatch();
                    JToken diffJsonResult = jdp.Diff(JObject.Parse(originalJson), JObject.Parse(newData.VesselConfirmationFormData.ToString()));
                    if (newData.SendBackComments != null && newData.SendBackComments.Length > 0)
                    {
                        dataSetHistoryModel = new DataSetHistoryInputModel();
                        dataSetHistoryModel.DataSetId = newData.DataSetId;
                        dataSetHistoryModel.Field = "Send Back";
                        dataSetHistoryModel.OldValue = "-";
                        dataSetHistoryModel.NewValue = "Send Back ( " + newData.SendBackComments + " )";

                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }
                    if (diffJsonResult != null)
                    {
                        List<CountryApiReturnModel> countryList = _companyStructureManagementService.GetCountries(new CountrySearchInputModel(), validationMessages, loggedInContext);
                        List<PaymentTermOutputModel> portsList = _leadService.GetPortDetails(new PaymentTermSearchInputModel(), loggedInContext, validationMessages);

                        var oldObj = JObject.Parse(oldData.VesselConfirmationFormData.ToString());
                        var newObj = JObject.Parse(newData.VesselConfirmationFormData.ToString());
                        foreach (var record in diffJsonResult.Children())
                        {
                            dataSetHistoryModel = new DataSetHistoryInputModel();
                            if (record.Path == "portOfLoadingCountry" || record.Path == "portOfDischargeCountry")
                            {
                                var oldValue = countryList.Find(x => x.CountryId.ToString() == record.First.First.ToString());
                                var newValue = countryList.Find(x => x.CountryId.ToString() == record.First.Last.ToString());
                                dataSetHistoryModel.DataSetId = newData.DataSetId;
                                dataSetHistoryModel.Field = record.Path;
                                dataSetHistoryModel.OldValue = oldValue != null ? oldValue.CountryName : "";
                                dataSetHistoryModel.NewValue = newValue != null ? newValue.CountryName : "";
                            }
                            else if (record.Path == "vesselOwnerName")
                            {
                                dataSetHistoryModel.DataSetId = newData.DataSetId;
                                dataSetHistoryModel.Field = record.Path;
                                dataSetHistoryModel.OldValue = record.First.First != null && record.First.First.ToString() != "" ?
                                    _clientService.GetClients(new ClientInputModel() { ClientId = new Guid(record.First.First.ToString()) }, loggedInContext, validationMessages).FirstOrDefault()?.FullName : "";
                                dataSetHistoryModel.NewValue = record.First.Last != null && record.First.Last.ToString() != "" ?
                                    _clientService.GetClients(new ClientInputModel() { ClientId = new Guid(record.First.Last.ToString()) }, loggedInContext, validationMessages).FirstOrDefault()?.FullName : "";
                            }
                            else if (record.Path == "portCategoryDischarge" || record.Path == "portCategoryLoading")
                            {
                                var first = record.First.First.ToString();
                                var last = record.First.Last.ToString();
                                if (first != last)
                                {
                                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                                    dataSetHistoryModel.Field = record.Path;
                                    dataSetHistoryModel.OldValue = record.First.First != null && record.First.First.ToString() != "" ?
                                        _tradingRepository.GetAllPortCategory(new PortCategorySearchInputModel() { Id = new Guid(record.First.First.ToString()) }, loggedInContext, validationMessages).FirstOrDefault()?.Name : "";
                                    dataSetHistoryModel.NewValue = record.First.Last != null && record.First.Last.ToString() != "" ?
                                        _tradingRepository.GetAllPortCategory(new PortCategorySearchInputModel() { Id = new Guid(record.First.Last.ToString()) }, loggedInContext, validationMessages).FirstOrDefault()?.Name : "";
                                }
                            }
                            else if (record.Path.Contains("-multiple"))
                            {
                                var first = oldObj.ContainsKey(record.Path.ToString()) ? oldObj[record.Path.ToString()].ToString() : "";
                                var last = newObj.ContainsKey(record.Path.ToString()) ? newObj[record.Path.ToString()].ToString() : "";
                                var oldValue = string.Empty;
                                var newValue = string.Empty;
                                if (record.Path == "dateTime-multiple" || record.Path == "vesselItenary-multiple")
                                {
                                    oldValue = first;
                                    newValue = last;
                                }
                                else if (record.Path == "portOfDischarge-multiple" || record.Path == "portOfLoading-multiple")
                                {
                                    var oldList = first.Split(',');
                                    var newList = last.Split(',');
                                    if (oldList.Count() > 0)
                                    {
                                        foreach (var old in oldList)
                                        {
                                            if (oldValue == string.Empty)
                                            {
                                                oldValue = portsList.Find(x => x.Id.ToString() == old).Name;
                                            }
                                            else
                                            {
                                                oldValue = oldValue + ", " + portsList.Find(x => x.Id.ToString() == old).Name;
                                            }
                                        }
                                    }
                                    if (newList.Count() > 0)
                                    {
                                        foreach (var newval in newList)
                                        {
                                            if (newValue == string.Empty)
                                            {
                                                newValue = portsList.Find(x => x.Id.ToString() == newval).Name;
                                            }
                                            else
                                            {
                                                newValue = newValue + ", " + portsList.Find(x => x.Id.ToString() == newval).Name;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    oldValue = first;
                                    newValue = last;
                                }

                                if (first != last)
                                {
                                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                                    dataSetHistoryModel.Field = record.Path;
                                    dataSetHistoryModel.OldValue = oldValue;
                                    dataSetHistoryModel.NewValue = newValue;
                                }
                            }
                            else if (record.Path != "vesselItenary" && record.Path != "dateTime" && record.Path != "portOfLoading" && record.Path != "portOfDischarge")
                            {
                                dataSetHistoryModel.DataSetId = newData.DataSetId;
                                dataSetHistoryModel.Field = record.Path;
                                dataSetHistoryModel.OldValue = record.First.First.ToString();
                                dataSetHistoryModel.NewValue = record.First.Last.ToString();
                            }

                            _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                        }

                    }
                }
                if (newData.IsAccepted == true)
                {
                    dataSetHistoryModel = new DataSetHistoryInputModel();
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "Vessel Confirmation Accept";
                    dataSetHistoryModel.OldValue = "-";
                    dataSetHistoryModel.NewValue = "Accepted";

                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
                if (newData.IsRejected == true)
                {
                    dataSetHistoryModel = new DataSetHistoryInputModel();
                    dataSetHistoryModel.DataSetId = newData.DataSetId;
                    dataSetHistoryModel.Field = "Vessel Confirmation Reject";
                    dataSetHistoryModel.OldValue = "-";
                    dataSetHistoryModel.NewValue = "Rejected ( " + newData.RejectedComments + " )";

                    _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                }
            }
        }

        public void SaveRfqCreateHistory(List<RFQReferenceOutputModel> rfqList, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            var dataSetHistoryModel = new DataSetHistoryInputModel();

            foreach (var rfq in rfqList)
            {
                dataSetHistoryModel = new DataSetHistoryInputModel();
                dataSetHistoryModel.DataSetId = rfq.Id;
                dataSetHistoryModel.Field = "RFQ Created";
                dataSetHistoryModel.OldValue = "-";
                dataSetHistoryModel.NewValue = "Created";

                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
            }
        }

        public void SaveRfqFilledHistory(RFQRequestInputModel newData, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            var dataSetHistoryModel = new DataSetHistoryInputModel();
            dataSetHistoryModel = new DataSetHistoryInputModel();
            dataSetHistoryModel.DataSetId = newData.DataSetId;
            dataSetHistoryModel.Field = "RFQ Filled";
            dataSetHistoryModel.OldValue = "-";
            dataSetHistoryModel.NewValue = "Filled";

            _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
        }

        public void SaveRfqQ88UploadDeleteHistory(RFQRequestInputModel newData, string type, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            var dataSetHistoryModel = new DataSetHistoryInputModel();
            if (type == "upload")
            {
                dataSetHistoryModel = new DataSetHistoryInputModel();
                dataSetHistoryModel.DataSetId = newData.DataSetId;
                dataSetHistoryModel.Field = "Q88 Document";
                dataSetHistoryModel.OldValue = "-";
                dataSetHistoryModel.NewValue = "Uploaded";
            }
            if (type == "delete")
            {
                dataSetHistoryModel = new DataSetHistoryInputModel();
                dataSetHistoryModel.DataSetId = newData.DataSetId;
                dataSetHistoryModel.Field = "Q88 Document";
                dataSetHistoryModel.OldValue = "-";
                dataSetHistoryModel.NewValue = "Delete";
            }
            _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
        }

        public void SaveRfqHistory(RFQRequestInputModel newData, ContractModel oldData, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            var originalJson = string.Empty;
            var newOriginalJson = string.Empty;
            if (oldData != null)
            {
                originalJson = oldData.FormData.ToString();
                var jobj = JObject.Parse(oldData.FormData.ToString());
                newOriginalJson = jobj.ContainsKey("data") ? jobj["data"].ToString() : null;
            }
            var dataSetHistoryModel = new DataSetHistoryInputModel();
            if (newData.SendBackComments != null && newData.SendBackComments.Length > 0)
            {
                dataSetHistoryModel = new DataSetHistoryInputModel();
                dataSetHistoryModel.DataSetId = newData.DataSetId;
                dataSetHistoryModel.Field = "Send Back";
                dataSetHistoryModel.OldValue = "-";
                dataSetHistoryModel.NewValue = "Send Back ( " + newData.SendBackComments + " )";

                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
            }
            if (originalJson != null && !string.IsNullOrEmpty(originalJson))
            {
                var jobj = JObject.Parse(newData.DataJson.ToString());
                var newJson = jobj.ContainsKey("data") ? jobj["data"].ToString() : null;
                var jdp = new JsonDiffPatch();
                JToken diffJsonResult = jdp.Diff(JObject.Parse(newOriginalJson), JObject.Parse(newJson));

                if (diffJsonResult != null)
                {
                    var jobj1 = JObject.Parse(oldData.FormData.ToString());
                    var newOriginal1 = jobj1.ContainsKey("data") ? jobj1["data"].ToString() : null;

                    List<CountryApiReturnModel> countryList = _companyStructureManagementService.GetCountries(new CountrySearchInputModel(), validationMessages, loggedInContext);
                    List<PaymentTermOutputModel> portsList = _leadService.GetPortDetails(new PaymentTermSearchInputModel(), loggedInContext, validationMessages);
                    foreach (var record in diffJsonResult.Children())
                    {
                        dataSetHistoryModel = new DataSetHistoryInputModel();
                        if (record.Path.Contains("-multiple"))
                        {
                            var first = JObject.Parse(newOriginal1).ContainsKey(record.Path.ToString()) ? JObject.Parse(newOriginal1)[record.Path.ToString()].ToString() : "";
                            var last = JObject.Parse(newJson).ContainsKey(record.Path.ToString()) ? JObject.Parse(newJson)[record.Path.ToString()].ToString() : "";
                            var oldValue = string.Empty;
                            var newValue = string.Empty;
                            if (record.Path == "portofDischargeC-multiple" || record.Path == "portOfDischargeT-multiple" || record.Path == "portofLoadingC-multiple" || record.Path == "portOfLoadingT-multiple")
                            {
                                var oldList = first.Split(',');
                                var newList = last.Split(',');
                                if (oldList.Count() > 0)
                                {
                                    foreach (var old in oldList)
                                    {
                                        if (oldValue == string.Empty)
                                        {
                                            oldValue = portsList.Find(x => x.Id.ToString() == old).Name;
                                        }
                                        else
                                        {
                                            oldValue = oldValue + ", " + portsList.Find(x => x.Id.ToString() == old).Name;
                                        }
                                    }
                                }
                                if (newList.Count() > 0)
                                {
                                    foreach (var newval in newList)
                                    {
                                        if (newValue == string.Empty)
                                        {
                                            newValue = portsList.Find(x => x.Id.ToString() == newval).Name;
                                        }
                                        else
                                        {
                                            newValue = newValue + ", " + portsList.Find(x => x.Id.ToString() == newval).Name;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                oldValue = first;
                                newValue = last;
                            }

                            if (first != last)
                            {
                                dataSetHistoryModel.DataSetId = newData.DataSetId;
                                dataSetHistoryModel.Field = record.Path;
                                dataSetHistoryModel.OldValue = oldValue;
                                dataSetHistoryModel.NewValue = newValue;
                            }
                        }
                        else if (record.Path == "portOfLoadingCountry" || record.Path == "portOfDischargeCountry")
                        {
                            var oldValue = countryList.Find(x => x.CountryId.ToString() == record.First.First.ToString());
                            var newValue = countryList.Find(x => x.CountryId.ToString() == record.First.Last.ToString());
                            dataSetHistoryModel.DataSetId = newData.DataSetId;
                            dataSetHistoryModel.Field = record.Path;
                            dataSetHistoryModel.OldValue = oldValue != null ? oldValue.CountryName : "";
                            dataSetHistoryModel.NewValue = newValue != null ? newValue.CountryName : "";
                        }
                        else if (record.Path == "portofLoadingCountryT1" || record.Path == "portofDischargeCountryT1")
                        {
                            var first = record.First.First.ToString();
                            var last = record.First.Last.ToString();
                            if (first != last)
                            {
                                dataSetHistoryModel.DataSetId = newData.DataSetId;
                                dataSetHistoryModel.Field = record.Path;
                                dataSetHistoryModel.OldValue = record.First.First != null && record.First.First.ToString() != "" ?
                                    _tradingRepository.GetAllPortCategory(new PortCategorySearchInputModel() { Id = new Guid(record.First.First.ToString()) }, loggedInContext, validationMessages).FirstOrDefault()?.Name : "";
                                dataSetHistoryModel.NewValue = record.First.Last != null && record.First.Last.ToString() != "" ?
                                    _tradingRepository.GetAllPortCategory(new PortCategorySearchInputModel() { Id = new Guid(record.First.Last.ToString()) }, loggedInContext, validationMessages).FirstOrDefault()?.Name : "";
                            }
                        }
                        else if (record.Path != "portofDischargeC" && record.Path != "portofLoadingC" && record.Path != "portofDischargeT" && record.Path != "portofLoadingT")
                        {
                            dataSetHistoryModel.DataSetId = newData.DataSetId;
                            dataSetHistoryModel.Field = record.Path;
                            dataSetHistoryModel.OldValue = record.First.First.ToString();
                            dataSetHistoryModel.NewValue = record.First.Last.ToString();
                        }
                        _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
                    }

                }
            }
            if (newData.IsAccepted == true)
            {
                dataSetHistoryModel = new DataSetHistoryInputModel();
                dataSetHistoryModel.DataSetId = newData.DataSetId;
                dataSetHistoryModel.Field = "Accept";
                dataSetHistoryModel.OldValue = "-";
                dataSetHistoryModel.NewValue = "Accepted";

                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
            }
            if (newData.IsRejected == true)
            {
                dataSetHistoryModel = new DataSetHistoryInputModel();
                dataSetHistoryModel.DataSetId = newData.DataSetId;
                dataSetHistoryModel.Field = "Reject";
                dataSetHistoryModel.OldValue = "-";
                dataSetHistoryModel.NewValue = "Rejected ( " + newData.RejectedComments + " )";

                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
            }
        }

        public void SaveRfqToVesselContractHistory(ContractModel oldData, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages, string type)
        {
            if (type == "accept")
            {
                var dataSetHistoryModel = new DataSetHistoryInputModel();

                dataSetHistoryModel = new DataSetHistoryInputModel();
                dataSetHistoryModel.DataSetId = oldData.DataSetId;
                dataSetHistoryModel.Field = "Converted To Vessel";
                dataSetHistoryModel.OldValue = "-";
                dataSetHistoryModel.NewValue = "Converted To Vessel";

                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
            }
            else
            {
                var dataSetHistoryModel = new DataSetHistoryInputModel();

                dataSetHistoryModel = new DataSetHistoryInputModel();
                dataSetHistoryModel.DataSetId = oldData.DataSetId;
                dataSetHistoryModel.Field = "Reject";
                dataSetHistoryModel.OldValue = "-";
                dataSetHistoryModel.NewValue = "Rejected";
                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
            }

        }

        public void SaveQ88History(UpdateQ88InputModel newData, ContractModel oldData, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            var dataSetHistoryModel = new DataSetHistoryInputModel();

            if (newData.IsAccepted == true)
            {
                dataSetHistoryModel = new DataSetHistoryInputModel();
                dataSetHistoryModel.DataSetId = newData.DataSetId;
                dataSetHistoryModel.Field = "Q88 - Accept";
                dataSetHistoryModel.OldValue = "-";
                dataSetHistoryModel.NewValue = "Accepted";

                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
            }
            if (newData.IsRejected == true)
            {
                dataSetHistoryModel = new DataSetHistoryInputModel();
                dataSetHistoryModel.DataSetId = newData.DataSetId;
                dataSetHistoryModel.Field = "Q88 - Reject";
                dataSetHistoryModel.OldValue = "-";
                dataSetHistoryModel.NewValue = "Rejected ( " + newData.RejectedComments + " )";

                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
            }
        }

        public void SaveQ88ShareHistory(ShareQ88InputModel newData, ContractModel oldData, List<Guid> clientList, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            List<string> clientListName = new List<string>();
            var clientNames = string.Empty;
            foreach (var c in clientList)
            {
                var name = _clientRepository.GetUserFullNameByClientId(c, loggedInContext, validationMessages);
                if (clientListName.Count > 0)
                {
                    clientNames = clientNames + ", " + name;
                }
                else
                {
                    clientNames = name;
                }
                clientListName.Add(name);
            }

            var dataSetHistoryModel = new DataSetHistoryInputModel();

            dataSetHistoryModel = new DataSetHistoryInputModel();
            dataSetHistoryModel.DataSetId = newData.DataSetId;
            dataSetHistoryModel.Field = "Q88 Shared";
            dataSetHistoryModel.OldValue = "-";
            dataSetHistoryModel.NewValue = "Shared to " + clientNames;

            _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
        }

        private string SendVesselConfirmationRequestToClient(RFQRequestInputModel newData, ContractModel oldData, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages, Guid? clientId)
        {
            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = clientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);

            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SendVesselConfirmationRequestToClient", "Trading Service"));
            {
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/rfq/" + oldData.DataSetId;
                var messageBody = "Please find the vessel confirmation for your next action." + RouteAddress;

                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = clientId,
                    EmailTemplateName = "VesselConfirmationRequestForRFQTemplate"
                };
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                JObject result = JObject.Parse(newData.DataJson);
                var data = result["data"].ToString();

                JObject formfield = JsonConvert.DeserializeObject<JObject>(data);

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }
                var rfqId = "RFQ-" + newData.RFQId + "-" + oldData.RFQUniqueId;
                var commodity = string.Empty;
                var quantity = string.Empty;
                foreach (var keyValue in keyValueMap)
                {
                    if (keyValue.Key == "commodity2")
                    {
                        if (keyValue.Value != "" && keyValue.Value != null)
                        {
                            commodity = (from commoditi in commodityList
                                         where commoditi.ProductId == new Guid(keyValue.Value)
                                         select commoditi).FirstOrDefault().ProductName;
                        }
                        else
                        {
                            commodity = "";
                        }
                    }
                    if (keyValue.Key == "quantityMtT")
                    {
                        quantity = keyValue.Value;
                    }
                }
                if (quantity != null && quantity != string.Empty)
                {
                    quantity = String.Format("{0:n}", Int64.Parse(quantity));
                }
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##Quantity##", quantity).Replace("##Commodity##", commodity).Replace("##siteUrl##", RouteAddress)
                    .Replace("##RFQId##", rfqId.ToString()).Replace("##CompanyLogo##", CompanyLogo);
                var subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString());
                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        CCMails = null,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });

                return "";
            }
        }

        public void ShareQ88Email(List<Guid> ClientIds, ContractModel oldData, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            //TaskWrapper.ExecuteFunctionInNewThread(() =>
            //{
            SendQ88ShareEmail(ClientIds, oldData, loggedInContext, validationMessages);
            //});
        }

        public void SendQ88ShareEmail(List<Guid> ClientIds, ContractModel oldData, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {

            var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
            var RouteAddress = siteDomain + "/trading/view-Q88/" + oldData.DataSetId;
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var user = _userRepository.GetSingleUserDetails(new Guid(loggedInContext.LoggedInUserId.ToString()));

            List<CountryApiReturnModel> countryList = _companyStructureManagementService.GetCountries(new CountrySearchInputModel(), validationMessages, loggedInContext);
            List<PaymentTermOutputModel> portsList = _leadService.GetPortDetails(new PaymentTermSearchInputModel(), loggedInContext, validationMessages);
            List<PortCategoryModel> portCategory = _tradingRepository.GetAllPortCategory(new PortCategorySearchInputModel(), loggedInContext, validationMessages);

            JObject formfield = (JObject)JsonConvert.DeserializeObject(oldData.VesselConfirmationFormData.ToString());
            Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

            foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
            {
                keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
            }
            var vesselName = string.Empty;
            var vesselOwner = string.Empty;
            var vesselOwner1 = string.Empty;
            var vesselItenaryData = string.Empty;
            var portOfLoading = string.Empty;
            var portOfLoadingCountry = string.Empty;
            var portOfDischarge = string.Empty;
            var portOfDischargeCountry = string.Empty;
            var portOfLoadingCategory = string.Empty;
            var portOfDischargeCategory = string.Empty;
            DateTime[] vesselItenaryDate = new DateTime[0];
            string[] vesselItenary = new string[0];
            string[] portLoading = new string[0];
            string[] portDischarge = new string[0];
            foreach (var keyValue in keyValueMap)
            {
                if (keyValue.Key == "vesselName")
                {
                    vesselName = keyValue.Value;
                }
                if (keyValue.Key == "vesselOwnerName")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var vesselOwnerDetails = _clientService.GetClients(new ClientInputModel() { ClientId = new Guid(keyValue.Value) }, loggedInContext, validationMessages).FirstOrDefault();
                        if (vesselOwnerDetails != null)
                        {
                            vesselOwner = vesselOwnerDetails.FullName;
                        }
                        else
                        {
                            vesselOwner = "";
                        }
                    }
                    else
                    {
                        vesselOwner = "";
                    }
                }
                if (keyValue.Key == "vesselOwnerName1")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        vesselOwner1 = keyValue.Value;
                    }
                    else
                    {
                        vesselOwner1 = "";
                    }
                }
                if (keyValue.Key == "dateTime")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var data = keyValue.Value;
                        vesselItenaryDate = JsonConvert.DeserializeObject<DateTime[]>(data);
                    }
                    else
                    {
                        vesselItenaryDate = new DateTime[0];
                    }
                }
                if (keyValue.Key == "vesselItenary")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var data = keyValue.Value;
                        vesselItenary = JsonConvert.DeserializeObject<string[]>(data);
                    }
                    else
                    {
                        vesselItenary = new string[0];
                    }
                }
                if (keyValue.Key == "portOfLoading")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var data = keyValue.Value;
                        portLoading = JsonConvert.DeserializeObject<string[]>(data);
                        if (portLoading.Length > 0)
                        {
                            foreach (var port in portLoading)
                            {
                                var value = portsList.Find(x => x.Id.ToString() == port.ToString());
                                if (portOfLoading == "")
                                {
                                    portOfLoading = value.Name;
                                }
                                else
                                {
                                    portOfLoading = portOfLoading + ", " + value.Name;
                                }
                            }
                        }
                        else
                        {
                            portOfLoading = "";
                        }
                    }
                    else
                    {
                        portOfLoading = "";
                    }
                }
                if (keyValue.Key == "portOfDischarge")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var data = keyValue.Value;
                        portDischarge = JsonConvert.DeserializeObject<string[]>(data);
                        if (portDischarge.Length > 0)
                        {
                            foreach (var port in portDischarge)
                            {
                                var value = portsList.Find(x => x.Id.ToString() == port.ToString());
                                if (portOfDischarge == "")
                                {
                                    portOfDischarge = value.Name;
                                }
                                else
                                {
                                    portOfDischarge = portOfDischarge + ", " + value.Name;
                                }
                            }
                        }
                        else
                        {
                            portOfDischarge = "";
                        }
                    }
                    else
                    {
                        portOfDischarge = "";
                    }
                }
                if (keyValue.Key == "portOfLoadingCountry")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var country = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                        if (country != null)
                        {
                            portOfLoadingCountry = country.CountryName;
                        }
                        else
                        {
                            portOfLoadingCountry = keyValue.Value;
                        }
                    }
                    else
                    {
                        portOfLoadingCountry = "";
                    }
                }
                if (keyValue.Key == "portOfDischargeCountry")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var country = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                        if (country != null)
                        {
                            portOfDischargeCountry = country.CountryName;
                        }
                        else
                        {
                            portOfDischargeCountry = keyValue.Value;
                        }
                    }
                    else
                    {
                        portOfDischargeCountry = "";
                    }
                }
                if (keyValue.Key == "portCategoryLoading")
                {
                    if (keyValue.Value != "" && keyValue.Value != null)
                    {
                        var category = portCategory.Find(x => x.Id.ToString() == keyValue.Value);
                        if (category != null)
                        {
                            portOfLoadingCategory = category.Name;
                        }
                        else
                        {
                            portOfLoadingCategory = "";
                        }
                    }
                    else
                    {
                        portOfLoadingCategory = "";
                    }
                }
                if (keyValue.Key == "portCategoryDischarge")
                {
                    if (keyValue.Value != "" && keyValue.Value != null)
                    {
                        var category = portCategory.Find(x => x.Id.ToString() == keyValue.Value);
                        if (category != null)
                        {
                            portOfDischargeCategory = category.Name;
                        }
                        else
                        {
                            portOfDischargeCategory = "";
                        }
                    }
                    else
                    {
                        portOfDischargeCategory = "";
                    }
                }
            }

            if (vesselOwner == null || vesselOwner == "")
            {
                vesselOwner = vesselOwner1;
            }

            var itenaryLength = vesselItenary.Length > vesselItenaryDate.Length ? vesselItenary.Length : vesselItenaryDate.Length;

            for (var i = 0; i < itenaryLength; i++)
            {
                var data = string.Empty;
                if (vesselItenary.Length == vesselItenaryDate.Length)
                {
                    data = vesselItenary[i] + ", " + vesselItenaryDate[i].ToString("dd-MMM-yyyy") + "<br>";
                }
                else
                {
                    if (vesselItenary.Length > vesselItenaryDate.Length)
                    {
                        if (i < vesselItenary.Length && i < vesselItenaryDate.Length)
                        {
                            data = vesselItenary[i] + ", " + vesselItenaryDate[i].ToString("dd-MMM-yyyy") + "<br>";
                        }
                        if (i < vesselItenary.Length && i >= vesselItenaryDate.Length)
                        {
                            data = vesselItenary[i] + "<br>";
                        }
                    }
                    else
                    {
                        if (i < vesselItenary.Length && i < vesselItenaryDate.Length)
                        {
                            data = vesselItenary[i] + ", " + vesselItenaryDate[i].ToString("dd-MMM-yyyy") + "<br>";
                        }
                        if (i >= vesselItenary.Length && i < vesselItenaryDate.Length)
                        {
                            data = vesselItenaryDate[i].ToString("dd-MMM-yyyy") + "<br>";
                        }
                    }
                }
                vesselItenaryData = vesselItenaryData + data;
            }

            foreach (var clientId in ClientIds)
            {
                ClientInputModel clientInputModel = new ClientInputModel();
                clientInputModel.ClientId = clientId;
                List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);

                var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
                var toEmails = clientList[0].Email.Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                string messageBody = "Please find the Q88 for your next action." + RouteAddress;

                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = clientId,
                    EmailTemplateName = "Q88ShareTemplate"
                };

                var loading = portOfLoadingCategory + " - " + portOfLoading + ", " + portOfLoadingCountry;
                var discharge = portOfDischargeCategory + " - " + portOfDischarge + ", " + portOfDischargeCountry;

                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##siteUrl##", RouteAddress).Replace("##VesselName##", vesselName).Replace("##VesselOwner##", vesselOwner).Replace("##VesselItenary##", vesselItenaryData)
                    .Replace("##CompanyLogo##", CompanyLogo).Replace("##UserName##", user.FullName).Replace("##PortOfLoading##", loading).Replace("##PortOfDischarge##", discharge)
                    .Replace("##PortofLoading##", loading).Replace("##PortofDischarge##", discharge);

                var subject = template.EmailSubject.Replace("##UserName##", user.FullName);
                //template.EmailSubject;

                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);

                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });
            }
        }

        public void SendUpadteQ88Email(UpdateQ88InputModel updateQ88InputModel, ContractModel oldData, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            var rfqId = "RFQ-" + oldData.RFQId + "-" + oldData.RFQUniqueId;


            var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
            var RouteAddress = siteDomain + "/trading/view-Q88/" + updateQ88InputModel.DataSetId;

            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = oldData.ClientId == null ? oldData.BrokerId : oldData.ClientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(oldData.CreatedByUserId, loggedInContext, validationMessages);
            List<CountryApiReturnModel> countryList = _companyStructureManagementService.GetCountries(new CountrySearchInputModel(), validationMessages, loggedInContext);
            var traderDetails = _userRepository.GetUserDetailsAndCountry(oldData.CreatedByUserId, loggedInContext, validationMessages).FirstOrDefault();  //_userRepository.GetSingleUserDetails(new Guid(oldData.CreatedByUserId.ToString()));

            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(clientList[0].UserId);

            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";

            string[] toEmails = usersList[0].UserName.Trim().Split('\n');
            string[] toCCEmails = clientList[0].Email.Trim().Split('\n');

            //toEmails[1] = usersList[0].UserName.Trim();
            var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
            var traderMobileNo = usersList[0].CountryCode + usersList[0].MobileNo;

            toEmails[0] = traderDetails.Email;
            List<PaymentTermOutputModel> portsList = _leadService.GetPortDetails(new PaymentTermSearchInputModel(), loggedInContext, validationMessages);
            List<PortCategoryModel> portCategory = _tradingRepository.GetAllPortCategory(new PortCategorySearchInputModel(), loggedInContext, validationMessages);
            JObject formfield = (JObject)JsonConvert.DeserializeObject(oldData.VesselConfirmationFormData.ToString());
            Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

            foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
            {
                keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
            }
            var vesselName = string.Empty;
            var vesselOwner = string.Empty;
            var vesselOwner1 = string.Empty;
            var vesselItenaryData = string.Empty;
            var portOfLoading = string.Empty;
            var portOfLoadingCountry = string.Empty;
            var portOfDischarge = string.Empty;
            var portOfDischargeCountry = string.Empty;
            var portOfLoadingCategory = string.Empty;
            var portOfDischargeCategory = string.Empty;
            DateTime[] vesselItenaryDate = new DateTime[0];
            string[] vesselItenary = new string[0];
            string[] portLoading = new string[0];
            string[] portDischarge = new string[0];
            foreach (var keyValue in keyValueMap)
            {
                if (keyValue.Key == "vesselName")
                {
                    vesselName = keyValue.Value;
                }
                if (keyValue.Key == "vesselOwnerName")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var vesselOwnerDetails = _clientService.GetClients(new ClientInputModel() { ClientId = new Guid(keyValue.Value) }, loggedInContext, validationMessages).FirstOrDefault();
                        if (vesselOwnerDetails != null)
                        {
                            vesselOwner = vesselOwnerDetails.FullName;
                        }
                        else
                        {
                            vesselOwner = "";
                        }
                    }
                    else
                    {
                        vesselOwner = "";
                    }
                }
                if (keyValue.Key == "vesselOwnerName1")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        vesselOwner1 = keyValue.Value;
                    }
                    else
                    {
                        vesselOwner1 = "";
                    }
                }
                if (keyValue.Key == "dateTime")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var data = keyValue.Value;
                        vesselItenaryDate = JsonConvert.DeserializeObject<DateTime[]>(data);
                    }
                    else
                    {
                        vesselItenaryDate = new DateTime[0];
                    }
                }
                if (keyValue.Key == "vesselItenary")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var data = keyValue.Value;
                        vesselItenary = JsonConvert.DeserializeObject<string[]>(data);
                    }
                    else
                    {
                        vesselItenary = new string[0];
                    }
                }
                if (keyValue.Key == "portOfLoading")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var data = keyValue.Value;
                        portLoading = JsonConvert.DeserializeObject<string[]>(data);
                        if (portLoading.Length > 0)
                        {
                            foreach (var port in portLoading)
                            {
                                var value = portsList.Find(x => x.Id.ToString() == port.ToString());
                                if (portOfLoading == "")
                                {
                                    portOfLoading = value.Name;
                                }
                                else
                                {
                                    portOfLoading = portOfLoading + ", " + value.Name;
                                }
                            }
                        }
                        else
                        {
                            portOfLoading = "";
                        }
                    }
                    else
                    {
                        portOfLoading = "";
                    }
                }
                if (keyValue.Key == "portOfDischarge")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var data = keyValue.Value;
                        portDischarge = JsonConvert.DeserializeObject<string[]>(data);
                        if (portDischarge.Length > 0)
                        {
                            foreach (var port in portDischarge)
                            {
                                var value = portsList.Find(x => x.Id.ToString() == port.ToString());
                                if (portOfDischarge == "")
                                {
                                    portOfDischarge = value.Name;
                                }
                                else
                                {
                                    portOfDischarge = portOfDischarge + ", " + value.Name;
                                }
                            }
                        }
                        else
                        {
                            portOfDischarge = "";
                        }
                    }
                    else
                    {
                        portOfDischarge = "";
                    }
                }
                if (keyValue.Key == "portOfLoadingCountry")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var country = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                        if (country != null)
                        {
                            portOfLoadingCountry = country.CountryName;
                        }
                        else
                        {
                            portOfLoadingCountry = keyValue.Value;
                        }
                    }
                    else
                    {
                        portOfLoadingCountry = "";
                    }
                }
                if (keyValue.Key == "portOfDischargeCountry")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var country = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                        if (country != null)
                        {
                            portOfDischargeCountry = country.CountryName;
                        }
                        else
                        {
                            portOfDischargeCountry = keyValue.Value;
                        }
                    }
                    else
                    {
                        portOfDischargeCountry = "";
                    }
                }
                if (keyValue.Key == "portCategoryLoading")
                {
                    if (keyValue.Value != "" && keyValue.Value != null)
                    {
                        var category = portCategory.Find(x => x.Id.ToString() == keyValue.Value);
                        if (category != null)
                        {
                            portOfLoadingCategory = category.Name;
                        }
                        else
                        {
                            portOfLoadingCategory = "";
                        }
                    }
                    else
                    {
                        portOfLoadingCategory = "";
                    }
                }
                if (keyValue.Key == "portCategoryDischarge")
                {
                    if (keyValue.Value != "" && keyValue.Value != null)
                    {
                        var category = portCategory.Find(x => x.Id.ToString() == keyValue.Value);
                        if (category != null)
                        {
                            portOfDischargeCategory = category.Name;
                        }
                        else
                        {
                            portOfDischargeCategory = "";
                        }
                    }
                    else
                    {
                        portOfDischargeCategory = "";
                    }
                }
            }

            if (vesselOwner == null || vesselOwner == "")
            {
                vesselOwner = vesselOwner1;
            }

            var itenaryLength = vesselItenary.Length > vesselItenaryDate.Length ? vesselItenary.Length : vesselItenaryDate.Length;

            for (var i = 0; i < itenaryLength; i++)
            {
                var data = string.Empty;
                if (vesselItenary.Length == vesselItenaryDate.Length)
                {
                    data = vesselItenary[i] + ", " + vesselItenaryDate[i].ToString("dd-MMM-yyyy") + "<br>";
                }
                else
                {
                    if (vesselItenary.Length > vesselItenaryDate.Length)
                    {
                        if (i < vesselItenary.Length && i < vesselItenaryDate.Length)
                        {
                            data = vesselItenary[i] + ", " + vesselItenaryDate[i].ToString("dd-MMM-yyyy") + "<br>";
                        }
                        if (i < vesselItenary.Length && i >= vesselItenaryDate.Length)
                        {
                            data = vesselItenary[i] + "<br>";
                        }
                    }
                    else
                    {
                        if (i < vesselItenary.Length && i < vesselItenaryDate.Length)
                        {
                            data = vesselItenary[i] + ", " + vesselItenaryDate[i].ToString("dd-MMM-yyyy") + "<br>";
                        }
                        if (i >= vesselItenary.Length && i < vesselItenaryDate.Length)
                        {
                            data = vesselItenaryDate[i].ToString("dd-MMM-yyyy") + "<br>";
                        }
                    }
                }
                vesselItenaryData = vesselItenaryData + data;
            }

            EmailTemplateModel template = new EmailTemplateModel();
            string html = string.Empty;
            string messageBody = string.Empty;
            string subject = string.Empty;

            var user = _userRepository.GetSingleUserDetails(new Guid(loggedInContext.LoggedInUserId.ToString()));
            var loading = portOfLoadingCategory + " - " + portOfLoading + ", " + portOfLoadingCountry;
            var discharge = portOfDischargeCategory + " - " + portOfDischarge + ", " + portOfDischargeCountry;
            if (updateQ88InputModel.IsAccepted == true)
            {
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = clientInputModel.ClientId,
                    EmailTemplateName = "Q88AcceptTemplate"
                };
                template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                html = template.EmailTemplate.Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo).Replace("##UserName##", user.FullName).Replace("##RFQId##", rfqId)
                    .Replace("##VesselName##", vesselName).Replace("##VesselOwner##", vesselOwner).Replace("##VesselItenary##", vesselItenaryData).Replace("##PortOfLoading##", loading).Replace("##PortOfDischarge##", discharge)
                    .Replace("##PortofLoading##", loading).Replace("##PortofDischarge##", discharge);
                subject = template.EmailSubject.Replace("##RFQId##", rfqId);
                messageBody = "Hello, Q88 document for RFQ: ( " + rfqId + " ) is accepeted by " + user.FullName;
            }
            else if (updateQ88InputModel.IsRejected == true)
            {
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = clientInputModel.ClientId,
                    EmailTemplateName = "Q88RejectTemplate"
                };
                template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                html = template.EmailTemplate.Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo).Replace("##UserName##", user.FullName).Replace("##RFQId##", rfqId)
                    .Replace("##Comment##", updateQ88InputModel.RejectedComments).Replace("##Comments##", updateQ88InputModel.RejectedComments)
                    .Replace("##VesselName##", vesselName).Replace("##VesselOwner##", vesselOwner).Replace("##VesselItenary##", vesselItenaryData).Replace("##PortOfLoading##", loading).Replace("##PortOfDischarge##", discharge)
                    .Replace("##PortofLoading##", loading).Replace("##PortofDischarge##", discharge);
                subject = template.EmailSubject.Replace("##RFQId##", rfqId);
                messageBody = "Hello, Q88 document for RFQ: ( " + rfqId + " ) is rejected by " + user.FullName;
            }

            SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);

            TaskWrapper.ExecuteFunctionInNewThread(() =>
            {
                EmailGenericModel emailModel = new EmailGenericModel
                {
                    SmtpServer = smtpDetails?.SmtpServer,
                    SmtpServerPort = smtpDetails?.SmtpServerPort,
                    SmtpMail = smtpDetails?.SmtpMail,
                    SmtpPassword = smtpDetails?.SmtpPassword,
                    ToAddresses = toEmails,
                    CCMails = toCCEmails,
                    HtmlContent = html,
                    Subject = subject,
                    MailAttachments = null,
                    IsPdf = true
                };
                _emailService.SendMail(loggedInContext, emailModel);
                _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                _emailService.SendSMS(traderMobileNo, messageBody, loggedInContext);
            });
        }

        public void ShareRFQRequestEmail(RFQRequestModel rFQRequestModel, List<RFQReferenceOutputModel> rFQReferenceOutputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            //TaskWrapper.ExecuteFunctionInNewThread(() =>
            //{
            SendRFQRequestShareEmail(rFQRequestModel, rFQReferenceOutputModel, loggedInContext, validationMessages);
            //});
        }

        private void SendVesselConfirmationRequestUpdateEmail(RFQRequestInputModel newData, ContractModel oldData, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages, string type, Guid? clientId, bool? byClient)
        {
            string[] toEmails;
            var mobileNo = string.Empty;
            string html = string.Empty;
            EmailTemplateModel template;
            string subject = string.Empty;
            EmailTemplateModel EmailTemplateModel;

            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = clientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var clientName = clientList[0].FullName;

            var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
            var RouteAddress = siteDomain + "/trading/rfq/" + oldData.DataSetId;
            var messageBody = "Please find the vessel confirmation for your next action." + RouteAddress;

            List<CountryApiReturnModel> countryList = _companyStructureManagementService.GetCountries(new CountrySearchInputModel(), validationMessages, loggedInContext);
            List<PaymentTermOutputModel> portsList = _leadService.GetPortDetails(new PaymentTermSearchInputModel(), loggedInContext, validationMessages);
            List<PortCategoryModel> portCategory = _tradingRepository.GetAllPortCategory(new PortCategorySearchInputModel(), loggedInContext, validationMessages);

            JObject formfield = (JObject)JsonConvert.DeserializeObject(newData.VesselConfirmationFormData.ToString());
            Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

            foreach (KeyValuePair<string, JToken> keyValuePair in formfield)

            {
                keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
            }
            var vesselName = string.Empty;
            var vesselOwner = string.Empty;
            var vesselOwner1 = string.Empty;
            var vesselItenaryData = string.Empty;
            var portOfLoadingCategory = string.Empty;
            var portOfLoading = string.Empty;
            var portOfLoadingCountry = string.Empty;
            var portOfDischargeCategory = string.Empty;
            var portOfDischarge = string.Empty;
            var portOfDischargeCountry = string.Empty;
            DateTime[] vesselItenaryDate = new DateTime[0];
            string[] vesselItenary = new string[0];
            string[] portLoading = new string[0];
            string[] portDischarge = new string[0];
            var rfqId = "RFQ-" + oldData.RFQId + "-" + oldData.RFQUniqueId;
            foreach (var keyValue in keyValueMap)
            {
                if (keyValue.Key == "vesselName")
                {
                    vesselName = keyValue.Value;
                }
                if (keyValue.Key == "vesselOwnerName")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var vesselOwnerDetails = _clientService.GetClients(new ClientInputModel() { ClientId = new Guid(keyValue.Value) }, loggedInContext, validationMessages).FirstOrDefault();
                        if (vesselOwnerDetails != null)
                        {
                            vesselOwner = vesselOwnerDetails.FullName;
                        }
                        else
                        {
                            vesselOwner = "";
                        }
                    }
                    else
                    {
                        vesselOwner = "";
                    }
                }
                if (keyValue.Key == "vesselOwnerName1")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        vesselOwner1 = keyValue.Value;
                    }
                    else
                    {
                        vesselOwner1 = "";
                    }
                }
                if (keyValue.Key == "dateTime")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var data = keyValue.Value;
                        vesselItenaryDate = JsonConvert.DeserializeObject<DateTime[]>(data);
                    }
                    else
                    {
                        vesselItenaryDate = new DateTime[0];
                    }
                }
                if (keyValue.Key == "vesselItenary")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var data = keyValue.Value;
                        vesselItenary = JsonConvert.DeserializeObject<string[]>(data);
                    }
                    else
                    {
                        vesselItenary = new string[0];
                    }
                }
                if (keyValue.Key == "portOfLoading")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var data = keyValue.Value;
                        portLoading = JsonConvert.DeserializeObject<string[]>(data);
                        if (portLoading.Length > 0)
                        {
                            foreach (var port in portLoading)
                            {
                                var value = portsList.Find(x => x.Id.ToString() == port.ToString());
                                if (portOfLoading == "")
                                {
                                    portOfLoading = value.Name;
                                }
                                else
                                {
                                    portOfLoading = portOfLoading + ", " + value.Name;
                                }
                            }
                        }
                        else
                        {
                            portOfLoading = "";
                        }
                    }
                    else
                    {
                        portOfLoading = "";
                    }
                }
                if (keyValue.Key == "portOfDischarge")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var data = keyValue.Value;
                        portDischarge = JsonConvert.DeserializeObject<string[]>(data);
                        if (portDischarge.Length > 0)
                        {
                            foreach (var port in portDischarge)
                            {
                                var value = portsList.Find(x => x.Id.ToString() == port.ToString());
                                if (portOfDischarge == "")
                                {
                                    portOfDischarge = value.Name;
                                }
                                else
                                {
                                    portOfDischarge = portOfDischarge + ", " + value.Name;
                                }
                            }
                        }
                        else
                        {
                            portOfDischarge = "";
                        }
                    }
                    else
                    {
                        portOfDischarge = "";
                    }
                }
                if (keyValue.Key == "portOfLoadingCountry")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var country = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                        if (country != null)
                        {
                            portOfLoadingCountry = country.CountryName;
                        }
                        else
                        {
                            portOfLoadingCountry = keyValue.Value;
                        }
                    }
                    else
                    {
                        portOfLoadingCountry = "";
                    }
                }
                if (keyValue.Key == "portOfDischargeCountry")
                {
                    if (keyValue.Value != null && keyValue.Value != "")
                    {
                        var country = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                        if (country != null)
                        {
                            portOfDischargeCountry = country.CountryName;
                        }
                        else
                        {
                            portOfDischargeCountry = keyValue.Value;
                        }
                    }
                    else
                    {
                        portOfDischargeCountry = "";
                    }
                }
                if (keyValue.Key == "portCategoryLoading")
                {
                    if (keyValue.Value != "" && keyValue.Value != null)
                    {
                        var category = portCategory.Find(x => x.Id.ToString() == keyValue.Value);
                        if (category != null)
                        {
                            portOfLoadingCategory = category.Name;
                        }
                        else
                        {
                            portOfLoadingCategory = "";
                        }
                    }
                    else
                    {
                        portOfLoadingCategory = "";
                    }
                }
                if (keyValue.Key == "portCategoryDischarge")
                {
                    if (keyValue.Value != "" && keyValue.Value != null)
                    {
                        var category = portCategory.Find(x => x.Id.ToString() == keyValue.Value);
                        if (category != null)
                        {
                            portOfDischargeCategory = category.Name;
                        }
                        else
                        {
                            portOfDischargeCategory = "";
                        }
                    }
                    else
                    {
                        portOfDischargeCategory = "";
                    }
                }
            }

            if (vesselOwner == null || vesselOwner == "")
            {
                vesselOwner = vesselOwner1;
            }

            var itenaryLength = vesselItenary.Length > vesselItenaryDate.Length ? vesselItenary.Length : vesselItenaryDate.Length;

            for (var i = 0; i < itenaryLength; i++)
            {
                var data = string.Empty;
                if (vesselItenary.Length == vesselItenaryDate.Length)
                {
                    data = vesselItenary[i] + ", " + vesselItenaryDate[i].ToString("dd-MMM-yyyy") + "<br>";
                }
                else
                {
                    if (vesselItenary.Length > vesselItenaryDate.Length)
                    {
                        if (i < vesselItenary.Length && i < vesselItenaryDate.Length)
                        {
                            data = vesselItenary[i] + ", " + vesselItenaryDate[i].ToString("dd-MMM-yyyy") + "<br>";
                        }
                        if (i < vesselItenary.Length && i >= vesselItenaryDate.Length)
                        {
                            data = vesselItenary[i] + "<br>";
                        }
                    }
                    else
                    {
                        if (i < vesselItenary.Length && i < vesselItenaryDate.Length)
                        {
                            data = vesselItenary[i] + ", " + vesselItenaryDate[i].ToString("dd-MMM-yyyy") + "<br>";
                        }
                        if (i >= vesselItenary.Length && i < vesselItenaryDate.Length)
                        {
                            data = vesselItenaryDate[i].ToString("dd-MMM-yyyy") + "<br>";
                        }
                    }
                }
                vesselItenaryData = vesselItenaryData + data;
            }

            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            var CompanyName = companyTheme.CompanyName;

            var loading = portOfLoadingCategory + " - " + portOfLoading + ", " + portOfLoadingCountry;
            var discharge = portOfDischargeCategory + " - " + portOfDischarge + ", " + portOfDischargeCountry;

            LoggingManager.Debug(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "SendVesselConfirmationRequestUpdateEmail", "Trading Service"));

            if (byClient == false)
            {
                Models.User.UserSearchCriteriaInputModel userSearchCriteriaInputModel = new Models.User.UserSearchCriteriaInputModel();
                userSearchCriteriaInputModel.UserId = oldData.CreatedByUserId;
                var userData = _userRepository.GetUserDetailsAndCountry(oldData.CreatedByUserId, loggedInContext, validationMessages).FirstOrDefault();
                var userName = userData.FullName;

                toEmails = clientList[0].Email.Trim().Split('\n');
                mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                if (type == "update")
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "VesselConfirmationUpdatedByTraderTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                .Replace("##VesselName##", vesselName).Replace("##VesselOwner##", vesselOwner).Replace("##VesselItenary##", vesselItenaryData)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo).Replace("##Comment##", newData.SendBackComments)
                                .Replace("##CompanyName##", CompanyName).Replace("##TraderName##", userName).Replace("##PortOfLoading##", loading).Replace("##PortOfDischarge##", discharge);
                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##TraderName##", userName);
                }
                else if (type == "accept")
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "VesselConfirmationAcceptedByTraderTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                .Replace("##VesselName##", vesselName).Replace("##VesselOwner##", vesselOwner).Replace("##VesselItenary##", vesselItenaryData)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo)
                                .Replace("##CompanyName##", CompanyName).Replace("##TraderName##", userName).Replace("##PortOfLoading##", loading).Replace("##PortOfDischarge##", discharge);
                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##TraderName##", userName);
                }
                else if (type == "reject")
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "VesselConfirmationRejectedByTraderTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                .Replace("##VesselName##", vesselName).Replace("##VesselOwner##", vesselOwner).Replace("##VesselItenary##", vesselItenaryData)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo)
                                .Replace("##CompanyName##", CompanyName).Replace("##TraderName##", userName)
                                .Replace("##Comment##", newData.RejectedComments).Replace("##PortOfLoading##", loading).Replace("##PortOfDischarge##", discharge);
                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##TraderName##", userName);
                }
            }
            else
            {
                var user = _userRepository.GetUserDetailsAndCountry(oldData.CreatedByUserId, loggedInContext, validationMessages).FirstOrDefault();
                toEmails = user.UserName.Trim().Split('\n');
                mobileNo = user.CountryCode + user.MobileNo;

                if (type == "filled")
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "VesselConfirmationFilledTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                .Replace("##VesselName##", vesselName).Replace("##VesselOwner##", vesselOwner).Replace("##VesselItenary##", vesselItenaryData)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo)
                                .Replace("##CompanyName##", CompanyName).Replace("##ClientName##", clientName).Replace("##PortOfLoading##", loading).Replace("##PortOfDischarge##", discharge);
                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##ClientName##", clientName);
                }
                else if (type == "update")
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "VesselConfirmationUpdatedByClientTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                .Replace("##VesselName##", vesselName).Replace("##VesselOwner##", vesselOwner).Replace("##VesselItenary##", vesselItenaryData)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo).Replace("##Comment##", newData.SendBackComments)
                                .Replace("##CompanyName##", CompanyName).Replace("##ClientName##", clientName).Replace("##PortOfLoading##", loading).Replace("##PortOfDischarge##", discharge);
                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##ClientName##", clientName);
                }
                else if (type == "accept")
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "VesselConfirmationAcceptedByClientTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                .Replace("##VesselName##", vesselName).Replace("##VesselOwner##", vesselOwner).Replace("##VesselItenary##", vesselItenaryData)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo)
                                .Replace("##CompanyName##", CompanyName).Replace("##ClientName##", clientName).Replace("##PortOfLoading##", loading).Replace("##PortOfDischarge##", discharge);
                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##ClientName##", clientName);
                }
            }

            SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
            TaskWrapper.ExecuteFunctionInNewThread(() =>
            {
                EmailGenericModel emailModel = new EmailGenericModel
                {
                    SmtpServer = smtpDetails?.SmtpServer,
                    SmtpServerPort = smtpDetails?.SmtpServerPort,
                    SmtpMail = smtpDetails?.SmtpMail,
                    SmtpPassword = smtpDetails?.SmtpPassword,
                    ToAddresses = toEmails,
                    HtmlContent = html,
                    Subject = subject,
                    MailAttachments = null,
                    IsPdf = true
                };
                _emailService.SendMail(loggedInContext, emailModel);
                _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
            });
        }

        public void SendRFQRequestUpdateEmail(RFQRequestInputModel rFQRequestModel, ContractModel oldData, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages, string type, Guid? clientId, bool byClient)
        {
            Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            JObject result = JObject.Parse(rFQRequestModel.DataJson);
            var data = result["data"].ToString();
            JObject formfield = JsonConvert.DeserializeObject<JObject>(data);

            foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
            {
                keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
            }
            var rfqId = string.Empty;
            var commodity = string.Empty;
            var quantity = string.Empty;
            string messageBody = string.Empty;
            foreach (var keyValue in keyValueMap)
            {

                if (keyValue.Key == "rfqid")
                {
                    rfqId = keyValue.Value;
                }
                if (keyValue.Key == "commodity2")
                {
                    if (keyValue.Value != "" && keyValue.Value != null)
                    {
                        commodity = (from commoditi in commodityList
                                     where commoditi.ProductId == new Guid(keyValue.Value)
                                     select commoditi).FirstOrDefault().ProductName;
                    }
                    else
                    {
                        commodity = "";
                    }
                }
                if (keyValue.Key == "quantityMtT")
                {
                    quantity = keyValue.Value;
                }
            }
            if (quantity != null && quantity != string.Empty)
            {
                quantity = String.Format("{0:n}", Int64.Parse(quantity));
            }
            var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
            var RouteAddress = siteDomain + "/trading/rfq/" + rFQRequestModel.DataSetId;
            messageBody = "Please find the RFQ for your next action." + RouteAddress;
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            var CompanyName = companyTheme.CompanyName;
            string[] toEmails;
            var mobileNo = string.Empty;
            string html = string.Empty;
            EmailTemplateModel template;
            string subject = string.Empty;
            EmailTemplateModel EmailTemplateModel;

            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = clientId;

            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var clientName = clientList[0].FullName;
            if (byClient == false)
            {


                Models.User.UserSearchCriteriaInputModel userSearchCriteriaInputModel = new Models.User.UserSearchCriteriaInputModel();
                userSearchCriteriaInputModel.UserId = oldData.CreatedByUserId;
                var userData = _userRepository.GetUserDetailsAndCountry(oldData.CreatedByUserId, loggedInContext, validationMessages).FirstOrDefault(); //_userRepository.GetAllUsers(userSearchCriteriaInputModel, loggedInContext, validationMessages).FirstOrDefault();

                toEmails = clientList[0].Email.Trim().Split('\n');
                mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;

                if (type == "accepted")
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "RFQAccepetedByTraderTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                .Replace("##Commodity##", commodity).Replace("##Quantity##", quantity)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo)
                                .Replace("##CompanyName##", CompanyName).Replace("##UserName##", userData.FullName);
                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##Commodity##", commodity);
                }
                else if (type == "rejected")
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "RFQRejectedByTraderTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                 .Replace("##Commodity##", commodity).Replace("##Quantity##", quantity)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo)
                                .Replace("##CompanyName##", CompanyName).Replace("##UserName##", userData.FullName).Replace("##Comment##", rFQRequestModel.RejectedComments).Replace("##Comments##", rFQRequestModel.RejectedComments);
                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##Commodity##", commodity);
                }
                else
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "RFQUpdateByTraderTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                .Replace("##Commodity##", commodity).Replace("##Quantity##", quantity)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo)
                                .Replace("##CompanyName##", CompanyName).Replace("##TraderName##", userData.FullName)
                                .Replace("##Comment##", rFQRequestModel.SendBackComments);

                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##Commodity##", commodity);
                }
            }
            else
            {
                var user = _userRepository.GetUserDetailsAndCountry(oldData.CreatedByUserId, loggedInContext, validationMessages).FirstOrDefault();
                //_userRepository.GetSingleUserDetails(new Guid(loggedInContext.LoggedInUserId.ToString()));
                toEmails = user.UserName.Trim().Split('\n');
                mobileNo = user.CountryCode + user.MobileNo;
                if (type == "accepted")
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "RFQAcceptedByClientTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                .Replace("##Commodity##", commodity).Replace("##Quantity##", quantity)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo)
                                .Replace("##CompanyName##", CompanyName).Replace("##UserName##", clientName);
                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##Commodity##", commodity);
                }
                else if (type == "filled")
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "RFQFilledTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                .Replace("##Commodity##", commodity).Replace("##Quantity##", quantity)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo)
                                .Replace("##CompanyName##", CompanyName).Replace("##ClientName##", clientName);
                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##Commodity##", commodity);
                }
                else if (type == "update")
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "RFQUpdateByClientTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString()).Replace("##Commodity##", commodity).Replace("##Quantity##", quantity)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo)
                                .Replace("##CompanyName##", CompanyName).Replace("##ClientName##", clientName)
                                .Replace("##Comment##", rFQRequestModel.SendBackComments);
                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##Commodity##", commodity);
                }
            }

            SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
            TaskWrapper.ExecuteFunctionInNewThread(() =>
            {
                EmailGenericModel emailModel = new EmailGenericModel
                {
                    SmtpServer = smtpDetails?.SmtpServer,
                    SmtpServerPort = smtpDetails?.SmtpServerPort,
                    SmtpMail = smtpDetails?.SmtpMail,
                    SmtpPassword = smtpDetails?.SmtpPassword,
                    ToAddresses = toEmails,
                    HtmlContent = html,
                    Subject = subject,
                    MailAttachments = null,
                    IsPdf = true
                };
                _emailService.SendMail(loggedInContext, emailModel);
                _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
            });
        }

        public void SendRFQRequestAcceptOrRejectEmail(RFQRequestInputModel rFQRequestModel, ContractModel oldData, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages, string type, Guid? clientId, bool byClient)
        {
            Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

            JObject result = JObject.Parse(rFQRequestModel.DataJson);
            var data = result["data"].ToString();
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            JObject formfield = JsonConvert.DeserializeObject<JObject>(data);

            foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
            {
                keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
            }
            var rfqId = string.Empty;
            var commodity = string.Empty;
            var quantity = string.Empty;
            foreach (var keyValue in keyValueMap)
            {

                if (keyValue.Key == "rfqid")
                {
                    rfqId = keyValue.Value;
                }
                if (keyValue.Key == "commodity2")
                {
                    if (keyValue.Value != "" && keyValue.Value != null)
                    {
                        commodity = (from commoditi in commodityList
                                     where commoditi.ProductId == new Guid(keyValue.Value)
                                     select commoditi).FirstOrDefault().ProductName;
                    }
                    else
                    {
                        commodity = "";
                    }
                }
                if (keyValue.Key == "quantityMtT")
                {
                    quantity = keyValue.Value;
                }
            }
            if (quantity != null && quantity != string.Empty)
            {
                quantity = String.Format("{0:n}", Int64.Parse(quantity));
            }
            var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
            var RouteAddress = siteDomain + "/trading/rfq/" + rFQRequestModel.DataSetId;
            CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
            var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";
            var CompanyName = companyTheme.CompanyName;
            string[] toEmails;
            string html = string.Empty;
            var mobileNo = string.Empty;
            EmailTemplateModel template;
            string subject = string.Empty;
            EmailTemplateModel EmailTemplateModel;

            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.ClientId = clientId;
            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            var clientName = clientList[0].FullName;
            string messageBody = "Please find the RFQ for your next action." + RouteAddress;
            if (byClient == false)
            {

                Models.User.UserSearchCriteriaInputModel userSearchCriteriaInputModel = new Models.User.UserSearchCriteriaInputModel();
                userSearchCriteriaInputModel.UserId = oldData.CreatedByUserId;
                var userData = _userRepository.GetUserDetailsAndCountry(oldData.CreatedByUserId, loggedInContext, validationMessages).FirstOrDefault(); //_userRepository.GetAllUsers(userSearchCriteriaInputModel, loggedInContext, validationMessages).FirstOrDefault();

                toEmails = clientList[0].Email.Trim().Split('\n');
                mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                if (type == "accepted")
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "RFQAccepetedByTraderTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                .Replace("##Commodity##", commodity).Replace("##Quantity##", quantity)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo)
                                .Replace("##CompanyName##", CompanyName).Replace("##UserName##", userData.FullName);
                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##Commodity##", commodity);
                }
                else if (type == "rejected")
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "RFQRejectedByTraderTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                 .Replace("##Commodity##", commodity).Replace("##Quantity##", quantity)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo)
                                .Replace("##CompanyName##", CompanyName).Replace("##UserName##", userData.FullName).Replace("##Comment##", rFQRequestModel.RejectedComments)
                                .Replace("##Comments##", rFQRequestModel.RejectedComments);
                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##Commodity##", commodity);
                }
            }
            else
            {
                var user = _userRepository.GetUserDetailsAndCountry(oldData.CreatedByUserId, loggedInContext, validationMessages).FirstOrDefault();
                toEmails = user.UserName.Trim().Split('\n');
                mobileNo = user.CountryCode + user.MobileNo;
                if (type == "accepted")
                {
                    EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = clientId,
                        EmailTemplateName = "RFQAcceptedByClientTemplate"
                    };
                    template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                .Replace("##Commodity##", commodity).Replace("##Quantity##", quantity)
                                .Replace("##siteUrl##", RouteAddress).Replace("##CompanyLogo##", CompanyLogo)
                                .Replace("##CompanyName##", CompanyName).Replace("##UserName##", clientName);
                    subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##Commodity##", commodity);
                }
            }

            SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
            TaskWrapper.ExecuteFunctionInNewThread(() =>
            {
                EmailGenericModel emailModel = new EmailGenericModel
                {
                    SmtpServer = smtpDetails?.SmtpServer,
                    SmtpServerPort = smtpDetails?.SmtpServerPort,
                    SmtpMail = smtpDetails?.SmtpMail,
                    SmtpPassword = smtpDetails?.SmtpPassword,
                    ToAddresses = toEmails,
                    HtmlContent = html,
                    Subject = subject,
                    MailAttachments = null,
                    IsPdf = true
                };
                _emailService.SendMail(loggedInContext, emailModel);
                _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
            });
        }

        public void SendRFQRequestShareEmail(RFQRequestModel rFQRequestModel, List<RFQReferenceOutputModel> rFQReferenceOutputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

            JObject result = JObject.Parse(rFQRequestModel.DataJson);
            var data = result["data"].ToString();
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            JObject formfield = JsonConvert.DeserializeObject<JObject>(data);

            foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
            {
                keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
            }
            var rfqId = "RFQ-" + rFQReferenceOutputModel[0].RFQId;
            var commodity = string.Empty;
            var quantity = string.Empty;
            foreach (var keyValue in keyValueMap)
            {
                //if (keyValue.Key == "rfqid")
                //{
                //    rfqId = keyValue.Value;
                //}
                if (keyValue.Key == "commodity2")
                {
                    if (keyValue.Value != "" && keyValue.Value != null)
                    {
                        commodity = (from commoditi in commodityList
                                     where commoditi.ProductId == new Guid(keyValue.Value)
                                     select commoditi).FirstOrDefault().ProductName;
                    }
                    else
                    {
                        commodity = "";
                    }
                }
                if (keyValue.Key == "quantityMtT")
                {
                    quantity = keyValue.Value;
                }
            }
            if (quantity != null && quantity != string.Empty)
            {
                quantity = String.Format("{0:n}", Int64.Parse(quantity));
            }
            foreach (var rfqRequest in rFQReferenceOutputModel)
            {
                ClientInputModel clientInputModel = new ClientInputModel();
                clientInputModel.ClientId = rfqRequest.ReferenceId;
                List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
                ////CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);
                //var CompanyLogo = "http://todaywalkins.com/Comp_images/Snovasys.png";
                ////companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";

                CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(clientList[0].UserId);
                var CompanyLogo = companyTheme.CompanyMainLogo != null ? companyTheme.CompanyMainLogo : "http://todaywalkins.com/Comp_images/Snovasys.png";

                var toEmails = clientList[0].Email.Trim().Split('\n');
                var mobileNo = clientList[0].CountryCode + clientList[0].MobileNo;
                var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
                var RouteAddress = siteDomain + "/trading/rfq/" + rfqRequest.Id;
                var messageBody = "Please find the RFQ for your next action." + RouteAddress;
                rfqId = "RFQ-" + rfqRequest.RFQId + "-" + rfqRequest.RFQUniqueId;
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = rfqRequest.ReferenceId,
                    EmailTemplateName = "RFQRequestTemplate"
                };
                var rfqUnique = rfqId + "-" + rfqRequest.RFQUniqueId;
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate.Replace("##RFQId##", rfqId.ToString())
                                .Replace("##Commodity##", commodity).Replace("##Quantity##", quantity)
                                .Replace("##siteUrl##", RouteAddress)
                                .Replace("##CompanyLogo##", CompanyLogo);

                var subject = template.EmailSubject.Replace("##RFQId##", rfqId.ToString()).Replace("##Commodity##", commodity);

                SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    EmailGenericModel emailModel = new EmailGenericModel
                    {
                        SmtpServer = smtpDetails?.SmtpServer,
                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                        SmtpMail = smtpDetails?.SmtpMail,
                        SmtpPassword = smtpDetails?.SmtpPassword,
                        ToAddresses = toEmails,
                        HtmlContent = html,
                        Subject = subject,
                        MailAttachments = null,
                        IsPdf = true
                    };
                    _emailService.SendMail(loggedInContext, emailModel);
                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                });
            }
        }
        public List<TradeTemplateModel> GetTradeTemplates(TradeTemplateModel TradeTemplateModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetContractTemplates", "Trading Service"));

            LoggingManager.Debug(TradeTemplateModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            var dataSources = SearchTradeTemplateDataSource(TradeTemplateModel.TradeTemplateId, null, "TradeTemplate", TradeTemplateModel.IsArchived, null, loggedInContext, validationMessages).GetAwaiter().GetResult();
            return dataSources;
        }
        public async Task<List<TradeTemplateModel>> SearchTradeTemplateDataSource(Guid? id, Guid? companyModuleId, string searchText, bool? isArchived, string formIds, LoggedInContext loggedInContext, List<ValidationMessage> validationmessages)
        {
            try
            {
                using (var client = new HttpClient())
                {
                    string serviceurl = "DataService/DataSourceApi/SearchDataSource?id=" + id + "&companyModuleId=" + companyModuleId + "&formIds=" + formIds + "&searchText=" + searchText + "&isArchived=" + isArchived;
                    client.BaseAddress = new Uri(WebConfigurationManager.AppSettings["MongoApiBaseUrl"]);

                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", loggedInContext.authorization);
                    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                    HttpResponseMessage response = new HttpResponseMessage();
                    response = await client.GetAsync(serviceurl).ConfigureAwait(false);
                    if (response.IsSuccessStatusCode)
                    {
                        string apiResponse = response.Content.ReadAsStringAsync().Result;
                        var data = JObject.Parse(apiResponse);
                        var dataSetResponse = (bool)data["success"] ? (object)data["data"] : null;
                        var result = JsonConvert.DeserializeObject<List<DataSourceOutputModel>>(JsonConvert.SerializeObject(dataSetResponse));
                        var rdata = result.Select(e => new TradeTemplateModel
                        {
                            TradeTemplateId = e.Id,
                            TradeTemplateName = e.Name,
                            Fields = e.Fields,
                            IsArchived = e.IsArchived,
                            CreatedDateTime = e.CreatedDateTime,
                            FormBgColor = e.FormBgColor

                        }).OrderByDescending(e => e.CreatedDateTime).ToList();
                        return rdata;

                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "SearchTradeTemplateDataSource", "DataSourceService", exception.Message), exception);
                return null;
            }
        }
        public List<RFQStatusModel> GetAllRFQStatus(RFQStatusModel rFQStatus, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetAllRFQStatus", "Trading Service"));

            LoggingManager.Debug(rFQStatus.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            List<RFQStatusModel> result = _tradingRepository.GetAllRFQStatus(rFQStatus, loggedInContext, validationMessages).ToList();
            return result;
        }
        public Guid? UpsertRFQStatus(RFQStatusModel rfqStatusModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertRFQStatus", "Trading Service"));

            LoggingManager.Debug(rfqStatusModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            Guid? result = _tradingRepository.UpsertRFQStatus(rfqStatusModel, loggedInContext, validationMessages);
            return result;
        }

        public List<VesselConfirmationStatusModel> GetAllVesselConfirmationStatus(VesselConfirmationStatusModel vesselConfirmationStatus, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetAllVesselConfirmationStatus", "Trading Service"));

            LoggingManager.Debug(vesselConfirmationStatus.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            List<VesselConfirmationStatusModel> result = _tradingRepository.GetAllVesselConfirmationStatus(vesselConfirmationStatus, loggedInContext, validationMessages).ToList();
            return result;
        }

        public Guid? UpsertVesselConfirmationStatus(VesselConfirmationStatusModel vesselConfirmationStatus, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertVesselConfirmationStatus", "Trading Service"));

            LoggingManager.Debug(vesselConfirmationStatus.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            Guid? result = _tradingRepository.UpsertVesselConfirmationStatus(vesselConfirmationStatus, loggedInContext, validationMessages);
            return result;
        }

        public List<PortCategoryModel> GetAllPortCategory(PortCategorySearchInputModel portCategorySearchInputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetAllPortCategory", "Trading Service"));

            LoggingManager.Debug(portCategorySearchInputModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            List<PortCategoryModel> result = _tradingRepository.GetAllPortCategory(portCategorySearchInputModel, loggedInContext, validationMessages).ToList();
            return result;
        }

        public Guid? UpsertPortCategory(PortCategoryModel portCategoryModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertPortCategory", "Trading Service"));

            LoggingManager.Debug(portCategoryModel.ToString());

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }
            Guid? result = _tradingRepository.UpsertPortCategory(portCategoryModel, loggedInContext, validationMessages);
            return result;
        }

        public Guid? UpdateXPStepAlert(StepAlertUpdateModel stepAlertUpdateModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertRFQStatus", "Trading Service"));

            var dataSetUpdateModel = new UpdateDataSetJsonModel();
            dataSetUpdateModel.Id = stepAlertUpdateModel.Id;
            dataSetUpdateModel.ParamsJsonModel = stepAlertUpdateModel.ParamsJsonModel;

            dataSetUpdateModel.ParamsJsonModel.Add(new ParamsKeyModel
            {
                KeyName = "OldData",
                KeyValue = "{}",
                Type = "object"
            });

            dataSetUpdateModel.ParamsJsonModel.Add(new ParamsKeyModel
            {
                KeyName = "NewData",
                KeyValue = "{}",
                Type = "object"
            });

            var updateId = _dataSetService.UpdateDataSetJson(dataSetUpdateModel, loggedInContext, validationMessages).GetAwaiter().GetResult();

            return updateId;
        }

        public void UnsoldQTYEmailAlert()
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UnsoldQTYEmailAlert", "GenericForm Api"));

            var validationMessages = new List<ValidationMessage>();

            List<CompanyOutputModel> companies = _companyStructureRepository.SearchCompanies(new CompanySearchCriteriaInputModel() { ForSuperUser = true }, validationMessages);

            if (companies != null && companies.Count > 0)
            {
                foreach (var c in companies)
                {
                    var owner = _userRepository.GetUserDetailsByName(c.WorkEmail, true).FirstOrDefault();

                    if (owner != null)
                    {
                        LoggedInContext loggedInContext = new LoggedInContext
                        {
                            LoggedInUserId = owner.Id,
                            CompanyGuid = owner.CompanyId
                        };

                        ClientInputModel clientInputModel = new ClientInputModel();

                        var clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);

                        Models.User.UserSearchCriteriaInputModel userSearchCriteriaInputModel = new Models.User.UserSearchCriteriaInputModel();

                        List<UserOutputModel> userOutputModel = _userRepository.GetAllUsers(userSearchCriteriaInputModel, loggedInContext, validationMessages);
                        var userdetails = new UserOutputModel();
                        if (userOutputModel.Count > 0)
                        {
                            userdetails = userOutputModel.Where(x => x.Email == owner.UserName).FirstOrDefault();
                        }
                        var user = _userRepository.GetAllUsers(userSearchCriteriaInputModel, loggedInContext, validationMessages);

                        var paramsJson = new ParamsJsonModel()
                        {
                            KeyName = "ContractType",
                            KeyValue = "Vessel",
                            Type = "string"
                        };

                        var contractLink = new ParamsJsonModel()
                        {
                            KeyName = "IsContractLink",
                            KeyValue = "true",
                            Type = "boolean"
                        };

                        var paramsModel = new List<ParamsJsonModel>();
                        paramsModel.Add(paramsJson);
                        paramsModel.Add(contractLink);

                        string paramsJsonModel = JsonConvert.SerializeObject(paramsModel);

                        CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);

                        List<ParamsInputModel> inputParams = new List<ParamsInputModel>();

                        var companyIdParams = new ParamsInputModel()
                        {
                            Key = "CompanyId",
                            Value = loggedInContext.CompanyGuid.ToString(),
                            Type = "Guid"
                        };

                        var UserIdParams = new ParamsInputModel()
                        {
                            Key = "UserId",
                            Value = userdetails.UserAuthenticationId.ToString(),
                            Type = "Guid"
                        };
                        inputParams.Add(companyIdParams);
                        inputParams.Add(UserIdParams);



                        string result = ApiWrapper.AnnonymousGetApiCalls("api/LoginApi/GetUserAuthToken", ConfigurationManager.AppSettings["AuthenticationServiceBasePath"], inputParams).Result;

                        JObject data2 = (JObject)JsonConvert.DeserializeObject(result);

                        Dictionary<string, string> keyValueTest = new Dictionary<string, string>();

                        foreach (KeyValuePair<string, JToken> keyValuePair in data2)
                        {
                            keyValueTest.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                        }

                        loggedInContext.authorization = keyValueTest.Where(t => t.Key == "data").FirstOrDefault().Value;

                        var dataSets = _dataSetService.SearchDataSets(null, null, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult();

                        SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, HttpContext.Current.Request.Url.Authority);

                        List<ContractModel> contractReturnModel = new List<ContractModel>();

                        var users = _tradingRepository.GetUsersForBinding(loggedInContext, validationMessages);

                        if (dataSets != null)
                        {
                            contractReturnModel = dataSets.Select(e => new ContractModel
                            {
                                DataSetId = e.Id,
                                FormData = e.DataJson.FormData,
                                ContractData = e.ContractData,
                                ClientId = e.DataJson.ClientId,
                                ContractPdf = e.DataJson.ContractPdf,
                                StatusId = e.DataJson.StatusId,
                                BrokerId = e.DataJson.BrokerId,
                                DataSourceFormJson = e.DataSourceFormJson,
                                ContractType = e.DataJson.ContractType,
                                CreatedByUserId = e.CreatedByUserId,
                                UpdatedByUserId = e.UpdatedByUserId,
                                CreatedByUserName = e.CreatedByUserId != null ? (from u in users where u.Id == e.CreatedByUserId select u.Name).FirstOrDefault() : null,
                                UpdatedByUserName = e.UpdatedByUserId != null ? (from u in users where u.Id == e.UpdatedByUserId select u.Name).FirstOrDefault() : null,
                                ReferenceId = e.DataJson.ReferenceId,
                                ReferenceUserName = e.DataJson.ReferenceId != null ? (from u in users where u.Id == e.DataJson.ReferenceId select u.Name).FirstOrDefault() : null,
                                TemplateTypeId = e.DataJson.TemplateTypeId,
                                CreatedDateTime = e.CreatedDateTime,
                                SaleContractFormModel = JsonConvert.DeserializeObject<SaleContractFormModel>(JsonConvert.SerializeObject(e.DataJson)),
                                AcceptedByClientUserId = e.DataJson.AcceptedByClientUserId,
                                AcceptedByTraderUserId = e.DataJson.AcceptedByTraderUserId,
                                PurchaseQuantitySum = e.DataJson.PurchaseQuantitySum,
                                SalesQuantitySum = e.DataJson.SalesQuantitySum,
                                RemainingSum = (e.DataJson.PurchaseQuantitySum - e.DataJson.SalesQuantitySum)

                            }).ToList();

                            var contractsList = contractReturnModel.Where(x => x.RemainingSum > 0).ToList();

                            //foreach (var contract in contractsList)
                            Parallel.ForEach(contractsList, contract =>
                            {
                                var clientDetails = clientList.Where(x => x.ClientId == contract.ClientId).FirstOrDefault();
                                List<UserOutputModel> usersList = _userRepository.GetUserDetailsAndCountry(contract.UpdatedByUserId, loggedInContext, validationMessages);

                                JObject formfield = (JObject)JsonConvert.DeserializeObject(contract.FormData.ToString());
                                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                                {
                                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                                }

                                DateTime dateValue;
                                var contractName = string.Empty;
                                var quantity = string.Empty;
                                var grade = string.Empty;
                                var date = string.Empty;
                                var units = string.Empty;
                                foreach (var keyValue in keyValueMap)
                                {
                                    if (keyValue.Key == "contractNumber")
                                    {
                                        contractName = keyValue.Value;
                                    }
                                    if (keyValue.Key == "quantityNumber")
                                    {
                                        quantity = keyValue.Value;
                                    }
                                    if (keyValue.Key == "commodityName")
                                    {
                                        grade = keyValue.Value;
                                    }
                                    if (keyValue.Key == "shipmentToDate")
                                    {
                                        //if (keyValue.Value != null && keyValue.Value != "" && DateTime.TryParse(keyValue.Value, out dateValue) == true)
                                        //{
                                        //    var value = Convert.ToDateTime(keyValue.Value);
                                        //    date = value.ToString("dd-MM-yyyy");
                                        //}
                                        //else
                                        //{
                                        //    date = keyValue.Value;
                                        //}
                                        date = keyValue.Value;
                                    }
                                    if (keyValue.Key == "quantityMeasurementUnit")
                                    {
                                        units = getMeasurementUnit(keyValue.Value);
                                    }
                                }
                                if (quantity != null && quantity != string.Empty)
                                {
                                    quantity = String.Format("{0:n}", Int32.Parse(quantity));
                                }

                                EmailTemplateModel emailTemplateModel = new EmailTemplateModel
                                {
                                    EmailTemplateName = "UnsoldQuantityEmailAltert",
                                    ClientId = contract.ClientId
                                };
                                var toEmails = usersList[0].Email.Trim().Split('\n');
                                var mobileNo = usersList[0].CountryCode + usersList[0].MobileNo;
                                var messageBody = "";

                                var template = _clientService.GetAllEmailTemplates(emailTemplateModel, loggedInContext, validationMessages)?.ToList()[0];

                                string headersRow = @"<tr>
                                    <th>Contract name</th>
                                    <th>Grade</th>
                                    <th>Total Quantity</th>
                                    <th>Remaining quantity</th>
                                    <th>Ex. date of arrival at discharge port</th>
                                  </tr> ";

                                headersRow = headersRow + @"<tr>" +
                                                @"<td>" + contractName + @"</td>" +
                                                @"<td>" + grade + @"</td>" +
                                                @"<td>" + quantity + " " + units + @"</td>" +
                                                @"<td>" + contract.RemainingSum + " " + units + @"</td>" +
                                                @"<td>" + date + @"</td>" +
                                                @"</tr>";

                                var html = template.EmailTemplate.Replace("##Contract##", contractName)
                                   .Replace("##TableData##", headersRow);
                                var subject = template.EmailSubject.Replace("##ContractId##", contractName.ToString())
                                  .Replace("##Quantity##", quantity);

                                TaskWrapper.ExecuteFunctionInNewThread(() =>
                                {
                                    EmailGenericModel emailModel = new EmailGenericModel
                                    {
                                        SmtpServer = smtpDetails?.SmtpServer,
                                        SmtpServerPort = smtpDetails?.SmtpServerPort,
                                        SmtpMail = smtpDetails?.SmtpMail,
                                        SmtpPassword = smtpDetails?.SmtpPassword,
                                        ToAddresses = toEmails,
                                        HtmlContent = html,
                                        Subject = subject,
                                        MailAttachments = null,
                                        IsPdf = true
                                    };
                                    _emailService.SendMail(loggedInContext, emailModel);
                                    _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                                });

                            });
                        }

                    }

                }
            }

        }

        public string getMeasurementUnit(string units)
        {
            if (units == "metricTonnes")
            {
                return "MT";
            }
            else if (units == "gallons")
            {
                return "GL";
            }
            else if (units == "pound")
            {
                return "LBS";
            }
            else if (units == "barrels")
            {
                return "BBL";
            }
            else if (units == "kilogram")
            {
                return "Kg";
            }
            else if (units == "litres")
            {
                return "L";
            }
            else if (units == "cubicMeter")
            {
                return "CBM";
            }
            else
            {
                return null;
            }
        }

        public List<LinkedPurchasesOutputModel> GetLinkedPurchaseAndSales(ContractModel contractModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetLinkedPurchaseAndSales", "GenericForm Api"));

            List<ContractModel> contractReturnModel = new List<ContractModel>();

            if (!CommonValidationHelper.ValidateLoggedInUser(loggedInContext, validationMessages))
            {
                return null;
            }

            ClientAccessModel clientAccess = clientAccess = new ClientAccessModel();

            clientAccess = _tradingRepository.GetClientAccss(Guid.Parse("E4A82106-3B35-4B7E-A1D0-950CE39EAA7C"), null, loggedInContext, validationMessages);

            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = "Vessel",
                Type = "string"
            });

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "IsContractLink",
                KeyValue = "true",
                Type = "boolean"
            });

            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);

            var dataSets = _dataSetService.SearchDataSets(contractModel.ContractId, contractModel.DataSourceId, contractModel.SearchText, paramsJsonModel, contractModel.IsArchived,
                                  false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().ToList();

            var dataSets1 = new List<DataSetOutputModel>();

            foreach (var contracts in dataSets)
            {
                if (contracts?.PurchaseContracts?.Count > 0)
                {
                    var contractData = contracts.PurchaseContracts;

                    contractData.Select(t => { t.DataJson.ContractId = contracts.Id; return t; }).ToList();

                    dataSets1.AddRange(contractData);
                }

                if (contracts?.SalesContracts?.Count > 0)
                {
                    var contractData = contracts.SalesContracts;

                    contractData.Select(t => { t.DataJson.ContractId = contracts.Id; return t; }).ToList();

                    dataSets1.AddRange(contractData);
                }
            }

            List<ParamsJsonModel> paramsJsonModels = new List<ParamsJsonModel>();

            List<ExecutionStepsDataSetOutputModel> dataSetsResult = new List<ExecutionStepsDataSetOutputModel>();

            List<PurchaseExecutionModel> purchaseExecutions = new List<PurchaseExecutionModel>();

            Guid? clientId = clientAccess?.ClientId;

            if ((clientAccess.CanHaveAcess == false) && clientId != null)
            {
                paramsJsonModels.Add(new ParamsJsonModel()
                {
                    KeyName = "ContractType",
                    KeyValue = "ExecutionSteps",
                    Type = "string"
                });

                if (contractModel.DataSetId != null)
                {
                    paramsJsonModels.Add(new ParamsJsonModel()
                    {
                        KeyName = "PurchaseId",
                        KeyValue = contractModel.DataSetId.ToString(),
                        Type = "guid"
                    });
                }

                if (contractModel.ContractId != null)
                {
                    paramsJsonModels.Add(new ParamsJsonModel()
                    {
                        KeyName = "ContractId",
                        KeyValue = contractModel.ContractId.ToString(),
                        Type = "guid"
                    });
                }

                paramsJsonModels.Add(new ParamsJsonModel()
                {
                    KeyName = "UserIds",
                    KeyValue = loggedInContext.LoggedInUserId.ToString(),
                    Type = "Array"
                });

                string paramsJsonModelSteps = JsonConvert.SerializeObject(paramsJsonModels);

                dataSetsResult = _dataSetService.SearchExecutionStepsDataSets(null, null, null, paramsJsonModelSteps, false, false, null, null, loggedInContext, validationMessages)?.GetAwaiter().GetResult();

                Parallel.ForEach(dataSetsResult, z =>
                {
                    var steps = z.DataJson;
                    steps.Id = z.Id;
                    steps.CreatedByUserId = z.CreatedByUserId;
                    purchaseExecutions.Add(steps);
                });
            }

            List<DataSetOutputModel> data = new List<DataSetOutputModel>();

            var dataContracts = dataSets1?.Where(t => (contractModel.DataSetId == null || t.Id == contractModel.DataSetId))?.ToList();

            var datawithOutSteps = dataContracts.Where(x => ((x.DataJson.ClientId == clientId || clientAccess.CanHaveAcess == true || clientId == null || x.CreatedByUserId == loggedInContext.LoggedInUserId)));

            if (datawithOutSteps?.Count() > 0 && datawithOutSteps != null)
            {
                data.AddRange(datawithOutSteps);
            }

            if (clientId != null && (clientAccess.CanHaveAcess == false))
            {
                Parallel.ForEach(dataContracts, purchases =>
                {
                    var stepsData = purchaseExecutions?.Where(t => (t.PurchaseId == purchases.Id && (t.UserIds != null ? (t.UserIds != null & t.UserIds.Any(z => z == loggedInContext.LoggedInUserId)) : false || t.CreatedByUserId == loggedInContext.LoggedInUserId)))?.FirstOrDefault();

                    if ((purchases.CreatedByUserId == loggedInContext.LoggedInUserId || purchases.DataJson.ClientId == clientId || clientId == null || stepsData != null) && data?.Where(t => t.Id == purchases.Id)?.FirstOrDefault()?.Id == null)
                    {
                        data.Add(purchases);
                    }

                });
            }

            List<LinkedPurchasesOutputModel> linkedPurchases = new List<LinkedPurchasesOutputModel>();

            ContractStatusModel contractStatusModel = new ContractStatusModel();

            var statuses = _clientService.GetAllContractStatus(contractStatusModel, loggedInContext, validationMessages);

            ClientInputModel clientInputModel = new ClientInputModel();
            List<ClientOutputModel> clientList = _clientRepository.GetClients(clientInputModel, loggedInContext, validationMessages);

            //Parallel.ForEach(data, keys =>
            foreach (var keys in data)
            {
                JObject formfield = (JObject)JsonConvert.DeserializeObject(keys.DataJson.FormData.ToString());

                var keyValueMap = new Dictionary<string, string>();

                foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
                {
                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                }

                linkedPurchases.Add(new LinkedPurchasesOutputModel
                {
                    ContractNumber = keyValueMap["contractNumber"],
                    CommodityName = keyValueMap["commodityName"],
                    SellerName = keys.DataJson.ClientId != null && clientList != null ? (from s in clientList where s.ClientId == keys.DataJson.ClientId select s.FullName).FirstOrDefault() : null,
                    QuanityNumber = int.Parse(keyValueMap["quanityNumber"]),
                    StatusId = keys.DataJson.StatusId,
                    ContractType = keys.DataJson.ContractType,
                    QuantityMeasurementUnit = keyValueMap["quantityMeasurementUnit"],
                    DataSetId = keys.Id,
                    DataSourceId = keys.DataSourceId,
                    ContractId = keys.DataJson.ContractId,
                    ClientId = keys.DataJson.ClientId,
                    BrokerId = keys.DataJson.BrokerId,
                    StatuName = keys.DataJson.StatusId != null && statuses != null ? (from s in statuses where s.ContractStatusId == keys.DataJson.StatusId select s.StatusName).FirstOrDefault() : null
                });
            };

            return linkedPurchases;
        }

        public int? SendPurchaseExecutionRemind(PurchaseExecutionModel purchaseExecution, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            var dataSets = _dataSetService.SearchDataSets(purchaseExecution.ContractId, purchaseExecution.DataSourceId, null, null, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().FirstOrDefault();

            var dataSetsResult1 = _dataSetService.SearchDataSets(purchaseExecution.PurchaseId, purchaseExecution.DataSourceId, null, null, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult()?.FirstOrDefault();

            EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
            {
                ClientId = dataSets.DataJson.ClientId,
                EmailTemplateName = purchaseExecution.ReferenceText == "Accepted" ? "PurchaseDocumentAccepted" :
                                    purchaseExecution.ReferenceText == null ? "PurchaseDocumentRemind" : "PurchaseRejectedEmail"
            };

            var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages)?.FirstOrDefault();

            SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, null); // HttpContext.Current.Request.Url.Authority);

            ClientInputModel clientInputModel = new ClientInputModel();

            clientInputModel.ClientId = dataSets.DataJson.ClientId;

            List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
            string[] toEmails = null;
            string[] ccMails = null;

            if (purchaseExecution.ReferenceText == null)
            {
                clientList.Where(t => t.ClientId == dataSets.DataJson.ClientId)?.FirstOrDefault()?.Email?.Trim().Split('\n');
                clientList.Where(t => t.ClientId == dataSets.DataJson.BrokerId)?.FirstOrDefault()?.Email?.Trim().Split('\n');
            }
            else
            {
                UserOutputModel usersList = _userRepository.GetUserDetailsAndCountry(dataSets.CreatedByUserId, loggedInContext, validationMessages)?.FirstOrDefault();
                toEmails = usersList?.Email?.Trim().Split('\n');
            }

            var html = template?.EmailTemplate;

            var mobileNo = clientList.Where(t => t.ClientId == dataSets.DataJson.ClientId)?.FirstOrDefault()?.MobileNo;

            int? emailsCount = 0;

            var siteDomain = ConfigurationManager.AppSettings["SiteUrl"];
            var RouteAddress = siteDomain + "/trading/viewcontract/";
            var messageBody = "Please find the purchase contract draft for your next action." + RouteAddress;

            if (toEmails != null)
            {

                var dataSetsResult = _dataSetService.SearchExecutionStepsDataSets(purchaseExecution.Id, purchaseExecution.DataSourceId, null, null, false, false, null, null, loggedInContext, validationMessages).GetAwaiter().GetResult()?.FirstOrDefault();

                var formfield = dataSetsResult.DataJson;

                formfield.ReminderCount = formfield.ReminderCount + 1;

                emailsCount = formfield.ReminderCount;

                var dataSetUpdateModel = new UpdateDataSetJsonModel();
                dataSetUpdateModel.Id = (Guid)dataSetsResult.Id;
                List<ParamsKeyModel> paramsModel = new List<ParamsKeyModel>();

                var jsonModel = new ParamsKeyModel();
                jsonModel.KeyName = "FormData";
                jsonModel.KeyValue = JsonConvert.SerializeObject(formfield);
                jsonModel.Type = "object";
                paramsModel.Add(jsonModel);
                dataSetUpdateModel.ParamsJsonModel = paramsModel;

                var id = _dataSetService.UpdateDataSetJson(dataSetUpdateModel, loggedInContext, validationMessages);

                EmailGenericModel emailModel = new EmailGenericModel
                {
                    SmtpServer = smtpDetails?.SmtpServer,
                    SmtpServerPort = smtpDetails?.SmtpServerPort,
                    SmtpMail = smtpDetails?.SmtpMail,
                    SmtpPassword = smtpDetails?.SmtpPassword,
                    ToAddresses = toEmails,
                    CCMails = ccMails,
                    HtmlContent = html,
                    Subject = template.EmailSubject != null ? template.EmailSubject : "RemindMail",
                    MailAttachments = null,
                    IsPdf = true
                };
                _emailService.SendMail(loggedInContext, emailModel);
            }

            _emailService.SendSMS(mobileNo, messageBody, loggedInContext);

            return emailsCount;

        }

        public async Task<Guid?> UpsertXPSteps(PurchaseExecutionModel purchaseExecution, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertContractTemplate", "Trading Service"));
            var formfield = new PurchaseExecutionModel();
            var dataSetsPurchases = new DataSetOutputModel();
            if (purchaseExecution.Id != null)
            {
                var dataSetsResult = _dataSetService.SearchExecutionStepsDataSets(purchaseExecution.Id, null, null, null, false, false, null, null, loggedInContext, validationMessages).GetAwaiter().GetResult().FirstOrDefault();
                formfield = dataSetsResult.DataJson;

                if (purchaseExecution.PurchaseId != null)
                {
                    dataSetsPurchases = _dataSetService.SearchDataSets(purchaseExecution.PurchaseId, null, null, null, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult()?.FirstOrDefault();
                }

            }

            List<CountryApiReturnModel> countryDetailsList = _companyStructureManagementService.GetCountries(new CountrySearchInputModel(), validationMessages, loggedInContext);
            List<PaymentTermOutputModel> portDetailsList = _leadService.GetPortDetails(new PaymentTermSearchInputModel(), loggedInContext, validationMessages).ToList();
            if (purchaseExecution.PdfGenerationForBlDraft == true)
            {
                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                {
                    ClientId = purchaseExecution.ClientId,
                    EmailTemplateName = "BLDraftPurchaseTemplate"
                };
                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                var html = template.EmailTemplate;
                LoggingManager.Info("Html" + html);


                List<ProductListOutPutModel> commoadityList = _clientService.GetProductsList(new MasterProduct(), loggedInContext, validationMessages);

                List<ToleranceModel> ToleranceList = _tradingRepository.GetAllTolerances(new ToleranceModel(), loggedInContext, validationMessages).ToList();

                //JObject draftForm = (JObject)JsonConvert.DeserializeObject(purchaseExecution.BlDraftForm?.ToString());
                JObject FormField = (JObject)JsonConvert.DeserializeObject(purchaseExecution.FormData.ToString());
                foreach (var purchaseContractBldraft in purchaseExecution.BlDraftForm)
                {
                    html = template.EmailTemplate;
                    Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
                    var commodityName = string.Empty;
                    var tolerance = string.Empty;
                    var blNumber = string.Empty;
                    var shipper = string.Empty;
                    var consigneeOrderOf = string.Empty;
                    var vesselName = string.Empty;
                    var notifyAddress = string.Empty;
                    var flag = string.Empty;
                    var master = string.Empty;
                    var imoNumber = string.Empty;
                    var portOfLoading = string.Empty;
                    var portOfDischarging = string.Empty;
                    var voyageNumber = string.Empty;
                    var commodity = string.Empty;
                    var totalQuantityMt = string.Empty;
                    var oceanCarriageStowage = string.Empty;
                    var vesselOwner = string.Empty;
                    var charterer = string.Empty;
                    var charterpartyDate = string.Empty;
                    var placeOfIssue = string.Empty;
                    var blIssueDate = string.Empty;
                    var numberOfSets = string.Empty;
                    var consigner = string.Empty;
                    var consignee = string.Empty;
                    var blDate = string.Empty;
                    var notifyParty = string.Empty;
                    DateTime dateValue;
                    foreach (KeyValuePair<string, JToken> keyValuePair in FormField)
                    {
                        keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                    }
                    LoggingManager.Error("ForEach-1");

                    foreach (var keyValue in keyValueMap)
                    {
                        if (keyValue.Key == "commodityName")
                        {
                            if (keyValue.Value != "" && keyValue.Value != null)
                            {
                                var commodityType = commoadityList.Find(x => x.ProductId.ToString() == keyValue.Value);
                                if (commodityType != null)
                                {
                                    commodityName = commodityType.ProductName;
                                }
                                else
                                {
                                    commodityName = keyValue.Value;
                                }
                            }
                            else
                            {
                                commodityName = "";
                            }

                        }
                        if (keyValue.Key == "tolerance")
                        {
                            if (keyValue.Value != "" && keyValue.Value != null)
                            {
                                var ToleranceName = ToleranceList.Find(x => x.ToleranceId.ToString() == keyValue.Value);
                                if (ToleranceName != null)
                                {
                                    tolerance = ToleranceName.ToleranceName;
                                }
                                else
                                {
                                    tolerance = keyValue.Value;
                                }
                            }
                            else
                            {
                                tolerance = "";
                            }
                        }
                        if (keyValue.Key == "blNumber")
                        {
                            blNumber = keyValue.Value;
                        }
                        if (keyValue.Key == "shipper")
                        {
                            shipper = keyValue.Value;
                        }
                        if (keyValue.Key == "consigneeOrderOf")
                        {
                            consigneeOrderOf = keyValue.Value;
                        }
                        if (keyValue.Key == "notifyAddress")
                        {
                            notifyAddress = keyValue.Value;
                        }
                        if (keyValue.Key == "vesselName")
                        {
                            vesselName = keyValue.Value;
                        }
                        if (keyValue.Key == "flag")
                        {
                            flag = keyValue.Value;
                        }
                        if (keyValue.Key == "master")
                        {
                            master = keyValue.Value;
                        }
                        if (keyValue.Key == "master")
                        {
                            imoNumber = keyValue.Value;
                        }
                        if (keyValue.Key == "portOfLoading")
                        {
                            if (keyValue.Value != "" && keyValue.Value != null)
                            {
                                var portDetails = portDetailsList.Find(x => x.Id.ToString() == keyValue.Value);
                                if (portDetails != null)
                                {
                                    portOfLoading = portDetails.Name;
                                }
                                else
                                {
                                    portOfLoading = keyValue.Value;
                                }
                            }
                            else
                            {
                                portOfLoading = "";
                            }
                        }
                        if (keyValue.Key == "portOfDischarging")
                        {
                            if (keyValue.Value != "" && keyValue.Value != null)
                            {
                                var portDetails = portDetailsList.Find(x => x.Id.ToString() == keyValue.Value);
                                if (portDetails != null)
                                {
                                    portOfDischarging = portDetails.Name;
                                }
                                else
                                {
                                    portOfDischarging = keyValue.Value;
                                }
                            }
                            else
                            {
                                portOfDischarging = "";
                            }
                        }
                        if (keyValue.Key == "voyageNumber")
                        {
                            voyageNumber = keyValue.Value;
                        }
                        if (keyValue.Key == "commodity")
                        {
                            commodity = keyValue.Value;
                        }
                        if (keyValue.Key == "totalQuantityMt")
                        {
                            totalQuantityMt = keyValue.Value;
                        }
                        if (keyValue.Key == "oceanCarriageStowage")
                        {
                            oceanCarriageStowage = keyValue.Value;
                        }
                        if (keyValue.Key == "vesselOwner")
                        {
                            vesselOwner = keyValue.Value;
                        }
                        if (keyValue.Key == "charterer")
                        {
                            charterer = keyValue.Value;
                        }
                        if (keyValue.Key == "charterpartyDate")
                        {
                            if (keyValue.Value != null && keyValue.Value != "" && DateTime.TryParse(keyValue.Value, out dateValue) == true)
                            {
                                var value = Convert.ToDateTime(keyValue.Value);
                                charterpartyDate = value.ToString("dd-MMM-yyyy");
                            }
                            else
                            {
                                charterpartyDate = keyValue.Value;
                            }
                            //charterpartyDate = keyValue.Value;
                        }
                        if (keyValue.Key == "placeOfIssue")
                        {
                            if (keyValue.Value != "" && keyValue.Value != null)
                            {
                                var placeOfIssueName = countryDetailsList.Find(x => x.CountryId.ToString() == keyValue.Value);
                                if (placeOfIssueName != null)
                                {
                                    placeOfIssue = placeOfIssueName.CountryName;
                                }
                                else
                                {
                                    placeOfIssue = keyValue.Value;
                                }
                            }
                            else
                            {
                                placeOfIssue = "";
                            }
                        }
                        if (keyValue.Key == "blIssueDate")
                        {
                            if (keyValue.Value != null && keyValue.Value != "" && DateTime.TryParse(keyValue.Value, out dateValue) == true)
                            {
                                var value = Convert.ToDateTime(keyValue.Value);
                                blIssueDate = value.ToString("dd-MMM-yyyy");
                            }
                            else
                            {
                                blIssueDate = keyValue.Value;
                            }
                            //blIssueDate = keyValue.Value;
                        }
                        if (keyValue.Key == "numberOfSets")
                        {
                            numberOfSets = keyValue.Value;
                        }
                    }
                    if (totalQuantityMt != null && totalQuantityMt != string.Empty)
                    {
                        totalQuantityMt = String.Format("{0:n}", Int32.Parse(totalQuantityMt));
                    }

                    blNumber = purchaseContractBldraft.BlNumber != null ? purchaseContractBldraft.BlNumber : null;
                    totalQuantityMt = purchaseContractBldraft.TotalQuantity != null ? purchaseContractBldraft.TotalQuantity.ToString() : null;
                    totalQuantityMt = String.Format("{0:n}", Int32.Parse(totalQuantityMt));
                    shipper = purchaseContractBldraft.Consigner != null ? purchaseContractBldraft.Consigner : null;
                    consignee = purchaseContractBldraft.Consignee != null ? purchaseContractBldraft.Consignee : null;
                    notifyAddress = purchaseContractBldraft.NotifyParty != null ? purchaseContractBldraft.NotifyParty : null;
                    var valueDate = purchaseContractBldraft.BlDate != null ? purchaseContractBldraft.BlDate.ToString() : null;
                    var SignedDay = string.Empty;
                    var SignedMonth = string.Empty;
                    var SignedYear = string.Empty;
                    if (valueDate != null)
                    {
                        var vd = Convert.ToDateTime(valueDate);
                        blIssueDate = vd.ToString("dd-MMM-yyyy");
                        SignedDay = vd.ToString("dd");
                        SignedMonth = vd.ToString("MMMM");
                        SignedYear = vd.ToString("yyyy");
                    }
                    else
                    {
                        blDate = null;
                    }

                    LoggingManager.Error("ForEach-2");

                    html = html.Replace("##Shipper##", shipper)
                                                .Replace("##NotifyAddress##", notifyAddress)
                                                .Replace("##OnBoardTanker##", imoNumber)
                                                .Replace("##Flag##", flag)
                                                .Replace("##Master##", master)
                                                .Replace("##LoadedAtPort##", portOfLoading)
                                                .Replace("##DeliveredPort##", portOfDischarging)
                                                .Replace("##VoyageNumber##", voyageNumber)
                                                .Replace("##Commodity##", commodity)
                                                .Replace("##Quantity##", totalQuantityMt)
                                                .Replace("##SLOPS##", oceanCarriageStowage)
                                                .Replace("##TotalBlNumbers##", "")
                                                .Replace("##CharteredDate##", charterpartyDate)
                                                .Replace("##IssuedPlace##", placeOfIssue)
                                                .Replace("##SignedDay##", SignedDay)
                                                .Replace("##SignedMonth##", SignedMonth)
                                                .Replace("##SignedYear##", SignedYear)
                                                .Replace("##OceanCarriageStowage##", oceanCarriageStowage)
                                                .Replace("##Consignee##", consignee)
                                                .Replace("##BlNumber##", blNumber)
                            ;
                    LoggingManager.Error("Html replace completed");

                    var companySettingsSearchInputModel = new CompanySettingsSearchInputModel();
                    companySettingsSearchInputModel.CompanyId = loggedInContext.CompanyGuid;
                    companySettingsSearchInputModel.IsSystemApp = null;
                    string storageAccountName = string.Empty;

                    LoggingManager.Error("Entering into GeneratePdf service");
                    LoggingManager.Error(html);
                    LoggingManager.Error(purchaseExecution.ClientId.ToString());

                    var BlPdfOutput = await _chromiumService.GenerateExecutionPdf(html, null, purchaseExecution.ClientId.ToString()).ConfigureAwait(false);
                    //LoggingManager.Error(BlPdfOutput.ByteStream.ToString());
                    //LoggingManager.Error(BlPdfOutput.FileName.ToString());
                    //LoggingManager.Error(BlPdfOutput.BlobUrl.ToString());

                    List<CompanySettingsSearchOutputModel> companySettings = _masterDataManagementRepository.GetCompanySettings(companySettingsSearchInputModel, loggedInContext, validationMessages).ToList();
                    if (companySettings.Count > 0)
                    {
                        var storageAccountDetails = companySettings.Where(x => x.Key == "StorageAccountName").FirstOrDefault();
                        storageAccountName = storageAccountDetails?.Value;
                    }
                    CompanyOutputModel companyModel = _companyStructureService.GetCompanyById(loggedInContext.CompanyGuid, loggedInContext, validationMessages);

                    var directory = SetupCompanyFileContainer(companyModel, 6, loggedInContext.LoggedInUserId, storageAccountName);

                    var ContractFileName = blNumber;

                    var fileExtension = ".pdf";

                    var ContractConvertedFileName = ContractFileName + "-" + blNumber + fileExtension;

                    CloudBlockBlob ContractConvertedBlockBlob = directory.GetBlockBlobReference(ContractConvertedFileName);

                    ContractConvertedBlockBlob.Properties.CacheControl = "public, max-age=2592000";

                    ContractConvertedBlockBlob.Properties.ContentType = "application/pdf";

                    Byte[] ContractBytes = BlPdfOutput.ByteStream;

                    ContractConvertedBlockBlob.UploadFromByteArray(ContractBytes, 0, ContractBytes.Length);

                    purchaseContractBldraft.ContractUrl = ContractConvertedBlockBlob.Uri.AbsoluteUri;

                    LoggingManager.Error(purchaseExecution.ContractUrl);

                }
            }
            if (portDetailsList != null && portDetailsList.Count > 0 && purchaseExecution.BlDraftForm != null)
            {
                purchaseExecution.BlDraftForm.ForEach(x => x.PortOfDischargeName = portDetailsList.Where(y => y.Id == x.PortOfDischarge).FirstOrDefault().Name);
                purchaseExecution.BlDraftForm.ForEach(x => x.PortOfLoadingName = portDetailsList.Where(y => y.Id == x.PortOfLoading).FirstOrDefault().Name);
            }
            if (countryDetailsList != null && countryDetailsList.Count > 0 && purchaseExecution.BlDraftForm != null)
            {
                purchaseExecution.BlDraftForm.ForEach(x => x.PortOfDischargeCountryName = countryDetailsList.Where(y => y.CountryId == x.PortOfDischargeCountry).FirstOrDefault().CountryName);
                purchaseExecution.BlDraftForm.ForEach(x => x.PortOfLoadingCountryName = countryDetailsList.Where(y => y.CountryId == x.PortOfLoadingCountry).FirstOrDefault().CountryName);
            }
            purchaseExecution.StatusName = purchaseExecution.StatusName != null ? purchaseExecution.StatusName : "Not Started";
            purchaseExecution.ContractType = "ExecutionSteps";
            purchaseExecution.CanShowAlert = false;
            purchaseExecution.OldData = false;
            purchaseExecution.NewData = false;
            purchaseExecution.StepHistory = null;
            purchaseExecution.StatusName = purchaseExecution.StatusName.Trim();
            purchaseExecution.ReminderCount = purchaseExecution.ReminderCount;



            string StampDocument = string.Empty;

            if (purchaseExecution.IsStampNeeded == true)
            {
                if (purchaseExecution.StampClientId != null)
                {
                    var fileSearchModel = new FileSearchCriteriaInputModel();
                    fileSearchModel.ReferenceId = purchaseExecution.StampClientId;
                    fileSearchModel.ReferenceTypeId = new Guid("26D4C6C2-B698-4D79-8A52-0014E9045D60");
                    var stampDetails = _fileRepository.SearchFile(fileSearchModel, loggedInContext, validationMessages).FirstOrDefault();
                    if (stampDetails != null)
                    {
                        StampDocument = stampDetails.FilePath;
                    }
                }
                else
                {
                    var companySettingsinput = new CompanySettingsSearchInputModel();
                    companySettingsinput.CompanyId = loggedInContext.CompanyGuid;
                    companySettingsinput.Key = "StampDocument";
                    StampDocument = _masterDataManagementRepository.GetCompanySettings(companySettingsinput, loggedInContext, validationMessages)?.FirstOrDefault()?.Value;
                }
            }



            if (purchaseExecution.IsGeneratePdf == true && (purchaseExecution.StepName.ToLower().Trim() == "Letter of indemnity for Discharging Cargo".ToLower() || purchaseExecution.StepName.ToLower().Trim() == "Letter of indemnity for switching BLs".ToLower()))
            {
                var html = string.Empty;

                List<ProductListOutPutModel> commoadityList = _clientService.GetProductsList(new MasterProduct(), loggedInContext, validationMessages);
                List<CountryApiReturnModel> countryList = _companyStructureManagementService.GetCountries(new CountrySearchInputModel(), validationMessages, loggedInContext);
                ContractModel searchModel = new ContractModel();
                searchModel.DataSetId = purchaseExecution.ContractId;
                var vesselContractData = new ContractModel();
                vesselContractData = GetContracts(searchModel, loggedInContext, validationMessages).FirstOrDefault();
                JObject vesselformfield = (JObject)JsonConvert.DeserializeObject(vesselContractData.FormData.ToString());
                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                var LoadingPort = string.Empty;
                var LoadPortCountry = string.Empty;

                var DischargingPort = string.Empty;
                var DischargePortCountry = string.Empty;

                var charterer = string.Empty;
                var vessel = string.Empty;
                var owner = string.Empty;
                var vesselOwnerAddressLine1 = string.Empty;
                var vesselOwnerAddressLine2 = string.Empty;
                var switchblNumber = string.Empty;
                var quantity = string.Empty;
                var commodity = string.Empty;


                if (purchaseExecution.StepName.ToLower().Trim() == "Letter of indemnity for Discharging Cargo".ToLower())
                {
                    foreach (KeyValuePair<string, JToken> keyValuePair in vesselformfield)
                    {
                        keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                    }
                    foreach (var keyValue in keyValueMap)
                    {
                        if (keyValue.Key == "vesselOwnerName")
                        {
                            owner = keyValue.Value;
                        }
                        if (keyValue.Key == "vesselName")
                        {
                            vessel = keyValue.Value;
                        }
                        if (keyValue.Key == "chartererName")
                        {
                            charterer = keyValue.Value;
                        }

                        if (keyValue.Key == "originCountry")
                        {
                            if (keyValue.Value != "" && keyValue.Value != null)
                            {
                                var commodityType = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                                LoadPortCountry = commodityType.CountryName;
                            }
                            else
                            {
                                LoadPortCountry = "";
                            }
                        }
                        if (keyValue.Key == "portOfLoad")
                        {
                            LoadingPort = keyValue.Value;
                        }
                        if (keyValue.Key == "destinationCountry")
                        {
                            if (keyValue.Value != "" && keyValue.Value != null)
                            {
                                var commodityType = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                                DischargePortCountry = commodityType.CountryName;
                            }
                            else
                            {
                                DischargePortCountry = "";
                            }
                        }
                        if (keyValue.Key == "destinationCountry")
                        {
                            DischargingPort = keyValue.Value;
                        }
                        if (keyValue.Key == "vesselOwnerAddressLine1")
                        {
                            vesselOwnerAddressLine1 = keyValue.Value;
                        }
                        if (keyValue.Key == "vesselOwnerAddressLine2")
                        {
                            vesselOwnerAddressLine2 = keyValue.Value;
                        }
                        if (keyValue.Key == "commodityName")
                        {
                            commodity = keyValue.Value;
                        }
                        if (keyValue.Key == "quantityNumber")
                        {
                            quantity = keyValue.Value;
                        }
                    }
                    if (quantity != null && quantity != string.Empty)
                    {
                        quantity = String.Format("{0:n}", Int32.Parse(quantity));
                    }
                    EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = vesselContractData.ClientId,
                        EmailTemplateName = "LOIOFDischargingCargoPortPdfTemplate"
                    };

                    var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate;

                    var dynamicFields = string.Empty;
                    //var i = 0;
                    //foreach (var buyerSwitchBl in switchBlList.BuyerSwitchBlContractDetails)
                    //{
                    //    i = i + 1;
                    //    var dynamic = "<div class=\"row\"><div class=\"col-3\" style=\"margin-top: 30px;\">"+
                    //        "<p class=\"sub-heading\" style=\"margin-bottom: 15px;\">AA.Ship :</p><p class=\"sub-heading\" style=\"margin-bottom: 15px;\">Voyage :</p>"+
                    //        "<p class=\"sub-heading\" style=\"margin-bottom: 15px;\">Cargo :</p><p class=\"sub-heading\" style=\"margin-bottom: 15px;\">Bill of lading :</p></div>"+
                    //        "<div class=\"col-9\" style=\"margin-top: 30px;\">"+
                    //            "<p class=\"sub-heading\" style=\"font-style: italic; margin-bottom: 15px;\">"+ i+"."+ vessel + "</p>"+
                    //            "<p class=\"sub-heading\" style=\"font-style: italic; margin-bottom: 15px;\">"+ LoadingPort + ", " + LoadPortCountry + " TO " + DischargingPort + ", " + DischargePortCountry + "</p>" +
                    //            "<p class=\"sub-heading\" style=\"font-style: italic; margin-bottom: 15px;\">"+ buyerSwitchBl.Quantity + "METRIC TONS OF "+ commodity + "</p>" +
                    //            "<p class=\"sub-heading\" style=\"font-style: italic; margin-bottom: 15px;\">"+ buyerSwitchBl.BlNumber +"/ DATED" + "</p>" +
                    //        "</div>"+
                    //    "</div>";
                    //    dynamicFields = dynamicFields + dynamic;
                    //}
                    //html = html.Replace("##BLDetails##", dynamicFields).Replace("##ShippedBy##", "").Replace("##ConsignedTo##", "").Replace("##PortOfDelivery##", DischargingPort + ", " + DischargePortCountry).Replace("##HereByName##", charterer)
                    //    .Replace("##CargoTo##", "").Replace("##PortofDischarge##", DischargingPort + ", " + DischargePortCountry);
                    JObject blformfield = (JObject)JsonConvert.DeserializeObject(purchaseExecution.FormData.ToString());
                    keyValueMap = new Dictionary<string, string>();

                    var dateTime = string.Empty;
                    var ship = string.Empty;
                    var voyage = string.Empty;
                    var cargo = string.Empty;
                    var textField = string.Empty;
                    var textField1 = string.Empty;
                    var textField2 = string.Empty;
                    var textField3 = string.Empty;
                    var textField4 = string.Empty;
                    var textField5 = string.Empty;
                    var textField6 = string.Empty;
                    var textField7 = string.Empty;
                    var textField8 = string.Empty;
                    var signature = string.Empty;
                    DateTime dateValue;
                    foreach (KeyValuePair<string, JToken> keyValuePair in blformfield)
                    {
                        keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                    }
                    foreach (var keyValue in keyValueMap)
                    {
                        if (keyValue.Key == "dateTime")
                        {
                            if (keyValue.Value != null && keyValue.Value != "" && DateTime.TryParse(keyValue.Value, out dateValue) == true)
                            {
                                var value = Convert.ToDateTime(keyValue.Value);
                                dateTime = value.ToString("dd-MMM-yyyy");
                            }
                            else
                            {
                                dateTime = keyValue.Value;
                            }
                            //dateTime = keyValue.Value;
                        }

                        if (keyValue.Key == "ship")
                        {
                            ship = keyValue.Value;
                        }
                        if (keyValue.Key == "voyage")
                        {
                            voyage = keyValue.Value;
                        }
                        if (keyValue.Key == "cargo")
                        {
                            cargo = keyValue.Value;
                        }

                        if (keyValue.Key == "textField")
                        {
                            textField = keyValue.Value;
                        }
                        if (keyValue.Key == "textField1")
                        {
                            textField1 = keyValue.Value;
                        }
                        if (keyValue.Key == "textField2")
                        {
                            textField2 = keyValue.Value;
                        }
                        if (keyValue.Key == "textField3")
                        {
                            textField3 = keyValue.Value;
                        }
                        if (keyValue.Key == "textField4")
                        {
                            textField4 = keyValue.Value;
                        }
                        if (keyValue.Key == "textField5")
                        {
                            textField5 = keyValue.Value;
                        }
                        if (keyValue.Key == "textField6")
                        {
                            textField6 = keyValue.Value;
                        }
                        if (keyValue.Key == "textField7")
                        {
                            textField7 = keyValue.Value;
                        }
                        if (keyValue.Key == "textField8")
                        {
                            textField8 = keyValue.Value;
                        }

                        if (keyValue.Key == "signature")
                        {
                            if (keyValue.Value != null && keyValue.Value != "")
                            {
                                var sigHtml = "Signature: <img src=##Src## alt='chartererSignature' style=\"width: 325px; height: 100px;\"/>";
                                signature = sigHtml.Replace("##Src##", keyValue.Value);
                            }
                            else
                            {
                                signature = "Signature: ";
                            }
                        }
                    }
                    html = html.Replace("##Date##", dateTime).Replace("##Ship##", ship).Replace("##Voyage##", voyage).Replace("##Cargo##", cargo).Replace("##BillOfLadingAAShip##", textField + " " + textField1 + " " + textField2)
                    .Replace("##BillOfLadingBBShip##", textField3 + " " + textField4 + " " + textField5).Replace("##BillOfLadingCCShip##", textField6 + " " + textField7 + " " + textField8)

                    .Replace("##BLDetails##", dynamicFields).Replace("##ShippedBy##", "").Replace("##ConsignedTo##", "").Replace("##PortOfDelivery##", DischargingPort + ", " + DischargePortCountry).Replace("##HereByName##", charterer)
                    .Replace("##CargoTo##", "").Replace("##PortofDischarge##", DischargingPort + ", " + DischargePortCountry).Replace("##Requestor##", "MGV COMMODITY PTE LTD").Replace("##Signature##", signature);
                }
                else if (purchaseExecution.StepName.ToLower() == "Letter of indemnity for switching BLs".ToLower().Trim())
                {
                    EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = vesselContractData.ClientId,
                        EmailTemplateName = "LOIBLPdfTemplate"
                    };

                    var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                    html = template.EmailTemplate;
                    var dynamicFields = string.Empty;

                    var shipper = string.Empty;
                    var consignee = string.Empty;
                    var notifyParty = string.Empty;
                    var loadPort = string.Empty;
                    var dischargePort = string.Empty;
                    var blNumber = string.Empty;
                    var blDate = string.Empty;
                    var blQuantity = string.Empty;

                    var shipper1 = string.Empty;
                    var consignee1 = string.Empty;
                    var notifyParty1 = string.Empty;
                    var loadPort1 = string.Empty;
                    var dischargePort1 = string.Empty;
                    var blNumber1 = string.Empty;
                    var blDate1 = string.Empty;
                    var blQuantity1 = string.Empty;

                    var country = string.Empty;
                    DateTime dateValue;

                    JObject blformfield = (JObject)JsonConvert.DeserializeObject(purchaseExecution.FormData.ToString());
                    keyValueMap = new Dictionary<string, string>();
                    foreach (KeyValuePair<string, JToken> keyValuePair in blformfield)
                    {
                        keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                    }

                    foreach (var keyValue in keyValueMap)
                    {
                        if (keyValue.Key == "shipper")
                        {
                            shipper = keyValue.Value;
                        }
                        if (keyValue.Key == "consignee")
                        {
                            consignee = keyValue.Value;
                        }
                        if (keyValue.Key == "notifyParty")
                        {
                            notifyParty = keyValue.Value;
                        }
                        if (keyValue.Key == "loadPort")
                        {
                            loadPort = keyValue.Value;
                        }
                        if (keyValue.Key == "dischargePort")
                        {
                            dischargePort = keyValue.Value;
                        }
                        if (keyValue.Key == "blNumber")
                        {
                            blNumber = keyValue.Value;
                        }
                        if (keyValue.Key == "blDate")
                        {
                            if (keyValue.Value != null && keyValue.Value != "" && DateTime.TryParse(keyValue.Value, out dateValue) == true)
                            {
                                var value = Convert.ToDateTime(keyValue.Value);
                                blDate = value.ToString("dd-MMM-yyyy");
                            }
                            else
                            {
                                blDate = keyValue.Value;
                            }
                            //blDate = keyValue.Value;
                        }
                        if (keyValue.Key == "blQuantity")
                        {
                            blQuantity = keyValue.Value;
                        }

                        if (keyValue.Key == "shipper1")
                        {
                            shipper1 = keyValue.Value;
                        }
                        if (keyValue.Key == "consignee1")
                        {
                            consignee1 = keyValue.Value;
                        }
                        if (keyValue.Key == "notifyParty1")
                        {
                            notifyParty1 = keyValue.Value;
                        }
                        if (keyValue.Key == "portOfLoading")
                        {
                            loadPort1 = keyValue.Value;
                        }
                        if (keyValue.Key == "portOfDischarge")
                        {
                            dischargePort1 = keyValue.Value;
                        }
                        if (keyValue.Key == "blNumber1")
                        {
                            blNumber1 = keyValue.Value;
                        }
                        if (keyValue.Key == "dateTime")
                        {
                            if (keyValue.Value != null && keyValue.Value != "" && DateTime.TryParse(keyValue.Value, out dateValue) == true)
                            {
                                var value = Convert.ToDateTime(keyValue.Value);
                                blDate1 = value.ToString("dd-MMM-yyyy");
                            }
                            else
                            {
                                blDate1 = keyValue.Value;
                            }
                            //blDate1 = keyValue.Value;
                        }
                        if (keyValue.Key == "blQuantity1")
                        {
                            blQuantity1 = keyValue.Value;
                        }

                        if (keyValue.Key == "country")
                        {
                            country = keyValue.Value;
                        }
                    }
                    if (blQuantity != null && blQuantity != string.Empty)
                    {
                        blQuantity = String.Format("{0:n}", Int32.Parse(blQuantity));
                    }
                    if (blQuantity1 != null && blQuantity1 != string.Empty)
                    {
                        blQuantity1 = String.Format("{0:n}", Int32.Parse(blQuantity1));
                    }
                    switchblNumber = blNumber + blNumber1;
                    //var i = 0;
                    //foreach(var buyerSwitchBl in switchBlList.BuyerSwitchBlContractDetails)
                    //{
                    //    i = i + 1;
                    //    var dynamic = "<div class=\"row\"><div class=\"col-3\" style=\"margin-top: 30px;\"><p class=\"sub-heading\" style=\"margin-bottom: 15px;\">"+ i + ") Shipper</p>"+
                    //                    "<p class=\"sub-heading\" style=\"margin-bottom: 15px;\">Consignee</p><p class=\"sub-heading\" style=\"margin-bottom: 15px;\">Notify party</p>"+
                    //                    "<p class=\"sub-heading\" style=\"margin-bottom: 15px;\">Loadport</p><p class=\"sub-heading\" style=\"margin-bottom: 15px;\">Disport</p>"+
                    //                    "<p class=\"sub-heading\" style=\"margin-bottom: 15px; color: red;\">B/L NO</p><p class=\"sub-heading\" style=\"margin-bottom: 15px;\">B/L Date</p>"+
                    //                    "<p class=\"sub-heading\" style=\"margin-bottom: 15px;\">B/L Quantity</p></div>"+
                    //                    "<div class=\"col-9\" style=\"margin-top: 30px;\"><p class=\"sub-heading\" style=\"margin-bottom: 15px;\">: "+ buyerSwitchBl.Consigner +"</p>" +
                    //                    "<p class=\"sub-heading\" style=\"margin-bottom: 15px;\">: "+ buyerSwitchBl.Consignee + "</p><p class=\"sub-heading\" style=\"margin-bottom: 15px;\">: "+ buyerSwitchBl.NotifyParty +"</p>"+
                    //                    "<p class=\"sub-heading\" style=\"margin-bottom: 15px;\">: " + LoadingPort + ", " + LoadPortCountry + "</p><p class=\"sub-heading\" style=\"margin-bottom: 15px;\">: "+ DischargingPort+", "+ DischargePortCountry+ "</p>"+
                    //                    "<p class=\"sub-heading\" style=\"margin-bottom: 15px; color: red;\">: "+ buyerSwitchBl.BlNumber +"</p><p class=\"sub-heading\" style=\"margin-bottom: 15px;\">: "+ buyerSwitchBl.BlNumber +"</p>"+
                    //                    "<p class=\"sub-heading\" style=\"margin-bottom: 15px;\">: " + buyerSwitchBl.Quantity +"(MT)</p></div></div>";
                    //    dynamicFields = dynamicFields + dynamic;
                    //}
                    //html = html.Replace("##ToAddress##", owner+ " " +vessel + "," + vesselOwnerAddressLine1+ vesselOwnerAddressLine2).Replace("##ToDate##", DateTime.UtcNow.ToString("dd-MM-yyyy"))
                    //    .Replace("##1stDescription##", quantity+", "+commodity).Replace("##BLDetails##", dynamicFields)
                    //    .Replace("##ShipBy##", "").Replace("##ConsignedTo##", "").Replace("##PortOfDelivery##", DischargingPort+", "+ DischargePortCountry).Replace("##HereByName##", charterer).Replace("##SwitchBlAgent##", "")
                    //    .Replace("##CountryLoading##", LoadPortCountry).Replace("##PortOfLoading##", LoadingPort+", "+ LoadPortCountry);
                    html = html.Replace("##ToAddress##", owner + " " + vessel + "," + vesselOwnerAddressLine1 + vesselOwnerAddressLine2).Replace("##ToDate##", DateTime.UtcNow.ToString("dd-MMM-yyyy"))
                        .Replace("##1stDescription##", quantity + ", " + commodity).Replace("##2ndDescription##", " ")

                        .Replace("##Shipper1##", shipper).Replace("##Consignee1##", consignee).Replace("##NotifyPrty1##", notifyParty).Replace("##LoadPort1##", loadPort).Replace("##DischargePort1##", dischargePort)
                        .Replace("##BLNO1##", blNumber).Replace("##BLDate1##", blDate).Replace("##BLQuantity1##", blQuantity)
                        .Replace("##Shipper2##", shipper1).Replace("##Consignee2##", consignee1).Replace("##NotifyPrty2##", notifyParty1).Replace("##LoadPort2##", loadPort1).Replace("##DischargePort2##", dischargePort1)
                        .Replace("##BLNO2##", blNumber1).Replace("##BLDate2##", blDate1).Replace("##BLQuantity2##", blQuantity1)

                        .Replace("##BLDetails##", dynamicFields)
                        .Replace("##ShipBy1##", shipper).Replace("##ConsignedTo1##", consignee).Replace("##PortOfDelivery1##", dischargePort).Replace("##PortOfLoading1##", loadPort)
                        .Replace("##ShipBy2##", shipper1).Replace("##ConsignedTo2##", consignee1).Replace("##PortOfDelivery2##", dischargePort1).Replace("##PortOfLoading2##", loadPort1)
                        .Replace("##HereByName##", charterer).Replace("##SwitchBlAgent##", "")
                        .Replace("##Country##", country).Replace("##BehalfCompanyName##", "MGV COMMODITY PTE LTD").Replace("##Signature##", "Signature: ");
                }

                var companySettingsSearchInputModel = new CompanySettingsSearchInputModel();
                companySettingsSearchInputModel.CompanyId = loggedInContext.CompanyGuid;
                companySettingsSearchInputModel.IsSystemApp = null;
                string storageAccountName = string.Empty;

                if (html != null && purchaseExecution.IsStampNeeded != null)
                {
                    var stampHtml = "<img src=##Src## alt='chartererSignature' style=\"width: 325px; height: 100px;\"/>";
                    stampHtml = stampHtml.Replace("##Src##", StampDocument);

                    html = html.Replace("##UserStampHTML##", StampDocument == null ? "" : stampHtml);
                }
                else
                {
                    html = html.Replace("##UserStampHTML##", string.Empty);
                }

                var SwitchBlPdfOutput = await _chromiumService.GenerateExecutionPdf(html, null, purchaseExecution.ClientId.ToString()).ConfigureAwait(false);

                List<CompanySettingsSearchOutputModel> companySettings = _masterDataManagementRepository.GetCompanySettings(companySettingsSearchInputModel, loggedInContext, validationMessages).ToList();
                if (companySettings.Count > 0)
                {
                    var storageAccountDetails = companySettings.Where(x => x.Key == "StorageAccountName").FirstOrDefault();
                    storageAccountName = storageAccountDetails?.Value;
                }
                CompanyOutputModel companyModel = _companyStructureService.GetCompanyById(loggedInContext.CompanyGuid, loggedInContext, validationMessages);

                var directory = SetupCompanyFileContainer(companyModel, 6, loggedInContext.LoggedInUserId, storageAccountName);

                var ContractFileName = purchaseExecution.StepName;

                var fileExtension = ".pdf";

                var ContractConvertedFileName = ContractFileName + "-" + switchblNumber + fileExtension;

                CloudBlockBlob ContractConvertedBlockBlob = directory.GetBlockBlobReference(ContractConvertedFileName);

                ContractConvertedBlockBlob.Properties.CacheControl = "public, max-age=2592000";

                ContractConvertedBlockBlob.Properties.ContentType = "application/pdf";

                Byte[] ContractBytes = SwitchBlPdfOutput.ByteStream;

                ContractConvertedBlockBlob.UploadFromByteArray(ContractBytes, 0, ContractBytes.Length);
                if (purchaseExecution.IsStampNeeded == true)
                {
                    purchaseExecution.IsFileReUploaded = true;
                    purchaseExecution.ReUploadedUrl = ContractConvertedBlockBlob.Uri.AbsoluteUri;
                }
                else
                {
                    purchaseExecution.ContractUrl = ContractConvertedBlockBlob.Uri.AbsoluteUri;
                }

            }

            if (purchaseExecution.StepName.ToLower().Trim() == "Documents per shipping Instruction".ToLower().Trim())
            {
                if (purchaseExecution.DocumentShippingInstructionsDetails != null)
                {
                    foreach (var documentDetail in purchaseExecution.DocumentShippingInstructionsDetails)
                    {
                        if ((documentDetail.IsFileReUploaded == true && string.IsNullOrEmpty(documentDetail.ReUploadedUrl)) || (string.IsNullOrEmpty(documentDetail.ContractUrl) && (documentDetail.IsFileReUploaded == null || documentDetail.IsFileReUploaded == false)))
                        {
                            if (documentDetail.IsGeneratePdf == true)
                            {
                                var html = string.Empty;

                                List<ProductListOutPutModel> commoadityList = _clientService.GetProductsList(new MasterProduct(), loggedInContext, validationMessages);
                                List<CountryApiReturnModel> countryList = _companyStructureManagementService.GetCountries(new CountrySearchInputModel(), validationMessages, loggedInContext);
                                ContractModel searchModel = new ContractModel();
                                searchModel.DataSetId = purchaseExecution.ContractId;
                                //var vesselContractData = new ContractModel();
                                //vesselContractData = GetContracts(searchModel, loggedInContext, validationMessages).FirstOrDefault();
                                //JObject vesselformfield = (JObject)JsonConvert.DeserializeObject(vesselContractData.FormData.ToString());
                                Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

                                var LoadingPort = string.Empty;
                                var LoadPortCountry = string.Empty;

                                var DischargingPort = string.Empty;
                                var DischargePortCountry = string.Empty;
                                var country = string.Empty;
                                var charterer = string.Empty;
                                var vessel = string.Empty;
                                var owner = string.Empty;
                                var vesselOwnerAddressLine1 = string.Empty;
                                var vesselOwnerAddressLine2 = string.Empty;
                                var dateTime = string.Empty;
                                var vesselContractName = string.Empty;
                                var quantity = string.Empty;
                                var commodity = string.Empty;
                                var blIssueDate = string.Empty;
                                var signature = string.Empty;
                                string templateName = string.Empty;
                                string dateOfManufacture = string.Empty;
                                string dateOfExpiry = string.Empty;
                                var blNumber = string.Empty;
                                var freightInWords = string.Empty;
                                DateTime dateValue;

                                var templateTypesSearchModel = new TradeTemplateTypes();
                                templateTypesSearchModel.TemplateTypeId = documentDetail.TemplateTypeId;
                                TradeTemplateTypes templatesTypes = _tradingRepository.GetTradeTemplateTypes(templateTypesSearchModel, loggedInContext, validationMessages).FirstOrDefault();
                                if (templatesTypes != null)
                                {
                                    string templateTypeName = templatesTypes.TemplateTypeName.Replace(" ", "");
                                    templateName = templateTypeName + "PdfTemplate";
                                }
                                else
                                {
                                    templateName = null;
                                }
                                EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                                {
                                    ClientId = documentDetail.ClientId,
                                    EmailTemplateName = templateName
                                };

                                var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
                                html = template.EmailTemplate;

                                var dynamicFields = string.Empty;
                                JObject blformfield = (JObject)JsonConvert.DeserializeObject<Object>(documentDetail.FormData.ToString());
                                keyValueMap = new Dictionary<string, string>();
                                foreach (KeyValuePair<string, JToken> keyValuePair in blformfield)
                                {
                                    keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
                                }

                                foreach (var keyValue in keyValueMap)
                                {
                                    if (keyValue.Key == "date")
                                    {
                                        if (keyValue.Value != null && keyValue.Value != "" && DateTime.TryParse(keyValue.Value, out dateValue) == true)
                                        {
                                            var value = Convert.ToDateTime(keyValue.Value);
                                            dateTime = value.ToString("dd-MMM-yyyy");
                                        }
                                        else
                                        {
                                            dateTime = keyValue.Value;
                                        }

                                    }
                                    if (keyValue.Key == "vesselName")
                                    {
                                        vessel = keyValue.Value;
                                    }
                                    if (keyValue.Key == "chartererName")
                                    {
                                        charterer = keyValue.Value;
                                    }

                                    if (keyValue.Key == "originCountry")
                                    {
                                        if (keyValue.Value != "" && keyValue.Value != null)
                                        {
                                            var commodityType = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                                            LoadPortCountry = commodityType.CountryName;
                                        }
                                        else
                                        {
                                            LoadPortCountry = "";
                                        }
                                    }
                                    if (keyValue.Key == "portOfLoading")
                                    {
                                        if (keyValue.Value != "" && keyValue.Value != null)
                                        {
                                            var commodityType = portDetailsList.Find(x => x.Id.ToString() == keyValue.Value);
                                            LoadingPort = commodityType.Name;
                                        }
                                        else
                                        {
                                            LoadingPort = "";
                                        }
                                    }
                                    if (keyValue.Key == "portOfDischarge")
                                    {
                                        if (keyValue.Value != "" && keyValue.Value != null)
                                        {
                                            var commodityType = portDetailsList.Find(x => x.Id.ToString() == keyValue.Value);
                                            DischargingPort = commodityType.Name;
                                        }
                                        else
                                        {
                                            DischargingPort = "";
                                        }
                                    }
                                    if (keyValue.Key == "loadingPort")
                                    {
                                        if (keyValue.Value != "" && keyValue.Value != null)
                                        {
                                            var commodityType = portDetailsList.Find(x => x.Id.ToString() == keyValue.Value);
                                            LoadingPort = commodityType.Name;
                                        }
                                        else
                                        {
                                            LoadingPort = "";
                                        }
                                    }
                                    if (keyValue.Key == "dischargePort")
                                    {
                                        if (keyValue.Value != "" && keyValue.Value != null)
                                        {
                                            var commodityType = portDetailsList.Find(x => x.Id.ToString() == keyValue.Value);
                                            DischargingPort = commodityType.Name;
                                        }
                                        else
                                        {
                                            DischargingPort = "";
                                        }
                                    }
                                    if (keyValue.Key == "textField1")
                                    {
                                        if (keyValue.Value != "" && keyValue.Value != null)
                                        {
                                            var commodityType = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                                            DischargingPort = commodityType.CountryName;
                                        }
                                        else
                                        {
                                            DischargingPort = "";
                                        }
                                    }
                                    if (keyValue.Key == "country")
                                    {
                                        if (keyValue.Value != "" && keyValue.Value != null)
                                        {
                                            var commodityType = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                                            country = commodityType.CountryName;
                                        }
                                        else
                                        {
                                            country = "";
                                        }
                                    }
                                    if (keyValue.Key == "blNumber")
                                    {
                                        blNumber = keyValue.Value;
                                    }
                                    if (keyValue.Key == "vesselContract1" || keyValue.Key == "vesselContract")
                                    {
                                        vesselContractName = keyValue.Value;
                                    }
                                    if (keyValue.Key == "blIssueDate")
                                    {
                                        if (keyValue.Value != null && keyValue.Value != "" && DateTime.TryParse(keyValue.Value, out dateValue) == true)
                                        {
                                            var value = Convert.ToDateTime(keyValue.Value);
                                            blIssueDate = value.ToString("dd-MMM-yyyy");
                                        }
                                        else
                                        {
                                            blIssueDate = keyValue.Value;
                                        }
                                    }
                                    if (keyValue.Key == "vesselOwnerAddressLine2")
                                    {
                                        vesselOwnerAddressLine2 = keyValue.Value;
                                    }
                                    if (keyValue.Key == "commodity")
                                    {
                                        commodity = keyValue.Value;
                                    }
                                    if (keyValue.Key == "totalQuantityMt")
                                    {
                                        quantity = keyValue.Value;
                                    }
                                    if (keyValue.Key == "sellerSignature")
                                    {
                                        if (keyValue.Value != null && keyValue.Value != "")
                                        {
                                            var sigHtml = "Signature: <img src=##Src## alt='buyerSignature' style=\"width: 325px; height: 100px;\"/>";
                                            signature = sigHtml.Replace("##Src##", keyValue.Value);
                                        }
                                        else
                                        {
                                            signature = "Signature: ";
                                        }
                                    }
                                    if (keyValue.Key == "dateOfManufacture")
                                    {
                                        if (keyValue.Value != null && keyValue.Value != "" && DateTime.TryParse(keyValue.Value, out dateValue) == true)
                                        {
                                            var value = Convert.ToDateTime(keyValue.Value);
                                            dateOfManufacture = value.ToString("dd-MMM-yyyy");
                                        }
                                        else
                                        {
                                            dateOfManufacture = keyValue.Value;
                                        }
                                    }
                                    if (keyValue.Key == "dateOfExpiry")
                                    {
                                        if (keyValue.Value != null && keyValue.Value != "" && DateTime.TryParse(keyValue.Value, out dateValue) == true)
                                        {
                                            var value = Convert.ToDateTime(keyValue.Value);
                                            dateOfExpiry = value.ToString("dd-MMM-yyyy");
                                        }
                                        else
                                        {
                                            dateOfExpiry = keyValue.Value;
                                        }
                                    }
                                    if (keyValue.Key == "freightInWords")
                                    {
                                        freightInWords = keyValue.Value;
                                    }
                                }
                                if (quantity != null && quantity != string.Empty)
                                {
                                    quantity = String.Format("{0:n}", Int32.Parse(quantity)) + " " + "MT";
                                }

                                html = html.Replace("##VesselName##", vesselContractName).Replace("##PortOfDischarge##", DischargingPort).Replace("##PortOfLoading##", LoadingPort)
                                       .Replace("##BillOfLanding##", blNumber + " " + blIssueDate).Replace("##CurrentDate##", dateTime).Replace("##QuantityUnits##", quantity)
                                       .Replace("##CommodityName##", commodity).Replace("##ManufactureDate##",dateOfManufacture).Replace("##ExpiryDate##",dateOfExpiry)
                                       .Replace("##Quantity##", quantity).Replace("freightInWords",freightInWords).Replace("##two##",quantity);
                                var companySettingsSearchInputModel = new CompanySettingsSearchInputModel();
                                companySettingsSearchInputModel.CompanyId = loggedInContext.CompanyGuid;
                                companySettingsSearchInputModel.IsSystemApp = null;
                                string storageAccountName = string.Empty;



                                if (html != null && documentDetail.IsStampNeeded != null)
                                {
                                    var stampHtml = "<img src=##Src## alt='chartererSignature' style=\"width: 325px; height: 100px;\"/>";
                                    stampHtml = stampHtml.Replace("##Src##", StampDocument);

                                    html = html.Replace("##UserStampHTML##", StampDocument == null ? "" : stampHtml);
                                }
                                else
                                {
                                    html = html.Replace("##UserStampHTML##", string.Empty);
                                }

                                var SwitchBlPdfOutput = await _chromiumService.GenerateExecutionPdf(html, null, documentDetail.ClientId.ToString()).ConfigureAwait(false);

                                List<CompanySettingsSearchOutputModel> companySettings = _masterDataManagementRepository.GetCompanySettings(companySettingsSearchInputModel, loggedInContext, validationMessages).ToList();
                                if (companySettings.Count > 0)
                                {
                                    var storageAccountDetails = companySettings.Where(x => x.Key == "StorageAccountName").FirstOrDefault();
                                    storageAccountName = storageAccountDetails?.Value;
                                }
                                CompanyOutputModel companyModel = _companyStructureService.GetCompanyById(loggedInContext.CompanyGuid, loggedInContext, validationMessages);

                                var directory = SetupCompanyFileContainer(companyModel, 6, loggedInContext.LoggedInUserId, storageAccountName);

                                var ContractFileName = purchaseExecution.StepName;

                                var fileExtension = ".pdf";

                                var ContractConvertedFileName = ContractFileName + "-" + blNumber + fileExtension;

                                CloudBlockBlob ContractConvertedBlockBlob = directory.GetBlockBlobReference(ContractConvertedFileName);

                                ContractConvertedBlockBlob.Properties.CacheControl = "public, max-age=2592000";

                                ContractConvertedBlockBlob.Properties.ContentType = "application/pdf";

                                Byte[] ContractBytes = SwitchBlPdfOutput.ByteStream;

                                ContractConvertedBlockBlob.UploadFromByteArray(ContractBytes, 0, ContractBytes.Length);
                                if (documentDetail.IsStampNeeded == true)
                                {
                                    documentDetail.IsFileReUploaded = true;
                                    documentDetail.ReUploadedUrl = ContractConvertedBlockBlob.Uri.AbsoluteUri;
                                }
                                else
                                {
                                    documentDetail.ContractUrl = ContractConvertedBlockBlob.Uri.AbsoluteUri;
                                }

                            }
                        }

                    }
                }

            }

            DataSetUpsertInputModel dataSetUpsertInput = new DataSetUpsertInputModel();

            if (purchaseExecution.IsStepReInitiated == true)
            {
                purchaseExecution.UserIds = new List<Guid?>();
            }
            else
            {
                purchaseExecution.UserIds = formfield.UserIds;
            }

            dataSetUpsertInput.IsArchived = false;
            dataSetUpsertInput.CompanyId = loggedInContext.CompanyGuid;
            dataSetUpsertInput.DataSourceId = purchaseExecution.DataSourceId;
            dataSetUpsertInput.CreatedByUserId = purchaseExecution.CreatedByUserId;
            dataSetUpsertInput.Id = purchaseExecution.Id;

            purchaseExecution.ReminderCount = formfield.StatusName != null && formfield.StatusName != purchaseExecution.StatusName ? 1 : purchaseExecution.ReminderCount + 1;
            dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(purchaseExecution);

            Guid? guid = _dataSetService.CreateExecutionDataSet(dataSetUpsertInput, loggedInContext, validationMessages).GetAwaiter().GetResult();

            if (guid != null && guid != Guid.Empty && purchaseExecution.Id != null)
            {
                TaskWrapper.ExecuteFunctionInNewThread(() =>
                {
                    SaveXPHistory(purchaseExecution, formfield, validationMessages, loggedInContext);
                    UpdateStepsClosing(purchaseExecution, loggedInContext, validationMessages);
                });

            }

            if ((purchaseExecution.ReferenceText == "Rejected" || purchaseExecution.ReferenceText == "Accepted") && (purchaseExecution.StepName == "Q88") && (purchaseExecution.StatusName == "Rejected" || purchaseExecution.StatusName == "Accepted"))
            {
                purchaseExecution.RoutePath = "trading/execution-tab/" + purchaseExecution.PurchaseId.ToString() + "/" + purchaseExecution.ContractId.ToString();
                int? remindCount = ShareBLDraft(purchaseExecution, loggedInContext, validationMessages);
            }

            if (purchaseExecution.ReferenceText == "Accepted" && purchaseExecution.StepName != "Q88" && purchaseExecution.StatusName == "Accepted")
            {
                purchaseExecution.RoutePath = "trading/execution-tab/" + purchaseExecution.PurchaseId.ToString() + "/" + purchaseExecution.ContractId.ToString();
                int? remindCount = ShareBLDraft(purchaseExecution, loggedInContext, validationMessages);
            }

            if (purchaseExecution.ReferenceText == "Rejected" && purchaseExecution.StepName != "Q88" && purchaseExecution.StatusName == "Rejected")
            {
                purchaseExecution.RoutePath = "trading/execution-tab/" + purchaseExecution.PurchaseId.ToString() + "/" + purchaseExecution.ContractId.ToString();
                int? remindCount = ShareBLDraft(purchaseExecution, loggedInContext, validationMessages);
            }

            if (purchaseExecution.ReferenceText == "Accepted" && purchaseExecution.StatusName == "Accepted" && (purchaseExecution.StepName.ToLower() == "Invoice to Buyer".ToLower() || purchaseExecution.StepName.ToLower() == "Invoice from Seller".ToLower()))
            {
                string contractType = string.Empty;

                //if (!string.IsNullOrEmpty(ContractModel.TemplateData))
                //{
                //    ContractModel.FormData = JsonConvert.DeserializeObject<Object>(ContractModel.TemplateData);
                //}
                ContractModel searchModel = new ContractModel();
                searchModel.DataSetId = purchaseExecution.PurchaseId;
                var contractModel = new ContractModel();
                contractModel = GetContracts(searchModel, loggedInContext, validationMessages).FirstOrDefault();
                if (purchaseExecution.StepName.ToLower() == "Invoice to Buyer".ToLower())
                {
                    contractType = "Receivable";
                    contractModel.IsDebitNote = false;
                    contractModel.IsCreditNote = true;
                }
                else if (purchaseExecution.StepName.ToLower() == "Invoice from Seller".ToLower())
                {
                    contractType = "Payable";
                    contractModel.IsDebitNote = true;
                    contractModel.IsCreditNote = false;
                }
                contractModel.DataSourceId = purchaseExecution.TemplateId;
                contractModel.ContractTemplateId = purchaseExecution.TemplateId;
                //contractModel.DataSetId = purchaseExecution.PurchaseId;
                contractModel.FormData = purchaseExecution.FormData;
                //contractModel.ClientId = oldData.ClientId;
                //contractModel.BrokerId = oldData.BrokerId;
                //contractModel.IsGeneratedToPayables = oldData.IsGeneratedToPayables;
                if (purchaseExecution.Documents != null && purchaseExecution.Documents.Count > 0)
                {
                    contractModel.ContractPdf = purchaseExecution.Documents[0];
                }

                UpsertInvoiceQueueByAccept(contractModel, contractType, loggedInContext, validationMessages).GetAwaiter();
            }

            return guid;
        }

        public virtual List<PurchaseExecutionModel> GetXPSteps(PurchaseExecutionModel purchaseExecution, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetXPSteps", "Trading Service"));

            List<ParamsJsonModel> paramsJsonModels = new List<ParamsJsonModel>();

            ClientInputModel clientInputModel = new ClientInputModel();

            clientInputModel.UserId = loggedInContext.LoggedInUserId;

            paramsJsonModels.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = "ExecutionSteps",
                Type = "string"
            });

            paramsJsonModels.Add(new ParamsJsonModel()
            {
                KeyName = "ContractId",
                KeyValue = purchaseExecution.ContractId.ToString(),
                Type = "guid"
            });

            paramsJsonModels.Add(new ParamsJsonModel()
            {
                KeyName = "PurchaseId",
                KeyValue = purchaseExecution.PurchaseId.ToString(),
                Type = "guid"
            });

            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsonModels);

            var dataSetsResult = _dataSetService.SearchExecutionStepsDataSets(purchaseExecution.Id, purchaseExecution.DataSourceId, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages)?.GetAwaiter().GetResult();

            bool isFromInsert = false;

            if ((dataSetsResult == null || dataSetsResult.Count() == 0) && purchaseExecution.ContractType == "Purchase" && purchaseExecution.Id == null)
            {
                ContractStatusModel contractStatusModel = new ContractStatusModel();

                isFromInsert = true;

                var statuses = _clientService.GetAllContractStatus(contractStatusModel, loggedInContext, validationMessages);

                Guid? statusId = statuses?.Where(t => t.StatusName == "In Execution")?.FirstOrDefault()?.ContractStatusId;

                if (statusId != null)
                {
                    var dataSetUpdateModel = new UpdateDataSetJsonModel();
                    dataSetUpdateModel.Id = (Guid)purchaseExecution.ContractId;
                    List<ParamsKeyModel> paramsModel = new List<ParamsKeyModel>();

                    var jsonModel = new ParamsKeyModel();
                    jsonModel.KeyName = "StatusId";
                    jsonModel.KeyValue = statusId.ToString();
                    jsonModel.Type = "guid";
                    paramsModel.Add(jsonModel);
                    dataSetUpdateModel.ParamsJsonModel = paramsModel;

                    var updateId = _dataSetService.UpdateDataSetJson(dataSetUpdateModel, loggedInContext, validationMessages);

                    var dataSetPurchaseUpdateModel = new UpdateDataSetJsonModel();
                    dataSetPurchaseUpdateModel.Id = (Guid)purchaseExecution.PurchaseId;
                    dataSetPurchaseUpdateModel.ParamsJsonModel = paramsModel;

                    var purchaseId = _dataSetService.UpdateDataSetJson(dataSetPurchaseUpdateModel, loggedInContext, validationMessages);
                }

                List<PurchaseExecutionModel> purchaseExecutionModels = new List<PurchaseExecutionModel> {
                    new PurchaseExecutionModel{StepName = "Q88", ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Lifting of Subjects",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Purchase BL",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Invoice from Seller",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Load Port Surveyor inspection report",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Load Port Documents",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId}
                 };

                foreach (var data in purchaseExecutionModels)
                {
                    Task<Guid?> id = UpsertXPSteps(data, loggedInContext, validationMessages);
                }

                dataSetsResult = _dataSetService.SearchExecutionStepsDataSets(null, purchaseExecution.DataSourceId, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages).GetAwaiter().GetResult();

            }
            if ((dataSetsResult == null || dataSetsResult.Count() == 0) && purchaseExecution.ContractType == "Sale" && purchaseExecution.Id == null)
            {
                ContractStatusModel contractStatusModel = new ContractStatusModel();

                isFromInsert = true;

                var statuses = _clientService.GetAllContractStatus(contractStatusModel, loggedInContext, validationMessages);

                Guid? statusId = statuses?.Where(t => t.StatusName == "In Execution")?.FirstOrDefault()?.ContractStatusId;

                if (statusId != null)
                {
                    var dataSetUpdateModel = new UpdateDataSetJsonModel();
                    dataSetUpdateModel.Id = (Guid)purchaseExecution.ContractId;
                    List<ParamsKeyModel> paramsModel = new List<ParamsKeyModel>();

                    var jsonModel = new ParamsKeyModel();
                    jsonModel.KeyName = "StatusId";
                    jsonModel.KeyValue = statusId.ToString();
                    jsonModel.Type = "guid";
                    paramsModel.Add(jsonModel);
                    dataSetUpdateModel.ParamsJsonModel = paramsModel;

                    var updateId = _dataSetService.UpdateDataSetJson(dataSetUpdateModel, loggedInContext, validationMessages);

                    var dataSetPurchaseUpdateModel = new UpdateDataSetJsonModel();
                    dataSetPurchaseUpdateModel.Id = (Guid)purchaseExecution.PurchaseId;
                    dataSetPurchaseUpdateModel.ParamsJsonModel = paramsModel;

                    var saleId = _dataSetService.UpdateDataSetJson(dataSetPurchaseUpdateModel, loggedInContext, validationMessages);
                }

                var salesdDataSet = _dataSetService.SearchDataSets(purchaseExecution.ContractId, null, null, null, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult()?.FirstOrDefault();

                List<PurchaseExecutionModel> purchaseExecutionModels = new List<PurchaseExecutionModel> {
                    new PurchaseExecutionModel{StepName = "Q88", ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Shipping Instructions",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Switch Bill of Lading",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Letter of indemnity for switching BLs",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Letter of indemnity for Discharging Cargo",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Pre-Check of Documents",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Discharge Port Surveyor inspection report",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Laytime calculation",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Shipment Tender",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Invoice to Buyer",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Invoice from Commodity Broker Sales Side",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Discharge Port",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Documents per Shipping Instruction",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId},
                    new PurchaseExecutionModel{StepName = "Presentation of Documents",ContractType = "ExecutionSteps",StatusName = "Not Started",PurchaseId = purchaseExecution.PurchaseId,ContractId = purchaseExecution.ContractId,DataSourceId = purchaseExecution.DataSourceId}
                 }.Where(t => (salesdDataSet.DataJson.BrokerId != null || t.StepName != "Invoice from Commodity Broker Sales Side")).ToList();

                foreach (var data in purchaseExecutionModels)
                {
                    Task<Guid?> id = UpsertXPSteps(data, loggedInContext, validationMessages);
                }

                dataSetsResult = _dataSetService.SearchExecutionStepsDataSets(null, purchaseExecution.DataSourceId, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages).GetAwaiter().GetResult();

            }

            ClientAccessModel clientAccess = clientAccess = new ClientAccessModel();

            if (isFromInsert == false)
            {
                clientAccess = _tradingRepository.GetClientAccss(Guid.Parse("E4A82106-3B35-4B7E-A1D0-950CE39EAA7C"), null, loggedInContext, validationMessages);
            }

            var documentSets = _documentStorageService.SearchFiles(null, null, "q88",null,null, loggedInContext, validationMessages).GetAwaiter().GetResult();

            DataSetOutputModel dataContracts = new DataSetOutputModel();
            DataSetOutputModel dataSetsPurchases = new DataSetOutputModel();

            if (clientAccess.CanHaveAcess == false && clientAccess.ClientId != null && isFromInsert == false)
            {
                dataContracts = _dataSetService.SearchDataSets(purchaseExecution.ContractId, null, null, null, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult()?.FirstOrDefault();

                dataSetsPurchases = _dataSetService.SearchDataSets(purchaseExecution.PurchaseId, null, null, null, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult()?.FirstOrDefault();
            }

            ClientInputModel inputModel = new ClientInputModel();
            List<ClientOutputModel> clientOutputModels = _clientRepository.GetClients(inputModel, loggedInContext, validationMessages);

            List<PurchaseExecutionModel> executionModels = new List<PurchaseExecutionModel>();

            //Parallel.ForEach(dataSetsResult, data =>
            foreach (var data in dataSetsResult)
            {
                if (data.DataJson != null)
                {
                    var formfield = data.DataJson;

                    if (clientAccess.ClientId == null || clientAccess.CanHaveAcess == true || data.CreatedByUserId == loggedInContext.LoggedInUserId || (formfield.UserIds != null && formfield.UserIds.Any(x => x == loggedInContext.LoggedInUserId) || dataSetsPurchases.DataJson.ClientId == clientAccess.ClientId || dataContracts.DataJson.ClientId == clientAccess.ClientId))
                    {
                        List<FileApiServiceReturnModel> documentList = new List<FileApiServiceReturnModel>();

                        if (documentSets != null)
                        {
                            var document = JsonConvert.SerializeObject(documentSets.Where(t => t.ReferenceId == data.Id));
                            documentList = JsonConvert.DeserializeObject<List<FileApiServiceReturnModel>>(document);
                        }

                        List<ShareClientModel> shareClientModels = new List<ShareClientModel>();

                        if (data?.DataJson?.StatementOfAccountsHistory != null)
                        {

                            var updatedList = from x in data?.DataJson?.StatementOfAccountsHistory
                                              join y in clientOutputModels
                                            on x.ClientId equals y.ClientId
                                              select new ShareClientModel { FullName = y.FullName, ClientId = x.ClientId, Comments = x.Comments, Date = x.Date, Status = x.Status };

                            shareClientModels = updatedList?.ToList();

                        }

                        executionModels.Add(new PurchaseExecutionModel
                        {
                            Id = data.Id,
                            StepName = formfield.StepName,
                            FormData = formfield.FormData,
                            IsUploadFile = formfield.IsUploadFile,
                            IsSgtraderShared = formfield.IsSgtraderShared,
                            IsSharedToSgtrader = formfield.IsSharedToSgtrader,
                            IsApprovalNeededFromSgTrader = formfield.IsApprovalNeededFromSgTrader,
                            AcceptCommentsBySgTrader = formfield.AcceptCommentsBySgTrader,
                            RejectCommentsBySgTrader = formfield.RejectCommentsBySgTrader,
                            StatusName = formfield.StatusName,
                            ReminderCount = formfield.ReminderCount,
                            FormJson = formfield.FormJson,
                            Files = documentList,
                            DataSourceId = data.DataSourceId,
                            StatusId = data.DataJson.StatusId,
                            ContractId = data.DataJson.ContractId,
                            Comment = formfield.Comment,
                            ContractType = data.DataJson.ContractType,
                            PurchaseId = formfield.PurchaseId,
                            UserIds = formfield.UserIds,
                            Documents = formfield.Documents,
                            TemplateId = formfield.TemplateId,
                            IsFromSellerAcceptance = formfield.IsFromSellerAcceptance,
                            IsFromVeseelOwnerAcceptance = formfield.IsFromVeseelOwnerAcceptance,
                            IsSharedToPortAgent = formfield.IsSharedToPortAgent,
                            IsSharedToSeller = formfield.IsSharedToSeller,
                            ContractUrl = formfield.ContractUrl,
                            ClientId = formfield.ClientId,
                            CreatedDateTime = data.CreatedDateTime,
                            StepHistory = formfield.StepHistory,
                            OldData = formfield.OldData,
                            NewData = formfield.NewData,
                            CanShowAlert = formfield.CanShowAlert,
                            DataSourceFormJson = formfield.DataSourceFormJson,
                            DocumentShippingInstructionsDetails = data.DataJson.DocumentShippingInstructionsDetails,
                            BlDraftForm = data.DataJson.BlDraftForm,
                            IsFileReUploaded = data.DataJson.IsFileReUploaded,
                            StampDocument = data.DataJson.StampDocument,
                            StampPdfURL = data.DataJson.StampPdfURL,

                            ReUploadedUrl = data.DataJson.ReUploadedUrl,
                            PODClientIds = data.DataJson.PODClientIds,
                            AcceptedBankers = data.DataJson.AcceptedBankers,
                            RejectedBankers = data.DataJson.RejectedBankers,
                            ClientType = data.DataJson.ClientType,
                            ClientTypeId = data.DataJson.ClientTypeId,
                            StatementOfAccountsHistory = shareClientModels,
                            SharedDocuments = data.DataJson.SharedDocuments,
                            ShareDocumentsHistory = data.DataJson.ShareDocumentsHistory,
                            SellerAcceptedComments = data.DataJson.SellerAcceptedComments,
                            SellerRejectedComments = data.DataJson.SellerRejectedComments,
                            VesselOwnerAcceptedComments = data.DataJson.VesselOwnerAcceptedComments,
                            VesselOwnerRejectedComments = data.DataJson.VesselOwnerRejectedComments,
                            AcceptedComments = data.DataJson.AcceptedComments

                        });


                    }
                }
            }

            return executionModels?.OrderBy(t => t.CreatedDateTime)?.ToList();
        }

        public int? ShareBLDraft(PurchaseExecutionModel purchaseExecution, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            var dataSets = _dataSetService.SearchDataSets(purchaseExecution.ContractId, null, null, null, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().FirstOrDefault();

            var purchaseDataSets = _dataSetService.SearchDataSets(purchaseExecution.PurchaseId, null, null, null, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult()?.FirstOrDefault();

            string newStatusName = purchaseExecution.StatusName;
            string oldStatusName = null;
            
            ClientAccessModel clientAccess = clientAccess = new ClientAccessModel();

            clientAccess = _tradingRepository.GetClientAccss(Guid.Empty, null, loggedInContext, validationMessages);
            if (purchaseExecution.ClientId == null && purchaseExecution.ClientType == "Banker" && purchaseExecution.StepName.ToLower() != "Presentation of Documents".ToLower())
            {
                int? emailsCount = 0;
                var dataSetsResult = _dataSetService.SearchExecutionStepsDataSets(purchaseExecution.Id, null, null, null, false, false, null, null, loggedInContext, validationMessages).GetAwaiter().GetResult()?.FirstOrDefault();

                var formfield = new PurchaseExecutionModel();

                if (dataSetsResult?.DataJson != null)
                {
                    formfield = dataSetsResult.DataJson; // JsonConvert.DeserializeObject<PurchaseExecutionModel>(dataSetsResult?.DataJson.ToString());
                }
                string statusName = formfield.StatusName != purchaseExecution.StatusName ? purchaseExecution.StatusName : formfield.StatusName;
                oldStatusName = formfield.StatusName;

                formfield.StatusName = statusName;
                emailsCount = formfield.ReminderCount;

                formfield.IsSgtraderShared = purchaseExecution.IsSgtraderShared;
                formfield.IsSharedToSgtrader = purchaseExecution.IsSharedToSgtrader;
                formfield.IsSharedToPortAgent = purchaseExecution.IsSharedToPortAgent;
                formfield.IsSharedToSeller = purchaseExecution.IsSharedToSeller;
                formfield.FormData = purchaseExecution.FormData;
                formfield.IsApprovalNeededFromSgTrader = purchaseExecution.IsApprovalNeededFromSgTrader;
                formfield.TemplateId = purchaseExecution.TemplateId;
                var dataSetUpdateModel = new UpdateDataSetJsonModel();
                dataSetUpdateModel.Id = (Guid)dataSetsResult.Id;
                formfield.FormJson = purchaseExecution.FormJson != null ? purchaseExecution.FormJson : formfield.FormJson;
                formfield.FormData = purchaseExecution.FormData != null ? purchaseExecution.FormData : formfield.FormData;
                formfield.ClientId = purchaseExecution.ClientId;
                formfield.CanShowAlert = false;
                formfield.StepHistory = null;
                formfield.SellerAcceptedComments = purchaseExecution.SellerAcceptedComments;
                formfield.SellerRejectedComments = purchaseExecution.SellerRejectedComments;
                formfield.VesselOwnerAcceptedComments = purchaseExecution.VesselOwnerAcceptedComments;
                formfield.VesselOwnerRejectedComments = purchaseExecution.VesselOwnerRejectedComments;
                formfield.AcceptedComments = purchaseExecution.AcceptedComments;
                formfield.Comment = purchaseExecution.Comment;

                DataSetUpsertInputModel dataSetUpsertInput = new DataSetUpsertInputModel();

                dataSetUpsertInput.IsArchived = false;
                dataSetUpsertInput.CompanyId = loggedInContext.CompanyGuid;
                dataSetUpsertInput.DataSourceId = purchaseExecution.DataSourceId;
                dataSetUpsertInput.Id = purchaseExecution.Id;
                Guid? guidTest = Guid.Empty;
                formfield.ReminderCount = oldStatusName != newStatusName ? 1 : clientAccess.ClientId != null? formfield.ReminderCount + 1 : formfield.ReminderCount ;
                dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(formfield);
                guidTest = _dataSetService.CreateExecutionDataSet(dataSetUpsertInput, loggedInContext, validationMessages).GetAwaiter().GetResult();

                return emailsCount;
            }
            else
            {
                Guid? ClientId = purchaseExecution.ClientId != null ? purchaseExecution.ClientId :
                             purchaseExecution.ClientType == "Seller" ? purchaseDataSets?.DataJson?.ClientId :
                             purchaseExecution.ClientType == "Buyer" ? purchaseDataSets?.DataJson?.ClientId :
                             purchaseExecution.ClientType == "Vessel Owner" ? dataSets?.DataJson?.ClientId :
                             purchaseExecution.ClientType == "Load Port Agent" ? dataSets?.DataJson?.ClientId :
                             purchaseExecution.ClientType == "Commodity Broker" ? purchaseDataSets?.DataJson?.BrokerId :
                             dataSets?.CreatedByUserId;

                Guid? BrokerId = purchaseExecution.IsBrokerNeed == true && purchaseExecution.ClientType == "Seller" ? purchaseDataSets.DataJson.BrokerId :
                                  purchaseExecution.IsBrokerNeed == true && purchaseExecution.ClientType == "Buyer" ? purchaseDataSets.DataJson.BrokerId :
                                  purchaseExecution.IsBrokerNeed == true && purchaseExecution.ClientType == "Vessel Owner" ?
                                  dataSets.DataJson.ClientId : null;


                int? emailsCount = 0;

                if ((ClientId != null || (purchaseExecution.ClientType != "Commodity Broker")) && (purchaseExecution.IsPODStepShareOrRemind == false || purchaseExecution.IsPODStepShareOrRemind == null))
                {
                    EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                    {
                        ClientId = ClientId,
                        EmailTemplateName = purchaseExecution.ReferenceText == "Accepted" ? "PurchaseDocumentAccepted" :
                                        purchaseExecution.ReferenceText == "DocumentUploadRequest" ? "DocumentUploadRequest" :
                                        purchaseExecution.ReferenceText == "ReUploaded" ? "DocumentReUploadRemind" :
                                        purchaseExecution.ReferenceText == "Rejected" ? "PurchaseRejectedEmail" : "PurchaseDocumentRemind"
                    };

                    var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages)?.FirstOrDefault();

                    if (template == null && dataSets?.DataJson?.ClientId != null && purchaseExecution.StepName.ToLower() != "Switch bill of Lading".ToLower())
                    {
                        EmailTemplateModel.ClientId = dataSets.DataJson.ClientId;
                        ClientId = dataSets.DataJson.ClientId;
                        template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages)?.FirstOrDefault();
                    }

                    if (template == null && dataSets?.DataJson?.ClientId != null && purchaseExecution.StepName.ToLower() == "Switch bill of Lading".ToLower() && purchaseExecution.IsFileReUploaded == true)
                    {
                        EmailTemplateModel.ClientId = dataSets.DataJson.ClientId;
                        ClientId = dataSets.DataJson.ClientId;
                        template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages)?.FirstOrDefault();
                    }

                    SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, null); // HttpContext.Current.Request.Url.Authority);

                    ClientInputModel clientInputModel = new ClientInputModel();

                    List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);
                    string[] toEmails = null;
                    string[] ccMails = null;

                    if (purchaseExecution.ClientType == null && dataSets?.CreatedByUserId != null && purchaseExecution.ClientId == null)
                    {
                        UserOutputModel usersList = _userRepository.GetUserDetailsAndCountry(dataSets.CreatedByUserId, loggedInContext, validationMessages)?.FirstOrDefault();
                        toEmails = usersList?.Email?.Trim().Split('\n');
                    }
                    else
                    {
                        toEmails = clientList.Where(t => t.ClientId == ClientId)?.FirstOrDefault()?.Email?.Trim().Split('\n');
                        ccMails = clientList.Where(t => t.ClientId == BrokerId)?.FirstOrDefault()?.Email?.Trim().Split('\n');
                    }

                    var siteDomain = ConfigurationManager.AppSettings["SiteUrl"] + "/";


                    if (purchaseExecution.ReferenceText == "Rejected" && purchaseExecution.StepName == "Q88" && purchaseExecution.StatusName == "Rejected")
                    {
                        purchaseExecution.RoutePath = "trading/execution-tab/" + purchaseExecution.PurchaseId.ToString() + "/" + purchaseExecution.ContractId.ToString();
                    }

                    if (purchaseExecution.RoutePath == null)
                    {
                        purchaseExecution.RoutePath = "trading/execution-tab/" + purchaseExecution.PurchaseId.ToString() + "/" + purchaseExecution.ContractId.ToString();
                    }

                    var RouteAddress = siteDomain + (purchaseExecution.RoutePath != null && purchaseExecution.RoutePath != string.Empty ? purchaseExecution.RoutePath : "/trading/viewcontract");
                    var messageBody = "Please find the purchase execution step for your next action." + RouteAddress;

                    CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);

                    var dataSetsResult = _dataSetService.SearchExecutionStepsDataSets(purchaseExecution.Id, null, null, null, false, false, null, null, loggedInContext, validationMessages).GetAwaiter().GetResult()?.FirstOrDefault();

                    var formfield = new PurchaseExecutionModel();

                    if (dataSetsResult?.DataJson != null)
                    {
                        formfield = dataSetsResult.DataJson; // JsonConvert.DeserializeObject<PurchaseExecutionModel>(dataSetsResult?.DataJson.ToString());
                    }

                    oldStatusName = formfield.StatusName;

                    string rejectComment = "";

                    if (purchaseExecution.ReferenceText == "Rejected")
                    {
                        if (!string.IsNullOrEmpty(purchaseExecution.Comment) && (purchaseExecution.StepName.ToLower() != "Purchase BL".ToLower() || purchaseExecution.StepName.ToLower() != "BL Draft".ToLower()))
                        {
                            rejectComment = "<p>" + "Rejected Comment: " + purchaseExecution.Comment + "</p>";
                        }
                        else
                        {
                            if (purchaseExecution.IsSeller == true && !string.IsNullOrEmpty(purchaseExecution.SellerRejectedComments))
                            {
                                rejectComment = "<p>" + "Rejected Comment: " + purchaseExecution.SellerRejectedComments + "</p>";
                            }
                            else if (purchaseExecution.IsVesselOwner == true && !string.IsNullOrEmpty(purchaseExecution.VesselOwnerRejectedComments))
                            {
                                rejectComment = "<p>" + "Rejected Comment: " + purchaseExecution.VesselOwnerRejectedComments + "</p>";
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(purchaseExecution.Comment))
                                {
                                    rejectComment = "<p>" + "Rejected Comment: " + purchaseExecution.Comment + "</p>";
                                }
                            }
                        }
                    }

                    var html = template?.EmailTemplate?.Replace("##SiteUrl##", RouteAddress)
                            .Replace("##siteUrl##", RouteAddress)
                            .Replace("##CompanyLogo##", companyTheme.CompanyMainLogo)
                            .Replace("##StepName##", dataSetsResult.DataJson.StepName != null ? dataSetsResult.DataJson.StepName : "")
                            .Replace("##Comment##", rejectComment);

                    var mobileNo = clientList.Where(t => t.ClientId == ClientId)?.FirstOrDefault()?.MobileNo;

                    UserDataSetRelationModel userDataSetRelationModel = new UserDataSetRelationModel();
                    userDataSetRelationModel.DataSetIds = new List<Guid>();
                    userDataSetRelationModel.UserId = new List<Guid>();
                    if ((toEmails != null && html != null) || purchaseExecution.StepName.ToLower() == "Switch Bill of Lading".ToLower())
                    {
                        string statusName = formfield.StatusName != purchaseExecution.StatusName ? purchaseExecution.StatusName : formfield.StatusName;

                        formfield.ReminderCount = formfield.ReminderCount;
                        formfield.StatusName = statusName;
                        emailsCount = formfield.ReminderCount;

                        Guid? UserId = clientList.Where(t => (t.ClientId == ClientId && ClientId != null))?.FirstOrDefault()?.UserId;

                        if ((formfield.UserIds == null || formfield.UserIds.Any(x => x != UserId)) && UserId != null)
                        {
                            if (formfield.UserIds == null)
                                formfield.UserIds = new List<Guid?>();

                            formfield.UserIds?.Add(UserId);
                        }

                        Guid? brokerUserId = clientList.Where(t => (t.ClientId == BrokerId && BrokerId != null))?.FirstOrDefault()?.UserId;

                        if(UserId != null)
                        {
                            Guid? userAuthId = clientList.Where(t => (t.ClientId == ClientId && ClientId != null))?.FirstOrDefault()?.UserAuthenticationId;
                            
                            if(userAuthId != null)
                            {
                                userDataSetRelationModel.UserId.Add((Guid)(userAuthId));
                            }
                        }

                        if (brokerUserId != null)
                        {
                            Guid? userAuthId = clientList.Where(t => (t.ClientId == BrokerId && BrokerId != null))?.FirstOrDefault()?.UserAuthenticationId;

                            if (userAuthId != null)
                            {
                                userDataSetRelationModel.UserId.Add((Guid)(userAuthId));
                            }
                        }

                        if ((formfield.UserIds == null || formfield.UserIds.Any(x => x != brokerUserId)) && brokerUserId != null)
                        {
                            if (formfield.UserIds == null)
                                formfield.UserIds = new List<Guid?>();

                            formfield.UserIds?.Add(brokerUserId);
                        }

                        formfield.IsSgtraderShared = purchaseExecution.IsSgtraderShared;
                        formfield.IsSharedToSgtrader = purchaseExecution.IsSharedToSgtrader;
                        formfield.IsSharedToPortAgent = purchaseExecution.IsSharedToPortAgent;
                        formfield.IsSharedToSeller = purchaseExecution.IsSharedToSeller;
                        formfield.FormData = purchaseExecution.FormData;
                        formfield.IsApprovalNeededFromSgTrader = purchaseExecution.IsApprovalNeededFromSgTrader;
                        formfield.TemplateId = purchaseExecution.TemplateId;
                        var dataSetUpdateModel = new UpdateDataSetJsonModel();
                        dataSetUpdateModel.Id = (Guid)dataSetsResult.Id;
                        formfield.FormJson = purchaseExecution.FormJson != null ? purchaseExecution.FormJson : formfield.FormJson;
                        formfield.FormData = purchaseExecution.FormData != null ? purchaseExecution.FormData : formfield.FormData;
                        formfield.IsFileReUploaded = purchaseExecution.IsFileReUploaded;
                        formfield.ReUploadedUrl = purchaseExecution.ReUploadedUrl;
                        formfield.SellerAcceptedComments = purchaseExecution.SellerAcceptedComments;
                        formfield.SellerRejectedComments = purchaseExecution.SellerRejectedComments;
                        formfield.VesselOwnerAcceptedComments = purchaseExecution.VesselOwnerAcceptedComments;
                        formfield.VesselOwnerRejectedComments = purchaseExecution.VesselOwnerRejectedComments;
                        formfield.AcceptedComments = purchaseExecution.AcceptedComments;
                        formfield.Comment = purchaseExecution.Comment;
                        //formfield.BlDraftForm = purchaseExecution.BlDraftForm != null ? purchaseExecution.BlDraftForm : formfield.BlDraftForm;
                        if (purchaseExecution.BlDraftForm != null)
                        {
                            foreach (var bldraft in purchaseExecution.BlDraftForm)
                            {
                                if (bldraft.Id == null)
                                {
                                    bldraft.Id = Guid.NewGuid();
                                }
                            }

                            formfield.BlDraftForm = purchaseExecution.BlDraftForm;
                        }
                        formfield.ClientId = purchaseExecution.ClientId;
                        formfield.CanShowAlert = false;
                        formfield.StepHistory = null;

                        if (formfield.StepName == "Presentation of Documents" && purchaseExecution.StatusName != formfield.StatusName)
                        {
                            List<ShareClientModel> shareClientModels = new List<ShareClientModel>();
                            shareClientModels = formfield.StatementOfAccountsHistory != null ? formfield.StatementOfAccountsHistory : new List<ShareClientModel>();

                            shareClientModels.Add(new ShareClientModel
                            {
                                ClientId = loggedInContext.LoggedInUserId,
                                Status = purchaseExecution.StatusName,
                                Date = DateTime.Now
                            });
                            formfield.StatementOfAccountsHistory = shareClientModels;
                        }

                        //List<ParamsKeyModel> paramsModel = new List<ParamsKeyModel>();

                        //var jsonModel = new ParamsKeyModel();
                        //jsonModel.KeyName = "ReminderCount";
                        //jsonModel.KeyValue = formfield.ReminderCount.ToString();
                        //jsonModel.Type = "int";

                        //paramsModel.Add(new ParamsKeyModel
                        //{
                        //    KeyName = "UserIds",
                        //    KeyValue = formfield.UserIds.ToString(),
                        //    Type = "List"
                        //});

                        //paramsModel.Add(jsonModel);

                        DataSetUpsertInputModel dataSetUpsertInput = new DataSetUpsertInputModel();

                        dataSetUpsertInput.IsArchived = false;
                        dataSetUpsertInput.CompanyId = loggedInContext.CompanyGuid;
                        dataSetUpsertInput.DataSourceId = purchaseExecution.DataSourceId;
                        dataSetUpsertInput.Id = purchaseExecution.Id;
                        Guid? guidTest = Guid.Empty;

                        if (purchaseExecution.StepName == "Switch Bill of Lading" && (purchaseExecution.IsFileReUploaded == false || purchaseExecution.IsFileReUploaded == null))
                        {
                            TaskWrapper.ExecuteFunctionInNewThread(async () =>
                            {
                                formfield.ContractUrl = await SendPdfForSwitchBlAgent(purchaseExecution.BlDetails,
                                    ClientId,
                                    purchaseExecution.VesselId,
                                    smtpDetails, toEmails, ccMails, html, template, loggedInContext, validationMessages);
                                formfield.StatusName = "Initiated";
                                formfield.ReminderCount = oldStatusName != newStatusName ? 1 : clientAccess.ClientId != null? formfield.ReminderCount + 1 : formfield.ReminderCount ;
                                dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(formfield);
                                guidTest = _dataSetService.CreateExecutionDataSet(dataSetUpsertInput, loggedInContext, validationMessages).GetAwaiter().GetResult();
                            });
                        }

                        if (purchaseExecution.StepName == "Switch Bill of Lading" && purchaseExecution.IsFileReUploaded == true && purchaseExecution.StatusName != "Completed")
                        {
                            dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(formfield);
                            formfield.ReminderCount = oldStatusName != newStatusName ? 1 : clientAccess.ClientId !=null? formfield.ReminderCount + 1 : formfield.ReminderCount ;
                            guidTest = _dataSetService.CreateExecutionDataSet(dataSetUpsertInput, loggedInContext, validationMessages).GetAwaiter().GetResult();
                            EmailGenericModel emailModel = new EmailGenericModel
                            {
                                SmtpServer = smtpDetails?.SmtpServer,
                                SmtpServerPort = smtpDetails?.SmtpServerPort,
                                SmtpMail = smtpDetails?.SmtpMail,
                                SmtpPassword = smtpDetails?.SmtpPassword,
                                ToAddresses = toEmails,
                                CCMails = ccMails,
                                HtmlContent = html,
                                Subject = template.EmailSubject != null ? template.EmailSubject : "ReUploadMail",
                                MailAttachments = null,
                                IsPdf = true
                            };
                            _emailService.SendMail(loggedInContext, emailModel);
                        }

                        if (purchaseExecution.StepName != "Switch Bill of Lading")
                        {
                            formfield.AcceptedBankers = purchaseExecution.AcceptedBankers;
                            formfield.RejectedBankers = purchaseExecution.RejectedBankers;
                            formfield.ClientType = purchaseExecution.ClientType;
                            formfield.ClientTypeId = purchaseExecution.ClientTypeId;
                            formfield.Documents = purchaseExecution.Documents;
                            formfield.PODClientIds = purchaseExecution.PODClientIds;
                            formfield.StatementOfAccountsHistory = purchaseExecution.StatementOfAccountsHistory;
                            formfield.ShareDocumentsHistory = purchaseExecution.ShareDocumentsHistory;
                            formfield.SharedDocuments = purchaseExecution.SharedDocuments;
                            formfield.ReminderCount = oldStatusName != newStatusName ? 1 : clientAccess.ClientId != null? formfield.ReminderCount + 1 : formfield.ReminderCount ;
                            dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(formfield);
                            guidTest = _dataSetService.CreateExecutionDataSet(dataSetUpsertInput, loggedInContext, validationMessages).GetAwaiter().GetResult();
                            EmailGenericModel emailModel = new EmailGenericModel
                            {
                                SmtpServer = smtpDetails?.SmtpServer,
                                SmtpServerPort = smtpDetails?.SmtpServerPort,
                                SmtpMail = smtpDetails?.SmtpMail,
                                SmtpPassword = smtpDetails?.SmtpPassword,
                                ToAddresses = toEmails,
                                CCMails = ccMails,
                                HtmlContent = html,
                                Subject = template.EmailSubject != null ? template.EmailSubject : "RemindMail",
                                MailAttachments = null,
                                IsPdf = true
                            };
                            _emailService.SendMail(loggedInContext, emailModel);
                        }
                    }

                    if (mobileNo != null)
                    {
                        _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                    }


                    TaskWrapper.ExecuteFunctionInNewThread(() =>
                    {
                        UpdateStepsClosing(purchaseExecution, loggedInContext, validationMessages);
                    });

                    userDataSetRelationModel.CompanyId = loggedInContext.CompanyGuid;
                    userDataSetRelationModel.DataSetIds.Add((Guid)(purchaseExecution.PurchaseId)); 
                    userDataSetRelationModel.DataSetIds.Add((Guid)(purchaseExecution.ContractId));

                    if(userDataSetRelationModel.UserId.Count > 0)
                    {
                        var data = _dataSetService.CreateUserDataSetRelation(userDataSetRelationModel, null, loggedInContext, validationMessages);
                    }
                }

                if (purchaseExecution?.PODClientIds?.Count > 0 && purchaseExecution?.IsPODStepShareOrRemind == true)
                {
                    SmtpDetailsModel smtpDetails = _userRepository.SearchSmtpCredentials(loggedInContext, validationMessages, null); // HttpContext.Current.Request.Url.Authority);

                    ClientInputModel clientInputModel = new ClientInputModel();

                    List<ClientOutputModel> clientList = _clientService.GetClients(clientInputModel, loggedInContext, validationMessages);

                    var siteDomain = ConfigurationManager.AppSettings["SiteUrl"] + "/";

                    if (purchaseExecution.RoutePath == null)
                    {
                        purchaseExecution.RoutePath = "trading/execution-tab/" + purchaseExecution.PurchaseId.ToString() + "/" + purchaseExecution.ContractId.ToString();
                    }

                    var RouteAddress = siteDomain + (purchaseExecution.RoutePath != null && purchaseExecution.RoutePath != string.Empty ? purchaseExecution.RoutePath : "/trading/viewcontract");
                    var messageBody = "Please find the purchase execution step for your next action." + RouteAddress;

                    CompanyThemeModel companyTheme = _companyStructureService.GetCompanyTheme(loggedInContext?.LoggedInUserId);

                    var dataSetsResult = _dataSetService.SearchExecutionStepsDataSets(purchaseExecution.Id, null, null, null, false, false, null, null, loggedInContext, validationMessages).GetAwaiter().GetResult()?.FirstOrDefault();

                    var formfield = new PurchaseExecutionModel();

                    if (dataSetsResult?.DataJson != null)
                    {
                        formfield = dataSetsResult.DataJson; // JsonConvert.DeserializeObject<PurchaseExecutionModel>(dataSetsResult?.DataJson.ToString());
                    }
                   
                    UserDataSetRelationModel userDataSetRelationModel = new UserDataSetRelationModel();
                    userDataSetRelationModel.UserId = new List<Guid>();
                    userDataSetRelationModel.DataSetIds = new List<Guid>();
                    userDataSetRelationModel.CompanyId = loggedInContext.CompanyGuid;
                    userDataSetRelationModel.DataSetIds.Add((Guid)(formfield.ContractId));
                    userDataSetRelationModel.DataSetIds.Add((Guid)(formfield.PurchaseId));

                    foreach (Guid guid in purchaseExecution?.PODClientIds)
                    {
                        string[] toEmails = null;
                        string[] ccMails = null;

                        var clientDetails = clientList?.Where(t => t.ClientId == guid)?.FirstOrDefault();

                        toEmails = clientDetails.Email?.Trim().Split('\n');
                        ccMails = "".Trim().Split('\n');

                        EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
                        {
                            ClientId = guid,
                            EmailTemplateName = clientDetails.ClientTypeName == "Banker" ? "StatementOfAccountsDocumentsApprovalRequest" : "StatementOfAccountsDocumentsShare"
                        };

                        string documentHTML = string.Empty;
                        if (purchaseExecution.SharedDocuments != null)
                        {
                            Parallel.ForEach(purchaseExecution.SharedDocuments, document =>
                            {
                                if (document.DocumentName == "Documents per Shipping Instruction")
                                {
                                    List<string> files = new List<string>();
                                    files = document.DocumentUrl.Split(',').ToList();
                                    Parallel.ForEach(files, file =>
                                    {
                                        documentHTML = documentHTML + @"<a href = '" + file + "'>" + document.DocumentName + " </a> </br>";
                                    });
                                }
                                else
                                {
                                    documentHTML = documentHTML + @"<a href = '" + document.DocumentUrl + "'>" + document.DocumentName + " </a> </br>";
                                }
                            });
                        }

                        var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages)?.FirstOrDefault();

                        var html = template?.EmailTemplate?.Replace("##SiteUrl##", RouteAddress)
                                   .Replace("##siteUrl##", RouteAddress)
                                   .Replace("##PdfUrls##", documentHTML)
                                   .Replace("##CompanyLogo##", companyTheme.CompanyMainLogo)
                                   .Replace("##StepName##", dataSetsResult.DataJson.StepName != null ? dataSetsResult.DataJson.StepName : "");

                        var mobileNo = clientDetails?.MobileNo;

                        if (toEmails != null && html != null)
                        {
                            Guid? UserId = clientDetails?.UserId;

                            if ((formfield.UserIds == null || formfield.UserIds.Any(x => x != UserId)) && UserId != null)
                            {
                                if (formfield.UserIds == null)
                                    formfield.UserIds = new List<Guid?>();

                                formfield.UserIds?.Add(UserId);
                            }

                            userDataSetRelationModel.UserId.Add((Guid)(clientDetails.UserAuthenticationId));

                            Guid? brokerUserId = clientList.Where(t => (t.ClientId == BrokerId && BrokerId != null))?.FirstOrDefault()?.UserId;

                            if ((formfield.UserIds == null || formfield.UserIds.Any(x => x != brokerUserId)) && brokerUserId != null)
                            {
                                if (formfield.UserIds == null)
                                    formfield.UserIds = new List<Guid?>();

                                formfield.UserIds?.Add(brokerUserId);
                            }

                            var dataSetUpdateModel = new UpdateDataSetJsonModel();
                            dataSetUpdateModel.Id = (Guid)dataSetsResult.Id;

                            EmailGenericModel emailModel = new EmailGenericModel
                            {
                                SmtpServer = smtpDetails?.SmtpServer,
                                SmtpServerPort = smtpDetails?.SmtpServerPort,
                                SmtpMail = smtpDetails?.SmtpMail,
                                SmtpPassword = smtpDetails?.SmtpPassword,
                                ToAddresses = toEmails,
                                CCMails = null,
                                HtmlContent = html,
                                Subject = template.EmailSubject != null ? template.EmailSubject : "Presentation of Documents",
                                MailAttachments = null,
                                IsPdf = true
                            };
                            _emailService.SendMail(loggedInContext, emailModel);

                            if (mobileNo != null)
                            {
                                _emailService.SendSMS(mobileNo, messageBody, loggedInContext);
                            }
                        }

                    }

                    formfield.ReminderCount = formfield.StatusName != purchaseExecution.StatusName ? 1 : clientAccess.ClientId != null ? (formfield.ReminderCount + 1) : formfield.ReminderCount ;
                    string statusName = formfield.StatusName != purchaseExecution.StatusName ? purchaseExecution.StatusName : formfield.StatusName;
                    formfield.StatusName = statusName;
                    formfield.CanShowAlert = false;
                    formfield.StepHistory = null;
                    formfield.PODClientIds = purchaseExecution.PODClientIds;
                    formfield.AcceptedBankers = purchaseExecution.AcceptedBankers;
                    formfield.RejectedBankers = purchaseExecution.RejectedBankers;
                    formfield.ClientType = purchaseExecution.ClientType;
                    formfield.ClientTypeId = purchaseExecution.ClientTypeId;
                    formfield.StatementOfAccountsHistory = purchaseExecution.StatementOfAccountsHistory;
                    formfield.SharedDocuments = purchaseExecution.SharedDocuments;
                    formfield.ShareDocumentsHistory = purchaseExecution.ShareDocumentsHistory;
                    formfield.Documents = purchaseExecution.Documents;

                    emailsCount = formfield.ReminderCount;

                    DataSetUpsertInputModel dataSetUpsertInput = new DataSetUpsertInputModel();

                    dataSetUpsertInput.IsArchived = false;
                    dataSetUpsertInput.CompanyId = loggedInContext.CompanyGuid;
                    dataSetUpsertInput.DataSourceId = dataSetsResult.DataSourceId;
                    dataSetUpsertInput.Id = purchaseExecution.Id;
                    Guid? guidTest = Guid.Empty;
                    dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(formfield);
                    guidTest = _dataSetService.CreateExecutionDataSet(dataSetUpsertInput, loggedInContext, validationMessages).GetAwaiter().GetResult();

                    if (userDataSetRelationModel.UserId.Count > 0)
                    {
                        var data = _dataSetService.CreateUserDataSetRelation(userDataSetRelationModel, null, loggedInContext, validationMessages);
                    }
                   
                }

                return emailsCount;
            }

        }

        public void SaveXPHistory(PurchaseExecutionModel purchaseExecutionnewData, PurchaseExecutionModel oldData, List<ValidationMessage> validationMessages, LoggedInContext loggedInContext)
        {
            var dataSetHistoryModel = new DataSetHistoryInputModel();

            var loggedInUserDetails = new UserDbEntity();

            if ((oldData.StatusName == "Completed" && purchaseExecutionnewData.StepName == "Switch Bill of Lading") || purchaseExecutionnewData.CanShowAlert == true)
            {
                List<ParamsJsonModel> paramsJsonModels = new List<ParamsJsonModel>();

                List<StepHistoryModel> stepHistoryModels = new List<StepHistoryModel>();

                paramsJsonModels.Add(new ParamsJsonModel()
                {
                    KeyName = "ContractType",
                    KeyValue = "ExecutionSteps",
                    Type = "string"
                });

                paramsJsonModels.Add(new ParamsJsonModel()
                {
                    KeyName = "ContractId",
                    KeyValue = purchaseExecutionnewData.ContractId.ToString(),
                    Type = "guid"
                });

                if (purchaseExecutionnewData?.PurchaseId != null)
                {
                    paramsJsonModels.Add(new ParamsJsonModel()
                    {
                        KeyName = "PurchaseId",
                        KeyValue = purchaseExecutionnewData.PurchaseId.ToString(),
                        Type = "guid"
                    });
                }

                string paramsJsonModel = JsonConvert.SerializeObject(paramsJsonModels);

                var dataSetsResult = _dataSetService.SearchExecutionStepsDataSets(null, null, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages)?.GetAwaiter().GetResult();

                var data = dataSetsResult?.Where(t => (t.DataJson.StepName == "Invoice to Buyer" || t.DataJson.StepName == "Documents per Shipping Instruction" || t.DataJson.StepName == "Switch Bill of Lading" || t.DataJson.StepName == "Letter of indemnity for switching BLs" || t.DataJson.StepName == "Letter of indemnity for Discharging Cargo"))?.ToList();

                if (purchaseExecutionnewData.FormData == null && oldData.FormData != null)
                {
                    var jdp = new JsonDiffPatch();
                    JToken diffJsonResult = jdp.Diff(JObject.Parse(purchaseExecutionnewData.FormData?.ToString() != null ? purchaseExecutionnewData.FormData?.ToString() : "{}"), JObject.Parse(oldData.FormData?.ToString() != null ? oldData.FormData?.ToString() : "{}"));

                    foreach (var record in diffJsonResult)
                    {
                        stepHistoryModels.Add(new StepHistoryModel
                        {
                            Field = record.Path,
                            OldValue = record.First.First.ToString(),
                            NewValue = null
                        });
                    }
                }

                if (purchaseExecutionnewData.FormData != null && oldData.FormData == null)
                {
                    var jdp = new JsonDiffPatch();
                    JToken diffJsonResult = jdp.Diff(JObject.Parse(purchaseExecutionnewData.FormData?.ToString() != null ? purchaseExecutionnewData.FormData?.ToString() : "{}"), JObject.Parse(oldData.FormData?.ToString() != null ? oldData.FormData?.ToString() : "{}"));

                    foreach (var record in diffJsonResult)
                    {
                        stepHistoryModels.Add(new StepHistoryModel
                        {
                            Field = record.Path,
                            OldValue = null,
                            NewValue = record.First.Last.ToString()
                        });
                    }
                }

                if (purchaseExecutionnewData.FormData != null && oldData.FormData != null)
                {
                    var jdp = new JsonDiffPatch();
                    JToken diffJsonResult = jdp.Diff(JObject.Parse(purchaseExecutionnewData.FormData?.ToString() != null ? purchaseExecutionnewData.FormData?.ToString() : "{}"), JObject.Parse(oldData.FormData?.ToString() != null ? oldData.FormData?.ToString() : "{}"));

                    foreach (var record in diffJsonResult)
                    {
                        stepHistoryModels.Add(new StepHistoryModel
                        {
                            Field = record.Path,
                            OldValue = record.First.First.ToString(),
                            NewValue = record.First.Last.ToString()
                        });
                    }
                }

                foreach (var stepId in data)
                {
                    DataSetUpsertInputModel dataSetUpsertInput = new DataSetUpsertInputModel();
                    stepId.DataJson.CanShowAlert = true;
                    stepId.DataJson.StepHistory = purchaseExecutionnewData.CanShowAlert == true ? null : JsonConvert.SerializeObject(stepHistoryModels);
                    dataSetUpsertInput.IsArchived = false;
                    dataSetUpsertInput.CompanyId = loggedInContext.CompanyGuid;
                    dataSetUpsertInput.DataSourceId = stepId.DataSourceId;
                    dataSetUpsertInput.Id = stepId.Id;
                    dataSetUpsertInput.DataJson = JsonConvert.SerializeObject(stepId.DataJson);

                    Guid? guid = _dataSetService.CreateExecutionDataSet(dataSetUpsertInput, loggedInContext, validationMessages).GetAwaiter().GetResult();
                }
            }

            if (loggedInContext.LoggedInUserId != Guid.Empty)
            {
                loggedInUserDetails = _userRepository.GetSingleUserDetails(loggedInContext.LoggedInUserId);
            }

            dataSetHistoryModel.CreatedByUserName = loggedInUserDetails != null ? loggedInUserDetails.FullName : null;

            if (purchaseExecutionnewData.StatusName != oldData.StatusName)
            {
                dataSetHistoryModel.DataSetId = purchaseExecutionnewData.Id;
                dataSetHistoryModel.Field = "StatusName";
                dataSetHistoryModel.Description = purchaseExecutionnewData.StepName;
                dataSetHistoryModel.OldValue = oldData.StatusName != null ? oldData.StatusName : null;
                dataSetHistoryModel.NewValue = purchaseExecutionnewData.StatusName != null ? purchaseExecutionnewData.StatusName : null;
                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
            }

            if (purchaseExecutionnewData.Comment != oldData.Comment)
            {
                dataSetHistoryModel.DataSetId = purchaseExecutionnewData.Id;
                dataSetHistoryModel.Field = "Comment";
                dataSetHistoryModel.OldValue = oldData.Comment != null ? oldData.Comment : null;
                dataSetHistoryModel.NewValue = purchaseExecutionnewData.Comment != null ? purchaseExecutionnewData.Comment : null;
                _dataSetService.CreateDataSetHistory(dataSetHistoryModel, loggedInContext, validationMessages);
            }

        }

        public async Task<List<DataSetHistoryInputModel>> GetXPStepsHistory(Guid? dataSetId, LoggedInContext loggedInContext, List<ValidationMessage> validationmessages)
        {
            try
            {
                using (var client = new HttpClient())
                {
                    string serviceurl = "DataService/DataSetHistoryApi/SearchDataSetHistory?dataSetId=" + dataSetId;
                    client.BaseAddress = new Uri(WebConfigurationManager.AppSettings["MongoApiBaseUrl"]);

                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", loggedInContext.authorization);
                    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                    HttpResponseMessage response = new HttpResponseMessage();
                    response = await client.GetAsync(serviceurl).ConfigureAwait(false);
                    if (response.IsSuccessStatusCode)
                    {
                        string apiResponse = response.Content.ReadAsStringAsync().Result;
                        var data = JObject.Parse(apiResponse);
                        var dataSetResponse = (bool)data["success"] ? (object)data["data"] : null;
                        var result = JsonConvert.DeserializeObject<List<DataSetHistoryInputModel>>(JsonConvert.SerializeObject(dataSetResponse));
                        var users = _tradingRepository.GetUsersForBinding(loggedInContext, validationmessages);

                        foreach (var r in result)
                        {
                            if (r.CreatedByUserId != null)
                            {
                                var user = (from u in users where (u.UserAuthenticationId == r.CreatedByUserId || u.Id == r.CreatedByUserId) select u).FirstOrDefault();
                                if (user != null)
                                {
                                    r.CreatedByUserName = user.Name;
                                    r.ProfileImage = user.ProfileImage;
                                }
                                else
                                {
                                    r.CreatedByUserName = null;
                                    r.ProfileImage = null;
                                }
                            }
                            else
                            {
                                r.CreatedByUserName = null;
                                r.ProfileImage = null;
                            }

                        }

                        return result;

                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (Exception exception)
            {
                LoggingManager.Error(string.Format(LoggingManagerAppConstants.LoggingManagerErrorValue, "SearchDataSets", "DataSourceService", exception.Message), exception);
                return null;
            }
        }

        public Guid? UpsertFormExecution(PurchaseExecutionModel purchaseExecution, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpsertFormExecution", "Trading Service"));

            DataSetUpsertInputModel dataSetUpsertInputModel = new DataSetUpsertInputModel();

            var formfield = new PurchaseExecutionModel();

            if (purchaseExecution.Id != null)
            {
                var dataSetsResult = _dataSetService.SearchDataSets(purchaseExecution.Id, null, null, null, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().FirstOrDefault();
                formfield.FormData = dataSetsResult.DataJson.FormData;
            }

            dataSetUpsertInputModel.IsArchived = false;
            dataSetUpsertInputModel.CompanyId = loggedInContext.CompanyGuid;
            dataSetUpsertInputModel.DataSourceId = purchaseExecution.DataSourceId;
            dataSetUpsertInputModel.Id = purchaseExecution.Id;

            FinalContractModel FinalContractModel = new FinalContractModel();

            FinalContractModel.ContractType = "ExecutionSteps";
            FinalContractModel.StatusId = purchaseExecution.StatusId;
            FinalContractModel.ContractId = purchaseExecution.ContractId;
            FinalContractModel.FormData = purchaseExecution.FormData;
            dataSetUpsertInputModel.DataJson = JsonConvert.SerializeObject(FinalContractModel);

            Guid? guid = _dataSetService.CreateDataSet(dataSetUpsertInputModel, loggedInContext, validationMessages).GetAwaiter().GetResult();

            if (guid != null && guid != Guid.Empty && dataSetUpsertInputModel.Id != null)
            {
                SaveXPHistory(purchaseExecution, formfield, validationMessages, loggedInContext);
            }

            return guid;
        }

        public dynamic GetExecutionFormData(PurchaseExecutionModel purchaseExecution, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetExecutionFormData", "Trading Service"));

            DataSetUpsertInputModel dataSetUpsertInputModel = new DataSetUpsertInputModel();

            var dataSetsResult = _dataSetService.SearchDataSets(purchaseExecution.Id, purchaseExecution.DataSourceId, null, null, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult();

            List<PurchaseExecutionModel> purchaseExecutions = new List<PurchaseExecutionModel>();

            if (dataSetsResult != null)
            {
                Parallel.ForEach(dataSetsResult, data =>
                {
                    var formfield = new PurchaseExecutionModel();

                    if (data?.DataJson?.FormData != null)
                    {
                        formfield = JsonConvert.DeserializeObject<PurchaseExecutionModel>(data.DataJson.FormData.ToString());
                    }

                    purchaseExecutions.Add(new PurchaseExecutionModel
                    {
                        Id = data.Id,
                        DataSourceId = data.DataSourceId,
                        FormData = data.DataJson.FormData,
                        StatusName = formfield.StatusName,
                        ReminderCount = formfield.ReminderCount,
                        ContractId = formfield.ContractId,
                        PurchaseId = formfield.PurchaseId,
                        StepName = formfield.StepName,
                        Comment = formfield.Comment,
                        ContractName = formfield.ContractName
                    });

                });
            }

            return purchaseExecutions;
        }

        //List<StreamWithType>
        public async Task<string> SendPdfForSwitchBlAgent(List<BuyerSwitchBlContractDetails> blDetails,
            Guid? clientId, Guid? vesselId, SmtpDetailsModel smtpDetails, string[] toEmails, string[] ccMails, string htmlContent, EmailTemplateModel templateContent, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
            {
                ClientId = clientId,
                EmailTemplateName = "SwitchBlPdfGenerationTemplate"
            };
            ContractModel searchVesselContractModel = new ContractModel
            {
                DataSetId = vesselId
            };

            //Getting vessel data using vesselId
            var vesselContractData = GetContracts(searchVesselContractModel, loggedInContext, validationMessages).FirstOrDefault();
            List<CountryApiReturnModel> countryList = _companyStructureManagementService.GetCountries(new CountrySearchInputModel(), validationMessages, loggedInContext);
            JObject formfield = (JObject)JsonConvert.DeserializeObject(vesselContractData.FormData.ToString());
            Dictionary<string, string> keyValueMap = new Dictionary<string, string>();

            List<string> PdfUrls = new List<string>();

            foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
            {
                keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
            }
            var shipperAddress = string.Empty;
            var onBoardthetanker = string.Empty;
            var commodity = string.Empty;
            var flag = string.Empty;
            var master = string.Empty;
            var loadedattheportof = string.Empty;
            var tobedeliverdtotheportof = string.Empty;
            var voyageNumber = string.Empty;
            var sLOPS = string.Empty;
            var charterPartyDate = string.Empty;
            DateTime dateValue;
            var placeOfIssue = string.Empty;
            foreach (var keyValue in keyValueMap)
            {
                if (keyValue.Key.ToLower() == "shipperaddress")
                {
                    shipperAddress = keyValue.Value;
                }
                if (keyValue.Key.ToLower() == "onboardthetanker")
                {
                    onBoardthetanker = keyValue.Value;
                }
                if (keyValue.Key.ToLower() == "commodityname")
                {
                    commodity = keyValue.Value;
                }
                if (keyValue.Key.ToLower() == "vesselflag")
                {
                    flag = keyValue.Value;
                }
                if (keyValue.Key.ToLower() == "master")
                {
                    master = keyValue.Value;
                }
                if (keyValue.Key.ToLower() == "portofload")
                {
                    loadedattheportof = keyValue.Value;
                }
                if (keyValue.Key.ToLower() == "destinationdischargeport")
                {
                    tobedeliverdtotheportof = keyValue.Value;
                }
                if (keyValue.Key.ToLower() == "voyagenumber")
                {
                    voyageNumber = keyValue.Value;
                }
                if (keyValue.Key.ToLower() == "slop s")
                {
                    sLOPS = keyValue.Value;
                }
                if (keyValue.Key == "charterpartyDate")
                {
                    if (keyValue.Value != null && keyValue.Value != "" && DateTime.TryParse(keyValue.Value, out dateValue) == true)
                    {
                        var value = Convert.ToDateTime(keyValue.Value);
                        charterPartyDate = value.ToString("dd-MMM-yyyy");
                    }
                    else
                    {
                        charterPartyDate = keyValue.Value;
                    }
                }
                if (keyValue.Key == "placeOfIssue")
                {
                    if (keyValue.Value != "" && keyValue.Value != null)
                    {
                        var placeOfIssueName = countryList.Find(x => x.CountryId.ToString() == keyValue.Value);
                        if (placeOfIssueName != null)
                        {
                            placeOfIssue = placeOfIssueName.CountryName;
                        }
                        else
                        {
                            placeOfIssue = keyValue.Value;
                        }
                    }
                    else
                    {
                        placeOfIssue = "";
                    }
                }
            }
            float? totalQuantity = 0;
            var notifyAddress = string.Empty;
            var vesselBlNumbers = string.Empty;
            int numberOfBls = blDetails != null && blDetails.Count > 0 ? blDetails.Count : 0;

            var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
            var html = template.EmailTemplate;
            var companySettingsSearchInputModel = new CompanySettingsSearchInputModel();
            companySettingsSearchInputModel.CompanyId = loggedInContext.CompanyGuid;
            companySettingsSearchInputModel.IsSystemApp = null;
            string storageAccountName = string.Empty;
            //var quantity = string.Empty;
            List<CompanySettingsSearchOutputModel> companySettings = _masterDataManagementRepository.GetCompanySettings(companySettingsSearchInputModel, loggedInContext, validationMessages).ToList();
            if (companySettings.Count > 0)
            {
                var storageAccountDetails = companySettings.Where(x => x.Key == "StorageAccountName").FirstOrDefault();
                storageAccountName = storageAccountDetails?.Value;
            }
            CompanyOutputModel companyModel = _companyStructureService.GetCompanyById(loggedInContext.CompanyGuid, loggedInContext, validationMessages);

            var directory = SetupCompanyFileContainer(companyModel, 6, loggedInContext.LoggedInUserId, storageAccountName);

            List<StreamWithType> fileStream = new List<StreamWithType>();

            foreach (var blDetail in blDetails)
            {
                if (blDetail.Quantity != null)
                {
                    var finalHtml = html.ToString();
                    finalHtml = finalHtml.Replace("##Shipper##", blDetail.Consigner)
                   .Replace("##Quantity##", blDetail.Quantity.ToString())
                   .Replace("##Commodity##", commodity)
                   .Replace("##NotifyAddress##", blDetail.NotifyParty)
                   .Replace("##OnBoardTanker##", onBoardthetanker)
                   .Replace("##Flag##", flag)
                   .Replace("##Master##", blDetail.Master)
                   .Replace("##LoadedAtPort##", loadedattheportof)
                   .Replace("##DeliveredPort##", tobedeliverdtotheportof)
                   .Replace("##VoyageNumber##", voyageNumber)
                   .Replace("##VesselBlNumbers##", blDetail.VesselBlNumber)
                   .Replace("##TotalBlNumbers##", 1.ToString())
                   .Replace("##SwitchBlInvoiceDate##", DateTime.Today.ToString("dd MMMM yyyy"))
                   .Replace("##SignedDay##", DateTime.Today.ToString("dd"))
                   .Replace("##SignedMonth##", DateTime.Today.ToString("MMMM"))
                   .Replace("##SignedYear##", DateTime.Today.ToString("yyyy"))
                   .Replace("##SLOPS##", blDetail.OceanCarriageStowage)
                   .Replace("##OceanCarriageStowage##", blDetail.OceanCarriageStowage)
                   .Replace("##IssuedPlace##", placeOfIssue)
                   .Replace("##3 (THREE) ORIGINALS##", numberOfBls.ToString())
                   .Replace("##CharteredDate##", charterPartyDate)
                   ;
                    finalHtml = finalHtml.Replace("#ShipperAddress#", blDetail.Consigner)
                   .Replace("#Quantity#", blDetail.Quantity.ToString())
                   .Replace("#COMMODITY#", commodity)
                   .Replace("#NotifyAddress#", blDetail.NotifyParty)
                   .Replace("#OnBoardthetanker#", onBoardthetanker)
                   .Replace("#Flag#", flag)
                   .Replace("#Master#", blDetail.Master)
                   .Replace("#Loadedattheportof#", loadedattheportof)
                   .Replace("#Tobedeliverdtotheportof#", tobedeliverdtotheportof)
                   .Replace("#VoyageNumber#", voyageNumber)
                   .Replace("#VesselBlNumbers#", blDetail.VesselBlNumber)
                   .Replace("#TotalBlNumbers#", 1.ToString())
                   .Replace("#SwitchBlInvoiceDate#", DateTime.Today.ToString("dd MMMM yyyy"))
                   .Replace("#SignedDay#", DateTime.Today.ToString("dd"))
                   .Replace("#SignedMonth#", DateTime.Today.ToString("MMMM"))
                   .Replace("#SignedYear#", DateTime.Today.ToString("yyyy"))
                   .Replace("3P,3S,4P,45, 6P, 6S, SLOP P AND SLOP S", blDetail.OceanCarriageStowage)
                   .Replace("#SLOP S#", blDetail.OceanCarriageStowage)
                   .Replace("#OceanCarriageStowage#", blDetail.OceanCarriageStowage)
                   .Replace("#IssuedPlace#", placeOfIssue)
                   .Replace("#3 (THREE) ORIGINALS#", numberOfBls.ToString())
                   .Replace("#CharteredDate#", charterPartyDate)
                   ;

                    var SwitchBlPdfOutput = await _chromiumService.GeneratePdf(finalHtml, null, clientId.ToString());

                    var SwitchBlFileName = "Switch BL";

                    var fileExtension = ".pdf";

                    var SwitchBlConvertedFileName = SwitchBlFileName + "-" + blDetail.VesselBlNumber + fileExtension;

                    CloudBlockBlob SwitchBlConvertedBlockBlob = directory.GetBlockBlobReference(SwitchBlConvertedFileName);

                    SwitchBlConvertedBlockBlob.Properties.CacheControl = "public, max-age=2592000";

                    SwitchBlConvertedBlockBlob.Properties.ContentType = "application/pdf";

                    Byte[] SwitchBlBytes = SwitchBlPdfOutput.ByteStream;

                    SwitchBlConvertedBlockBlob.UploadFromByteArray(SwitchBlBytes, 0, SwitchBlBytes.Length);

                    Stream PerformaStream = new MemoryStream(SwitchBlPdfOutput.ByteStream);

                    var performaUrl = SwitchBlConvertedBlockBlob.Uri.AbsoluteUri;

                    PdfUrls.Add(performaUrl);
                    fileStream.Add(new StreamWithType() { FileStream = PerformaStream, FileName = SwitchBlConvertedFileName, FileType = ".pdf", IsPdf = true });
                }
            }

            TaskWrapper.ExecuteFunctionInNewThread(async () =>
            {
                EmailGenericModel emailModel = new EmailGenericModel
                {
                    SmtpServer = smtpDetails?.SmtpServer,
                    SmtpServerPort = smtpDetails?.SmtpServerPort,
                    SmtpMail = smtpDetails?.SmtpMail,
                    SmtpPassword = smtpDetails?.SmtpPassword,
                    ToAddresses = toEmails,
                    CCMails = ccMails,
                    HtmlContent = htmlContent,
                    Subject = template.EmailSubject != null ? template.EmailSubject : "RemindMail",
                    MailAttachments = null,
                    MailAttachmentsWithFileType = fileStream,
                    IsPdf = true
                };
                _emailService.SendMail(loggedInContext, emailModel);
            });
            //return fileStream;
            return string.Join(",", PdfUrls);
        }

        public CloudBlobDirectory SetupCompanyFileContainer(CompanyOutputModel companyModel, int moduleTypeId, Guid loggedInUserId, string storageAccountName)
        {
            LoggingManager.Info("SetupCompanyFileContainer");

            CloudStorageAccount storageAccount = StorageAccount(storageAccountName);

            CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();

            Regex re = new Regex(@"(^{[&\/\\#,+()$~%._\'"":*?<>{}@`;^=-]})$");

            companyModel.CompanyName = companyModel.CompanyName.Replace(" ", string.Empty);

            re.Replace(companyModel.CompanyName, "");

            string company = (companyModel.CompanyId.ToString()).ToLower();

            CloudBlobContainer container = blobClient.GetContainerReference(company);

            try
            {
                bool isCreated = container.CreateIfNotExists();

                if (isCreated)
                {
                    container.SetPermissions(new BlobContainerPermissions
                    {
                        PublicAccess = BlobContainerPublicAccessType.Blob
                    });
                }
            }
            catch (StorageException e)
            {
                Console.WriteLine(e.Message);

                throw;
            }

            string directoryReference = moduleTypeId == (int)ModuleTypeEnum.Hrm ? AppConstants.HrmBlobDirectoryReference :
                 moduleTypeId == (int)ModuleTypeEnum.Assets ? AppConstants.AssetsBlobDirectoryReference :
                 moduleTypeId == (int)ModuleTypeEnum.FoodOrder ? AppConstants.FoodOrderBlobDirectoryReference :
                 moduleTypeId == (int)ModuleTypeEnum.Projects ? AppConstants.ProjectsBlobDirectoryReference :
                 moduleTypeId == (int)ModuleTypeEnum.Invoices ? AppConstants.ProjectsBlobDirectoryReference : AppConstants.LocalBlobContainerReference;

            CloudBlobDirectory moduleDirectory = container.GetDirectoryReference(directoryReference);

            CloudBlobDirectory userLevelDirectory = moduleDirectory.GetDirectoryReference(loggedInUserId.ToString());

            return userLevelDirectory;
        }

        private CloudStorageAccount StorageAccount(string storageAccountName)
        {
            LoggingManager.Debug("Entering into GetStorageAccount method of blob service");
            string account;
            if (string.IsNullOrEmpty(storageAccountName))
            {
                account = CloudConfigurationManager.GetSetting("StorageAccountName");
            }
            else
            {
                account = storageAccountName;
            }

            string key = CloudConfigurationManager.GetSetting("StorageAccountAccessKey");
            string connectionString = $"DefaultEndpointsProtocol=https;AccountName={account};AccountKey={key}";
            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(connectionString);

            LoggingManager.Debug("Exit from GetStorageAccount method of blob service");

            return storageAccount;
        }
        public async Task<string> GeneratePdfofInvoiceSteps(PurchaseExecutionModel purchaseExecution, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GeneratePdfofInvoiceSteps", "Trading Service"));

            var html = string.Empty;
            var commodityList = JsonConvert.DeserializeObject<List<ProductListOutPutModel>>(JsonConvert.SerializeObject(GetFormDropdowns("commodity", loggedInContext, validationMessages)));
            var currencyList = JsonConvert.DeserializeObject<List<CurrencySearchCriteriaInputModel>>(JsonConvert.SerializeObject(GetFormDropdowns("currency", loggedInContext, validationMessages)));
            List<PaymentTermOutputModel> portsList = _leadService.GetPortDetails(new PaymentTermSearchInputModel(), loggedInContext, validationMessages);
            ContractModel searchVesselDetailsModel = new ContractModel();
            searchVesselDetailsModel.DataSetId = purchaseExecution.VesselId;
            var vesselContractData = GetContracts(searchVesselDetailsModel, loggedInContext, validationMessages).FirstOrDefault();
            ContractModel searchModel = new ContractModel();
            searchModel.DataSetId = purchaseExecution.ContractId;
            var contractData = new ContractModel();
            contractData = GetContracts(searchModel, loggedInContext, validationMessages).FirstOrDefault();
            Dictionary<string, string> keyValueMap = new Dictionary<string, string>();
            Dictionary<string, string> vesselKeyValueMap = new Dictionary<string, string>();

            EmailTemplateModel EmailTemplateModel = new EmailTemplateModel
            {
                ClientId = contractData.ClientId,
                EmailTemplateName = purchaseExecution.StepName == "Invoice to Buyer" ? "InvoiceToBuyerStepEmailTemplate" : "InvoiceFromSellerStepEmailTemplate"
            };

            var template = _clientService.GetAllEmailTemplates(EmailTemplateModel, loggedInContext, validationMessages).ToList()[0];
            html = template.EmailTemplate;
            var issueDate = DateTime.UtcNow.ToString("dd-MMM-yyyy");
            var invoiceNumber = string.Empty;
            var buyer = string.Empty;
            var portOfLoading = string.Empty;
            var portOfDischarge = string.Empty;
            var blnoAndDate = string.Empty;
            var vesselName = string.Empty;
            var paymentTerms = string.Empty;
            var draweesBank = string.Empty;
            var commodity = string.Empty;
            var quantity = string.Empty;
            var unitPrice = string.Empty;
            var buyerAddressLine1 = string.Empty;
            var buyerAddressLine2 = string.Empty;
            var sellerAddressLine1 = string.Empty;
            var sellerAddressLine2 = string.Empty;
            var sellerName = string.Empty;
            var buyerName = string.Empty;
            var currencyCode = string.Empty;
            var currencySymbol = string.Empty;
            var portDischarge = new List<string>();
            var portLoad = new List<string>();

            JObject blformfield = (JObject)JsonConvert.DeserializeObject(contractData.FormData.ToString());
            JObject vesselformfield = (JObject)JsonConvert.DeserializeObject(vesselContractData.FormData.ToString());
            keyValueMap = new Dictionary<string, string>();
            vesselKeyValueMap = new Dictionary<string, string>();
            foreach (KeyValuePair<string, JToken> keyValuePair in blformfield)
            {
                keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
            }
            foreach (KeyValuePair<string, JToken> vesselKeyValuePair in vesselformfield)
            {
                vesselKeyValueMap.Add(vesselKeyValuePair.Key, vesselKeyValuePair.Value.ToString());
            }
            string quantityInFormat = string.Empty;

            foreach (var keyValue in keyValueMap)
            {

                if (keyValue.Key == "priceAmount")
                {
                    unitPrice = keyValue.Value;
                }
                if (keyValue.Key == "quanityNumber")
                {
                    quantity = keyValue.Value;
                    quantityInFormat = String.Format("{0:n}", Int32.Parse(quantity));
                }
                if (keyValue.Key == "priceCurrency")
                {
                    if (keyValue.Value != "" && keyValue.Value != null)
                    {
                        currencyCode = (from currenci in currencyList
                                    where currenci.CurrencyId == new Guid(keyValue.Value)
                                    select currenci).FirstOrDefault().CurrencyCode;
                        currencySymbol = (from currenci in currencyList
                                          where currenci.CurrencyId == new Guid(keyValue.Value)
                                          select currenci).FirstOrDefault().CurrencySymbol;
                    }
                    else
                    {
                        currencyCode = "";
                        currencySymbol = "";
                    }
                }
                if (keyValue.Key == "commodityName")
                {
                    if (keyValue.Value != "" && keyValue.Value != null)
                    {
                        commodity = (from commoditi in commodityList
                                     where commoditi.ProductId == new Guid(keyValue.Value)
                                     select commoditi).FirstOrDefault().ProductName;
                    }
                    else
                    {
                        commodity = "";
                    }
                }
                if (keyValue.Key == "buyerAddressLine1")
                {
                    buyerAddressLine1 = keyValue.Value;
                }
                if (keyValue.Key == "buyerAddressLine2")
                {
                    buyerAddressLine2 = keyValue.Value;
                }

                if (keyValue.Key == "sellerName")
                {
                    sellerName = keyValue.Value;
                }
                if (keyValue.Key == "buyerName")
                {
                    buyerName = keyValue.Value;
                }
                if (keyValue.Key == "sellerAddressLine1")
                {
                    sellerAddressLine1 = keyValue.Value;
                }
                if (keyValue.Key == "sellerAddressLine2")
                {
                    sellerAddressLine2 = keyValue.Value;
                }
            }
            foreach (var keyValue1 in vesselKeyValueMap)
            {

                if (keyValue1.Key == "vesselName")
                {
                    vesselName = keyValue1.Value;
                }
                if (keyValue1.Key == "destinationDischargePort")
                {
                    if (keyValue1.Value != null && keyValue1.Value != "")
                    {
                        var data = keyValue1.Value;
                        var dischargePortList  = data.Split(',');
                        if (dischargePortList.Length > 0)
                        {
                            foreach (var port in dischargePortList)
                            {
                                var value = portsList.Find(x => x.Id.ToString() == port.ToString());
                                if (value != null)
                                {
                                    if(string.IsNullOrEmpty(portOfDischarge)) 
                                    {
                                        portOfDischarge = value.Name;
                                    } 
                                    else
                                    {
                                        portOfDischarge = portOfDischarge + ", " + value.Name;
                                    }
                                   
                                }
                                else
                                {
                                    if (string.IsNullOrEmpty(portOfDischarge))
                                    {
                                        portOfDischarge = port;
                                    }
                                    else
                                    {
                                        portOfDischarge = portOfDischarge + ", " + port;
                                    }
                                }

                            }
                        }
                        else
                        {
                            portOfDischarge = "";
                        }
                    }
                    else
                    {
                        portOfDischarge = "";
                    }
                }
                if (keyValue1.Key == "portOfLoad")
                {
                    if (keyValue1.Value != null && keyValue1.Value != "")
                    {
                        var data = keyValue1.Value;
                        var portOfLoadingList = data.Split(',');
                        if (portOfLoadingList.Length > 0)
                        {
                            foreach (var port in portOfLoadingList)
                            {
                                var value = portsList.Find(x => x.Id.ToString() == port.ToString());
                                if (value != null)
                                {
                                    if (string.IsNullOrEmpty(portOfLoading))
                                    {
                                        portOfLoading = value.Name;
                                    }
                                    else
                                    {
                                        portOfLoading = portOfLoading + ", " + value.Name;
                                    }

                                }
                                else
                                {
                                    if (string.IsNullOrEmpty(portOfLoading))
                                    {
                                        portOfLoading = port;
                                    }
                                    else
                                    {
                                        portOfLoading = portOfLoading + ", " + port;
                                    }
                                }
                            }
                        }
                        else
                        {
                            portOfLoading = "";
                        }
                    }
                    else
                    {
                        portOfLoading = "";
                    }
                }
            }
            var amountInWords = NumberToWords((int.Parse(unitPrice) * int.Parse(quantity)));
            invoiceNumber = DateTime.UtcNow.ToString("MMM") + "/" + commodity + "/" + DateTime.UtcNow.ToString("yyyy");
            var unitPriceFormat = currencySymbol + String.Format("{0:n}", Int32.Parse(unitPrice));
            var amount = Convert.ToDecimal((int.Parse(unitPrice) * int.Parse(quantity)));
            string amountInDecimal = string.Empty;
            if (amount.ToString().Split('.')[0].Length <= 1)
            {
                amountInDecimal = Convert.ToDecimal(amount).ToString("0.00");
            }
            else
            {
                amountInDecimal = string.Format(CultureInfo.InvariantCulture, "{0:0,0.00}", amount);
            }
            var amountFormat = currencySymbol + amountInDecimal;
            html = html.Replace("##VesselName##", vesselName)
                .Replace("##PortLoad##", portOfLoading)
                .Replace("##IssueDate##", issueDate)
                .Replace("##InvoiceNumber##", invoiceNumber)
                .Replace("##PortDischarge##", portOfDischarge)
                .Replace("##BLNoAndDate##", blnoAndDate)
                .Replace("##CurrencyCode##", currencyCode)
                .Replace("##currencyCode##", currencyCode)
                .Replace("##AmountInWords##", currencyCode + " " + amountInWords + " Only")
                .Replace("##amountInWords##", currencyCode + " " + amountInWords + " Only")
                .Replace("##Commodity##", commodity)
                .Replace("##Quantity##", quantityInFormat)
                .Replace("##PaymentTerms##", paymentTerms)
                .Replace("##DraweesBank##", draweesBank)
                .Replace("##UnitPrice##", unitPriceFormat)
                .Replace("##Amount##", amountFormat)
                .Replace("##SellerAddressLine1##", sellerAddressLine1)
                .Replace("##SellerAddressLine2##", sellerAddressLine2)
                .Replace("##SellerName##", sellerName)
                .Replace("##BuyerAddressLine1##", buyerAddressLine1)
                .Replace("##BuyerAddressLine2##", buyerAddressLine2)
                .Replace("##BuyerName##", buyerName)
              ;

            ClientAccessModel clientAccess = new ClientAccessModel();


            string StampDocument = string.Empty;

            if (purchaseExecution.IsStampNeeded == true)
            {
                if (purchaseExecution.StampClientId != null)
                {
                    var fileSearchModel = new FileSearchCriteriaInputModel();
                    fileSearchModel.ReferenceId = purchaseExecution.StampClientId;
                    fileSearchModel.ReferenceTypeId = new Guid("26D4C6C2-B698-4D79-8A52-0014E9045D60");
                    StampDocument = _fileRepository.SearchFile(fileSearchModel, loggedInContext, validationMessages).FirstOrDefault().FilePath;
                }
                else
                {
                    var companySettingsinput = new CompanySettingsSearchInputModel();
                    companySettingsinput.CompanyId = loggedInContext.CompanyGuid;
                    companySettingsinput.Key = "StampDocument";
                    StampDocument = _masterDataManagementRepository.GetCompanySettings(companySettingsinput, loggedInContext, validationMessages)?.FirstOrDefault()?.Value;
                }

                if (html != null && purchaseExecution.IsStampNeeded != null)
                {
                    var stampHtml = "<img src=##Src## alt='chartererSignature' style=\"width: 325px; height: 100px;\"/>";
                    stampHtml = stampHtml.Replace("##Src##", StampDocument);

                    html = html.Replace("##UserStampHTML##", StampDocument == null ? "" : stampHtml);
                }
                else
                {
                    html = html.Replace("##UserStampHTML##", string.Empty);
                }
            }



            if (purchaseExecution.IsUploadFile == true)
            {
                var companySettingsSearchInputModel = new CompanySettingsSearchInputModel();
                companySettingsSearchInputModel.CompanyId = loggedInContext.CompanyGuid;
                companySettingsSearchInputModel.IsSystemApp = null;
                string storageAccountName = string.Empty;

                var PdfOutput = await _chromiumService.GenerateExecutionPdf(html, null, invoiceNumber).ConfigureAwait(false);

                List<CompanySettingsSearchOutputModel> companySettings = _masterDataManagementRepository.GetCompanySettings(companySettingsSearchInputModel, loggedInContext, validationMessages).ToList();
                if (companySettings.Count > 0)
                {
                    var storageAccountDetails = companySettings.Where(x => x.Key == "StorageAccountName").FirstOrDefault();
                    storageAccountName = storageAccountDetails?.Value;
                }
                CompanyOutputModel companyModel = _companyStructureService.GetCompanyById(loggedInContext.CompanyGuid, loggedInContext, validationMessages);

                var directory = SetupCompanyFileContainer(companyModel, 6, loggedInContext.LoggedInUserId, storageAccountName);

                var ContractFileName = invoiceNumber;

                var fileExtension = ".pdf";

                var ContractConvertedFileName = ContractFileName + fileExtension;

                CloudBlockBlob ContractConvertedBlockBlob = directory.GetBlockBlobReference(ContractConvertedFileName);

                ContractConvertedBlockBlob.Properties.CacheControl = "public, max-age=2592000";

                ContractConvertedBlockBlob.Properties.ContentType = "application/pdf";

                Byte[] ContractBytes = PdfOutput.ByteStream;

                ContractConvertedBlockBlob.UploadFromByteArray(ContractBytes, 0, ContractBytes.Length);

                if (purchaseExecution.IsStampNeeded == true)
                {
                    purchaseExecution.IsFileReUploaded = true;
                    purchaseExecution.ReUploadedUrl = ContractConvertedBlockBlob.Uri.AbsoluteUri;
                    return purchaseExecution.ReUploadedUrl;
                }
                else
                {
                    purchaseExecution.ContractUrl = ContractConvertedBlockBlob.Uri.AbsoluteUri;
                    return purchaseExecution.ContractUrl;
                }


            }
            else
            {
                return html;
            }
        }


        public dynamic GetAccountsPayableAging(DashboardAPIInputModel dashboardAPIInputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            dashboardAPIInputModel = dashboardAPIInputModel == null ? new DashboardAPIInputModel() : dashboardAPIInputModel;

            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetAccountsPayableAging", "Trading Service"));

            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = "Invoice Queue",
                Type = "string"
            });

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "InvoiceType",
                KeyValue = "Payable",
                Type = "string"
            });

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "IsGeneratedToPayables",
                KeyValue = "true",
                Type = "boolean"
            });

            //ClientInvoiceStatus clientInvoiceStatus = new ClientInvoiceStatus();
            //List<ClientInvoiceStatus> clientInvoiceStatuses = _clientRepository.GetAllInvoicePaymentStatus(clientInvoiceStatus, loggedInContext, validationMessages);

            //paramsJsons.Add(new ParamsJsonModel()
            //{
            //    KeyName = "InvoicePaymentStatusId",
            //    KeyValue = string.Join(",",  clientInvoiceStatuses.Where(t => (t.StatusName == "Disputed" || t.StatusName == "Approved")).Select(t => t.InvoiceStatusId.ToString())),
            //    Type = "ListFilter"
            //});

            DateTime today = DateTime.Now.AddMonths(-5);
            dashboardAPIInputModel.DateFrom = dashboardAPIInputModel.DateFrom == null ? new DateTime(today.Year, today.Month, DateTime.DaysInMonth(today.Year, today.Month)) : dashboardAPIInputModel.DateFrom;
            dashboardAPIInputModel.DateTo = dashboardAPIInputModel.DateTo == null ? dashboardAPIInputModel.DateFrom.Value.AddMonths(5) : dashboardAPIInputModel.DateTo;

            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);

            var dataSetsResult = _dataSetService.SearchDataSets(null, null, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult();

            var selectedDates = Enumerable.Range(0, 6).Select(index => new DateTime?(dashboardAPIInputModel.DateFrom.Value.AddMonths(index))).TakeWhile(date => date <= dashboardAPIInputModel.DateTo).ToList();//last six months only needed .Where(t => t.DataJson?.ApprovedDate != null)?.ToList()

            DataTable ordersTable = new DataTable();
            ordersTable.Columns.Add(new DataColumn { ColumnName = "Date" });
            ordersTable.Columns.Add(new DataColumn { ColumnName = "0-15Days", DataType = typeof(Double) });
            ordersTable.Columns.Add(new DataColumn { ColumnName = "15-30Days", DataType = typeof(Double) });
            ordersTable.Columns.Add(new DataColumn { ColumnName = "31-45Days", DataType = typeof(Double) });
            ordersTable.Columns.Add(new DataColumn { ColumnName = "> 45 Days", DataType = typeof(Double) });

            foreach (var date in selectedDates)
            {
                DataRow dtRow = ordersTable.NewRow();
                dtRow["0-15Days"] = Math.Round((double)(dataSetsResult?.Where(t => t.DataJson?.ApprovedDate != null && (t.DataJson?.ApprovedDate?.Date <= date.Value.Date && t.DataJson?.ApprovedDate?.Date >= date.Value.AddDays(-15).Date && (t.DataJson?.PaidDate?.Date >= date.Value.AddDays(-15).Date || t.DataJson?.PaidDate == null)))?.Select(t => JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t.DataJson?.FormData))).Select(t => t?.quanityNumber * t?.priceAmount)?.Sum()), 3);
                dtRow["15-30Days"] = Math.Round((double)(dataSetsResult?.Where(t => t.DataJson?.ApprovedDate != null && (t.DataJson?.ApprovedDate?.Date <= date?.Date.AddDays(-16) && t.DataJson?.ApprovedDate?.Date >= date?.Date.AddDays(-30) && (t.DataJson?.PaidDate?.Date >= date.Value.Date.AddDays(-30) || t.DataJson?.PaidDate == null)))?.Select(t => JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t.DataJson?.FormData)))?.Select(t => t?.quanityNumber * t?.priceAmount)?.Sum()), 3);
                dtRow["31-45Days"] = Math.Round((double)(dataSetsResult?.Where(t => t.DataJson?.ApprovedDate != null && (t.DataJson?.ApprovedDate?.Date <= date?.Date.AddDays(-31) && t.DataJson?.ApprovedDate?.Date >= date?.Date.AddDays(-45) && (t.DataJson?.PaidDate?.Date >= date.Value.Date.AddDays(-45) || t.DataJson.PaidDate == null)))?.Select(t => JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t.DataJson?.FormData))).Select(t => t.quanityNumber * t.priceAmount).Sum()), 3);
                dtRow["> 45 Days"] = Math.Round((double)(dataSetsResult?.Where(t => t.DataJson?.ApprovedDate != null && (t.DataJson?.ApprovedDate?.Date <= date?.Date.AddDays(-45) && (t.DataJson?.PaidDate?.Date > date?.Date.AddDays(-45) || t.DataJson?.PaidDate?.Date == null)))?.Select(t => JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t.DataJson?.FormData))).Select(t => t?.quanityNumber * t?.priceAmount)?.Sum()), 3);
                dtRow["Date"] = date?.ToString("MMM yy"); dtRow["Date"] = date?.ToString("MMM yy");
                ordersTable.Rows.Add(dtRow);
            }

            DataRow dtRowAVG = ordersTable.NewRow();
            dtRowAVG["0-15Days"] = Math.Round((double)(ordersTable.Compute("AVG([0-15Days])", "")), 3);
            dtRowAVG["15-30Days"] = Math.Round((double)(ordersTable.Compute("AVG([15-30Days])", "")), 3);
            dtRowAVG["31-45Days"] = Math.Round((double)(ordersTable.Compute("AVG([31-45Days])", "")), 3);
            dtRowAVG["> 45 Days"] = Math.Round((double)(ordersTable.Compute("AVG([> 45 Days])", "")), 3);
            dtRowAVG["Date"] = "1H22 Average";
            ordersTable.Rows.Add(dtRowAVG);

            return ordersTable;
        }

        public dynamic GetPayablesAgingByCounterparty(DashboardAPIInputModel dashboardAPIInputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetPayablesAgingByCounterparty", "Trading Service"));

            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = "Invoice Queue",
                Type = "string"
            });

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "InvoiceType",
                KeyValue = "Payable",
                Type = "string"
            });

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "IsGeneratedToPayables",
                KeyValue = "true",
                Type = "boolean"
            });

            //ClientInvoiceStatus clientInvoiceStatus = new ClientInvoiceStatus();
            //List<ClientInvoiceStatus> clientInvoiceStatuses = _clientRepository.GetAllInvoicePaymentStatus(clientInvoiceStatus, loggedInContext, validationMessages);

            //paramsJsons.Add(new ParamsJsonModel()
            //{
            //    KeyName = "InvoicePaymentStatusId",
            //    KeyValue = string.Join(",", clientInvoiceStatuses.Where(t => (t.StatusName == "Disputed" || t.StatusName == "Approved")).Select(t => t.InvoiceStatusId.ToString())),
            //    Type = "ListFilter"
            //});
            dashboardAPIInputModel = dashboardAPIInputModel == null ? new DashboardAPIInputModel() : dashboardAPIInputModel;
            DateTime today = DateTime.Now;
            dashboardAPIInputModel.DateTo = dashboardAPIInputModel.DateTo == null ? new DateTime(today.Year, today.Month, DateTime.DaysInMonth(today.Year, today.Month)) : dashboardAPIInputModel.DateTo;
            dashboardAPIInputModel.DateFrom = dashboardAPIInputModel.DateFrom == null ? new DateTime(today.Year, today.Month, DateTime.DaysInMonth(today.Year, today.Month)).AddMonths(-6) : dashboardAPIInputModel.DateFrom;

            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);

            var dataSetsResult = _dataSetService.SearchDataSets(null, null, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult();

            ClientInputModel clientInputModel = new ClientInputModel();
            List<ClientOutputModel> clientOutputModels = _clientRepository.GetClients(clientInputModel, loggedInContext, validationMessages);

            DataTable ordersTable = new DataTable();
            ordersTable.Columns.Add(new DataColumn { ColumnName = "Name" });
            ordersTable.Columns.Add(new DataColumn { ColumnName = "0-15Days", DataType = typeof(Double) });
            ordersTable.Columns.Add(new DataColumn { ColumnName = "15-30Days", DataType = typeof(Double) });
            ordersTable.Columns.Add(new DataColumn { ColumnName = "31-45Days", DataType = typeof(Double) });
            ordersTable.Columns.Add(new DataColumn { ColumnName = "> 45 Days", DataType = typeof(Double) });

            List<Guid?> clientIds = new List<Guid?>();
            clientIds = dataSetsResult.Where(t => t.DataJson.ClientId != null).Select(x => x.DataJson.BrokerId).Distinct().ToList();

            foreach (var clientId in clientIds)
            {
                var name = (from u in clientOutputModels where u.ClientId == clientId select u.FirstName + " " + u.LastName).FirstOrDefault();

                if (name != null)
                {
                    DataRow dtRow = ordersTable.NewRow();

                    dtRow["0-15Days"] = Math.Round((double)(dataSetsResult?.Where(t => t.DataJson?.ApprovedDate != null && t.DataJson?.BrokerId == clientId && (t.DataJson?.ApprovedDate?.Date <= today.Date && t.DataJson?.ApprovedDate?.Date >= today.AddDays(-15).Date && (t.DataJson?.PaidDate?.Date >= today.AddDays(-15).Date || t.DataJson?.PaidDate?.Date >= today.Date || t.DataJson?.PaidDate == null)))?.Select(t => JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t.DataJson?.FormData)))?.Select(t => t?.quanityNumber * t?.priceAmount)?.Sum()), 3);
                    dtRow["15-30Days"] = Math.Round((double)(dataSetsResult?.Where(t => t.DataJson?.ApprovedDate != null && t.DataJson?.BrokerId == clientId && (t.DataJson?.ApprovedDate?.Date <= today.AddDays(-16).Date && t.DataJson?.ApprovedDate?.Date >= today.AddDays(-30).Date && (t.DataJson?.PaidDate >= today.AddDays(-30).Date || t.DataJson?.PaidDate == null)))?.Select(t => JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t.DataJson?.FormData)))?.Select(t => t?.quanityNumber * t?.priceAmount)?.Sum()), 3);
                    dtRow["31-45Days"] = Math.Round((double)(dataSetsResult?.Where(t => t.DataJson?.ApprovedDate != null && t.DataJson?.BrokerId == clientId && (t.DataJson?.ApprovedDate?.Date <= today.AddDays(-31).Date && t.DataJson?.ApprovedDate?.Date >= today.AddDays(-45).Date && (t.DataJson?.PaidDate >= today.AddDays(-45).Date || t.DataJson?.PaidDate == null)))?.Select(t => JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t.DataJson?.FormData)))?.Select(t => t?.quanityNumber * t?.priceAmount)?.Sum()), 3);
                    dtRow["> 45 Days"] = Math.Round((double)(dataSetsResult?.Where(t => t.DataJson?.ApprovedDate != null && t.DataJson?.BrokerId == clientId && (t.DataJson?.ApprovedDate?.Date <= today.AddDays(-45).Date && (t.DataJson?.PaidDate >= today.Date.AddDays(-45) || t.DataJson?.PaidDate == null)))?.Select(t => JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t.DataJson?.FormData)))?.Select(t => t?.quanityNumber * t?.priceAmount)?.Sum()), 3);
                    dtRow["Name"] = (from u in clientOutputModels where u.ClientId == clientId select u.FirstName + " " + u.LastName).FirstOrDefault();
                    ordersTable.Rows.Add(dtRow);
                }
            }

            return ordersTable;
        }

        public List<MarginWalkOutputModel> GetMarginWalk(DashboardAPIInputModel dashboardAPIInputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetPayablesAgingByCounterparty", "Trading Service"));

            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = "Purchase,Sale",
                Type = "ListFilter"
            });

            DateTime today = DateTime.Now;
            dashboardAPIInputModel.DateFrom = dashboardAPIInputModel.DateFrom == null ? new DateTime(today.Year, today.Month, DateTime.DaysInMonth(today.Year, today.Month)).AddMonths(-5) : dashboardAPIInputModel.DateFrom;
            dashboardAPIInputModel.DateTo = dashboardAPIInputModel.DateTo == null ? dashboardAPIInputModel.DateFrom.Value.AddMonths(5) : dashboardAPIInputModel.DateTo;

            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);

            var dataSetsResult = _dataSetService.SearchDataSets(null, null, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().Where(t => (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo)).ToList();

            var purchases = dataSetsResult.Where(t => (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo && t.DataJson.ContractType == "Purchase")).Select(t => JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t.DataJson?.FormData))).ToList();
            var sales = dataSetsResult.Where(t => (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo && t.DataJson.ContractType == "Sale")).Select(t => JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t.DataJson?.FormData))).ToList();

            MarginWalkOutputModel marginWalkOutputModel = new MarginWalkOutputModel();

            List<FormOutputModel> formOutputModels = new List<FormOutputModel>();

            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.IsForAPI = true;
            List<ClientOutputModel> clientOutputModels = _clientRepository.GetClients(clientInputModel, loggedInContext, validationMessages);

            formOutputModels = dataSetsResult.Select(a => new FormOutputModel() { brokerPercentage = a.DataJson.BrokeragePercentage }).ToList();

            Parallel.ForEach(dataSetsResult.Where(t => t.DataJson.BrokerId != null && t.DataJson.BrokeragePercentage != 0), data =>
            {

                FormOutputModel formOutput = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(data.DataJson.FormData));

                if (formOutput != null)
                {
                    formOutputModels.Add(new FormOutputModel
                    {
                        brokerPercentage = data.DataJson.BrokeragePercentage,
                        quanityNumber = formOutput.quanityNumber,
                        priceAmount = formOutput.priceAmount
                    });
                }

            });

            List<ParamsJsonModel> jsonModels = new List<ParamsJsonModel>();
            jsonModels.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = "Invoice Queue",
                Type = "string"
            });

            jsonModels.Add(new ParamsJsonModel()
            {
                KeyName = "InvoiceType",
                KeyValue = "Payable",
                Type = "string"
            });

            jsonModels.Add(new ParamsJsonModel()
            {
                KeyName = "IsGeneratedToPayables",
                KeyValue = "true",
                Type = "boolean"
            });

            string InvoiceParams = JsonConvert.SerializeObject(jsonModels);

            var invoiceDataSets = _dataSetService.SearchDataSets(null, null, null, InvoiceParams, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().Where(t => (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo)).ToList();

            List<Guid?> surveyers = new List<Guid?>();
            surveyers = clientOutputModels?.Where(t => t.ClientTypeName == "Surveyor")?.Select(t => t.ClientId)?.ToList();

            List<Guid?> bankers = new List<Guid?>();
            bankers = clientOutputModels?.Where(t => t.ClientTypeName == "Banker")?.Select(t => t.ClientId)?.ToList();

            var surveyerData = from t1 in surveyers
                               join t2 in invoiceDataSets on t1 equals t2.DataJson.ClientId
                               select new { FormOutputModel = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t2?.DataJson?.FormData)) };

            List<Guid?> blAgents = new List<Guid?>();
            blAgents = clientOutputModels?.Where(t => t.ClientTypeName == "Switch BL Agent")?.Select(t => t.ClientId)?.ToList();

            var blAgentData = from t1 in blAgents
                              join t2 in invoiceDataSets on t1 equals t2.DataJson.ClientId
                              select new { FormOutputModel = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t2?.DataJson?.FormData)) };

            var bankerData = from t1 in bankers
                             join t2 in invoiceDataSets on t1 equals t2.DataJson.ClientId
                             select new { FormOutputModel = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t2?.DataJson?.FormData)) };

            marginWalkOutputModel.Gross_Margin = Decimal.Parse(Math.Round((decimal)(sales.Where(z => z != null && (z.priceAmount != null && z.quanityNumber != null)).Select(t => t.priceAmount * t.quanityNumber)?.Sum() - purchases.Where(z => z != null && (z.priceAmount != null && z.quanityNumber != null)).Select(t => t.priceAmount * t.quanityNumber).ToList().Sum()), 3).ToString(), System.Globalization.NumberStyles.Float);
            marginWalkOutputModel.Commission = Math.Round((decimal)formOutputModels?.Select(t => (t.brokerPercentage / 100.00) * (t.priceAmount * t.quanityNumber))?.Sum(), 3);
            marginWalkOutputModel.Surveyor_Fees = Math.Round((decimal)surveyerData?.Select(t => t.FormOutputModel.quanityNumber * t.FormOutputModel.priceAmount)?.Sum(), 3);
            marginWalkOutputModel.Bank_Charges = Math.Round((decimal)bankerData?.Select(t => t.FormOutputModel.quanityNumber * t.FormOutputModel.priceAmount)?.Sum(), 3);
            marginWalkOutputModel.BLAgent_Fees = Math.Round((decimal)blAgentData?.Select(t => t.FormOutputModel.quanityNumber * t.FormOutputModel.priceAmount)?.Sum(), 3);
            marginWalkOutputModel.Net_Margin = Decimal.Parse(Math.Round((decimal)(marginWalkOutputModel.Gross_Margin - marginWalkOutputModel.Commission - marginWalkOutputModel.Bank_Charges -
                                         marginWalkOutputModel.BLAgent_Fees - marginWalkOutputModel.Demurrage - marginWalkOutputModel.Legal_Expensess - marginWalkOutputModel.Quality_Related_Charges
                                         - marginWalkOutputModel.Surveyor_Fees), 3).ToString(), System.Globalization.NumberStyles.Float);

            List<MarginWalkOutputModel> marginWalkOutputs = new List<MarginWalkOutputModel>();
            marginWalkOutputs.Add(marginWalkOutputModel);

            return marginWalkOutputs;
        }

        public dynamic GetPurchaseContractStatus(DashboardAPIInputModel dashboardAPIInputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetPayablesAgingByCounterparty", "Trading Service"));

            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();

            dashboardAPIInputModel = dashboardAPIInputModel == null ? new DashboardAPIInputModel() : dashboardAPIInputModel;

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = dashboardAPIInputModel.ReportType == null ? "Purchase" : "Sale",
                Type = "string"
            });

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "PurchaseStatusReport"
            });

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "FormDataLookUpFilter"
            });

            DateTime today = DateTime.Now;
            dashboardAPIInputModel.DateFrom = dashboardAPIInputModel.DateFrom == null ? new DateTime(today.Year, today.Month, DateTime.DaysInMonth(today.Year, today.Month)).AddMonths(-5) : dashboardAPIInputModel.DateFrom;
            dashboardAPIInputModel.DateTo = dashboardAPIInputModel.DateTo == null ? dashboardAPIInputModel.DateFrom.Value.AddMonths(5) : dashboardAPIInputModel.DateTo;

            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);

            var dataSetsResult = _dataSetService.SearchDataSets(null, null, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().Where(t => (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo)).ToList();

            ClientInputModel clientInputModel = new ClientInputModel();
            clientInputModel.IsForAPI = true;
            List<ClientOutputModel> clientOutputModels = _clientRepository.GetClients(clientInputModel, loggedInContext, validationMessages);

            CurrencySearchCriteriaInputModel currencySearchCriteriaInputModel = new CurrencySearchCriteriaInputModel();
            List<CurrencyOutputModel> currencyOutputs = _masterTable.GetCurrencyList(currencySearchCriteriaInputModel, validationMessages, loggedInContext);


            ContractStatusModel contractStatusModel = new ContractStatusModel();
            var statuses = _clientService.GetAllContractStatus(contractStatusModel, loggedInContext, validationMessages);

            List<ProductListOutPutModel> commoadityList = _clientService.GetProductsList(new MasterProduct(), loggedInContext, validationMessages);

            int orderNo = 0;

            List<SalesContractOutputModel> salesContractOutputModels = new List<SalesContractOutputModel>();
            //foreach (var data in dataSetsResult)
            if (dashboardAPIInputModel.ReportType == null)
            {
                List<PurchaseContractOutputModel> purchaseContractOutputModels = new List<PurchaseContractOutputModel>();

                DataTable ordersTable = new DataTable();
                ordersTable.Columns.Add(new DataColumn { ColumnName = "SI" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Supplier Name" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Contract #" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Incoterm" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Commodity" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Contract Date" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Currency" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Quantity" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Price / Ton" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Value" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Contracting" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Vessel Linking" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Surveyor Reporting" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "LC Payment" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "BL Shared" });


                //Parallel.ForEach(dataSetsResult, data =>
                foreach (var data in dataSetsResult)
                {
                    var purchase = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(data.DataJson?.FormData));

                    var steps = new List<PurchaseExecutionDuplicateModel>();

                    if (data.DataJson?.ExecutionSteps != null)
                    {
                        steps = JsonConvert.DeserializeObject<List<ExecutionStepsDataSetOutputDuplicateModel>>(JsonConvert.SerializeObject(data.DataJson?.ExecutionSteps))?.Select(t => t.DataJson).ToList();
                    }

                    string incoterms = purchase?.incoterms1?.ToString();
                    if (incoterms == "{}")
                    {
                        incoterms = null;
                    }

                    string Incoterm = incoterms == "freeOnBoard" ? "FOB (Free on Board)" :
                                      incoterms == "freeCarrier" ? "FCA (Free Carrier)" :
                                      incoterms == "exWorks" ? "EXW (Ex Works)" :
                                      incoterms == "freeAlongsideShip" ? "FAS (Free Alongside Ship)" :
                                      incoterms == "deliveredAtPlace" ? "DAP (Delivered at Place)" :
                                      incoterms == "deliveredAtTerminal" ? "DAT (Delivered at Terminal)" :
                                      incoterms == "costInsuranceAndFreight" ? "CIF (Cost, Insurance and Freight" :
                                      incoterms == "carriageAndInsurancePaidTo" ? "CIP (Carriage and Insurance Paid to)" :
                                      incoterms == "costAndFreight" ? "CFR (Cost and Freight)" :
                                      incoterms == "deliveryDutyPaid" ? "DDP (Delivery Duty Paid)" :
                                      incoterms == "carriagePaidTo" ? "CPT (Carriage paid to)" :
                                       null;

                    string unit = purchase?.quantityMeasurementUnit == "metricTonnes" ? "MT" :
                                    purchase?.quantityMeasurementUnit == "pound" ? "LBS" :
                                    purchase?.quantityMeasurementUnit == "gallons" ? "GL" :
                                    purchase?.quantityMeasurementUnit == "kilogram" ? "KG" :
                                    purchase?.quantityMeasurementUnit == "cubicMeter" ? "CBM" :
                                    "";
                    orderNo = orderNo + 1;
                    string vesselStatus = data.DataJson.VesselContractStatusId != null ? (from u in statuses where u.ContractStatusId == data.DataJson.VesselContractStatusId select u.StatusName)?.FirstOrDefault() : "Not Linked";
                    var lcPayment = steps.Any(t => t.StatusName == "Not Started") ? "Not Started" :
                             steps.Any(t => t.StatusName == "Initiated") ? "Initiated" :
                             steps.Any(t => t.StatusName == "Rejected") ? "Rejected" :
                             steps.Any(t => t.StatusName == "Accepted") ? "Accepted" :
                             steps.Any(t => t.StatusName == "Completed") ? "Completed" : vesselStatus == "Linked" ? "Not Started" : "Not Linked";


                    DataRow dtRow = ordersTable.NewRow();
                    dtRow["SI"] = orderNo;
                    dtRow["Supplier Name"] = data.DataJson.ClientId != null ? (from u in clientOutputModels where u.ClientId == data.DataJson.ClientId select u.FirstName + " " + u.LastName)?.FirstOrDefault() : null;
                    dtRow["Contract #"] = purchase?.ContractNumber;
                    dtRow["Contract Date"] = data?.CreatedDateTime?.ToString("dd-MMM-yyyy");
                    dtRow["Currency"] = purchase?.priceCurrency != null ? (from u in currencyOutputs where u.CurrencyId == purchase.priceCurrency select u.CurrencyCode)?.FirstOrDefault() : null;
                    dtRow["Incoterm"] = Incoterm != null ? Incoterm : "Not Linked";
                    dtRow["Commodity"] = purchase?.commodityName != null && purchase?.commodityName != string.Empty ? (from c in commoadityList where c.ProductId == Guid.Parse(purchase.commodityName) select c.ProductName)?.FirstOrDefault() : null;
                    dtRow["Quantity"] = purchase?.quanityNumber?.ToString("#,#") != null ? purchase?.quanityNumber?.ToString("#,#") + " " + unit : null;
                    dtRow["Price / Ton"] = purchase?.priceAmount?.ToString("#,#");
                    dtRow["Value"] = (purchase?.priceAmount * purchase?.quanityNumber)?.ToString("#,#");
                    dtRow["Contracting"] = data.DataJson.StatusId != null ? (from u in statuses where u.ContractStatusId == data.DataJson.StatusId select u.StatusName)?.FirstOrDefault() : null;
                    dtRow["Vessel Linking"] = vesselStatus;
                    dtRow["Surveyor Reporting"] = steps?.Count > 0 ? (from c in steps where c.StepName == "Load Port Surveyor inspection report" select c.StatusName)?.FirstOrDefault() : vesselStatus == "Linked" ? "Not Started" : "Not Linked";
                    dtRow["LC Payment"] = lcPayment;
                    dtRow["BL Shared"] = steps?.Count > 0 ? (from c in steps where c.StepName == "Load Port Surveyor inspection report" select c.StatusName)?.FirstOrDefault() : vesselStatus == "Linked" ? "Not Started" : "Not Linked"; ;

                    ordersTable.Rows.Add(dtRow);
                };

                return ordersTable;

            }
            else
            {

                DataTable ordersTable = new DataTable();
                ordersTable.Columns.Add(new DataColumn { ColumnName = "SI" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Buyer Name" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Contract #" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Incoterm" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Commodity" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Contract Date" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Currency" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Price / Ton" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Quantity" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Value" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Contracting" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Vessel Linking" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "Surveyor Reporting" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "LC Payment" });
                ordersTable.Columns.Add(new DataColumn { ColumnName = "BL Shared" });

                Parallel.ForEach(dataSetsResult, data =>
                {
                    var purchase = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(data.DataJson?.FormData));

                    string vesselStatus = data.DataJson.VesselContractStatusId != null ? (from u in statuses where u.ContractStatusId == data.DataJson.VesselContractStatusId select u.StatusName)?.FirstOrDefault() : "Not Linked";

                    var steps = new List<PurchaseExecutionDuplicateModel>();

                    if (data.DataJson?.ExecutionSteps != null)
                    {
                        steps = JsonConvert.DeserializeObject<List<ExecutionStepsDataSetOutputDuplicateModel>>(JsonConvert.SerializeObject(data.DataJson?.ExecutionSteps))?.Select(t => t.DataJson).ToList();
                    }

                    var lcPayment = steps.Any(t => t.StatusName == "Not Started") ? "Not Started" :
                                    steps.Any(t => t.StatusName == "Initiated") ? "Initiated" :
                                    steps.Any(t => t.StatusName == "Rejected") ? "Rejected" :
                                    steps.Any(t => t.StatusName == "Accepted") ? "Accepted" :
                                    steps.Any(t => t.StatusName == "Completed") ? "Completed" : null;

                    string incoterms = purchase?.incoterms1?.ToString();

                    if (incoterms == "{}")
                    {
                        incoterms = null;
                    }

                    string Incoterm = incoterms == "freeOnBoard" ? "FOB (Free on Board)" :
                                      incoterms == "freeCarrier" ? "FCA (Free Carrier)" :
                                      incoterms == "exWorks" ? "EXW (Ex Works)" :
                                      incoterms == "freeAlongsideShip" ? "FAS (Free Alongside Ship)" :
                                      incoterms == "deliveredAtPlace" ? "DAP (Delivered at Place)" :
                                      incoterms == "deliveredAtTerminal" ? "DAT (Delivered at Terminal)" :
                                      incoterms == "costInsuranceAndFreight" ? "CIF (Cost, Insurance and Freight" :
                                      incoterms == "carriageAndInsurancePaidTo" ? "CIP (Carriage and Insurance Paid to)" :
                                      incoterms == "costAndFreight" ? "CFR (Cost and Freight)" :
                                      incoterms == "deliveryDutyPaid" ? "DDP (Delivery Duty Paid)" :
                                      incoterms == "carriagePaidTo" ? "CPT (Carriage paid to)" :
                                       null;

                    string unit = purchase?.quantityMeasurementUnit == "metricTonnes" ? "MT" :
                                   purchase?.quantityMeasurementUnit == "pound" ? "LBS" :
                                   purchase?.quantityMeasurementUnit == "gallons" ? "GL" :
                                   purchase?.quantityMeasurementUnit == "kilogram" ? "KG" :
                                   purchase?.quantityMeasurementUnit == "cubicMeter" ? "CBM" :
                                   "";
                    orderNo = orderNo + 1;
                    DataRow dtRow = ordersTable.NewRow();
                    dtRow["SI"] = orderNo;
                    dtRow["Buyer Name"] = data.DataJson.ClientId != null ? (from u in clientOutputModels where u.ClientId == data.DataJson.ClientId select u.FirstName + " " + u.LastName)?.FirstOrDefault() : null;
                    dtRow["Contract #"] = purchase?.ContractNumber;
                    dtRow["Incoterm"] = Incoterm != null ? Incoterm : "Not Linked";
                    dtRow["Contract Date"] = data?.CreatedDateTime?.ToString("dd-MMM-yyyy");
                    dtRow["Currency"] = purchase?.priceCurrency != null ? (from u in currencyOutputs where u.CurrencyId == purchase.priceCurrency select u.CurrencyCode)?.FirstOrDefault() : null;
                    dtRow["Commodity"] = purchase?.commodityName != null && purchase?.commodityName != string.Empty ? (from c in commoadityList where c.ProductId == Guid.Parse(purchase.commodityName) select c.ProductName)?.FirstOrDefault() : null;
                    dtRow["Quantity"] = purchase?.quanityNumber?.ToString("#,#") != null ? purchase?.quanityNumber?.ToString("#,#") + " " + unit : null;
                    dtRow["Price / Ton"] = purchase?.priceAmount?.ToString("#,#");
                    dtRow["Value"] = (purchase?.priceAmount * purchase?.quanityNumber)?.ToString("#,#");
                    dtRow["Contracting"] = data.DataJson.StatusId != null ? (from u in statuses where u.ContractStatusId == data.DataJson.StatusId select u.StatusName)?.FirstOrDefault() : null;
                    dtRow["Vessel Linking"] = data.DataJson?.VesselContractStatusId != null ? (from u in statuses where u.ContractStatusId == data.DataJson.VesselContractStatusId select u.StatusName)?.FirstOrDefault() : "Not Linked";
                    dtRow["Surveyor Reporting"] = steps?.Count > 0 ? (from c in steps where (c.StepName == "Discharge  Port Surveyor inspection report" || c.StepName == "Discharge Port Surveyor inspection report") select c.StatusName)?.FirstOrDefault() : vesselStatus == "Linked" ? "Not Started" : "Not Linked";
                    dtRow["LC Payment"] = steps?.Count > 0 ? (from c in steps where c.StepName == "Laytime calculation" select c.StatusName)?.FirstOrDefault() : vesselStatus == "Linked" ? "Not Started" : "Not Linked";
                    dtRow["BL Shared"] = steps?.Count > 0 ? (from c in steps where c.StepName == "Switch Bill of Lading" select c.StatusName)?.FirstOrDefault() : vesselStatus == "Linked" ? "Not Started" : "Not Linked";

                    ordersTable.Rows.Add(dtRow);

                });





                return ordersTable;
            }


        }

        public List<StepsURLsGetOuputModel> GetExecutionStepsURLs(PurchaseExecutionModel purchaseExecution, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetExecutionStepsURLs", "Trading Service"));

            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = "ExecutionSteps",
                Type = "string"
            });

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "ContractId",
                KeyValue = purchaseExecution.ContractId.ToString(),
                Type = "guid"
            });

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "PurchaseId",
                KeyValue = purchaseExecution.PurchaseId.ToString(),
                Type = "guid"
            });

            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);

            var executionSteps = _dataSetService.SearchExecutionStepsDataSets(null, null, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages)?.GetAwaiter().GetResult().Where(t => (t.DataJson?.IsFileReUploaded == true || t.DataJson.StepName == "Q88" || t?.DataJson?.DocumentShippingInstructionsDetails != null))?.ToList();

            var contractDataSet = _dataSetService.SearchDataSets(purchaseExecution.ContractId, null, null, null, null, null, null, null, loggedInContext, validationMessages, null, null, null, null, null)?.GetAwaiter().GetResult()?.FirstOrDefault();
            var purchaseDataSet = _dataSetService.SearchDataSets(purchaseExecution.PurchaseId, null, null, null, null, null, null, null, loggedInContext, validationMessages, null, null, null, null, null)?.GetAwaiter().GetResult()?.FirstOrDefault();

            List<StepsURLsGetOuputModel> stepsURLsGetOuputs = new List<StepsURLsGetOuputModel>();

            FileApiServiceReturnModel documentList = new FileApiServiceReturnModel();


            if (contractDataSet.DataJson.RFQGuid != null)
            {
                FileSearchCriteriaInputModel fileSearchCriteriaInputModel = new FileSearchCriteriaInputModel();

                var documentSets = _documentStorageService.SearchFiles(null, contractDataSet.DataJson.RFQGuid, null,null,null, loggedInContext, validationMessages).GetAwaiter().GetResult()?.FirstOrDefault();

                if (documentSets != null)
                {
                    var document = JsonConvert.SerializeObject(documentSets);
                    documentList = JsonConvert.DeserializeObject<FileApiServiceReturnModel>(document);
                }
            }
            string shippingDocs = null;
            foreach (var stepOutput in executionSteps?.Where(t => (documentList?.FilePath != null || t?.DataJson?.StepName != "Q88")))
            {
                if (stepOutput.DataJson.StepName == "Documents per Shipping Instruction")
                {
                    List<DocumentsShippingInstructionsModel> documentsShippingInstructionsModel =
                    documentsShippingInstructionsModel = stepOutput?.DataJson?.DocumentShippingInstructionsDetails == null ? new List<DocumentsShippingInstructionsModel>() : stepOutput?.DataJson?.DocumentShippingInstructionsDetails;
                    List<string> list = documentsShippingInstructionsModel?.Select(t => t.ReUploadedUrl)?.ToList();
                    shippingDocs = string.Join(",", list);
                }

                var stepModel = new StepsURLsGetOuputModel();
                stepModel.DocumentId = stepOutput.Id;
                stepModel.DocumentName = stepOutput.DataJson.StepName;
                stepModel.DocumentUrl = stepOutput.DataJson.StepName == "Documents per Shipping Instruction" ? shippingDocs : stepOutput.DataJson.StepName == "Q88" ? documentList?.FilePath : stepOutput.DataJson?.ReUploadedUrl;
                stepsURLsGetOuputs.Add(stepModel);
            }

            JObject formfield = new JObject();

            if (contractDataSet != null)
            {
                formfield = (JObject)JsonConvert.DeserializeObject(contractDataSet?.DataJson?.FormData?.ToString());
            }

            JObject purchaseFormfield = new JObject();

            if (purchaseDataSet != null)
            {
                purchaseFormfield = (JObject)JsonConvert.DeserializeObject(purchaseDataSet?.DataJson?.FormData?.ToString());
            }

            var keyValueMap = new Dictionary<string, string>();
            var purchaseKeyValueMap = new Dictionary<string, string>();

            foreach (KeyValuePair<string, JToken> keyValuePair in formfield)
            {
                keyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
            }

            foreach (KeyValuePair<string, JToken> keyValuePair in purchaseFormfield)
            {
                purchaseKeyValueMap.Add(keyValuePair.Key, keyValuePair.Value.ToString());
            }

            if (contractDataSet != null)
            {
                var contractModel = new StepsURLsGetOuputModel();
                contractModel.DocumentId = contractDataSet.Id;
                contractModel.DocumentName = keyValueMap["contractNumber"];
                contractModel.DocumentUrl = contractDataSet?.DataJson?.ContractPdf;

                stepsURLsGetOuputs.Add(contractModel);
            }

            if (purchaseDataSet != null)
            {
                var purchaseContractModel = new StepsURLsGetOuputModel();
                purchaseContractModel.DocumentId = purchaseDataSet.Id;
                purchaseContractModel.DocumentName = purchaseKeyValueMap["contractNumber"];
                purchaseContractModel.DocumentUrl = purchaseDataSet?.DataJson?.ContractPdf;

                stepsURLsGetOuputs.Add(purchaseContractModel);
            }

            return stepsURLsGetOuputs?.WhereToList(t => (t?.DocumentUrl != null && t?.DocumentUrl != string.Empty));

        }

        public List<CommodityBrokerCostOutputModel> GetCommodityBrokerCost(DashboardAPIInputModel dashboardAPIInputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetPayablesAgingByCounterparty", "Trading Service"));
            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();
            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = "Purchase,Sale",
                Type = "ListFilter"
            });
            DateTime today = DateTime.Now;
            DateTime firstdatefmonth = new DateTime(today.Year, today.Month, 1).AddMonths(-5);
            DateTime lastDayOfMonth = new DateTime(today.Year, today.Month, 1).AddMonths(1).AddMinutes(-1);
            dashboardAPIInputModel.DateFrom = dashboardAPIInputModel.DateFrom == null ? firstdatefmonth : dashboardAPIInputModel.DateFrom;
            dashboardAPIInputModel.DateTo = dashboardAPIInputModel.DateTo == null ? lastDayOfMonth : dashboardAPIInputModel.DateTo;
            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);
            var dataSetsResult = _dataSetService.SearchDataSets(null, null, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().Where(t => (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo)).ToList();

            List<CommodityBrokerCostOutputModel> CommodityBrokerCostOutputModel = new List<CommodityBrokerCostOutputModel>();
            List<BrokerFormOutputModel> formOutputModels = new List<BrokerFormOutputModel>();
            Parallel.ForEach(dataSetsResult.Where(t => t.DataJson.BrokerId != null && t.DataJson.BrokeragePercentage != 0 && (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo)), data =>
            {
                FormOutputModel formOutput = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(data.DataJson.FormData));
                if (formOutput != null)
                {
                    formOutputModels.Add(new BrokerFormOutputModel
                    {
                        quanityNumber = formOutput.quanityNumber,
                        priceAmount = formOutput.priceAmount,
                        brokerPercentage = data.DataJson.BrokeragePercentage,
                        _Datetime = data.CreatedDateTime ?? DateTime.Now,
                        month = data.CreatedDateTime?.ToString("MMM-yy")

                    });
                }
            });
            var BrokeroutputValue = formOutputModels.
                Select(k => new { m_name = k.month, k._Datetime.Year, k._Datetime.Month, k.priceAmount, k.quanityNumber, k.brokerPercentage }).
                GroupBy(x => new
                {
                    x.Year,
                    x.Month,
                    x.m_name,
                }, (key, group) => new
                {
                    year = key.Year,
                    month = key.m_name,
                    Months = key.Month,
                    cost = group.Sum(k => (k?.brokerPercentage / 100) * (k?.priceAmount * k?.quanityNumber))
                }).ToList();

            var monthsList = Enumerable.Range(0, 6)
                             .Select(i => lastDayOfMonth.AddMonths(i - 5))
                             .Select(date => date.ToString("MMM-yy"));

            foreach (var data in monthsList)
            {
                CommodityBrokerCostOutputModel obj = new CommodityBrokerCostOutputModel();
                obj.Date = data;
                obj.Commission = (BrokeroutputValue.Where(x => x.month == obj.Date).Select(x => x.cost).FirstOrDefault()) != null ?
                                 Math.Round(Convert.ToDouble(BrokeroutputValue.Where(x => x.month == obj.Date).Select(x => x.cost).FirstOrDefault()), 3) : 0;
                CommodityBrokerCostOutputModel.Add(obj);
            }
            return CommodityBrokerCostOutputModel;
        }

        public List<CommissionandCostOutputModel> GetCommissionandOtherCost(DashboardAPIInputModel dashboardAPIInputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetPayablesAgingByCounterparty", "Trading Service"));
            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();
            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = "Purchase,Sale",
                Type = "ListFilter"
            });
            DateTime today = DateTime.Now;
            DateTime firstdatefmonth = new DateTime(today.Year, today.Month, 1).AddMonths(-5);
            DateTime lastDayOfMonth = new DateTime(today.Year, today.Month, 1).AddMonths(1).AddMinutes(-1);
            dashboardAPIInputModel.DateFrom = dashboardAPIInputModel.DateFrom == null ? firstdatefmonth : dashboardAPIInputModel.DateFrom;
            dashboardAPIInputModel.DateTo = dashboardAPIInputModel.DateTo == null ? lastDayOfMonth : dashboardAPIInputModel.DateTo;
            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);
            var dataSetsResult = _dataSetService.SearchDataSets(null, null, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().Where(t => (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo)).ToList();

            List<CommissionandCostOutputModel> CommodityBrokerCostOutputModel = new List<CommissionandCostOutputModel>();
            List<BrokerFormOutputModel> formOutputModels = new List<BrokerFormOutputModel>();
            Parallel.ForEach(dataSetsResult.Where(t => t.DataJson.BrokerId != null && t.DataJson.BrokeragePercentage != 0 && (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo)), data =>
            {
                FormOutputModel formOutput = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(data.DataJson.FormData));
                if (formOutput != null)
                {
                    formOutputModels.Add(new BrokerFormOutputModel
                    {
                        quanityNumber = formOutput.quanityNumber,
                        priceAmount = formOutput.priceAmount,
                        brokerPercentage = data.DataJson.BrokeragePercentage,
                        _Datetime = data.CreatedDateTime ?? DateTime.Now,
                        month = data.CreatedDateTime?.ToString("MMM-yy"),
                        ContractType = "BrokerCommission"
                    });
                }
            });
            var BrokeroutputValue = formOutputModels.
                Select(k => new { m_name = k.month, k._Datetime.Year, k._Datetime.Month, k.priceAmount, k.quanityNumber, k.brokerPercentage, k.ContractType }).
                GroupBy(x => new { x.Year, x.Month, x.m_name, x.ContractType }, (key, group) => new
                { year = key.Year, month = key.m_name, Months = key.Month, cost = group.Sum(k => (k.brokerPercentage / 100) * (k.priceAmount * k.quanityNumber)), ContractType = key.ContractType }).ToList();


            ClientInputModel clientInputModel = new ClientInputModel();
            List<ClientOutputModel> clientOutputModels = _clientRepository.GetClients(clientInputModel, loggedInContext, validationMessages);
            List<ParamsJsonModel> jsonModels = new List<ParamsJsonModel>();
            jsonModels.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = "Invoice Queue",
                Type = "string"
            });

            jsonModels.Add(new ParamsJsonModel()
            {
                KeyName = "InvoiceType",
                KeyValue = "Payable",
                Type = "string"
            });

            jsonModels.Add(new ParamsJsonModel()
            {
                KeyName = "IsGeneratedToPayables",
                KeyValue = "true",
                Type = "boolean"
            });
            string InvoiceParams = JsonConvert.SerializeObject(jsonModels);
            var invoiceDataSets = _dataSetService.SearchDataSets(null, null, null, InvoiceParams, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().Where(t => (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo)).ToList();
            List<Guid?> surveyers = new List<Guid?>();
            List<BrokerFormOutputModel> SurveyorformOutputModels = new List<BrokerFormOutputModel>();
            surveyers = clientOutputModels?.Where(t => t.ClientTypeName == "Surveyor")?.Select(t => t.ClientId)?.ToList();
            var SurveyorData = from t1 in surveyers
                               join t2 in invoiceDataSets on t1 equals t2.DataJson.ClientId
                               select new { FormOutputModel = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t2?.DataJson?.FormData)), Createdatetime = t2.CreatedDateTime, month = t2.CreatedDateTime?.ToString("MMM-yy") };
            Parallel.ForEach(SurveyorData.Where(t => (t.Createdatetime >= dashboardAPIInputModel.DateFrom && t.Createdatetime <= dashboardAPIInputModel.DateTo)), data =>
            {
                FormOutputModel formOutput = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(data.FormOutputModel));
                if (formOutput != null)
                {
                    SurveyorformOutputModels.Add(new BrokerFormOutputModel
                    {
                        quanityNumber = formOutput.quanityNumber,
                        priceAmount = formOutput.priceAmount,
                        _Datetime = data.Createdatetime ?? DateTime.Now,
                        month = data.month,
                        ContractType = "Surveyor"
                    });
                }
            });
            var SurveyorFees = SurveyorformOutputModels.
               Select(k => new { m_name = k.month, k._Datetime.Year, k._Datetime.Month, k.priceAmount, k.quanityNumber, k.ContractType }).GroupBy(x => new { x.Year, x.Month, x.m_name, x.ContractType }, (key, group) => new
               { year = key.Year, month = key.m_name, Months = key.Month, surveyorfees = group.Sum(k => (k.priceAmount * k.quanityNumber)), ContractType = key.ContractType }).ToList();

            Parallel.ForEach(invoiceDataSets.Where(t => (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo)), data =>
            {
                FormOutputModel formOutput = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(data.DataJson.FormData));
                if (formOutput != null)
                {
                    formOutputModels.Add(new BrokerFormOutputModel
                    {
                        quanityNumber = formOutput.quanityNumber,
                        priceAmount = formOutput.priceAmount,
                        month = (data.CreatedDateTime ?? DateTime.Now).ToString("MMM-yy"),
                        _Datetime = (data.CreatedDateTime ?? DateTime.Now),
                        ContractType = "PayableInvoice"
                    });
                }
            });

            var invoice = formOutputModels.Select(k => new
            {
                m_name = k.month,
                k._Datetime.Year,
                k._Datetime.Month,
                k.priceAmount,
                k.quanityNumber,
                k.ContractType
            }).GroupBy(x => new
            {
                x.Year,
                x.Month,
                x.m_name,
                x.ContractType
            }, (key, group) => new
            {
                year = key.Year,
                month = key.m_name,
                Months = key.Month,
                PayableInvoice = group.Sum(k => k.priceAmount * k.quanityNumber),
                ContractType = key.ContractType
            }).ToList();
            var monthsList = Enumerable.Range(0, 6)
                             .Select(i => lastDayOfMonth.AddMonths(i - 5))
                             .Select(date => date.ToString("MMM-yy"));

            foreach (var data in monthsList)
            {
                CommissionandCostOutputModel obj = new CommissionandCostOutputModel();
                obj.Date = data;
                obj.Commission = (BrokeroutputValue.Where(x => x.month == obj.Date && x.ContractType == "BrokerCommission").Select(x => x.cost).FirstOrDefault()) != null ?
                                 Math.Round(Convert.ToDouble(BrokeroutputValue.Where(x => x.month == obj.Date && x.ContractType == "BrokerCommission").Select(x => x.cost).FirstOrDefault()), 3) : 0;
                obj.SurveyorFees = (SurveyorFees.Where(x => x.month == obj.Date && x.ContractType == "Surveyor").Select(x => x.surveyorfees).FirstOrDefault()) != null ?
                                 Math.Round(Convert.ToDouble(SurveyorFees.Where(x => x.month == obj.Date && x.ContractType == "Surveyor").Select(x => x.surveyorfees).FirstOrDefault()), 3) : 0;
                obj.Demurrage = (invoice?.Where(x => x.month == obj.Date && x.ContractType == "PayableInvoice").Select(x => x.PayableInvoice).FirstOrDefault()) != null ?
                                 Math.Round(Convert.ToDouble(invoice.Where(x => x.month == obj.Date && x.ContractType == "PayableInvoice").Select(x => x.PayableInvoice).FirstOrDefault()), 3) : 0;
                obj.LegalFees = (invoice?.Where(x => x.month == obj.Date && x.ContractType == "PayableInvoice").Select(x => x.PayableInvoice).FirstOrDefault()) != null ?
                                Math.Round(Convert.ToDouble(invoice.Where(x => x.month == obj.Date && x.ContractType == "PayableInvoice").Select(x => x.PayableInvoice).FirstOrDefault()), 3) : 0;
                obj.QualityRelatedCharges = (invoice?.Where(x => x.month == obj.Date && x.ContractType == "PayableInvoice").Select(x => x.PayableInvoice).FirstOrDefault()) != null ?
                                Math.Round(Convert.ToDouble(invoice.Where(x => x.month == obj.Date && x.ContractType == "PayableInvoice").Select(x => x.PayableInvoice).FirstOrDefault()), 3) : 0;
                CommodityBrokerCostOutputModel.Add(obj);
            }
            return CommodityBrokerCostOutputModel;
        }

        public List<AvergeMaginInForCPOOutputModel> GetAvergeMaginInForCPO(DashboardAPIInputModel dashboardAPIInputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetAvergeMaginInForCPO", "Trading Service"));
            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = "Vessel",
                Type = "string"
            });

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "IsContractLink",
                KeyValue = "true",
                Type = "boolean"
            });

            DateTime today = DateTime.Now;

            dashboardAPIInputModel.DateFrom = dashboardAPIInputModel.DateFrom == null ? new DateTime(today.Year, today.Month, 1).AddMonths(-5) : dashboardAPIInputModel.DateFrom;
            dashboardAPIInputModel.DateTo = dashboardAPIInputModel.DateTo == null ? new DateTime(today.Year, today.Month, 1).AddMonths(1).AddMinutes(-1) : dashboardAPIInputModel.DateTo;

            var lastSixMonths = Enumerable.Range(0, 6).Select(i => DateTime.Now.AddMonths(i - 5)).Select(date => date.ToString("MMM-yy"));

            List<AvergeOutputModel> avergeOutputModel = new List<AvergeOutputModel>();
            List<AvergeMaginInForCPOOutputModel> ResultList = new List<AvergeMaginInForCPOOutputModel>();
            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);

            var dataSetsResult = _dataSetService.SearchDataSets(null, null, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().Where(t => (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo)).ToList();

            if (dataSetsResult != null)
            {
                foreach (var key in dataSetsResult)
                {
                    var pc = key.PurchaseContracts;
                    var sc = key.SalesContracts;

                    Parallel.ForEach(pc.Where(t => (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo)), data =>
                    {
                        FormDataOutputModel formOutput = JsonConvert.DeserializeObject<FormDataOutputModel>(JsonConvert.SerializeObject(data.DataJson?.FormData));

                        string incoterms = formOutput?.incoterms1?.ToString();

                        if (incoterms == "{}")
                        {
                            incoterms = null;
                        }

                        if (incoterms == null)
                        {
                            incoterms = data.DataJson?.Incoterms;
                        }

                        if (formOutput != null)
                        {
                            avergeOutputModel.Add(new AvergeOutputModel
                            {
                                ContrantType = "purchases",
                                quanityNumber = formOutput.quanityNumber,
                                priceAmount = formOutput.priceAmount,
                                CreateDatetime = data.CreatedDateTime,
                                Date = data.CreatedDateTime ?? DateTime.Now,
                                Incoterm = incoterms,
                                //Incoterm = "FOB",
                                months = (data.CreatedDateTime ?? DateTime.Now).ToString("MMM-yy")
                            });
                        }
                    });

                    Parallel.ForEach(sc.Where(t => (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo)), data =>
                    {
                        FormDataOutputModel formOutput = JsonConvert.DeserializeObject<FormDataOutputModel>(JsonConvert.SerializeObject(data.DataJson?.FormData));

                        string incoterms = formOutput?.incoterms1?.ToString();

                        if (incoterms == "{}")
                        {
                            incoterms = null;
                        }

                        if (incoterms == null)
                        {
                            incoterms = data.DataJson?.Incoterms;
                        }

                        if (formOutput != null)
                        {
                            avergeOutputModel.Add(new AvergeOutputModel
                            {
                                ContrantType = "sales",
                                quanityNumber = formOutput.quanityNumber,
                                priceAmount = formOutput.priceAmount,
                                CreateDatetime = data.CreatedDateTime,
                                Date = data.CreatedDateTime ?? DateTime.Now,
                                Incoterm = incoterms,
                                //Incoterm = "FOB",
                                months = (data.CreatedDateTime ?? DateTime.Now).ToString("MMM-yy")
                            });
                        }
                    });
                }
            }
            var purchasedata = avergeOutputModel.Where(k => k.ContrantType == "purchases").Select(k => new { k.Date.Year, k.Date.Month, k.priceAmount, k.quanityNumber, k.Date, k.Incoterm, k.months }).GroupBy(x => new { x.Date.Year, x.Date.Month, x.months, x.Incoterm }, (key2, group) => new { year = key2.months, incoterm = key2.Incoterm, Purchase = group.Sum(k => k.priceAmount * k.quanityNumber), quanityNumber = group.Sum(k => k.quanityNumber) }).ToList();
            var salesdata = avergeOutputModel.Where(k => k.ContrantType == "sales").Select(k => new { k.Date.Year, k.Date.Month, k.priceAmount, k.quanityNumber, k.Date, k.Incoterm, k.months }).GroupBy(x => new { x.Date.Year, x.Date.Month, x.months, x.Incoterm }, (key2, group) => new { year = key2.months, incoterm = key2.Incoterm, sale = group.Sum(k => k.priceAmount * k.quanityNumber), quanityNumber = group.Sum(k => k.quanityNumber) }).ToList();
            var Result = from t1 in purchasedata join t2 in salesdata on new { t1.year, t1.incoterm } equals new { t2.year, t2.incoterm } select new { t1.year, t1.incoterm, result = (t2.sale - t1.Purchase) / (t1.quanityNumber + t2.quanityNumber) };
            var AvgResult = Result?.Select(a => new { TotalAvg = a.year, a.incoterm, a.result }).GroupBy(a => new { a.incoterm }, (key1, group) => new { date = "1H22 Average", incoterm = key1.incoterm, Avarage = group.Sum(a => a.result) / 6 });

            foreach (var data in lastSixMonths)
            {
                AvergeMaginInForCPOOutputModel obj = new AvergeMaginInForCPOOutputModel();
                obj.Date = data;
                obj.FOB = (Result?.Where(x => x.year == data && x.incoterm == "freeOnBoard").Select(x => x.result).FirstOrDefault()) != 0 ? Math.Round(Convert.ToDouble(Result?.Where(x => x.year == data && x.incoterm == "freeOnBoard").Select(x => x.result).FirstOrDefault()), 3) : 0;
                obj.CFR = (Result?.Where(x => x.year == data && x.incoterm == "costAndFreight").Select(x => x.result).FirstOrDefault()) != 0 ? Math.Round(Convert.ToDouble(Result?.Where(x => x.year == data && x.incoterm == "costAndFreight").Select(x => x.result).FirstOrDefault()), 3) : 0;
                ResultList.Add(obj);
            }
            ResultList.Add(new AvergeMaginInForCPOOutputModel
            {
                Date = "1H22 Average",
                FOB = Math.Round(Convert.ToDouble(AvgResult?.Where(t => t.incoterm == "freeOnBoard")?.FirstOrDefault()?.Avarage), 3),
                CFR = Math.Round(Convert.ToDouble(AvgResult?.Where(t => t.incoterm == "costAndFreight")?.FirstOrDefault()?.Avarage), 3)
            });
            return ResultList;
        }

        public List<CostsotherthanCommodityBrokerageOutputModel> GetCostsotherthanCommodityBrokerage(DashboardAPIInputModel dashboardAPIInputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            dashboardAPIInputModel = dashboardAPIInputModel == null ? new DashboardAPIInputModel() : dashboardAPIInputModel;
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetCostsotherthanCommodityBrokerage", "Trading Service"));
            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();

            var lastSixMonths = Enumerable.Range(0, 6).Select(i => DateTime.Now.AddMonths(i - 5)).Select(date => date.ToString("MMM-yy"));

            List<FormCostsBrokerageModel> formOutputModels = new List<FormCostsBrokerageModel>();
            List<CostsotherthanCommodityBrokerageOutputModel> ResultList = new List<CostsotherthanCommodityBrokerageOutputModel>();
            CostsotherthanCommodityBrokerageOutputModel commodityBrokerCostOutput = new CostsotherthanCommodityBrokerageOutputModel();

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = "Invoice Queue",
                Type = "string"
            });

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "InvoiceType",
                KeyValue = "Payable",
                Type = "string"
            });

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "IsGeneratedToPayables",
                KeyValue = "true",
                Type = "boolean"
            });

            ClientInputModel clientInputModel = new ClientInputModel();
            List<ClientOutputModel> clientOutputModels = _clientRepository.GetClients(clientInputModel, loggedInContext, validationMessages);

            DateTime today = DateTime.Now;
            dashboardAPIInputModel.DateFrom = dashboardAPIInputModel.DateFrom == null ? new DateTime(today.Year, today.Month, 1).AddMonths(-5) : dashboardAPIInputModel.DateFrom;
            dashboardAPIInputModel.DateTo = dashboardAPIInputModel.DateTo == null ? new DateTime(today.Year, today.Month, 1).AddMonths(1).AddMinutes(-1) : dashboardAPIInputModel.DateTo;

            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);
            var dataSetsResult = _dataSetService.SearchDataSets(null, null, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult();

            List<Guid?> surveyers = new List<Guid?>();
            surveyers = clientOutputModels?.Where(t => t.ClientTypeName == "Surveyor")?.Select(t => t.ClientId)?.ToList();

            var SurveyorData = from t1 in surveyers join t2 in dataSetsResult on t1 equals t2.DataJson.ClientId select new { FormOutputModel = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t2?.DataJson?.FormData)), Createdatetime = t2.CreatedDateTime, formOutputModels, month = t2.CreatedDateTime?.ToString("MMM-yy") };

            Parallel.ForEach(SurveyorData.Where(t => (t.Createdatetime >= dashboardAPIInputModel.DateFrom && t.Createdatetime <= dashboardAPIInputModel.DateTo)), data =>
            {
                FormCostsBrokerageModel formOutput = JsonConvert.DeserializeObject<FormCostsBrokerageModel>(JsonConvert.SerializeObject(data.FormOutputModel));
                if (formOutput != null)
                {
                    formOutputModels.Add(new FormCostsBrokerageModel
                    {
                        quanityNumber = formOutput.quanityNumber,
                        priceAmount = formOutput.priceAmount,
                        Date = data.Createdatetime,
                        MonthYear = data.month,
                        CreatedDateTime = data.Createdatetime ?? DateTime.Now,
                        ContractType = "Surveyor"
                    });
                }
            });

            var SurveyorFees = formOutputModels.Select(k => new { m_name = k.MonthYear, k.CreatedDateTime.Year, k.CreatedDateTime.Month, k.CreatedDateTime, k.priceAmount, k.quanityNumber, k.MonthYear, k.ContractType }).GroupBy(x => new { x.Year, x.Month, x.m_name, x.ContractType }, (key, group) => new { year = key.Year, month = key.m_name, Months = key.Month, ContractType = key.ContractType, surveyorfees = group.Sum(k => (k.priceAmount * k.quanityNumber)) }).ToList();
            Parallel.ForEach(dataSetsResult.Where(t => (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo)), data =>
            {
                FormOutputModel formOutput = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(data.DataJson?.FormData));
                if (formOutput != null)
                {
                    formOutputModels.Add(new FormCostsBrokerageModel
                    {
                        quanityNumber = formOutput.quanityNumber,
                        priceAmount = formOutput.priceAmount,
                        Date = data.CreatedDateTime,
                        MonthYear = (data.CreatedDateTime ?? DateTime.Now).ToString("MMM-yy"),
                        CreatedDateTime = (data.CreatedDateTime ?? DateTime.Now),
                        ContractType = "PayableInvoice"
                    });
                }
            });

            var invoice = formOutputModels.Select(k => new { k.CreatedDateTime.Year, k.CreatedDateTime.Month, k.CreatedDateTime, k.priceAmount, k.quanityNumber, k.MonthYear, k.ContractType }).GroupBy(x => new { x.Year, x.Month, x.MonthYear, x.ContractType }, (key, group) => new { MonthYear = key.MonthYear, ContractType = key.ContractType, PayableInvoice = group.Sum(k => k.priceAmount * k.quanityNumber) }).ToList();

            foreach (var item in lastSixMonths)
            {
                CostsotherthanCommodityBrokerageOutputModel obj = new CostsotherthanCommodityBrokerageOutputModel();
                obj.Date = item;
                obj.Demurrage = (invoice?.Where(x => x.MonthYear == obj.Date && x.ContractType == "PayableInvoice").Select(x => x.PayableInvoice).FirstOrDefault()) != 0 ?
                Math.Round(Convert.ToDouble(invoice?.Where(x => x.MonthYear == obj.Date && x.ContractType == "PayableInvoice").Select(x => x.PayableInvoice).FirstOrDefault()), 3) : 0;
                obj.LegalFees = (invoice?.Where(x => x.MonthYear == obj.Date && x.ContractType == "PayableInvoice").Select(x => x.PayableInvoice).FirstOrDefault()) != 0 ?
                Math.Round(Convert.ToDouble(invoice?.Where(x => x.MonthYear == obj.Date && x.ContractType == "PayableInvoice").Select(x => x.PayableInvoice).FirstOrDefault()), 3) : 0;
                obj.QualityRelatedCharges = (invoice?.Where(x => x.MonthYear == obj.Date && x.ContractType == "PayableInvoice").Select(x => x.PayableInvoice).FirstOrDefault()) != 0 ?
                Math.Round(Convert.ToDouble(invoice?.Where(x => x.MonthYear == obj.Date && x.ContractType == "PayableInvoice").Select(x => x.PayableInvoice).FirstOrDefault()), 3) : 0;
                obj.SurveyorFees = (SurveyorFees?.Where(x => x.month == obj.Date && x.ContractType == "Surveyor").Select(x => x.surveyorfees).FirstOrDefault()) != 0 ?
                Math.Round(Convert.ToDouble(SurveyorFees?.Where(x => x.month == obj.Date && x.ContractType == "Surveyor").Select(x => x.surveyorfees).FirstOrDefault()), 3) : 0;

                ResultList.Add(obj);
            }
            return ResultList;
        }

        public void UpdateStepsClosing(PurchaseExecutionModel purchaseExecution, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "UpdateStepsClosing", "Trading Service"));

            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = "ExecutionSteps",
                Type = "string"
            });

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "ContractId",
                KeyValue = purchaseExecution.ContractId.ToString(),
                Type = "guid"
            });

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "PurchaseId",
                KeyValue = purchaseExecution.PurchaseId.ToString(),
                Type = "guid"
            });

            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);

            var executionSteps = _dataSetService.SearchExecutionStepsDataSets(null, null, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages)?.GetAwaiter().GetResult().Where(t => (t.DataJson?.IsFileReUploaded == true || t.DataJson.StepName == "Q88"))?.ToList();

            int purchaseCount = (int)executionSteps?.Where(t => (t.DataJson.PurchaseId == purchaseExecution.PurchaseId && t.DataJson.StepName == "Presentation of Documents"))?.ToList()?.Count;
            int purchaseCompletedCount = (int)executionSteps?.Where(t => (t.DataJson.PurchaseId == purchaseExecution.PurchaseId && t.DataJson.StepName == "Presentation of Documents" && t.DataJson.StatusName == "Completed"))?.ToList()?.Count;

            if (purchaseCount > 0 && purchaseCompletedCount == purchaseCount && purchaseExecution.PurchaseId != null)
            {
                ContractStatusModel contractStatusModel = new ContractStatusModel();

                var statuses = _clientService.GetAllContractStatus(contractStatusModel, loggedInContext, validationMessages);

                Guid? statusId = statuses?.Where(t => (t.StatusName == "Closed"))?.FirstOrDefault()?.ContractStatusId;

                if (statusId != null)
                {
                    var dataSetUpdateModel = new UpdateDataSetJsonModel();
                    dataSetUpdateModel.Id = purchaseExecution.PurchaseId;
                    List<ParamsKeyModel> paramsModel = new List<ParamsKeyModel>();
                    var jsonModel = new ParamsKeyModel();
                    jsonModel.KeyName = "StatusId";
                    jsonModel.KeyValue = statusId?.ToString();
                    jsonModel.Type = "Guid";
                    paramsModel.Add(jsonModel);
                    dataSetUpdateModel.ParamsJsonModel = paramsModel;

                    _dataSetService.UpdateDataSetJson(dataSetUpdateModel, loggedInContext, validationMessages);
                }

            }
        }


        public List<GetSalesOutputModel> GetSalesValue(DashboardAPIInputModel dashboardAPIInputModel, LoggedInContext loggedInContext, List<ValidationMessage> validationMessages)
        {
            LoggingManager.Info(string.Format(LoggingManagerAppConstants.LoggingManagerInfoValue, "GetSalesValue", "Trading Service"));

            List<ParamsJsonModel> paramsJsons = new List<ParamsJsonModel>();

            paramsJsons.Add(new ParamsJsonModel()
            {
                KeyName = "ContractType",
                KeyValue = "Sale",
                Type = "string"
            });

            DateTime today = DateTime.Now;
            dashboardAPIInputModel.DateFrom = dashboardAPIInputModel.DateFrom == null ? new DateTime(today.Year, today.Month, DateTime.DaysInMonth(today.Year, today.Month)).AddMonths(-5) : dashboardAPIInputModel.DateFrom;
            dashboardAPIInputModel.DateTo = dashboardAPIInputModel.DateTo == null ? dashboardAPIInputModel.DateFrom.Value.AddMonths(5) : dashboardAPIInputModel.DateTo;

            string paramsJsonModel = JsonConvert.SerializeObject(paramsJsons);

            var dataSetsResult = _dataSetService.SearchDataSets(null, null, null, paramsJsonModel, false, false, null, null, loggedInContext, validationMessages, null, null, null, null, null).GetAwaiter().GetResult().Where(t => (t.CreatedDateTime >= dashboardAPIInputModel.DateFrom && t.CreatedDateTime <= dashboardAPIInputModel.DateTo)).ToList();

            var brokerSales = dataSetsResult?.Where(t => (t.DataJson.ContractType == "Sale" && t.DataJson.BrokerId != null))?.Select(t => new { formData = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t?.DataJson?.FormData)), CreatedDateTime = t.CreatedDateTime })?.ToList();
            var directSales = dataSetsResult?.Where(t => (t.DataJson.ContractType == "Sale" && t.DataJson.BrokerId == null))?.Select(t => new { formData = JsonConvert.DeserializeObject<FormOutputModel>(JsonConvert.SerializeObject(t?.DataJson?.FormData)), CreatedDateTime = t.CreatedDateTime })?.ToList();

            List<GetSalesOutputModel> getSalesOutputModels = new List<GetSalesOutputModel>();

            var selectedDates = Enumerable.Range(0, 6).Select(index => new DateTime?(dashboardAPIInputModel.DateFrom.Value.AddMonths(index))).TakeWhile(date => date <= dashboardAPIInputModel.DateTo).ToList();//last six months only needed .Where(t => t.DataJson?.ApprovedDate != null)?.ToList()

            Parallel.ForEach(selectedDates, date =>
            //foreach(var date in selectedDates)
            {
                var testdate = date.Value.ToString("MM-yyyy");

                double? brokerSale = brokerSales?.Where(t => t.CreatedDateTime.Value.ToString("MM-yyyy") == date?.ToString("MM-yyyy"))?.Select(t => t?.formData?.quanityNumber * t?.formData?.priceAmount)?.Sum();
                double? directsaleValue = directSales?.Where(t => t.CreatedDateTime.Value.ToString("MM-yyyy") == date?.ToString("MM-yyyy"))?.Select(t => t?.formData?.quanityNumber * t?.formData?.priceAmount)?.Sum();
                var testModel = brokerSales?.Where(t => t.CreatedDateTime.Value.ToString("MM-yyyy") == date?.ToString("MM-yyyy"))?.ToList();
                getSalesOutputModels.Add(new GetSalesOutputModel
                {
                    Date = date?.ToString("MMM-yy"),
                    Broker_Sale = Decimal.Parse(Math.Round(((double)directsaleValue / 1000000.00), 2).ToString(), System.Globalization.NumberStyles.Float).ToString(),
                    OrderDate = date,
                    Direct_Sale = Decimal.Parse(Math.Round(((double)brokerSale / 1000000.00), 2).ToString(), System.Globalization.NumberStyles.Float).ToString()
                });

            });

            return getSalesOutputModels?.OrderBy(t => t.OrderDate)?.ToList();
        }

    }
}




