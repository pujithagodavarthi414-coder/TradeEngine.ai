using AuthenticationServices.Common.Texts;

namespace AuthenticationServices.Common
{
    public class ValidationMessages
    {
        public const string NotEmptyInvoiceStatusId = "Invoice status id can not be null or empty.";
        //public const string NotEmptyInvoiceNumber = "Invoice number can not be null or empty.";

        public static string NotEmptyUserStoryAndNumber = LangText.NotEmptyUserStoryAndNumber;
        public static string NotEmptyGoalAndNumber = LangText.NotEmptyGoalAndNumber;
        public static string ExceptionSearchGoalDetails = LangText.ExceptionSearchGoalDetails;
        public static string NotEmptyProjectName = LangText.NotEmptyProjectName;
        public static string NotEmptyProjectId = LangText.NotEmptyProjectId;
        public static string AlreadyExistProjectWithTheName = LangText.AlreadyExistProjectWithTheName;
        public static string NotFoundProjectWithTheId = LangText.NotFoundProjectWithTheId;
        public static string MaximumLengthForProjectName = LangText.MaximumLengthForProjectName;
        public static string ExceptionProjectCouldNotBeCreated = LangText.ExceptionProjectCouldNotBeCreated;
        public static string ExceptionProjectUpsert = LangText.ExceptionProjectUpsert;
        public static string ExceptionConvertHtmltoImage = LangText.ExceptionConvertHtmltoImage;
        public static string ExceptionConvertDataTableToProcessDashboard = LangText.ExceptionConvertDataTableToProcessDashboard;
        public static string ExceptionProjectResponsiblePersonId = LangText.ExceptionProjectResponsiblePersonId;
        public static string NotFoundCompanyLocationWithTheId = LangText.NotFoundCompanyLocationWithTheId;
        public static string ExceptionGetGoalFilterList = LangText.ExceptionGetGoalFilterList;
        public static string NotFoundFoodOrderWithTheId = LangText.NotFoundFoodOrderWithTheId;
        public static string NotFoundTimeSheetDetailsWithTheId = LangText.NotFoundTimeSheetDetailsWithTheId;
        public static string ExceptionLeaveUpsert = LangText.ExceptionLeaveUpsert;
        public static string ExceptionEmployeeAbsenceUpsert = LangText.ExceptionEmployeeAbsenceUpsert;
        public static string ExceptionLeaveSearch = LangText.ExceptionLeaveSearch;
        public static string ExceptionCurrencyList = LangText.ExceptionCurrencyList;
        public static string NotEmptyStatusName = LangText.NotEmptyStatusName;
        public static string NotEmptyStatusId = LangText.NotEmptyStatusId;
        public static string AlreadyExistStatusWithTheName = LangText.AlreadyExistStatusWithTheName;
        public static string NotFoundStatusWithTheId = LangText.NotFoundStatusWithTheId;
        public static string MaximumLengthForStatusName = LangText.MaximumLengthForStatusName;
        public static string ExceptionStatusCouldNotBeCreated = LangText.ExceptionStatusCouldNotBeCreated;
        public static string ExceptionStatusUpsert = LangText.ExceptionStatusUpsert;
        public static string NotEmptyStatusColor = LangText.NotEmptyStatusColor;
        public static string AlreadyExistStatusWithTheColor = LangText.AlreadyExistStatusWithTheColor;
        public static string MaximumLengthForStatusColor = LangText.MaximumLengthForStatusColor;
        public static string NotEmptyConfigurationTypeName = LangText.NotEmptyConfigurationTypeName;
        public static string NotEmptyConfigurationTypeId = LangText.NotEmptyConfigurationTypeId;
        public static string AlreadyExistConfigurationTypeWithTheName = LangText.AlreadyExistConfigurationTypeWithTheName;
        public static string NotFoundConfigurationTypeWithTheId = LangText.NotFoundConfigurationTypeWithTheId;
        public static string MaximumLengthForConfigurationTypeName = LangText.MaximumLengthForConfigurationTypeName;
        public static string ExceptionConfigurationTypeCouldNotBeCreated = LangText.ExceptionConfigurationTypeCouldNotBeCreated;
        public static string ExceptionConfigurationTypeUpsert = LangText.ExceptionConfigurationTypeUpsert;
        public static string NotEmptyProjectTypeName = LangText.NotEmptyProjectTypeName;
        public static string NotEmptyProjectTypeId = LangText.NotEmptyProjectTypeId;
        public static string AlreadyExistProjectTypeWithTheName = LangText.AlreadyExistProjectTypeWithTheName;
        public static string NotFoundProjectTypeWithTheId = LangText.NotFoundProjectTypeWithTheId;
        public static string MaximumLengthForProjectTypeName = LangText.MaximumLengthForProjectTypeName;
        public static string ExceptionProjectTypeCouldNotBeCreated = LangText.ExceptionProjectTypeCouldNotBeCreated;
        public static string ExceptionProjectTypeUpsert = LangText.ExceptionProjectTypeUpsert;
        public static string NotEmptyConsiderHourName = LangText.NotEmptyConsiderHourName;
        public static string NotEmptyConsiderHourId = LangText.NotEmptyConsiderHourId;
        public static string AlreadyExistConsiderHourWithTheName = LangText.AlreadyExistConsiderHourWithTheName;
        public static string NotFoundConsiderHourWithTheId = LangText.NotFoundConsiderHourWithTheId;
        public static string MaximumLengthForConsiderHourName = LangText.MaximumLengthForConsiderHourName;
        public static string ExceptionConsiderHourCouldNotBeCreated = LangText.ExceptionConsiderHourCouldNotBeCreated;
        public static string ExceptionConsiderHourUpsert = LangText.ExceptionConsiderHourUpsert;
        public static string NotEmptyProjectFeatureName = LangText.NotEmptyProjectFeatureName;
        public static string NotEmptyProjectFeatureId = LangText.NotEmptyProjectFeatureId;
        public static string AlreadyExistProjectFeatureWithTheName = LangText.AlreadyExistProjectFeatureWithTheName;
        public static string NotFoundProjectFeatureWithTheId = LangText.NotFoundProjectFeatureWithTheId;
        public static string MaximumLengthForProjectFeatureName = LangText.MaximumLengthForProjectFeatureName;
        public static string ExceptionProjectFeatureCouldNotBeCreated = LangText.ExceptionProjectFeatureCouldNotBeCreated;
        public static string ExceptionProjectFeatureUpsert = LangText.ExceptionProjectFeatureUpsert;
        public static string ExceptionGetAllProjectFeaturesByProjectId = LangText.ExceptionGetAllProjectFeaturesByProjectId;
        public static string NotFoundProjectMemberWithTheProjectId = LangText.NotFoundProjectMemberWithTheProjectId;
        public static string NotEmptyProjectMemberUserId = LangText.NotEmptyProjectMemberUserId;
        public static string NotEmptyProjectMemberId = LangText.NotEmptyProjectMemberId;
        public static string NotEmptyProjectMemberRoleId = LangText.NotEmptyProjectMemberRoleId;
        public static string NotFoundProjectMemberWithTheId = LangText.NotFoundProjectMemberWithTheId;
        public static string NotFoundProjectMemberWithTheUserId = LangText.NotFoundProjectMemberWithTheUserId;
        public static string ExceptionProjectMemberCouldNotBeCreated = LangText.ExceptionProjectMemberCouldNotBeCreated;
        public static string ExceptionProjectMemberUpsert = LangText.ExceptionProjectMemberUpsert;
        public static string NotEmptyFieldPermissionId = LangText.NotEmptyFieldPermissionId;
        public static string ExceptionConfigurationSettingsCouldNotBeCreated = LangText.ExceptionConfigurationSettingsCouldNotBeCreated;
        public static string ExceptionConfigurationSettingsUpsert = LangText.ExceptionConfigurationSettingsUpsert;
        public static string ExceptionProcessDashboardCouldNotBeCreated = LangText.ExceptionProcessDashboardCouldNotBeCreated;
        public static string ExceptionProcessDashboardUpsert = LangText.ExceptionProcessDashboardUpsert;
        public static string NotEmptyProcessDashboardId = LangText.NotEmptyProcessDashboardId;
        public static string NotFoundProcessDashboardWithTheId = LangText.NotFoundProcessDashboardWithTheId;
        public static string NotFoundProcessDashboardWithTheProjectId = LangText.NotFoundProcessDashboardWithTheProjectId;
        public static string NotEmptyProcessDashboardStatusName = LangText.NotEmptyProcessDashboardStatusName;
        public static string NotEmptyProcessDashboardStatusId = LangText.NotEmptyProcessDashboardStatusId;
        public static string AlreadyExistProcessDashboardStatusWithTheName = LangText.AlreadyExistProcessDashboardStatusWithTheName;
        public static string NotFoundProcessDashboardStatusWithTheId = LangText.NotFoundProcessDashboardStatusWithTheId;
        public static string MaximumLengthForProcessDashboardStatusName = LangText.MaximumLengthForProcessDashboardStatusName;
        public static string ExceptionProcessDashboardStatusCouldNotBeCreated = LangText.ExceptionProcessDashboardStatusCouldNotBeCreated;
        public static string ExceptionProcessDashboardStatusUpsert = LangText.ExceptionProcessDashboardStatusUpsert;
        public static string ExceptionGetAllProcessDashboardStatuses = LangText.ExceptionGetAllProcessDashboardStatuses;
        public static string NotEmptyProcessDashboardStatusColor = LangText.NotEmptyProcessDashboardStatusColor;
        public static string AlreadyExistProcessDashboardStatusWithTheColor = LangText.AlreadyExistProcessDashboardStatusWithTheColor;
        public static string MaximumLengthForProcessDashboardStatusColor = LangText.MaximumLengthForProcessDashboardStatusColor;
        public static string NotEmptyType = LangText.NotEmptyType;
        public static string NotInDateRange = LangText.NotInDateRange;
        public static string NotEmptyFromDate = LangText.NotEmptyFromDate;
        public static string NotEmptyGpaOrScore = LangText.NotEmptyGpaOrScore;
        public static string NotEmptyToDate = LangText.NotEmptyToDate;
        public static string PageSizeRequired = LangText.PageSizeRequired;
        public static string MaximumLengthPageSize = LangText.MaximumLengthPageSize;
        public static string PageNumberRequired = LangText.PageNumberRequired;
        public static string CompanyIdRequired = LangText.CompanyIdRequired;
        public static string OperationsPerformedByRequired = LangText.OperationsPerformedByRequired;
        public static string NullValue = LangText.NullValue;
        public static string NotEmptyFeatureId = LangText.NotEmptyFeatureId;
        public static string NotEmptyWorkFlowId = LangText.NotEmptyWorkFlowId;
        public static string NotEmptyWorkFlowName = LangText.NotEmptyWorkFlowName;
        public static string MaximumLengthForWorkFlowName = LangText.MaximumLengthForWorkFlowName;
        public static string AlreadyExistWorkFlowWithTheName = LangText.AlreadyExistWorkFlowWithTheName;
        public static string ExceptionWorkFlowCouldNotBeCreated = LangText.ExceptionWorkFlowCouldNotBeCreated;
        public static string NotFoundWorkFlowWithTheId = LangText.NotFoundWorkFlowWithTheId;
        public static string BoardTypeAlreadyExistsWithThisSameWorkfloAndBoardTypeUi = LangText.BoardTypeAlreadyExistsWithThisSameWorkfloAndBoardTypeUi;
        public static string ExceptionBoardTypeWorkFlow = LangText.ExceptionBoardTypeWorkFlow;
        public static string ExceptionWorkFlowUpsert = LangText.ExceptionWorkFlowUpsert;
        public static string ExceptionGetAllWorkFlows = LangText.ExceptionGetAllWorkFlows;
        public static string ExceptionGetWorkFlowById = LangText.ExceptionGetWorkFlowById;
        public static string ExceptionWorkFlowStatusUpsert = LangText.ExceptionWorkFlowStatusUpsert;
        public static string ExceptionGetAllWorkFlowStatuses = LangText.ExceptionGetAllWorkFlowStatuses;
        public static string ExceptionGetWorkFlowStatusById = LangText.ExceptionGetWorkFlowStatusById;
        public static string ExceptionUpsertWorkFlowStatusInActive = LangText.ExceptionUpsertWorkFlowStatusInActive;
        public static string NotEmptyLoggedInUserId = LangText.NotEmptyLoggedInUserId;
        public static string ExceptionGetAllBoardType = LangText.ExceptionGetAllBoardType;
        public static string ExceptionBoardTypeById = LangText.ExceptionBoardTypeById;
        public static string NotEmptyBoardTypeId = LangText.NotEmptyBoardTypeId;
        public static string NotEmptyBoardTypeName = LangText.NotEmptyBoardTypeName;
        public static string MaximumLengthForBoardTypeName = LangText.MaximumLengthForBoardTypeName;
        public static string AlreadyExistBoardTypeWithTheName = LangText.AlreadyExistBoardTypeWithTheName;
        public static string NotFoundBoardTypeWithTheId = LangText.NotFoundBoardTypeWithTheId;
        public static string ExceptionBoardTypeCouldNotBeCreated = LangText.ExceptionBoardTypeCouldNotBeCreated;
        public static string ExceptionBoardTypeUpsert = LangText.ExceptionBoardTypeUpsert;
        public static string NotEmptyBoardTypeUi = LangText.NotEmptyBoardTypeUi;
        public static string NotFoundBoardTypeUiWithTheId = LangText.NotFoundBoardTypeUiWithTheId;
        public static string NotFoundBoardApiWithTheId = LangText.NotFoundBoardApiWithTheId;
        public static string NotEmptyGoalName = LangText.NotEmptyGoalName;
        public static string NotEmptyTagName = LangText.NotEmptyTagName;
        public static string NotEmptyGoalShortName = LangText.NotEmptyGoalShortName;
        public static string NotEmptyVersion = LangText.NotEmptyVersion;
        public static string NotEmptyGoalResponsiblePerson = LangText.NotEmptyGoalResponsiblePerson;
        public static string MaximumLengthForGoalName = LangText.MaximumLengthForGoalName;
        public static string MaximumLengthForGoalShortName = LangText.MaximumLengthForGoalShortName;
        public static string NotEmptyBoardType = LangText.NotEmptyBoardType;
        public static string NotEmptyBoardTypeApi = LangText.NotEmptyBoardTypeApi;
        public static string NotEmptyOnboardDate = LangText.NotEmptyOnboardDate;
        public static string NotEmptyConfigurationType = LangText.NotEmptyConfigurationType;
        public static string NotEmptyGoalId = LangText.NotEmptyGoalId;
        public static string NotEmptyGoalFilterName = LangText.NotEmptyGoalFilterName;
        public static string NotEmptyGoalIds = LangText.NotEmptyGoalIds;
        public static string AlreadyExistGoalWithTheName = LangText.AlreadyExistGoalWithTheName;
        public static string NotFoundGoalWithTheId = LangText.NotFoundGoalWithTheId;
        public static string ExceptionGoalCouldNotBeCreated = LangText.ExceptionGoalCouldNotBeCreated;
        public static string ExceptionGoalUpsert = LangText.ExceptionGoalUpsert;
        public static string ExceptionArchiveProject = LangText.ExceptionArchiveProject;
        public static string ExceptionArchiveUserStory = LangText.ExceptionArchiveUserStory;
        public static string ExceptionArchiveCompletedUserStories = LangText.ExceptionArchiveCompletedUserStories;
        public static string ExceptionParkUserStory = LangText.ExceptionParkUserStory;
        public static string ExceptionUserStoryHistory = LangText.ExceptionUserStoryHistory;
        public static string ExceptionGetGoalsToArchive = LangText.ExceptionGetGoalsToArchive;
        public static string ExceptionUpsertProjectTags = LangText.ExceptionUpsertProjectTags;
        public static string NotEmptyUserStoryName = LangText.NotEmptyUserStoryName;
        public static string NotEmptyUserStoryId = LangText.NotEmptyUserStoryId;
        public static string NotEmptyUserStoryLinkTypeId = LangText.NotEmptyUserStoryLinkTypeId;
        public static string NotEmptyUserStoryLinkId = LangText.NotEmptyUserStoryLinkId;
        public static string NotEmptyUserStoryIds = LangText.NotEmptyUserStoryIds;
        public static string NotEmptyAmendedDays = LangText.NotEmptyAmendedDays;
        public static string NotAmendedDaysLessThanZero = LangText.NotAmendedDaysLessThanZero;
        public static string NotEmptyDate = LangText.NotEmptyDate;
        public static string NotEmptyDateKey = LangText.NotEmptyDateKey;
        public static string NotEmptyWorkingHoursPerDay = LangText.NotEmptyWorkingHoursPerDay;
        public static string NotEmptyEstimations = LangText.NotEmptyEstimations;
        public static string MaximumLengthForUserStoryName = LangText.MaximumLengthForUserStoryName;
        public static string NotFoundUserStoryWithTheId = LangText.NotFoundUserStoryWithTheId;
        public static string AlreadyExistUserStoryWithTheName = LangText.AlreadyExistUserStoryWithTheName;
        public static string ExceptionUserStoryCouldNotBeCreated = LangText.ExceptionUserStoryCouldNotBeCreated;
        public static string ExceptionUserStoryUpsert = LangText.ExceptionUserStoryUpsert;
        public static string ExceptionGoalCreationFromTemplate = LangText.ExceptionGoalCreationFromTemplate;
        public static string ExceptionUpdateMultipleUserStoriesGoal = LangText.ExceptionUpdateMultipleUserStoriesGoal;
        public static string ExceptionPrintAssets = LangText.ExceptionPrintAssets;
        public static string ExceptionUpsertAdhocWork = LangText.ExceptionUpsertAdhocWork;
        public static string ExceptionSearchUserStories = LangText.ExceptionSearchUserStories;
        public static string ExceptionGetUserStoriesByGoals = LangText.ExceptionGetUserStoriesByGoals;
        public static string ExceptionInsertMultipleUserStoriesUsingFile = LangText.ExceptionInsertMultipleUserStoriesUsingFile;
        public static string ExceptionUpdateMultipleUserStories = LangText.ExceptionUpdateMultipleUserStories;
        public static string ExceptionUpdateMultipleUserStoriesDeadlineConfigurations = LangText.ExceptionUpdateMultipleUserStoriesDeadlineConfigurations;
        public static string ExceptionReorderUserStories = LangText.ExceptionReorderUserStories;
        public static string ExceptionReOrderWorkflowStatuses = LangText.ExceptionReOrderWorkflowStatuses;
        public static string ExceptionAmendUserStoriesDeadline = LangText.ExceptionAmendUserStoriesDeadline;
        public static string ExceptionSearchUserStoryPriorities = LangText.ExceptionSearchUserStoryPriorities;
        public static string FileNotInCsv = LangText.FileNotInCsv;
        public static string NotEmptyFilePath = LangText.NotEmptyFilePath;
        public static string RemarksInFile = LangText.RemarksInFile;
        public static string NoUserExisted = LangText.NoUserExisted;
        public static string NotEmptyResetGuid = LangText.NotEmptyResetGuid;
        public static string NotFoundResetPasswordWithTheEmail = LangText.NotFoundResetPasswordWithTheEmail;
        public static string NotFoundResetPasswordWithTheResetGuid = LangText.NotFoundResetPasswordWithTheResetGuid;
        public static string LinkHasBeenExpired = LangText.LinkHasBeenExpired;
        public static string NotEmptyNewPassword = LangText.NotEmptyNewPassword;
        public static string NotEmptyConfirmPassword = LangText.NotEmptyConfirmPassword;
        public static string NotMatchNewPasswordConfirmPassword = LangText.NotMatchNewPasswordConfirmPassword;
        public static string PasswordNotStrong = LangText.PasswordNotStrong;
        public static string NotMatchPasswordExistedPassword = LangText.NotMatchPasswordExistedPassword;
        public static string NotEmptyDateFrom = LangText.NotEmptyDateFrom;
        public static string NotEmptyFoodItemId = LangText.NotEmptyFoodItemId;
        public static string NotEmptyDateTo = LangText.NotEmptyDateTo;
        public static string NotEmptyLogTimeOption = LangText.NotEmptyLogTimeOption;
        public static string NotEmptyRemainingTimeSetToOrReducedBy = LangText.NotEmptyRemainingTimeSetToOrReducedBy;
        public static string NotEmptySpentTime = LangText.NotEmptySpentTime;
        public static string NotEmptyComment = LangText.NotEmptyComment;
        public static string NotEmptyCommentId = LangText.NotEmptyCommentId;
        public static string NotSpentTimeInCorrectFormat = LangText.NotSpentTimeInCorrectFormat;
        public static string NotSetOrReduceTimeInCorrectFormat = LangText.NotSetOrReduceTimeInCorrectFormat;
        public static string MaximumLengthForComment = LangText.MaximumLengthForComment;
        public static string ExceptionCommentCouldNotBeCreated = LangText.ExceptionCommentCouldNotBeCreated;
        public static string ExceptionCommentUpsert = LangText.ExceptionCommentUpsert;
        public static string ExceptionGetCommentById = LangText.ExceptionGetCommentById;
        public static string ExceptionGetCommentByReceiverId = LangText.ExceptionGetCommentByReceiverId;
        public static string ExceptionFoodOrderUpsert = LangText.ExceptionFoodOrderUpsert;
        public static string ExceptionFoodOrderById = LangText.ExceptionFoodOrderById;
        public static string ExceptionProductUpsert = LangText.ExceptionProductUpsert;
        public static string ExceptionProductDetailUpsert = LangText.ExceptionProductDetailUpsert;
        public static string SearchByProduct = LangText.SearchByProduct;
        public static string ExceptionSupplierUpsert = LangText.ExceptionSupplierUpsert;
        public static string SearchSupplier = LangText.SearchSupplier;
        public static string GetEntityRole = LangText.GetEntityRole;
        public static string GetSupplierById = LangText.GetSupplierById;
        public static string ExceptionChangeFoodOrderStatus = LangText.ExceptionChangeFoodOrderStatus;
        public static string ExceptionCompanyLocationById = LangText.ExceptionCompanyLocationById;
        public static string ExceptionAssetUpsert = LangText.ExceptionAssetUpsert;
        public static string ExceptionUpsertCompanyLocation = LangText.ExceptionUpsertCompanyLocation;
        public static string SearchFoodOrder = LangText.SearchFoodOrder;
        public static string ExceptionGetCommentsCountByUserStoryId = LangText.ExceptionGetCommentsCountByUserStoryId;
        public static string ExceptionGetBugsCountForUserStory = LangText.ExceptionGetBugsCountForUserStory;
        public static string SearchCompanyLocation = LangText.SearchCompanyLocation;
        public static string SearchCanteenBalance = LangText.SearchCanteenBalance;
        public static string ExceptionMonthlyFoodOrders = LangText.ExceptionMonthlyFoodOrders;
        public static string ExceptionFoodOrderStatus = LangText.ExceptionFoodOrderStatus;
        public static string ExceptionCanteenCreditUpsert = LangText.ExceptionCanteenCreditUpsert;
        public static string ExceptionCanteenCreditById = LangText.ExceptionCanteenCreditById;
        public static string ExceptionUserStoryLogTimeCouldNotBeCreated = LangText.ExceptionUserStoryLogTimeCouldNotBeCreated;
        public static string ExceptionUserStoryLogTimeUpsert = LangText.ExceptionUserStoryLogTimeUpsert;
        public static string SearchCompanyStructure = LangText.SearchCompanyStructure;
        public static string SearchMainUseCases = LangText.SearchMainUseCases;
        public static string SearchCurrency = LangText.SearchCurrency;
        public static string GetStates = LangText.GetStates;
        public static string GetEmploymentStatus = LangText.GetEmploymentStatus;
        public static string GetLicenceTypes = LangText.GetLicenceTypes;
        public static string GetProfessionalTaxRange = LangText.GetProfessionalTaxRange;
        public static string GetTaxSlabs = LangText.GetTaxSlabs;
        public static string GetEmployeesPayTemplates = LangText.GetEmployeesPayTemplates;
        public static string GetEmployeesForBonus = LangText.GetEmployeesForBonus;
        public static string GetEmployeePayrollConfiguration = LangText.GetEmployeePayrollConfiguration;
        public static string GetPayrollRunList = LangText.GetPayrollRunList;
        public static string GetPayrollRunemployeeList = LangText.GetPayrollRunemployeeList;
        public static string GetEmployeesListByIds = LangText.GetEmployeesListByIds;
        public static string GetUsersByRole = LangText.GetUsersByRole;
        public static string GetEmployeePayrollDetailsList = LangText.GetEmployeePayrollDetailsList;
        public static string GetPaySlipDetails = LangText.GetPaySlipDetails;
        public static string GetPayrollRunEmployeeCount = LangText.GetPayrollRunEmployeeCount;
        public static string GetHourlyTdsConfiguration = LangText.GetHourlyTdsConfiguration;
        public static string GetDaysOfWeekConfiguration = LangText.GetDaysOfWeekConfiguration;
        public static string GetAllowanceTime = LangText.GetAllowanceTime;
        public static string ExceptionUpsertHourlyTdsConfiguration = LangText.UpsertHourlyTdsConfiguration;
        public static string ExceptionUpsertDaysOfWeekConfiguration = LangText.UpsertDaysOfWeekConfiguration;
        public static string ExceptionUpsertAllowanceTime = LangText.UpsertAllowanceTime;
        public static string GetEmployeesBonusDetails = LangText.GetEmployeesBonusDetails;
        public static string GetReportingMethods = LangText.GetReportingMethods;
        public static string GetPayFrequency = LangText.GetPayFrequency;
        public static string GetSkills = LangText.GetSkills;
        public static string GetCompetencies = LangText.GetCompetencies;
        public static string GetLanguageFluencies = LangText.GetLanguageFluencies;
        public static string GetLanguages = LangText.GetLanguages;
        public static string GetEducationLevels = LangText.GetEducationLevels;
        public static string SearchRateType = LangText.SearchRateType;
        public static string SearchRelationship = LangText.SearchRelationship;
        public static string SearchEmployeeDependentContacts = LangText.SearchEmployeeDependentContacts;
        public static string SearchPermissionRegister = LangText.SearchPermissionRegister;
        public static string SearchPayGradeRates = LangText.SearchPayGradeRates;
        public static string SearchAdhocWork = LangText.SearchAdhocWork;
        public static string SearchCurrencyConversion = LangText.SearchCurrencyConversion;
        public static string SearchPaymentMethod = LangText.SearchPaymentMethod;
        public static string SearchSoftLabels = LangText.SearchSoftLabels;
        public static string NotEmptyCommentedByUserId = LangText.NotEmptyCommentedByUserId;
        public static string NotEmptyReceiverId = LangText.NotEmptyReceiverId;
        public static string NotFoundCommentWithTheId = LangText.NotFoundCommentWithTheId;
        public static string NotFoundReceiverWithTheId = LangText.NotFoundReceiverWithTheId;
        public static string SearchNumberFormats = LangText.SearchNumberFormats;
        public static string SearchIndustryModule = LangText.SearchIndustryModule;
        public static string SearchDateFormats = LangText.SearchDateFormats;
        public static string SearchTimeFormats = LangText.SearchTimeFormats;
        public static string SearchCompany = LangText.SearchCompany;
        public static string SearchIntroducedByOptions = LangText.SearchIntroducedByOptions;
        public static string SearchProducts = LangText.SearchProducts;
        public static string SearchProductDetails = LangText.SearchProductDetails;
        public static string NotEmptyUserStoryReplanTypeId = LangText.NotEmptyUserStoryReplanTypeId;
        public static string NotEmptyUserStoryReplanJson = LangText.NotEmptyUserStoryReplanJson;
        public static string ExceptionUserStoryReplanCouldNotBeCreated = LangText.ExceptionUserStoryReplanCouldNotBeCreated;
        public static string ExceptionUserStoryReplanUpsert = LangText.ExceptionUserStoryReplanUpsert;
        public static string ExceptionGoalReplanHistory = LangText.ExceptionGoalReplanHistory;
        public static string SearchOnboardedGoals = LangText.SearchOnboardedGoals;
        public static string UpsertProcessDashboard = LangText.UpsertProcessDashboard;
        public static string GetGoalsOverAllStatusByDashboardId = LangText.GetGoalsOverAllStatusByDashboardId;
        public static string GetLatestDashboardNumber = LangText.GetLatestDashboardNumber;
        public static string MaximumLengthForReason = LangText.MaximumLengthForReason;
        public static string NotEmptyGoalReplanTypeId = LangText.NotEmptyGoalReplanTypeId;
        public static string ExceptionGoalReplanCouldNotBeCreated = LangText.ExceptionGoalReplanCouldNotBeCreated;
        public static string ExceptionGoalReplanUpsert = LangText.ExceptionGoalReplanUpsert;
        public static string NotEmptyGoalReplanTypeName = LangText.NotEmptyGoalReplanTypeName;
        public static string AlreadyExistGoalReplanTypeWithTheName = LangText.AlreadyExistGoalReplanTypeWithTheName;
        public static string NotFoundGoalReplanTypeWithTheId = LangText.NotFoundGoalReplanTypeWithTheId;
        public static string MaximumLengthForGoalReplanTypeName = LangText.MaximumLengthForGoalReplanTypeName;
        public static string ExceptionGoalReplanTypeCouldNotBeCreated = LangText.ExceptionGoalReplanTypeCouldNotBeCreated;
        public static string ExceptionGoalReplanTypeUpsert = LangText.ExceptionGoalReplanTypeUpsert;
        public static string NotEmptyShift = LangText.NotEmptyShift;
        public static string NotEmptyShiftTimingId = LangText.NotEmptyShiftTimingId;
        public static string NotEmptyPreviousCompany = LangText.NotEmptyPreviousCompany;
        public static string NotEmptyInstitute = LangText.NotEmptyInstitute;
        public static string NotEmptySkillName = LangText.NotEmptySkillName;
        public static string NotEmptyFormTypeName = LangText.NotEmptyFormTypeName;
        public static string NotEmptyPaymentTypeName = LangText.NotEmptyPaymentTypeName;
        public static string NotEmptyLeaveStatus = LangText.NotEmptyLeaveStatus;
        public static string NotEmptyFeedbackTypeName = LangText.NotEmptyFeedbackTypeName;
        public static string NotEmptyAccessibleIpAddressName = LangText.NotEmptyAccessibleIpAddressName;
        public static string NotEmptyPriorityName = LangText.NotEmptyPriorityName;
        public static string NotEmptyReplanTypeName = LangText.NotEmptyReplanTypeName;
        public static string NotEmptyColor = LangText.NotEmptyColor;
        public static string NotEmptyTiming = LangText.NotEmptyTiming;
        public static string NotEmptyDeadline = LangText.NotEmptyDeadLine;
        public static string NotEmptyExpenseCategoryId = LangText.NotEmptyExpenseCategoryId;
        public static string NotEmptyExpenseReportById = LangText.NotEmptyExpenseReportById;
        public static string NotEmptyExpenseDate = LangText.NotEmptyExpenseDate;
        public static string NotEmptyExpenseCurrencyId = LangText.NotEmptyExpenseCurrencyId;
        public static string NotEmptyExpenseReportTitle = LangText.NotEmptyExpenseReportTitle;
        public static string ExceededExpenseReportTitle = LangText.ExceededExpenseReportTitle;
        public static string NotEmptyExpenseBusinessPurpose = LangText.NotEmptyExpenseBusinessPurpose;
        public static string ExceededExpenseBusinessPurpose = LangText.ExceededExpenseBusinessPurpose;
        public static string NotEmptyExpenseDurationFrom = LangText.NotEmptyExpenseDurationFrom;
        public static string NotEmptyExpenseDurationTo = LangText.NotEmptyExpenseDurationTo;
        public static string AlreadyExistShiftWithTheName = LangText.AlreadyExistShiftWithTheName;
        public static string NotFoundShiftTimingWithTheId = LangText.NotFoundShiftTimingWithTheId;
        public static string MaximumLengthForShift = LangText.MaximumLengthForShift;
        public static string MaximumLengthForPriorityName = LangText.MaximumLengthForPriorityName;
        public static string MaximumLengthForReplanTypeName = LangText.MaximumLengthForReplanTypeName;
        public static string ExceptionShiftTimingCouldNotBeCreated = LangText.ExceptionShiftTimingCouldNotBeCreated;
        public static string ExceptionShiftTimingUpsert = LangText.ExceptionShiftTimingUpsert;
        public static string DurationFromIsLaterThanDurationTo = LangText.DurationFromIsLaterThanDurationTo;
        public static string LeaveDateFromIsLaterThanLeaveDateTo = LangText.LeaveDateFromIsLaterThanLeaveDateTo;
        public static string ExceptionCompanyLocationUpsert = LangText.ExceptionCompanyLocationUpsert;
        public static string NotEmptySubscriptionPaidBy = LangText.NotEmptySubscriptionPaidBy;
        public static string MaximumLengthForSubscriptionPaidByName = LangText.MaximumLengthForSubscriptionPaidByName;
        public static string NotEmptyTimeFormat = LangText.NotEmptyTimeFormat;
        public static string MaximumLengthForTimeFormat = LangText.MaximumLengthForTimeFormat;
        public static string NotEmptyDateFormat = LangText.NotEmptyDateFormat;
        public static string MaximumLengthForDateFormat = LangText.MaximumLengthForDateFormat;
        public static string NotEmptyMainUseCase = LangText.NotEmptyMainUseCase;
        public static string MaximumLengthForMainUseCase = LangText.MaximumLengthForMainUseCase;
        public static string NotEmptyNumberFormat = LangText.NotEmptyNumberFormat;
        public static string NotEmptyScriptName = "";//LangText.NotEmptyScriptName;
        public static string NotEmptyScriptUrl = "";// LangText.NotEmptyScriptUrl;
        public static string MaximumLengthForNumberFormat = LangText.MaximumLengthForNumberFormat;
        public static string NotEmptyCompanyIntroducedByOption = LangText.NotEmptyCompanyIntroducedByOption;
        public static string MaximumLengthForCompanyIntroducedByOption = LangText.MaximumLengthForCompanyIntroducedByOption;
        public static string NotEmptyStateName = LangText.NotEmptyStateName;
        public static string MaximumLengthForStateName = LangText.MaximumLengthForStateName;
        public static string NotEmptyReferenceTypeId = LangText.NotEmptyReferenceTypeId;
        public static string InfoLenghtMustNotExceed650 = LangText.InfoLenghtMustNotExceed650;
        public static string NotificationTypeIsRequired = LangText.NotificationTypeIsRequired;
        public static string NotEmptyReferenceTypeName = LangText.NotEmptyReferenceTypeName;
        public static string MaximumLengthForReferenceTypeName = LangText.MaximumLengthForReferenceTypeName;
        public static string NotEmptyAutomationTypeName = LangText.NotEmptyAutomationTypeName;
        public static string MaximumLengthForAutomationTypeName = LangText.MaximumLengthForAutomationTypeName;
        public static string NotEmptyLicenseTypeName = LangText.NotEmptyLicenseTypeName;
        public static string MaximumLengthForLicenseTypeName = LangText.MaximumLengthForLicenseTypeName;
        public static string NotEmptyHolidayReason = LangText.NotEmptyHolidayReason;
        public static string NotEmptyEducationLevelName = LangText.NotEmptyEducationLevelName;
        public static string NotEmptyReportingMethodType = LangText.NotEmptyReportingMethodType;
        public static string NotEmptyMembershipType = LangText.NotEmptyMembershipType;
        public static string MaximumLengthForHolidayReason = LangText.MaximumLengthForHolidayReason;
        public static string MaximumLengthForEducationLevelName = LangText.MaximumLengthForEducationLevelName;
        public static string MaximumLengthForMembershipType = LangText.MaximumLengthForMembershipType;
        public static string MaximumLengthForReportingMethodType = LangText.MaximumLengthForReportingMethodType;
        public static string NotEmptyEmployeeShiftId = LangText.NotEmptyEmployeeShiftId;
        public static string NotEmptyActiveFrom = LangText.NotEmptyActiveFrom;
        public static string NotFoundEmployeeShiftWithTheId = LangText.NotFoundEmployeeShiftWithTheId;
        public static string ExceptionEmployeeShiftCouldNotBeCreated = LangText.ExceptionEmployeeShiftCouldNotBeCreated;
        public static string ExceptionEmployeeShiftUpsert = LangText.ExceptionEmployeeShiftUpsert;
        public static string NotEmptyIsCompleteField = LangText.NotEmptyIsCompleteField;
        public static string AlreadyExistWorkFlowStatus = LangText.AlreadyExistWorkFlowStatus;
        public static string NotFoundUserStoryStatusWithTheId = LangText.NotFoundUserStoryStatusWithTheId;
        public static string NotEmptyPermissionName = LangText.NotEmptyPermissionName;
        public static string AlreadyExistPermissionWithTheName = LangText.AlreadyExistPermissionWithTheName;
        public static string ExceptionPermissionCouldNotBeCreated = LangText.ExceptionPermissionCouldNotBeCreated;
        public static string NotFoundPermissionWithTheId = LangText.NotFoundPermissionWithTheId;
        public static string NotEmptyOperationsPerformedBy = LangText.NotEmptyOperationsPerformedBy;
        public static string NotEmptyPermissionId = LangText.NotEmptyPermissionId;
        public static string ExceptionPermissionUpsert = LangText.ExceptionPermissionUpsert;
        public static string ExceptionGetAllPermissions = LangText.ExceptionGetAllPermissions;
        public static string ExceptionGetPermissionById = LangText.ExceptionGetPermissionById;
        public static string ExceptionPermissionReasonUpsert = LangText.ExceptionPermissionReasonUpsert;
        public static string ExceptionUpsertUserPunchCard = LangText.ExceptionUpsertUserPunchCard;
        public static string ExceptionValidateUserLocation = LangText.ExceptionValidateUserLocation;
        public static string NotEmptyWorkFlowStatusId = LangText.NotEmptyWorkFlowStatusId;
        public static string NotFoundWorkFlowStatusWithTheId = LangText.NotFoundWorkFlowStatusWithTheId;
        public static string NotEmptyFromWorkFlowUserStoryStatusId = LangText.NotEmptyFromWorkFlowUserStoryStatusId;
        public static string NotEmptyToWorkFlowUserStoryStatusId = LangText.NotEmptyToWorkFlowUserStoryStatusId;
        public static string NotFoundWorkFlowEligibleStatusTransitionWithTheId = LangText.NotFoundWorkFlowEligibleStatusTransitionWithTheId;
        public static string NotEmptyWorkFlowEligibleStatusTransitionWithTheId = LangText.NotEmptyWorkFlowEligibleStatusTransitionWithTheId;
        public static string ExceptionWorkFlowEligibleStatusTransitionUpsert = LangText.ExceptionWorkFlowEligibleStatusTransitionUpsert;
        public static string ExceptionGetAllWorkFlowEligibleStatusTransition = LangText.ExceptionGetAllWorkFlowEligibleStatusTransition;
        public static string ExceptionGetWorkFlowEligibleStatusTransitionById = LangText.ExceptionGetWorkFlowEligibleStatusTransitionById;
        public static string ExceptionUpdateWorkFlowEligibleStatusTransitionInActive = LangText.ExceptionUpdateWorkFlowEligibleStatusTransitionInActive;
        public static string NotEmptyRoleName = LangText.NotEmptyRoleName;
        public static string NotEmptyRoleId = LangText.NotEmptyRoleId;
        public static string NotEmptyEntityRoleId = LangText.NotEmptyEntityRoleId;
        public static string NotEmptyIsActive = LangText.NotEmptyIsActive;
        public static string NotEmptyIsActiveOnMobile = LangText.NotEmptyIsActiveOnMobile;
        public static string NotEmptyRegisteredDateTime = LangText.NotEmptyRegisteredDateTime;
        public static string AlreadyExistRoleWithTheName = LangText.AlreadyExistRoleWithTheName;
        public static string ExceptionRoleCouldNotBeCreated = LangText.ExceptionRoleCouldNotBeCreated;
        public static string NotFoundRoleWithTheId = LangText.NotFoundRoleWithTheId;
        public static string ExceptionRoleUpsert = LangText.ExceptionRoleUpsert;
        public static string ExceptionGetAllRoles = LangText.ExceptionGetAllRoles;
        public static string ExceptionGetAllRolesDropDown = LangText.ExceptionGetAllRolesDropDown;
        public static string ExceptionGetAllUsersDropDown = LangText.ExceptionGetAllUsersDropDown;
        public static string ExceptionGetAllSuppliersDropDown = LangText.ExceptionGetAllSuppliersDropDown;
        public static string ExceptionGetAllEducatonLevelsDropDown = LangText.ExceptionGetAllEducatonLevelsDropDown;
        public static string ExceptionGetUserStoryTypeDropDown = LangText.ExceptionGetUserStoryTypeDropDown;
        public static string ExceptionGetRole = LangText.ExceptionGetRole;
        public static string ExceptionUserUpsert = LangText.ExceptionUserUpsert;
        public static string ExceptionUserProfileImageUpsert = LangText.ExceptionUserProfileImageUpsert;
        public static string ExceptionGetAllUsers = LangText.ExceptionGetAllUsers;
        public static string ExceptionGetRecentConversations = LangText.ExceptionGetRecentConversations;
        public static string ExceptionGetSharedorUnsharedchannels = LangText.ExceptionGetSharedorUnsharedchannels;
        public static string ExceptionGetUsersDropDown = LangText.ExceptionGetUsersDropDown;
        public static string ExceptionUpdatePassword = LangText.ExceptionUpdatePassword;
        public static string ExceptionForgotPassword = LangText.ExceptionForgotPassword;
        public static string ExceptionResetPassword = LangText.ExceptionResetPassword;
        public static string ExceptionGetUserById = LangText.ExceptionGetUserById;
        public static string NotEmptyFirstName = LangText.NotEmptyFirstName;
        public static string NotEmptySalaryComponent = LangText.NotEmptySalaryComponent;
        public static string NotEmptyEmploymentStatusName = LangText.NotEmptyEmploymentStatusName;
        public static string NotEmptyPayFrequencyName = LangText.NotEmptyPayFrequencyName;
        public static string NotEmptyLanguageName = LangText.NotEmptyLanguageName;
        public static string NotEmptyJobCategoried = LangText.NotEmptyJobCategoried;
        public static string NotEmptyNationalityName = LangText.NotEmptyNationalityName;
        public static string NotEmptyDocument = LangText.NotEmptyDocument;
        public static string NotEmptyDocumentNumber = LangText.NotEmptyDocumentNumber;
        public static string NotEmptyStartDate = LangText.NotEmptyStartDate;
        public static string NotEmptyEndDate = LangText.NotEmptyEndDate;
        public static string NotEmptyRateIds = LangText.NotEmptyRateIds;
        public static string NotEmptyPayGradeId = LangText.NotEmptyPayGradeId;
        public static string NotEmptyPaymentMethodId = LangText.NotEmptyPaymentMethodId;
        public static string NotEmptyReportingToEmployeeId = LangText.NotEmptyReportingToEmployeeId;
        public static string NotEmptyReportingMethodId = LangText.NotEmptyReportingMethodId;
        public static string NotEmptyPayFrequencyId = LangText.NotEmptyPayFrequencyId;
        public static string NotEmptyPayGradeRateModel = LangText.NotEmptyPayGradeRateModel;
        public static string NotEmptySurName = LangText.NotEmptySurName;
        public static string NotEmptyEmail = LangText.NotEmptyEmail;
        public static string NotEmptyPassword = LangText.NotEmptyPassword;
        public static string ExceptionUserCouldNotBeCreated = LangText.ExceptionUserCouldNotBeCreated;
        public static string NotFoundUserWithTheId = LangText.NotFoundUserWithTheId;
        public static string NotEmptyUserId = LangText.NotEmptyUserId;
        public static string NotEmptyPermissionReason = LangText.NotEmptyPermissionReason;
        public static string NoEmptyEmailString = LangText.NoEmptyEmailString;
        public static string ExceptionEmployeeUpsert = LangText.ExceptionEmployeeUpsert;
        public static string ExceptionGetAllEmployees = LangText.ExceptionGetAllEmployees;
        public static string ExceptionGetMyTeamMembersList = LangText.ExceptionGetMyTeamMembersList;
        public static string ExceptionGetMyMemberId = LangText.ExceptionGetMyMemberId;
        public static string ExceptionGetEmployeeById = LangText.ExceptionGetEmployeeById;
        public static string NotFoundEmployeeWithTheId = LangText.NotFoundEmployeeWithTheId;
        public static string NotEmptyEmployeeId = LangText.NotEmptyEmployeeId;
        public static string NotEmptyOwnerId = LangText.NotEmptyOwnerId;
        public static string NotEmptyEstimatedTime = LangText.NotEmptyEstimatedTime;
        public static string NotZeroEstimatedTime = LangText.NotZeroEstimatedTime;
        public static string NotEmptyDeadLine = LangText.NotEmptyDeadLine;
        public static string NotEmptyMembershipId = LangText.NotEmptyMembershipId;
        public static string NotEmptySubscriptionId = LangText.NotEmptySubscriptionId;
        public static string NotEmptySubscriptionAmount = LangText.NotEmptySubscriptionAmount;
        public static string NotEmptyCommenceDate = LangText.NotEmptyCommenceDate;
        public static string NotEmptyRelationshipName = LangText.NotEmptyRelationshipName;
        public static string FromLeaveSessionRequired = LangText.FromLeaveSessionRequired;
        public static string LeaveTypeRequired = LangText.LeaveTypeRequired;
        public static string LeaveReasonRequired = LangText.LeaveReasonRequired;
        public static string ToLeaveSessionRequired = LangText.ToLeaveSessionRequired;
        public static string LeaveDateFromRequired = LangText.LeaveDateFromRequired;
        public static string LeaveDateToRequired = LangText.LeaveDateToRequired;
        public static string UserNotFound = LangText.UserNotFound;
        public static string ExceptionBoardTypeApiUpsert = LangText.ExceptionBoardTypeApiUpsert;
        public static string ExceptionGetBoardTypeApiById = LangText.ExceptionGetBoardTypeApiById;
        public static string ExceptionGetAllBoardTypeApi = LangText.ExceptionGetAllBoardTypeApi;
        public static string NotEmptyBoardTypeApiName = LangText.NotEmptyBoardTypeApiName;
        public static string AlreadyExistBoardTypeApiWithTheName = LangText.AlreadyExistBoardTypeApiWithTheName;
        public static string ExceptionBoardTypeApiCouldNotBeCreated = LangText.ExceptionBoardTypeApiCouldNotBeCreated;
        public static string NotFoundBoardTypeApiWithTheId = LangText.NotFoundBoardTypeApiWithTheId;
        public static string NotEmptyBoardTypeApiId = LangText.NotEmptyBoardTypeApiId;
        public static string ExceptionButtonTypeUpsert = LangText.ExceptionButtonTypeUpsert;
        public static string ExceptionGetAllButtonTypes = LangText.ExceptionGetAllButtonTypes;
        public static string ExceptionGetButtonTypeById = LangText.ExceptionGetButtonTypeById;
        public static string NotEmptyButtonTypeName = LangText.NotEmptyButtonTypeName;
        public static string ButtonTypeNameExceeded = LangText.ButtonTypeNameExceeded;
        public static string AlreadyExistButtonTypeApiWithTheName = LangText.AlreadyExistButtonTypeApiWithTheName;
        public static string ExceptionButtonTypeCouldNotBeCreated = LangText.ExceptionButtonTypeCouldNotBeCreated;
        public static string NotFoundButtonTypeWithTheId = LangText.NotFoundButtonTypeWithTheId;
        public static string NotEmptyButtonTypeId = LangText.NotEmptyButtonTypeId;
        public static string NotEmptyUserPunchCardButtonTypeId = LangText.NotEmptyUserPunchCardButtonTypeId;
        public static string ExceptionTimeZoneUpsert = LangText.ExceptionTimeZoneUpsert;
        public static string ExceptionGetAllTimeZones = LangText.ExceptionGetAllTimeZones;
        public static string ExceptionGetTimeZoneById = LangText.ExceptionGetTimeZoneById;
        public static string NotEmptyTimeZoneName = LangText.NotEmptyTimeZoneName;
        public static string NotEmptyTimeZoneOffset = LangText.NotEmptyTimeZoneOffset;
        public static string AlreadyExistTimeZoneApiWithTheName = LangText.AlreadyExistTimeZoneApiWithTheName;
        public static string ExceptionTimeZoneCouldNotBeCreated = LangText.ExceptionTimeZoneCouldNotBeCreated;
        public static string NotFoundTimeZoneWithTheId = LangText.NotFoundTimeZoneWithTheId;
        public static string NotEmptyTimeZoneId = LangText.NotEmptyTimeZoneId;
        public static string ButtonTypeWithTheEmptyId = LangText.ButtonTypeWithTheEmptyId;
        public static string LeaveSessionWithTheEmptyId = LangText.LeaveSessionWithTheEmptyId;
        public static string ExceptionLeaveTypeUpsert = LangText.ExceptionLeaveTypeUpsert;
        public static string ExceptionGetAllLeaveTypes = LangText.ExceptionGetAllLeaveTypes;
        public static string ExceptionGetLeaveTypeById = LangText.ExceptionGetLeaveTypeById;
        public static string NotEmptyLeaveTypeName = LangText.NotEmptyLeaveTypeName;
        public static string AlreadyExistLeaveTypeApiWithTheName = LangText.AlreadyExistLeaveTypeApiWithTheName;
        public static string ExceptionLeaveTypeCouldNotBeCreated = LangText.ExceptionLeaveTypeCouldNotBeCreated;
        public static string NotFoundLeaveTypeWithTheId = LangText.NotFoundLeaveTypeWithTheId;
        public static string NotEmptyLeaveTypeId = LangText.NotEmptyLeaveTypeId;
        public static string LeaveDetailsNotFound = LangText.LeaveDetailsNotFound;
        public static string SupplierNameIsRequired = LangText.SupplierNameIsRequired;
        public static string SupplierNameLengthExceeds = LangText.SupplierNameLengthExceeds;
        public static string InvalidCompanyPhoneNumber = LangText.InvalidCompanyPhoneNumber;
        public static string InvalidContactPhoneNumber = LangText.InvalidContactPhoneNumber;
        public static string StartedWorkingFromIsRequired = LangText.StartedWorkingFromIsRequired;
        public static string SupplierDetailsNotFound = LangText.SupplierDetailsNotFound;
        public static string ProductNameIsRequired = LangText.ProductNameIsRequired;
        public static string ProductIdIsRequired = LangText.ProductIdIsRequired;
        public static string SupplierIdIsRequired = LangText.SupplierIdIsRequired;
        public static string ProductDetailsNotfound = LangText.ProductDetailsNotfound;
        public static string ProductNameLengthExceeds = LangText.ProductNameLengthExceeds;
        public static string AssetDetailsNotFound = LangText.AssetDetailsNotFound;
        public static string AssetNameIsRequired = LangText.AssetNameIsRequired;
        public static string AssetNameLengthExceeds = LangText.AssetNameLengthExceeds;
        public static string AssetNumberIsRequired = LangText.AssetNumberIsRequired;
        public static string CurrencyTypeIsRequired = LangText.CurrencyTypeIsRequired;
        public static string CostRequired = LangText.CostRequired;
        public static string ApprovedByIsRequired = LangText.ApprovedByIsRequired;
        public static string AssetByIdIsRequired = LangText.AssetByIdIsRequired;
        public static string NotFoundAssetWithTheId = LangText.NotFoundAssetWithTheId;
        public static string ProductByIdIsRequired = LangText.ProductByIdIsRequired;
        public static string ProductDetailsByIdIsRequired = LangText.ProductDetailsByIdIsRequired;
        public static string SeatingArrangementByIdIsRequired = LangText.SeatingArrangementByIdIsRequired;
        public static string DamagedReasonIsRequired = LangText.DamagedReasonIsRequired;
        public static string DamagedDateIsRequired = LangText.DamagedDateIsRequired;
        public static string SeatingArrangementNotFound = LangText.SeatingArrangementNotFound;
        public static string SeatCodeIsRequired = LangText.SeatCodeIsRequired;
        public static string SeatingDetailsNotFound = LangText.SeatingDetailsNotFound;
        public static string FormTypeIdNotFound = LangText.FormTypeIdNotFound;
        public static string FormTypeNotFound = LangText.FormTypeNotFound;
        public static string FormNameNotFound = LangText.FormNameNotFound;
        public static string FormNameMaxLength = LangText.FormNameMaxLength;
        public static string ConfigurationNameNotFound = LangText.ConfigurationNameNotFound;
        public static string ConfigurationNameMaxLength = LangText.ConfigurationNameMaxLength;
        public static string FormIdNotFound = LangText.FormIdNotFound;
        public static string EmployeeIdsNotFound = LangText.EmployeeIdsNotFound;
        public static string ConfigurationOptionsNotFound = LangText.ConfigurationOptionsNotFound;
        public static string SearchExpenseReportsNotFound = LangText.SearchExpenseReportsNotFound;
        public static string AddMultipleExpensesNotDone = LangText.AddMultipleExpensesNotDone;
        public static string DescriptionNotFound = LangText.DescriptionNotFound;
        public static string DescriptionMaxLength = LangText.DescriptionMaxLength;
        public static string StatusReportingConfigurationOptionIdNotFound = LangText.StatusReportingConfigurationOptionIdNotFound;
        public static string MaximumLengthForReportComment = LangText.MaximumLengthForReportComment;
        public static string NotEmptyTestSuiteName = LangText.NotEmptyTestSuiteName;
        public static string MaximumLengthForTestSuiteName = LangText.MaximumLengthForTestSuiteName;
        public static string NotEmptyTestSuiteId = LangText.NotEmptyTestSuiteId;
        public static string NotEmptyTestSuiteSectionName = LangText.NotEmptyTestSuiteSectionName;
        public static string MaximumLengthForTestSuiteSectionName = LangText.MaximumLengthForTestSuiteSectionName;
        public static string NotFoundTestSuiteWithTheId = LangText.NotFoundTestSuiteWithTheId;
        public static string NotFoundTestSuiteSectionWithTheId = LangText.NotFoundTestSuiteSectionWithTheId;
        public static string NotFoundTestSuiteWithTheName = LangText.NotFoundTestSuiteWithTheName;
        public static string InvalidParentSubSectionId = LangText.InvalidParentSubSectionId;
        public static string NotEmptyTestCaseTitle = LangText.NotEmptyTestCaseTitle;
        public static string NotFoundTestCaseWithTheId = LangText.NotFoundTestCaseWithTheId;
        public static string NotEmptyTestSuiteSectionId = LangText.NotEmptyTestSuiteSectionId;
        public static string NotEmptyMilestoneTitle = LangText.NotEmptyMilestoneTitle;
        public static string MaximumLengthForMilestoneTitle = LangText.MaximumLengthForMilestoneTitle;
        public static string NotFoundMilestoneWithTheId = LangText.NotFoundMilestoneWithTheId;
        public static string InvalidParentMilestoneId = LangText.InvalidParentMilestoneId;
        public static string ExceptionDeleteMilestone = LangText.ExceptionDeleteMilestone;
        public static string MaximumLengthForTestRunName = LangText.MaximumLengthForTestRunName;
        public static string NotFoundTestRunWithTheId = LangText.NotFoundTestRunWithTheId;
        public static string NotFoundTestPlanWithTheId = LangText.NotFoundTestPlanWithTheId;
        public static string MaximumLengthForTestCaseTitle = LangText.MaximumLengthForTestCaseTitle;
        public static string NotEmptyTestCaseSectionId = LangText.NotEmptyTestCaseSectionId;
        public static string NotEmptyTestCaseTemplateId = LangText.NotEmptyTestCaseTemplateId;
        public static string NotEmptyTestCaseTypeId = LangText.NotEmptyTestCaseTypeId;
        public static string NotEmptyTestCasePriorityId = LangText.NotEmptyTestCasePriorityId;
        public static string NotEmptyTestCaseId = LangText.NotEmptyTestCaseId;
        public static string TestSuiteUploadSectionNotFound = LangText.TestSuiteUploadSectionNotFound;
        public static string TestSuiteUploadSectionNotPossible = LangText.TestSuiteUploadSectionNotPossible;
        public static string TestSuiteUploadTestCaseNotFound = LangText.TestSuiteUploadTestCaseNotFound;
        public static string TestSuiteUploadParentSectionNotFound = LangText.TestSuiteUploadParentSectionNotFound;
        public static string TestSuiteUploadParentSectionName = LangText.TestSuiteUploadParentSectionName;
        public static string NotEmptyTestCaseStatusId = LangText.NotEmptyTestCaseStatusId;
        public static string NotEmptyTestCaseAssignToId = LangText.NotEmptyTestCaseAssignToId;
        public static string MaximumLengthForAssignToComment = LangText.MaximumLengthForAssignToComment;
        public static string MaximumLengthForStatusComment = LangText.MaximumLengthForStatusComment;
        public static string NotEmptyTestRunId = LangText.NotEmptyTestRunId;
        public static string NotEmptyTestRailId = LangText.NotEmptyTestRailId;
        public static string NotEmptyTestRunName = LangText.NotEmptyTestRunName;
        public static string NotFoundTestCaseStatusWithTheId = LangText.NotFoundTestCaseStatusWithTheId;
        public static string NotFoundTestCaseTypeWithTheId = LangText.NotFoundTestCaseTypeWithTheId;
        public static string NotEmptyReorderTestCaseIds = LangText.ReorderTestCaseIdsNotEmpty;
        public static string NotEmptyMoveTestCaseIds = LangText.MoveTestCaseIdsNotEmpty;
        public static string NotFoundTestCasePriorityWithTheId = LangText.NotFoundTestCasePriorityWithTheId;
        public static string NotEmptyTestCaseStatusValue = LangText.NotEmptyTestCaseStatusValue;
        public static string NotEmptyTestCaseTypeValue = LangText.NotEmptyTestCaseTypeValue;
        public static string NotEmptyTestCasePriorityValue = LangText.NotEmptyTestCasePriorityValue;
        public static string NotEmptyTestPlanName = LangText.NotEmptyTestPlanName;
        public static string NotEmptyMilestoneId = LangText.NotEmptyMilestoneId;
        public static string HeaderColumnsNotMatched = LangText.HeaderColumnsNotMatched;
        public static string NotEmptyReportName = LangText.NotEmptyReportName;
        public static string NotEmptyEmailReceiverList = LangText.NotEmptyEmailReceiverList;
        public static string MaximumLengthForReportName = LangText.MaximumLengthForReportName;
        public static string ExceptionUpsertReport = LangText.ExceptionUpsertReport;
        public static string ExceptionGetReports = LangText.ExceptionGetReports;
        public static string ExceptionGetReportById = LangText.ExceptionGetReportById;
        public static string NotEmptyReportId = LangText.NotEmptyReportId;
        public static string ExceptionTestRailGetProjectsList = LangText.ExceptionTestRailGetProjectsList;
        public static string ExceptionTestSuiteCouldNotBeCreated = LangText.ExceptionTestSuiteCouldNotBeCreated;
        public static string ExceptionSearchTestSuites = LangText.ExceptionSearchTestSuites;
        public static string ExceptionTestSuiteSectionCouldNotBeCreated = LangText.ExceptionTestSuiteSectionCouldNotBeCreated;
        public static string ExceptionSearchTestSuiteSections = LangText.ExceptionSearchTestSuiteSections;
        public static string ExceptionTestCaseCouldNotBeCreated = LangText.ExceptionTestCaseCouldNotBeCreated;
        public static string ExceptionSearchTestCasesBasedOnFilters = LangText.ExceptionSearchTestCasesBasedOnFilters;
        public static string ExceptionSearchTestCases = LangText.ExceptionSearchTestCases;
        public static string ExceptionMoveTestCases = LangText.ExceptionMoveTestCases;
        public static string ExceptionUpdateMultipleTestCases = LangText.ExceptionUpdateMultipleTestCases;
        public static string ExceptionGetSectionsAndSubsections = LangText.ExceptionGetSectionsAndSubsections;
        public static string ExceptionUpsertTestCaseStatusMasterValue = LangText.ExceptionUpsertTestCaseStatusMasterValue;
        public static string ExceptionUpsertTestCaseTypeMasterValue = LangText.ExceptionUpsertTestCaseTypeMasterValue;
        public static string ExceptionUpsertTestCasePriorityMasterValue = LangText.ExceptionUpsertTestCasePriorityMasterValue;
        public static string ExceptionGetAllTestCaseStatuses = LangText.ExceptionGetAllTestCaseStatuses;
        public static string ExceptionGetAllTestCaseTypes = LangText.ExceptionGetAllTestCaseTypes;
        public static string ExceptionGetAllTestCasePriorities = LangText.ExceptionGetAllTestCasePriorities;
        public static string ExceptionGetAllTestCaseTemplates = LangText.ExceptionGetAllTestCaseTemplates;
        public static string ExceptionGetAllTestCaseAutomationTypes = LangText.ExceptionGetAllTestCaseAutomationTypes;
        public static string ExceptionUploadTestCases = LangText.ExceptionUploadTestCases;
        public static string ExceptionDeleteTestSuite = LangText.ExceptionDeleteTestSuite;
        public static string ExceptionDeleteTestSuiteSection = LangText.ExceptionDeleteTestSuiteSection;
        public static string ExceptionDeleteTestCase = LangText.ExceptionDeleteTestCase;
        public static string ExceptionMilestoneCouldNotBeCreated = LangText.ExceptionMilestoneCouldNotBeCreated;
        public static string ExceptionSearchMilestones = LangText.ExceptionSearchMilestones;
        public static string ExceptionGetMilestoneReport = LangText.ExceptionGetMilestoneReport;
        public static string ExceptionUpsertTestRun = LangText.ExceptionUpsertTestRun;
        public static string ExceptionSearchTestRuns = LangText.ExceptionSearchTestRuns;
        public static string ExceptionDeleteTestRun = LangText.ExceptionDeleteTestRun;
        public static string ExceptionGetProjectMemberDropdown = LangText.ExceptionGetProjectMemberDropdown;
        public static string ExceptionUpsertTestPlan = LangText.ExceptionUpsertTestPlan;
        public static string ExceptionSearchTestPlans = LangText.ExceptionSearchTestPlans;
        public static string ExceptionGetTestRunsAndTestPlans = LangText.ExceptionGetTestRunsAndTestPlans;
        public static string ExceptionGetTestRunReport = LangText.ExceptionGetTestRunReport;
        public static string ExceptionGetTestPlanReport = LangText.ExceptionGetTestPlanReport;
        public static string ExceptionUpdateTestCaseStatus = LangText.ExceptionUpdateTestCaseStatus;
        public static string ExceptionGetProjectOverviewReport = LangText.ExceptionGetProjectOverviewReport;
        public static string ExceptionUpsertTestRailAudit = LangText.ExceptionUpsertTestRailAudit;
        public static string ExceptionGetTestRailAudits = LangText.ExceptionGetTestRailAudits;
        public static string ExceptionTransitionDeadlineUpsert = LangText.ExceptionTransitionDeadlineUpsert;
        public static string ExceptionGetAllTransitionDeadlines = LangText.ExceptionGetAllTransitionDeadlines;
        public static string ExceptionGetTransitionDeadlineById = LangText.ExceptionGetTransitionDeadlineById;
        public static string NotEmptyDeadlineName = LangText.NotEmptyDeadlineName;
        public static string AlreadyExistDeadlineWithTheName = LangText.AlreadyExistDeadlineWithTheName;
        public static string ExceptionTransitionDeadlineCouldNotBeCreated = LangText.ExceptionTransitionDeadlineCouldNotBeCreated;
        public static string NotFoundTransitionDeadlineWithTheId = LangText.NotFoundTransitionDeadlineWithTheId;
        public static string NotEmptyTransitionDeadlineId = LangText.NotEmptyTransitionDeadlineId;
        public static string ExceptionFileUpsert = LangText.ExceptionFileUpsert;
        public static string ExceptionDownloadFile = LangText.ExceptionDownloadFile;
        public static string ExceptionGetFileDetailById = LangText.ExceptionGetFileDetailById;
        public static string ExceptionSearchFiles = LangText.ExceptionSearchFiles;
        public static string NotEmptyFileName = LangText.NotEmptyFileName;
        public static string ExceptionFileCouldNotBeCreated = LangText.ExceptionFileCouldNotBeCreated;
        public static string NotFoundFileWithTheId = LangText.NotFoundFileWithTheId;
        public static string NotEmptyFileId = LangText.NotEmptyFileId;
        public static string NotEmptyFileDownLoad = LangText.NotEmptyFileDownLoad;
        public static string WorkAllocationDetailsNotFound = LangText.WorkAllocationDetailsNotFound;
        public static string ExceptionWorkUpsert = LangText.ExceptionWorkUpsert;
        public static string ExceptionGetWorkById = LangText.ExceptionGetWorkById;
        public static string WorkDetailsNotFound = LangText.WorkDetailsNotFound;
        public static string WorkIdIsRequired = LangText.WorkIdIsRequired;
        public static string WorkTypeIdIsRequired = LangText.WorkTypeIdIsRequired;
        public static string WorkJsonDataIsRequired = LangText.WorkJsonDataIsRequired;
        public static string DateIsRequired = LangText.DateIsRequired;
        public static string UserIdIsRequired = LangText.UserIdIsRequired;
        public static string MessageIsRequired = LangText.MessageIsRequired;
        public static string NotEmptyLeaveSessionName = LangText.NotEmptyLeaveSessionName;
        public static string AlreadyExistLeaveSessionWithTheName = LangText.AlreadyExistLeaveSessionWithTheName;
        public static string NotFoundLeaveSessionWithTheId = LangText.NotFoundLeaveSessionWithTheId;
        public static string NotFoundLeaveSessionId = LangText.NotFoundLeaveSessionId;
        public static string NotEmptyLeaveReason = LangText.NotEmptyLeaveReason;
        public static string NotEmptyLeaveSessionId = LangText.NotEmptyLeaveSessionId;
        public static string ExceptionGetLeaveSessionById = LangText.ExceptionGetLeaveSessionById;
        public static string NotEmptyLeaveApplicationId = LangText.NotEmptyLeaveApplicationId;
        public static string NotFoundLeaveApplicationWithTheId = LangText.NotFoundLeaveApplicationWithTheId;
        public static string ExceptionTimeSheetUpsert = LangText.ExceptionTimeSheetUpsert;
        public static string NotEmptyPermissionReasonId = LangText.NotEmptyPermissionReasonId;
        public static string NotEmptyDuration = LangText.NotEmptyDuration;
        public static string NotEmptyModel = LangText.NotEmptyModel;
        public static string SeatingModelEmpty = LangText.SeatingModelEmpty;
        public static string SupplierModelEmpty = LangText.SupplierModelEmpty;
        public static string ProductModelEmpty = LangText.ProductModelEmpty;
        public static string ProductDetailModelEmpty = LangText.ProductDetailModelEmpty;
        public static string AlreadyExistLocationWithSameSeatCode = LangText.AlreadyExistLocationWithSameSeatCode;
        public static string AssetAlreadyExistsWithTheSameAssetNumber = LangText.AssetAlreadyExistsWithTheSameAssetNumber;
        public static string AssetNumberLengthValidation = LangText.AssetNumberLengthValidation;
        public static string NotEmptyOrderedDate = LangText.NotEmptyOrderedDate;
        public static string NotEmptyFoodOrderItems = LangText.NotEmptyFoodOrderItems;
        public static string NotEmptyFoodOrderMembers = LangText.NotEmptyFoodOrderMembers;
        public static string NotEmptyFoodOrderAmount = LangText.NotEmptyFoodOrderAmount;
        public static string NotEmptyCurrencyId = LangText.NotEmptyCurrencyId;
        public static string NotEmptyFoodOrderId = LangText.NotEmptyFoodOrderId;
        public static string NotEmptyFoodOrderApproveStatus = LangText.NotEmptyFoodOrderApproveStatus;
        public static string NotEmptyFoodOrderRejectReason = LangText.NotEmptyFoodOrderRejectReason;
        public static string ValidFoodOrderAmount = LangText.ValidFoodOrderAmount;
        public static string NotEmptyFoodItemName = LangText.NotEmptyFoodItemName;
        public static string AlreadyExistCanteenFoodItem = LangText.AlreadyExistCanteenFoodItem;
        public static string InvalidFoodItemPrice = LangText.InvalidFoodItemPrice;
        public static string NotEmptyAmount = LangText.NotEmptyAmount;
        public static string AmountLessThanZero = LangText.AmountLessThanZero;
        public static string NotEmptyCurrency = LangText.NotEmptyCurrency;
        public static string NotEmptyPurchaseList = LangText.NotEmptyPurchaseList;
        public static string NotEmptyCanteenFoodItem = LangText.NotEmptyCanteenFoodItem;
        public static string FoodItemQuantityIsNotEmpty = LangText.FoodItemQuantityIsNotEmpty;
        public static string ExceptionSearchCanteenFoodItems = LangText.ExceptionSearchCanteenFoodItems;
        public static string ExceptionSearchComments = LangText.ExceptionSearchComments;
        public static string ExceptionCanteenFoodItem = LangText.ExceptionCanteenFoodItem;
        public static string ExceptionGetAllProducts = LangText.ExceptionGetAllProducts;
        public static string ExceptionSearchProducts = LangText.ExceptionSearchProducts;
        public static string ExceptionGetProductById = LangText.ExceptionGetProductById;
        public static string NotFoundFoodItemWithTheId = LangText.NotFoundFoodItemWithTheId;
        public static string NotFoundBoardTypeUiDetailsById = LangText.NotFoundBoardTypeUiDetailsById;
        public static string ExceptionSearchConfigurationTypes = LangText.ExceptionSearchConfigurationTypes;
        public static string ExceptionSearchConfigurationSettings = LangText.ExceptionSearchConfigurationSettings;
        public static string SearchMandatoryFieldsBasedOnConfiguration = LangText.SearchMandatoryFieldsBasedOnConfiguration;
        public static string ExceptionGetAllConsideredHours = LangText.ExceptionGetAllConsideredHours;
        public static string ExceptionSearchMerchants = LangText.ExceptionSearchMerchants;
        public static string ExceptionUpsertExpenseCategory = LangText.ExceptionUpsertExpenseCategory;
        public static string ExceptionSearchExpenseCategory = LangText.ExceptionSearchExpenseCategory;
        public static string ExceptionGetAllGoalReplanTypes = LangText.ExceptionGetAllGoalReplanTypes;
        public static string ExceptionSearchGoals = LangText.ExceptionSearchGoals;
        public static string ExceptionUserStoriesForAllGoals = LangText.ExceptionUserStoriesForAllGoals;
        public static string ExceptionArchiveGoal = LangText.ExceptionArchiveGoal;
        public static string ExceptionParkGoal = LangText.ExceptionParkGoal;
        public static string ExceptionUpsertProjectMember = LangText.ExceptionUpsertProjectMember;
        public static string ExceptionGetAllProjectMembers = LangText.ExceptionGetAllProjectMembers;
        public static string ExceptionGetProjectOverViewDetails = LangText.ExceptionGetProjectOverViewDetails;
        public static string ExceptionSearchProjects = LangText.ExceptionSearchProjects;
        public static string ExceptionUpsertProject = LangText.ExceptionUpsertProject;
        public static string ExceptionSearchProjectTags = LangText.ExceptionSearchProjectTags;
        public static string ExceptionGetEmployeeAttendanceByDay = LangText.ExceptionGetEmployeeAttendanceByDay;
        public static string ExceptionGetEmployeeWorkingDays = LangText.ExceptionGetEmployeeWorkingDays;
        public static string ExceptionGetEmployeeSpentTime = LangText.ExceptionGetEmployeeSpentTime;
        public static string ExceptionGetLateEmployee = LangText.ExceptionGetLateEmployee;
        public static string ExceptionGetEmployeePresence = LangText.ExceptionGetEmployeePresence;
        public static string ExceptionGetLeavesReport = LangText.ExceptionGetLeavesReport;
        public static string ExceptionGetLateEmployeeCount = LangText.ExceptionGetLateEmployeeCount;
        public static string ExceptionGetLineManagers = LangText.ExceptionGetLineManagers;
        public static string ExceptionGetDailyLogTimeReport = LangText.ExceptionGetDailyLogTimeReport;
        public static string ExceptionGetMonthlyLogTimeReport = LangText.ExceptionGetMonthlyLogTimeReport;
        public static string ExceptionGetOrganizationChartDetails = LangText.ExceptionGetOrganizationChartDetails;
        public static string ExceptionUpsertSignature = LangText.ExceptionUpsertSignature;
        public static string ExceptionGetSignature = LangText.ExceptionGetSignature;
        public static string ExceptionUpsertReminder = LangText.ExceptionUpsertReminder;
        public static string ExceptionGetReminder = LangText.ExceptionGetReminder;
        public static string ExceptionGetAllProjectTypes = LangText.ExceptionGetAllProjectTypes;
        public static string ExceptionSearchRoleFeatures = LangText.ExceptionSearchRoleFeatures;
        public static string ExceptionGetIfUserCanHaveAccess = LangText.ExceptionGetIfUserCanHaveAccess;
        public static string ExceptionGetAllBugPriorities = LangText.ExceptionGetAllBugPriorities;
        public static string ExceptionUpsertRole = LangText.ExceptionUpsertRole;
        public static string ExceptionDeleteRole = LangText.ExceptionDeleteRole;
        public static string ExceptionGetRoleDetailsById = LangText.ExceptionGetRoleDetailsById;
        public static string ExceptionGetRoleDetailsByName = LangText.ExceptionGetRoleDetailsByName;
        public static string ExceptionGetAllGoalStatuses = LangText.ExceptionGetAllGoalStatuses;
        public static string ExceptionUpsertStatus = LangText.ExceptionUpsertStatus;
        public static string ExceptionGetAllStatuses = LangText.ExceptionGetAllStatuses;
        public static string ExceptionGetUserStoryReplanTypes = LangText.ExceptionGetUserStoryReplanTypes;
        public static string ExceptionGetAllLogTimeOptions = LangText.ExceptionGetAllLogTimeOptions;
        public static string ExceptionInsertUserStoryLogTime = LangText.ExceptionInsertUserStoryLogTime;
        public static string ExceptionSearchUserStoryLogTime = LangText.ExceptionSearchUserStoryLogTime;
        public static string ExceptionSearchSpentTimeReport = LangText.ExceptionSearchSpentTimeReport;
        public static string ExceptionGetMenuItems = LangText.ExceptionGetMenuItems;
        public static string ExceptionSearchAuditHistory = LangText.ExceptionSearchAuditHistory;
        public static string ExceptionInsertAudit = LangText.ExceptionInsertAudit;
        public static string ExceptionGetStatusConfigurationOptions = LangText.ExceptionGetStatusConfigurationOptions;
        public static string ExceptionGetReportToMembers = LangText.ExceptionGetReportToMembers;
        public static string ExceptionUpsertReportSeenStatus = LangText.ExceptionUpsertReportSeenStatus;
        public static string ExceptionUpsertStatusReportingConfiguration = LangText.ExceptionUpsertStatusReportingConfiguration;
        public static string ExceptionGetStatusReportingConfigurations = LangText.ExceptionGetStatusReportingConfigurations;
        public static string ExceptionGetStatusReportingConfigurationForms = LangText.ExceptionGetStatusReportingConfigurationForms;
        public static string ExceptionCreateStatusReport = LangText.ExceptionCreateStatusReport;
        public static string ExceptionGetStatusReportings = LangText.ExceptionGetStatusReportings;
        public static string ExceptionGetProductivityIndexForDevelopers = LangText.ExceptionGetProductivityIndexForDevelopers;
        public static string ExceptionGetUserStoryStatuses = LangText.ExceptionGetUserStoryStatuses;
        public static string ExceptionGetQaPerformance = LangText.ExceptionGetQaPerformance;
        public static string ExceptionGetUserStoriesWaitingForQaApproval = LangText.ExceptionGetUserStoriesWaitingForQaApproval;
        public static string ExceptionGetEveryDayTargetStatus = LangText.ExceptionGetEveryDayTargetStatus;
        public static string ExceptionGetBugReport = LangText.ExceptionGetBugReport;
        public static string ExceptionUpsertFile = LangText.ExceptionUpsertFile;
        public static string ExceptionSearchFile = LangText.ExceptionSearchFile;
        public static string ExceptionUpdateFolderAndStore = LangText.ExceptionUpdateFolderAndStore;
        public static string ExceptionSearchTestRailFile = LangText.ExceptionSearchTestRailFile;
        public static string ExceptionSearchFoodOrders = LangText.ExceptionSearchFoodOrders;
        public static string ExceptionUpsertExpenseStatus = LangText.ExceptionUpsertExpenseStatus;
        public static string ExceptionSearchExpenseStatuses = LangText.ExceptionSearchExpenseStatuses;
        public static string ExceptionUpsertExpenseReport = LangText.ExceptionUpsertExpenseReport;
        public static string ExceptionUpsertExpenseReportStatus = LangText.ExceptionUpsertExpenseReportStatus;
        public static string ExceptionSearchExpenseReportStatuses = LangText.ExceptionSearchExpenseReportStatuses;
        public static string ExceptionSearchExpenseReports = LangText.ExceptionSearchExpenseReports;
        public static string ExceptionInsertMultipleExpenses = LangText.ExceptionInsertMultipleExpenses;
        public static string ExceptionUpsertExpense = LangText.ExceptionUpsertExpense;
        public static string ExceptionSearchExpenses = LangText.ExceptionSearchExpenses;
        public static string ExceptionGetExpenseReportSummary = LangText.ExceptionGetExpenseReportSummary;
        public static string ExceptionGetAllFeatures = LangText.ExceptionGetAllFeatures;
        public static string ExceptionGetAllUserPermittedFeatures = LangText.ExceptionGetAllUserPermittedFeatures;
        public static string ExceptionGenericFormInsert = LangText.ExceptionGenericFormInsert;
        public static string ExceptionGenericFormGet = LangText.ExceptionGenericFormGet;
        public static string ExceptionGetGenericFormsByTypeId = LangText.ExceptionGetGenericFormsByTypeId;
        public static string ExceptionGetCustomApplicationTag = LangText.ExceptionGetCustomApplicationTag;
        public static string ExceptionGetTrends = LangText.ExceptionGetTrends;
        public static string ExceptionGetFormTypes = LangText.ExceptionGetFormTypes;
        public static string ExceptionGetPaymentTypes = LangText.ExceptionGetPaymentTypes;
        public static string ExceptionGetLeaveStatus = LangText.ExceptionGetLeaveStatus;
        public static string ExceptionGetMyProjectWork = LangText.ExceptionGetMyProjectWork;
        public static string ExceptionGetMyWork = LangText.ExceptionGetMyWork;
        public static string ExceptionUpsertEmployee = LangText.ExceptionUpsertEmployee;
        public static string ExceptionGetTimeZone = LangText.ExceptionGetTimeZone;
        public static string ExceptionGetCurrencyList = LangText.ExceptionGetCurrencyList;
        public static string ExceptionGetCurrencyById = LangText.ExceptionGetCurrencyById;
        public static string ExceptionSearchCanteenCredit = LangText.ExceptionSearchCanteenCredit;
        public static string ExceptionPurchasedCanteenFoodItem = LangText.ExceptionPurchasedCanteenFoodItem;
        public static string ExceptionSearchCanteenPurchases = LangText.ExceptionSearchCanteenPurchases;
        public static string ExceptionUpsertLeaveType = LangText.ExceptionUpsertLeaveType;
        public static string ExceptionSearchLeaveType = LangText.ExceptionSearchLeaveType;
        public static string ExceptionGetAllMasterLeavetypes = LangText.ExceptionGetAllMasterLeavetypes;
        public static string ExceptionUpsertLeaveSession = LangText.ExceptionUpsertLeaveSession;
        public static string ExceptionSearchLeaveSession = LangText.ExceptionSearchLeaveSession;
        public static string ExceptionProductDetail = LangText.ExceptionProductDetail;
        public static string ExceptionProductDetailsById = LangText.ExceptionProductDetailsById;
        public static string ExceptionGetAllProductDetails = LangText.ExceptionGetAllProductDetails;
        public static string ExceptionSearchProductDetails = LangText.ExceptionSearchProductDetails;
        public static string ExceptionMerchantCouldNotBeCreated = LangText.ExceptionMerchantCouldNotBeCreated;
        public static string ExceptionExpenseCategoryCouldNotBeCreated = LangText.ExceptionExpenseCategoryCouldNotBeCreated;
        public static string NotEmptyMerchantName = LangText.NotEmptyMerchantName;
        public static string NotEmptyMerchantId = LangText.NotEmptyMerchantId;
        public static string NotFoundMerchantwithTheId = LangText.NotFoundMerchantwithTheId;
        public static string NotEmptyExpenseCategoryName = LangText.NotEmptyExpenseCategoryName;
        public static string NotEmptyExpenseCategoryAccountCode = LangText.NotEmptyExpenseCategoryAccountCode;
        public static string MaximumLengthForExpenseCategoryName = LangText.MaximumLengthForExpenseCategoryName;
        public static string MaximumLengthForExpenseCategoryAccountCode = LangText.MaximumLengthForExpenseCategoryAccountCode;
        public static string MaximumLengthForExpenseCategoryDescription = LangText.MaximumLengthForExpenseCategoryDescription;
        public static string NotEmptyExpenseStatusName = LangText.NotEmptyExpenseStatusName;
        public static string NotFoundExpensesWithTheId = LangText.NotFoundExpensesWithTheId;
        public static string ExceptionExpensesReportCouldNotBeCreated = LangText.ExceptionExpensesReportCouldNotBeCreated;
        public static string MaximumLengthForExpenseStatusName = LangText.MaximumLengthForExpenseStatusName;
        public static string NotEmptyExpenseStatusId = LangText.NotEmptyExpenseStatusId;
        public static string NotFoundExpenseStatusWithTheId = LangText.NotFoundExpenseStatusWithTheId;
        public static string ExceptionExpensesReportStatusCouldNotBeCreated = LangText.ExceptionExpensesReportStatusCouldNotBeCreated;
        public static string NotEmptyExpenseReportStatusName = LangText.NotEmptyExpenseReportStatusName;
        public static string MaximumLengthForExpenseReportStatusName = LangText.MaximumLengthForExpenseReportStatusName;
        public static string MaximumLengthForExpenseReportStatusDescription = LangText.MaximumLengthForExpenseReportStatusDescription;
        public static string NotEmptyExpenseReportStatusId = LangText.NotEmptyExpenseReportStatusId;
        public static string NotFoundExpenseReportStatusWithTheId = LangText.NotFoundExpenseReportStatusWithTheId;
        public static string NotFoundExpenseReportWithTheId = LangText.NotFoundExpenseReportWithTheId;
        public static string NotEmptyExpenseDescription = LangText.NotEmptyExpenseDescription;
        public static string NotEmptyExpenseId = LangText.NotEmptyExpenseId;
        public static string NotFoundExpenseWithTheId = LangText.NotFoundExpenseWithTheId;
        public static string MaximumLengthForExpenseDescription = LangText.MaximumLengthForExpenseDescription;
        public static string MaximumLengthForGoalDescription = LangText.MaximumLengthExceededForGoalDescription;
        public static string ExceptionExpenseCouldNotBeCreated = LangText.ExceptionExpenseCouldNotBeCreated;
        public static string ExceptionExpenseStatusCouldNotBeCreated = LangText.ExceptionExpenseStatusCouldNotBeCreated;
        public static string ExceptionExpenseUpsert = LangText.ExceptionExpenseUpsert;
        public static string NotFoundExpenseReportSummaryForUser = LangText.NotFoundExpenseReportSummaryForUser;
        public static string NotEmptyExpensesAmount = LangText.NotEmptyExpensesAmount;
        public static string NotEmptyExpensesDescription = LangText.NotEmptyExpensesDescription;
        public static string MaximumLengthForExpenseStatusDescription = LangText.MaximumLengthForExpenseStatusDescription;
        public static string NotEmptyIndustryId = LangText.NotEmptyIndustryId;
        public static string NotEmptyCompanyModuleId = LangText.NotEmptyCompanyModuleId;
        public static string NotEmptyLeavePermissionId = LangText.NotEmptyLeavePermissionId;
        public static string NotEmptyLeaveId = LangText.NotEmptyLeaveId;
        public static string NotEmptyCompanyName = LangText.NotEmptyCompanyName;
        public static string CompanyNameLengthExceeded = LangText.CompanyNameLengthExceeded;
        public static string NotEmptyMainUseCaseId = LangText.NotEmptyMainUseCaseId;
        public static string ExceptionIndustryById = LangText.ExceptionIndustryById;
        public static string ExceptionMainUseCaseById = LangText.ExceptionMainUseCaseById;
        public static string NotEmptyModuleId = LangText.NotEmptyModuleId;
        public static string NotEmptyIndustryModuleId = LangText.NotEmptyIndustryModuleId;
        public static string NotEmptyNumberFormatId = LangText.NotEmptyNumberFormatId;
        public static string NotEmptyDateFormatId = LangText.NotEmptyDateFormatId;
        public static string NotEmptyTimeFormatId = LangText.NotEmptyTimeFormatId;
        public static string NotEmptyCompanyId = LangText.NotEmptyCompanyId;
        public static string NotEmptyLeaveStatusId = LangText.NotEmptyLeaveStatusId;
        public static string NotEmptyIntroducedByOptionId = LangText.NotEmptyIntroducedByOptionId;
        public static string ExceptionIndustryModuleById = LangText.ExceptionIndustryModuleById;
        public static string ExceptionNumberFormatById = LangText.ExceptionNumberFormatById;
        public static string ExceptionDateFormatById = LangText.ExceptionDateFormatById;
        public static string ExceptionTimeFormatById = LangText.ExceptionTimeFormatById;
        public static string ExceptionCompanyById = LangText.ExceptionCompanyById;
        public static string ExceptionIntroducedByOptionById = LangText.ExceptionIntroducedByOptionById;
        public static string NotEmptyUserStoryReviewComment = LangText.NotEmptyUserStoryReviewComment;
        public static string MaximumLengthForUserStoryReviewComment = LangText.MaximumLengthForUserStoryReviewComment;
        public static string NotEmptyUserStoryReviewStatusId = LangText.NotEmptyUserStoryReviewStatusId;
        public static string NotFoundUserStoryReviewCommentWithTheId = LangText.NotFoundUserStoryReviewCommentWithTheId;
        public static string ExceptionUserStoryReviewCommentCouldNotBeCreated = LangText.ExceptionUserStoryReviewCommentCouldNotBeCreated;
        public static string ExceptionUserStoryReviewCommentUpsert = LangText.ExceptionUserStoryReviewCommentUpsert;
        public static string NotEmptyUserStorySubTypeId = LangText.NotEmptyUserStorySubTypeId;
        public static string NotEmptyUserStorySubTypeName = LangText.NotEmptyUserStorySubTypeName;
        public static string MaximumLengthForUserStorySubTypeName = LangText.MaximumLengthForUserStorySubTypeName;
        public static string NotFoundUserStorySubTypeWithTheId = LangText.NotFoundUserStorySubTypeWithTheId;
        public static string ExceptionUserStorySubTypeCouldNotBeCreated = LangText.ExceptionUserStorySubTypeCouldNotBeCreated;
        public static string ExceptionUserStorySubTypeUpsert = LangText.ExceptionUserStorySubTypeUpsert;
        public static string ExceptionSearchUserStorySubTypes = LangText.ExceptionSearchUserStorySubTypes;
        public static string ExceptionSearchUserStoryLinks = LangText.ExceptionSearchUserStoryLinks;
        public static string ExceptionUpsertUserStoryLink = LangText.ExceptionUpsertUserStoryLink;
        public static string ExceptionArchiveUserStoryLink = LangText.ExceptionArchiveUserStoryLink;
        public static string ExceptionGetLinksCountByUserStoryId = LangText.ExceptionGetLinksCountByUserStoryId;
        public static string ExceptionSearchUserStoryLinksTypes = LangText.ExceptionSearchUserStoryLinksTypes;
        public static string ExceptionBugPriority = LangText.ExceptionBugPriority;
        public static string ExceptionUserStoryReplanType = LangText.ExceptionUserStoryReplanType;
        public static string ExceptionIndustryModule = LangText.ExceptionIndustryModule;
        public static string ExceptionUpsertCustomTags = LangText.ExceptionUpsertCustomTags;
        public static string ExceptionSearchCustomTags = LangText.ExceptionSearchCustomTags;
        public static string ExceptionCurrency = LangText.ExceptionCurrency;
        public static string ExceptionSkills = LangText.ExceptionSkills;
        public static string ExceptionGenericForm = LangText.ExceptionGenericForm;
        public static string ExceptionUpsertInductionConfiguration = LangText.ExceptionUpsertInductionConfiguration;

        public static string ExceptionUpsertCustomFormSubmission = LangText.ExceptionUpsertCustomFormSubmission;
        public static string ExceptionGetCustomFormSubmissions = LangText.ExceptionGetCustomFormSubmissions;
        public static string ExceptionPaymentType = LangText.ExceptionPaymentType;
        public static string ExceptionLeaveStatus = LangText.ExceptionLeaveStatus;
        public static string ExceptionFeedbacktype = LangText.ExceptionFeedbacktype;
        public static string ExceptionAccessibleIpAddress = LangText.ExceptionAccessibleIpAddress;
        public static string ExceptionEmployeeSalaryDetails = LangText.ExceptionEmployeeSalaryDetails;
        public static string ExceptionEmployeeWorkExperience = LangText.ExceptionEmployeeWorkExperience;
        public static string ExceptionEmployeeEducationDetails = LangText.ExceptionEmployeeEducationDetails;
        public static string ExceptionEmployeeSkills = LangText.ExceptionEmployeeSkills;
        public static string ExceptionEmploymentStatus = LangText.ExceptionEmploymentStatus;
        public static string ExceptionPayFrequency = LangText.ExceptionPayFrequency;
        public static string ExceptionLanguage = LangText.ExceptionLanguage;
        public static string UpsertTaxSlabs = LangText.UpsertTaxSlabs;
        public static string ExceptionUpsertProfessionalTaxRanges = LangText.UpsertProfessionalTaxRanges;
        public static string ExceptionJobCategories = LangText.ExceptionJobCategories;
        public static string ExceptionNationality = LangText.ExceptionNationality;
        public static string ExceptionEmployeeLanguages = LangText.ExceptionEmployeeLanguages;
        public static string ExceptionEmployeeReportTo = LangText.ExceptionEmployeeReportTo;
        public static string ExceptionUpsertEmployeechannel = LangText.ExceptionUpsertEmployeechannel;
        public static string ExceptionRateType = LangText.ExceptionRateType;
        public static string ExceptionUpsertDashboardVisuaizationType = LangText.ExceptionUpsertDashboardVisuaizationType;
        public static string ExceptionSetDefaultUserDashboard = LangText.ExceptionSetDefaultUserDashboard;
        public static string ExceptionSetCustomAppDashboardPersistance = LangText.ExceptionSetCustomAppDashboardPersistance;
        public static string ExceptionUpdateDashboardName = LangText.ExceptionUpdateDashboardName;
        public static string ExceptionUpsertWorkspaceDashboardFilter = LangText.ExceptionUpsertWorkspaceDashboardFilter;
        public static string ExceptionGetWorkspaceDashboardFilters = LangText.ExceptionGetWorkspaceDashboardFilters;
        public static string ExceptionGetCustomAppDashboardPersistance = LangText.ExceptionGetCustomAppDashboardPersistance;
        public static string ExceptionGetFeedTimeHistory = LangText.ExceptionGetFeedTimeHistory;
        public static string ExceptionGetUserFeedTimeHistory = LangText.ExceptionGetUserFeedTimeHistory;
        public static string ExceptionCurrencyConversion = LangText.ExceptionCurrencyConversion;
        public static string ExceptionPaymentMethod = LangText.ExceptionPaymentMethod;
        public static string ExceptionUpsertSoftLabels = LangText.ExceptionUpsertSoftLabels;
        public static string ExceptionDeleteCompanyModule = LangText.ExceptionDeleteCompanyModule;
        public static string ExceptionDeleteLeavePermission = LangText.ExceptionDeleteLeavePermission;
        public static string ExceptionUpsertLeaveApplicability = LangText.ExceptionUpsertLeaveApplicability;
        public static string ExceptionDeleteLeave = LangText.ExceptionDeleteLeave;
        public static string ExceptionUpsertSeatingArrangement = LangText.ExceptionUpsertSeatingArrangement;
        public static string ExceptionSearchSeating = LangText.ExceptionSearchSeating;
        public static string ExceptionGetSeatingById = LangText.ExceptionGetSeatingById;
        public static string ExceptionSearchAssets = LangText.ExceptionSearchAssets;
        public static string ExceptionGetAllUsersAssets = LangText.ExceptionGetAllUsersAssets;
        public static string ExceptionGetAssetsAssignedToEmployees = LangText.ExceptionGetAssetsAssignedToEmployees;
        public static string ExceptionGetAssetCommentsAndHistory = LangText.ExceptionGetAssetCommentsAndHistory;
        public static string ExceptionEmployeeEmergencyContact = LangText.ExceptionEmployeeEmergencyContact;
        public static string ExceptionEmploymentContract = LangText.ExceptionEmploymentContract;
        public static string ExceptionEmployeeJob = LangText.ExceptionEmployeeJob;
        public static string ExceptionEmployeeImmigrationDetails = LangText.ExceptionEmployeeImmigrationDetails;
        public static string ExceptionGetEmployeeWorkAllocation = LangText.ExceptionGetEmployeeWorkAllocation;
        public static string NotEmptyCompanyLocation = LangText.NotEmptyCompanyLocation;
        public static string NotEmptyCompanyAddress = LangText.NotEmptyCompanyAddress;
        public static string NotEmptyCompanyLatitude = LangText.NotEmptyCompanyLatitude;
        public static string NotEmptyCompanyLongitude = LangText.NotEmptyCompanyLongitude;
        public static string NotEmptyCompanyLocationId = LangText.NotEmptyCompanyLocationId;
        public static string CompanyLocationNameLengthExceed = LangText.CompanyLocationNameLengthExceed;
        public static string CompanyAddressLengthExceed = LangText.CompanyAddressLengthExceed;
        public static string ExceptionUpsertCompany = LangText.ExceptionUpsertCompany;
        public static string ExceptionUpsertEmployeePersonalDetails = LangText.ExceptionUpsertEmployeePersonalDetails;
        public static string ExceptionUpsertEmployeeLicenceDetails = LangText.ExceptionUpsertEmployeeLicenceDetails;
        public static string ExceptionUpsertEmployeeContactDetails = LangText.ExceptionUpsertEmployeeContactDetails;
        public static string ExceptionPayGradeRates = LangText.ExceptionPayGradeRates;
        public static string NotEmptyChannelId = LangText.NotEmptyChannelId;
        public static string NotEmptyChannelName = LangText.NotEmptyChannelName;
        public static string MaximumLengthForChannelName = LangText.MaximumLengthForChannelName;
        public static string ExceptionCreateNewChannel = LangText.ExceptionCreateNewChannel;
        public static string ExceptionAddChannelMember = LangText.ExceptionAddChannelMember;
        public static string ExceptionUpdateChannel = LangText.ExceptionUpdateChannel;
        public static string ExceptionUserChannels = LangText.ExceptionUserChannels;
        public static string ExceptionArchiveChannel = LangText.ExceptionArchiveChannel;
        public static string ExceptionAddEmployeesToChannel = LangText.ExceptionAddEmployeesToChannel;
        public static string ExceptionArchiveChannelMembers = LangText.ExceptionArchiveChannelMembers;
        public static string ExceptionActiveChannelMembers = LangText.ExceptionActiveChannelMembers;
        public static string ExceptionInActiveChannelMembers = LangText.ExceptionInActiveChannelMembers;
        public static string ExceptionGetRecentIndividualMessages = LangText.ExceptionGetRecentIndividualMessages;
        public static string ExceptionGetRecentChannelMessages = LangText.ExceptionGetRecentChannelMessages;
        public static string ExceptionInGetEnableOrDisableTimeSheetButtonDetails = LangText.ExceptionInGetEnableOrDisableTimeSheetButtonDetails;
        public static string ExceptionGetTimeSheetDetails = LangText.ExceptionGetTimeSheetDetails;
        public static string ExceptionGetTimeSheetHistoryDetails = LangText.ExceptionGetTimeSheetHistoryDetails;
        public static string ExceptionGetTimeSheetPermissions = LangText.ExceptionGetTimeSheetPermissions;
        public static string ExceptionDeleteProjectMember = LangText.ExceptionDeleteProjectMember;
        public static string ExceptionEntityRole = LangText.ExceptionEntityRole;
        public static string ExceptionDeleteEntityRole = LangText.ExceptionDeleteEntityRole;
        public static string ExceptionDeleteProjectFeature = LangText.ExceptionDeleteProjectFeature;
        public static string NotEmptyContractTypeName = LangText.NotEmptyContractTypeName;
        public static string MaximumLengthForContractTypeName = LangText.MaximumLengthForContractTypeName;
        public static string NotEmptyContractTypeId = LangText.NotEmptyContractTypeId;
        public static string NotEmptyDesignationId = LangText.NotEmptyDesignationId;
        public static string NotEmptySkillId = LangText.NotEmptySkillId;
        public static string NotEmptyLanguageId = LangText.NotEmptyLanguageId;
        public static string NotEmptyFluencyId = LangText.NotEmptyFluencyId;
        public static string NotEmptyCompetencyId = LangText.NotEmptyCompetencyId;
        public static string NotEmptyEducationLevelId = LangText.NotEmptyEducationLevelId;
        public static string NotEmptyEmploymentStatusId = LangText.NotEmptyEmploymentStatusId;
        public static string NotEmptyJobCategoryId = LangText.NotEmptyJobCategoryId;
        public static string NotEmptyDateOfJoining = LangText.NotEmptyDateOfJoining;
        public static string NotFoundContractTypeWithTheId = LangText.NotFoundContractTypeWithTheId;
        public static string ExceptionUpsertContractType = LangText.ExceptionUpsertContractType;
        public static string ExceptionGetContractTypes = LangText.ExceptionGetContractTypes;
        public static string ExceptionGetEmployeeLicence = LangText.ExceptionGetEmployeeLicence;
        public static string ExceptionGetEmployeeSalary = LangText.ExceptionGetEmployeeSalary;
        public static string ExceptionGetEmployeeSkill = LangText.ExceptionGetEmployeeSkill;
        public static string ExceptionGetEmployeeWorkExperience = LangText.ExceptionGetEmployeeWorkExperience;
        public static string ExceptionGetEmployeeContract = LangText.ExceptionGetEmployeeContract;
        public static string ExceptionGetEmployeeMembership = LangText.ExceptionGetEmployeeMembership;
        public static string ExceptionGetEmployeeReportTo = LangText.ExceptionGetEmployeeReportTo;
        public static string ExceptionGetEmployeeEducation = LangText.ExceptionGetEmployeeEducation;
        public static string ExceptionGetEmployeeEmergencyContact = LangText.ExceptionGetEmployeeEmergencyContact;
        public static string ExceptionGetShiftTimings = LangText.ExceptionGetShiftTimings;
        public static string ExceptionGetEmployeeImmigration = LangText.ExceptionGetEmployeeImmigration;
        public static string ExceptionGetEmployeeLanguage = LangText.ExceptionGetEmployeeLanguage;
        public static string ExceptionGetContractTypeById = LangText.ExceptionGetContractTypeById;
        public static string ExceptionGetGenericFormType = LangText.ExceptionGetGenericFormType;
        public static string ExceptionGetInductionConfigurations = LangText.ExceptionGetInductionConfigurations;
        public static string ExceptionGetEmployeeInductions = LangText.ExceptionGetEmployeeInductions;
        public static string ExceptionGetExitConfigurations = LangText.ExceptionGetExitConfigurations;
        public static string ExceptionGetEmployeeExits = LangText.ExceptionGetEmployeeExits;
        public static string ExceptionUpsertExitConfiguration = LangText.ExceptionUpsertExitConfiguration;
        public static string ExceptionGetPaymentType = LangText.ExceptionGetPaymentType;
        public static string ExceptionGetLeaveStatuses = LangText.ExceptionGetLeaveStatuses;
        public static string ExceptionGetMyProjectsWork = LangText.ExceptionGetMyProjectsWork;
        public static string ExceptionGetFeedbackType = LangText.ExceptionGetFeedbackType;
        public static string ExceptionGetMyWorkOverViewDetails = LangText.ExceptionGetMyWorkOverViewDetails;
        public static string ExceptionGetUserHistoricalWorkReport = LangText.ExceptionGetUserHistoricalWorkReport;
        public static string ExceptionGetEmployeeWorkLogReport = LangText.ExceptionGetEmployeeWorkLogReport;
        public static string ExceptionGetUserStoryStatusReport = LangText.ExceptionGetUserStoryStatusReport;
        public static string NotEmptyDepartmentName = LangText.NotEmptyDepartmentName;
        public static string MaximumLengthForDepartmentName = LangText.MaximumLengthForDepartmentName;
        public static string NotEmptyDepartmentId = LangText.NotEmptyDepartmentId;
        public static string NotFoundDepartmentWithTheId = LangText.NotFoundDepartmentWithTheId;
        public static string ExceptionUpsertDepartment = LangText.ExceptionUpsertDepartment;
        public static string ExceptionGetDepartments = LangText.ExceptionGetDepartments;
        public static string ExceptionGetIntegrationTypes = LangText.ExceptionGetIntegrationTypes;
        public static string ExceptionGetUserIntegrations = LangText.ExceptionGetUserIntegrations;
        public static string ExceptionGetCompanyIntegrations = LangText.ExceptionGetCompanyIntegrations;
        public static string ExceptionGetCompanyLevelIntegrationTypes = LangText.ExceptionGetCompanyLevelIntegrationTypes;
        public static string ExceptionAddOrUpdateCompanyLevelIntegration = LangText.ExceptionAddOrUpdateCompanyLevelIntegration;
        public static string ExceptionGetDocumentTemplates = LangText.ExceptionGetHtmlTemplate;
        public static string ExceptionGetDepartmentById = LangText.ExceptionGetDepartmentById;
        public static string NotEmptyDesignationName = LangText.NotEmptyDesignationName;
        public static string MaximumLengthForDesignationName = LangText.MaximumLengthForDesignationName;
        public static string ExceptionUpsertDesignation = LangText.ExceptionUpsertDesignation;
        public static string ExceptionGetDesignations = LangText.ExceptionGetDesignations;
        public static string ExceptionUpsertSubscriptionPaidBy = LangText.ExceptionUpsertSubscriptionPaidBy;
        public static string ExceptionGetSubscriptionPaidBys = LangText.ExceptionGetSubscriptionPaidBys;
        public static string ExceptionUpsertEmployeeMemberShip = LangText.ExceptionUpsertEmployeeMemberShip;
        public static string ExceptionUpsertRelstionship = LangText.ExceptionUpsertRelstionship;
        public static string MaximumLengthForSortCode = LangText.MaximumLengthForSortCode;
        public static string NotEmptyAccountNumber = LangText.NotEmptyAccountNumber;
        public static string MaximumLengthForAccountNumber = LangText.MaximumLengthForAccountNumber;
        public static string NotEmptyAccountName = LangText.NotEmptyAccountName;
        public static string MaximumLengthForAccountName = LangText.MaximumLengthForAccountName;
        public static string NotEmptyBuildingSocietyRollNumber = LangText.NotEmptyBuildingSocietyRollNumber;
        public static string MaximumLengthForBuildingSocietyRollNumber = LangText.MaximumLengthForBuildingSocietyRollNumber;
        public static string NotEmptyBankName = LangText.NotEmptyBankName;
        public static string MaximumLengthForBankName = LangText.MaximumLengthForBankName;
        public static string NotEmptyEmployeeBranchName = LangText.NotEmptyEmployeeBranchName;
        public static string MaximumLengthForEmployeeBranchName = LangText.MaximumLengthForEmployeeBranchName;
        public static string NotEmptyPayGradeName = LangText.NotEmptyPayGradeName;
        public static string MaximumLengthForPayGradeName = LangText.MaximumLengthForPayGradeName;
        public static string ExceptionUpsertPayGrade = LangText.ExceptionUpsertPayGrade;
        public static string ExceptionAssignPayGradeRates = LangText.ExceptionAssignPayGradeRates;
        public static string ExceptionGetPayGrades = LangText.ExceptionGetPayGrades;
        public static string ExceptionGetPayGradeRates = LangText.ExceptionGetPayGradeRates;
        public static string NotEmptyBreakTypeName = LangText.NotEmptyBreakTypeName;
        public static string MaximumLengthForBreakTypeName = LangText.MaximumLengthForBreakTypeName;
        public static string ExceptionUpsertBreakType = LangText.ExceptionUpsertBreakType;
        public static string ExceptionGetBreakTypes = LangText.ExceptionGetBreakTypes;
        public static string NotEmptyCurrencyName = LangText.NotEmptyCurrencyName;
        public static string NotEmptyCurrencyCode = LangText.NotEmptyCurrencyCode;
        public static string NotEmptyMobileNumber = LangText.NotEmptyMobileNumber;
        public static string CurrencyNameLengthExceeded = LangText.CurrencyNameLengthExceeded;
        public static string PreviousCompanyLengthExceeded = LangText.PreviousCompanyLengthExceeded;
        public static string InstituteLengthExceeded = LangText.InstituteLengthExceeded;
        public static string MajorSpecializationLengthExceeded = LangText.MajorSpecializationLengthExceeded;
        public static string SkillNameLengthExceeded = LangText.SkillNameLengthExceeded;
        public static string RelationshipNameLengthExceeded = LangText.RelationshipNameLengthExceeded;
        public static string FormTypeNameLengthExceeded = LangText.FormTypeNameLengthExceeded;
        public static string paymentTypeNameLengthExceeded = LangText.paymentTypeNameLengthExceeded;
        public static string leaveStatusLengthExceeded = LangText.leaveStatusLengthExceeded;
        public static string leaveSessionNameLengthExceeded = LangText.leaveSessionNameLengthExceeded;
        public static string FeedbackTypeNameLengthExceeded = LangText.FeedbackTypeNameLengthExceeded;
        public static string AccessibleIpAddressNameLengthExceeded = LangText.AccessibleIpAddressNameLengthExceeded;
        public static string SalaryComponentLengthExceeded = LangText.SalaryComponentLengthExceeded;
        public static string EmploymentStatusNameLengthExceeded = LangText.EmploymentStatusNameLengthExceeded;
        public static string PayFrequencyNameLengthExceeded = LangText.PayFrequencyNameLengthExceeded;
        public static string LanguageNameLengthExceeded = LangText.LanguageNameLengthExceeded;
        public static string JobCategoriesNameLengthExceeded = LangText.JobCategoriesNameLengthExceeded;
        public static string NationalityNameLengthExceeded = LangText.NationalityNameLengthExceeded;
        public static string NotEmptyRelationshipId = LangText.NotEmptyRelationshipId;
        public static string NotEmptyIsEmergencyContact = LangText.NotEmptyIsEmergencyContact;
        public static string NotEmptyIsDependentContact = LangText.NotEmptyIsDependentContact;
        public static string NotEmptyRateTypeName = LangText.NotEmptyRateTypeName;
        public static string NotEmptyRate = LangText.NotEmptyRate;
        public static string RateTypeNameLengthExceeded = LangText.RateTypeNameLengthExceeded;
        public static string NotEmptyPaymentMethodName = LangText.NotEmptyPaymentMethodName;
        public static string PaymentMethodNameLengthExceeded = LangText.PaymentMethodNameLengthExceeded;
        public static string NotEmptyBranchId = LangText.NotEmptyBranchId;
        public static string NotEmptyFromCurrency = LangText.NotEmptyFromCurrency;
        public static string NotEmptyToCurrency = LangText.NotEmptyToCurrency;
        public static string NotEmptyEffectiveFrom = LangText.NotEmptyEffectiveFrom;
        public static string NotEmptySoftLabelName = LangText.NotEmptySoftLabelName;
        public static string NotEmptySoftLabelKeyType = LangText.NotEmptySoftLabelKeyType;
        public static string SoftLabelNameLengthExceeded = LangText.SoftLabelNameLengthExceeded;
        public static string NotEmptyCountryName = LangText.NotEmptyCountryName;
        public static string MaximumLengthForCountryName = LangText.MaximumLengthForCountryName;
        public static string MaximumLengthForCountryCode = LangText.MaximumLengthForCountryCode;
        public static string ExceptionUpsertCountry = LangText.ExceptionUpsertCountry;
        public static string ExceptionGetCountries = LangText.ExceptionGetCountries;
        public static string ExceptionGetCompanyStructure = LangText.ExceptionGetCompanyStructure;
        public static string NotEmptyRegionName = LangText.NotEmptyRegionName;
        public static string MaximumLengthForRegionName = LangText.MaximumLengthForRegionName;
        public static string NotEmptyCountryId = LangText.NotEmptyCountryId;
        public static string ExceptionUpsertRegion = LangText.ExceptionUpsertRegion;
        public static string ExceptionGetRegions = LangText.ExceptionGetRegions;
        public static string ExceptionGetNationalities = LangText.ExceptionGetNationalities;
        public static string ExceptionGetAllNationalities = LangText.ExceptionGetAllNationalities;
        public static string ExceptionGetGenders = LangText.ExceptionGetGenders;
        public static string ExceptionGetMaritalStatuses = LangText.ExceptionGetMaritalStatuses;
        public static string ExceptionGetReportingMethod = LangText.ExceptionGetReportingMethod;
        public static string ExceptionGetMemberships = LangText.ExceptionGetMemberships;
        public static string ExceptionGetUserStoriesForAllGoals = LangText.ExceptionGetUserStoriesForAllGoals;
        public static string ExceptionUpsertEmployeeBankDetail = LangText.ExceptionUpsertEmployeeBankDetail;
        public static string ExceptionGetEmployeeBankDetails = LangText.ExceptionGetEmployeeBankDetails;
        public static string ExceptionGetEmployeeDetails = LangText.ExceptionGetEmployeeDetails;
        public static string ExceptionGetEmployeeEducationDetails = LangText.ExceptionGetEmployeeEducationDetails;
        public static string ExceptionGetEmployeeEmergencyContactDetails = LangText.ExceptionGetEmployeeEmergencyContactDetails;
        public static string ExceptionGetEmployeeImmigrationDetails = LangText.ExceptionGetEmployeeImmigrationDetails;
        public static string ExceptionGetEmployeeJobDetails = LangText.ExceptionGetEmployeeJobDetails;
        public static string ExceptionGetEmployeeLanguageDetails = LangText.ExceptionGetEmployeeLanguageDetails;
        public static string ExceptionGetEmployeeLicenceDetails = LangText.ExceptionGetEmployeeLicenceDetails;
        public static string ExceptionGetEmployeePersonalDetails = LangText.ExceptionGetEmployeePersonalDetails;
        public static string ExceptionGetEmployeeReportToDetails = LangText.ExceptionGetEmployeeReportToDetails;
        public static string ExceptionGetEmployeeSalaryDetails = LangText.ExceptionGetEmployeeSalaryDetails;
        public static string ExceptionGetEmployeeSkillDetails = LangText.ExceptionGetEmployeeSkillDetails;
        public static string ExceptionGetEmployeeWorkExperienceDetails = LangText.ExceptionGetEmployeeWorkExperienceDetails;
        public static string ExceptionGetEmploymentContractDetails = LangText.ExceptionGetEmploymentContractDetails;
        public static string ExceptionGetEmployeeMembershipDetails = LangText.ExceptionGetEmployeeMembershipDetails;
        public static string ExceptionGetEmployeeContactDetails = LangText.ExceptionGetEmployeeContactDetails;
        public static string ExceptionGetEmployeeOverViewDetails = LangText.ExceptionGetEmployeeOverViewDetails;
        public static string ExceptionGetMyEmployeeDetails = LangText.ExceptionGetMyEmployeeDetails;
        public static string NotEmptyBranchName = LangText.NotEmptyBranchName;
        public static string MaximumLengthForBranchName = LangText.MaximumLengthForBranchName;
        public static string NotEmptyRegionId = LangText.NotEmptyRegionId;
        public static string ExceptionUpsertBranch = LangText.ExceptionUpsertBranch;
        public static string ExceptionGetBranches = LangText.ExceptionGetBranches;
        public static string ExceptionGetUserBranchDetails = LangText.ExceptionGetBranches;
        public static string NotEmptyLicenceNumber = LangText.NotEmptyLicenceNumber;
        public static string NotEmptyLicenceIssuedDate = LangText.NotEmptyLicenceIssuedDate;
        public static string NotEmptyLicenceExpiryDate = LangText.NotEmptyLicenceExpiryDate;
        public static string NotEmptyLicenceTypeId = LangText.NotEmptyLicenceTypeId;
        public static string LicenceNumberLengthExceeded = LangText.LicenceNumberLengthExceeded;
        public static string DocumentLengthExceeded = LangText.DocumentLengthExceeded;
        public static string DocumentNumberLengthExceeded = LangText.DocumentNumberLengthExceeded;
        public static string NotEmptyStateId = LangText.NotEmptyStateId;
        public static string EmailLengthExceeded = LangText.EmailLengthExceeded;
        public static string EmailFormat = LangText.EmailFormat;
        public static string SurNameLengthExceeded = LangText.SurNameLengthExceeded;
        public static string FirstNameLengthExceeded = LangText.FirstNameLengthExceeded;
        public static string LastNameLengthExceeded = LangText.LastNameLengthExceeded;
        public static string MobileNoLengthExceeded = LangText.MobileNoLengthExceeded;
        public static string PasswordLengthExceeded = LangText.PasswordLengthExceeded;
        public static string SubscriptionAmountLessThanZero = LangText.SubscriptionAmountLessThanZero;
        public static string NotEmptyEntityTypeFeatureIds = LangText.NotEmptyEntityTypeFeatureIds;
        public static string ExceptionEntityRoleFeatureUpsert = LangText.ExceptionEntityRoleFeatureUpsert;
        public static string ExceptionSearchEntityFeatures = LangText.ExceptionSearchEntityFeatures;
        public static string ExceptionSearchEntityRoleFeatures = LangText.ExceptionSearchEntityRoleFeatures;
        public static string ExceptionUpsertTimeFormat = LangText.ExceptionUpsertTimeFormat;
        public static string ExceptionUpsertDateFormat = LangText.ExceptionUpsertDateFormat;
        public static string ExceptionMainUseCase = LangText.ExceptionMainUseCase;
        public static string ExceptionGetAccessibleIpAddresses = LangText.ExceptionGetAccessibleIpAddresses;
        public static string ExceptionGetScripts = "";//LangText.ExceptionMessageGetScripts;

        public static string ExceptionGetJobCategories = LangText.ExceptionGetJobCategories;
        public static string ExceptionUpsertNumberFormat = LangText.ExceptionUpsertNumberFormat;
        public static string ExceptionUpsertScript = "";// LangText.ExceptionUpsertScript;
        public static string ExceptionUpsertCompanyIntroducedByOption = LangText.ExceptionUpsertCompanyIntroducedByOption;
        public static string ExceptionUpsertState = LangText.ExceptionUpsertState;
        public static string ExceptionUpsertReferenceType = LangText.ExceptionUpsertReferenceType;
        public static string ExceptionUpsertLicenseType = LangText.ExceptionUpsertLicenseType;
        public static string ExceptionGetReferenceTypes = LangText.ExceptionGetReferenceTypes;
        public static string ExceptionUpsertTestCaseAutomationType = LangText.ExceptionUpsertTestCaseAutomationType;
        public static string ExceptionUpsertHoliday = LangText.ExceptionUpsertHoliday;
        public static string ExceptionUpsertEducationLevel = LangText.ExceptionUpsertEducationLevel;
        public static string ExceptionUpsertReportingMethod = LangText.ExceptionUpsertReportingMethod;
        public static string ExceptionUpsertMembership = LangText.ExceptionUpsertMembership;
        public static string ExceptionGetHolidays = LangText.ExceptionGetHolidays;
        public static string ExceptionGetEducationLevel = LangText.ExceptionGetEducationLevel;
        public static string ExceptionUpsertGoalTags = LangText.ExceptionUpsertGoalTags;
        public static string ExceptionSearchGoalTags = LangText.ExceptionSearchGoalTags;
        public static string ExceptionGetActivelyRunningTeamLeadGoals = LangText.ExceptionGetActivelyRunningTeamLeadGoals;
        public static string ExceptionGetActivelyRunningProjectGoals = LangText.ExceptionGetActivelyRunningProjectGoals;
        public static string ExceptionGetGoalActivityWithUserStories = LangText.ExceptionGetGoalActivityWithUserStory;
        public static string ExceptionUpsertUserStoryChannel = LangText.ExceptionUpsertUserStoryChannel;
        public static string ExceptionUpsertUserStoryTags = LangText.ExceptionUpsertUserStoryTags;
        public static string ExceptionSearchUserStoryTags = LangText.ExceptionSearchUserStoryTags;
        public static string ExceptionLoggedInUser = LangText.ExceptionLoggedInUser;
        public static string ExceptionGetGoalHeatMap = "";
        public static string ExceptionGetGoalActivity = "";
        public static string ExceptionGetDeveloperSpentTimeReport = "";
        public static string ExceptionGetDeveloperHeatMap = "";
        public static string ExceptionGetDeveloperBurnDownChartInGoal = "";
        //public static string ExceptionGetGoalBurnDownChart = "";
        public static string MailNotSend = LangText.MailNotSendException;
        public static string ExceptionGetEmployeeYearlyProductivityReport = "Could not be done please contact administrator";
        public static string ExceptionGetGoalBurnDownChart = "Could not be done please contact administrator";
        public static string ExceptionUpsertGoalComment = "Goal Comment Could not be done please contact administrator";
        public static string ExceptionUpsertGoalFilter = LangText.ExceptionUpsertGoalFilter;
        public static string ExceptionForArchiveGoalFilters = LangText.ExceptionForArchiveGoalFilters;
        //public static string ExceptionGetGoalComments = LangText.ExceptionGetGoalComments;ExceptionUpsertGoalComment
        public static string ExceptionSearchSystemCountries = LangText.ExceptionSearchSystemCountries;
        public static string ExceptionSearchSystemCurrencies = LangText.ExceptionSearchSystemCurrencies;
        public static string ExceptionSearchSystemRoles = LangText.ExceptionSearchSystemRoles;
        public static string ExceptionGetAppsettings = LangText.ExceptionGetAppsettings;
        public static string ExceptionGetAppSetting = LangText.ExceptionGetAppSetting;
        public static string ExceptionUpsertAppSetting = LangText.ExceptionUpsertAppSetting;
        public static string ExceptionGetCompanySettings = LangText.ExceptionGetCompanySettings;
        public static string ExceptionInBusinessUnits = LangText.ExceptionInBusinessUnits;
        public static string ExceptionGetLeaveFormula = LangText.ExceptionGetLeaveFormula;
        public static string ExceptionApproveOrRejectLeave = LangText.ExceptionApproveOrRejectLeave;
        public static string ExceptionGetEncashmentTypes = LangText.ExceptionGetEncashmentTypes;
        public static string ExceptionGetRestrictionTypes = LangText.ExceptionGetRestrictionTypes;
        public static string ExceptionUpsertRestrictionTypes = LangText.ExceptionUpsertRestrictionTypes;
        public static string ExceptionUpsertCompanySettings = LangText.ExceptionUpsertCompanySettings;
        public static string NotEmptyCompanySettingsKey = LangText.NotEmptyCompanySettingsKey;
        public static string CompanySettingsKeyNameLengthExceeded = LangText.CompanySettingsKeyNameLengthExceeded;
        public static string DateShouldNotBeNull = LangText.DateFromShouldNotBeNull;
        public static string NoOfDaysNotNull = LangText.NoOfDaysNotNull;
        public static string NoOfLeavesNotNull = LangText.NoOfLeavesNotNull;
        public static string ExceptionMonthlyLeavesReport = "Get monthly leaves report could not be done please contact administrator";
        public static string ExceptionInsertTestCaseHistory = LangText.ExceptionInsertTestCaseHistory;

        public static string ExceptionUpsertCustomApplication = LangText.ExceptionUpsertCustomApplication;
        public static string ExceptionGetCustomApplication = LangText.ExceptionGetCustomApplication;
        public static string ExceptionUpsertCustomApplicationKeys = LangText.ExceptionUpsertCustomApplicationKeys;
        public static string ExceptionGetCustomApplicationKeys = LangText.ExceptionGetCustomApplicationKeys;
        public static string ExceptionGetFormHistory = LangText.ExceptionGetFormHistory;
        public static string ExceptionUpsertObservationType = LangText.ExceptionUpsertObservationType;
        public static string ExceptionGetObservationType = LangText.ExceptionGetObservationType;
        public static string ObservationNameIsRequired = LangText.ObservationNameIsRequired;
        public static string ExceptionUpsertCustomFieldMapping = LangText.ExceptionUpsertCustomFieldMapping;
        public static string ExceptionGetCustomFieldMapping = LangText.ExceptionGetCustomFieldMapping;

        public static string ExceptionUpsertActTrackerRoleConfiguration = LangText.ExceptionUpsertActTrackerRoleConfiguration;
        public static string ExceptionGetActTrackerAppUrl = LangText.ExceptionGetActTrackerAppUrl;
        public static string ExceptionUpsertActTrackerScreenSHotFrequency = LangText.ExceptionUpsertActTrackerScreenSHotFrequency;
        public static string ExceptionGetActTrackerRoleDropDown = LangText.ExceptionGetActTrackerRoleDropDown;
        public static string ExceptionUpsertActTrackerRolePermission = LangText.ExceptionUpsertActTrackerRolePermission;
        public static string ExceptionUpsertActTrackerAppUrls = LangText.ExceptionUpsertActTrackerAppUrls;
        public static string ExceptionGetActTrackerRoleDeleteDropDown = LangText.ExceptionGetActTrackerRoleDeleteDropDown;
        public static string ExceptionGetActTrackerAppsUrls = LangText.ExceptionGetActTrackerAppsUrls;
        public static string ExceptionGetActTrackerUserScreenshotFrequency = "Get ActTracker User Screenshot frequency could not be done. Please contact administrator.";
        public static string ExceptionUpsertActivityTrackerConfigurationState = "Upsert Activity Tracker ConfigurationState could not be done. Please contact administrator";
        public static string ExceptionSpGetActivityTrackerConfigurationState = "Get Activity Tracker Configuration State could not be done. Please contact administrator";
        public static string ExceptionUpsertActivityTrackerUserConfiguration = LangText.ExceptionUpsertActivityTrackerUserConfiguration;
        public static string ExceptionGetActTrackerUserStatus = LangText.ExceptionGetActTrackerUserStatus;
        public static string NotEmptyAppUrlId = LangText.NotEmptyAppUrlId;
        public static string NotEmptyRoleIds = LangText.NotEmptyRoleIds;
        public static string NotEmptyScreenShotFrequency = LangText.NotEmptyScreenShotFrequency;
        public static string NotEmptyIdleScreenShotCaptureTime = LangText.NotEmptyIdleScreenShotCaptureTime;
        public static string NotEmptyIdleAlertTime = LangText.NotEmptyIdleAlertTime;

        public static string ExceptionGetBugsBasedOnUserStories = LangText.ExceptionGetBugsBasedOnUserStories;
        public static string ExceptionDeleteLinkedbugs = LangText.DeleteLinkedbugs;

        public static string ExceptionUpsertRepositoryCommits = LangText.ExceptionUpsertRepositoryCommits;
        public static string ExceptionSearchRepositoryCommits = LangText.ExceptionSearchRepositoryCommits;

        public static string ExceptionUpsertTestRailConfiguration = LangText.ExceptionUpsertTestRailConfiguration;
        public static string ExceptionGetTestRailConfigurations = LangText.ExceptionGetTestRailConfigurations;
        public static string ExceptionGetTestTeamStatusReporting = LangText.ExceptionGetTestTeamStatusReporting;

        public static string ExceptionUpsertLeaveFrequencies = LangText.ExceptionUpsertLeaveFrequencies;
        public static string ExceptionGetLeaveFrequencies = LangText.ExceptionGetLeaveFrequencies;
        public static string ExceptionWidgetUpsert = LangText.ExceptionWidgetUpsert;
        public static string ExceptionGetWidgets = LangText.ExceptionGetWidgets;
        public static string ExceptionGetIsProcValid = LangText.ProcNameIsInvalid;
        public static string WidgetNameRequired = LangText.WidgetNameRequired;
        public static string WidgetNameLengthExceeded = LangText.WidgetNameLengthExceeded;
        public static string DescriptionLengthExceeded = LangText.DescriptionLengthExceeded;
        public static string ExceptionLeaveUpsertMail = LangText.ExceptionLeaveUpsertMail;

        public static string HttpMethodIsRequired = LangText.HttpMethodIsRequired;
        public static string ApiUrlIsRequired = LangText.ApiUrlIsRequired;
        public static string ExceptionUpsertCustomAppApiDetails = LangText.ExceptionUpsertCustomAppApiDetails;
        public static string ExceptionGetCustomAppApiDetails = LangText.ExceptionGetCustomAppApiDetails;

        public static string ExceptionWorkspaceUpsert = LangText.ExceptionWorkspaceUpsert;
        public static string ExceptionGetWorkspaces = LangText.ExceptionGetWorkspaces;
        public static string WorkspaceNameRequired = LangText.WorkspaceNameRequired;
        public static string WorkspaceNameLengthExceeded = LangText.WorkspaceNameLengthExceeded;

        public static string ExceptionDashboardUpsert = LangText.ExceptionDashboardUpsert;
        public static string ExceptionGetWorkspaceFilters = LangText.ExceptionGetWorkspaceFilters;
        public static string ExceptionGetDashboards = LangText.ExceptionGetDashboards;
        public static string ExceptionGetCustomDashboardId = LangText.ExceptionGetCustomDashboardId;
        public static string DashboardNameRequired = LangText.DashboardNameRequired;
        public static string DashboardIdRequired = LangText.DashboardIdRequired;
        public static string DashboardNameLengthExceeded = LangText.DashboardNameLengthExceeded;
        public static string WorkspaceIdRequired = LangText.WorkspaceIdRequired;
        public static string NotEmptyStoreId = LangText.NotEmptyStoreId;
        public static string ExceptionGetStores = LangText.ExceptionGetStores;
        public static string ExceptionUpsertStore = LangText.ExceptionUpsertStore;
        public static string ExceptionGetStoreConfiguration = LangText.ExceptionGetStoreConfiguration;
        public static string ExceptionIsUsersStore = LangText.ExceptionIsUsersStore;
        public static string NotEmptyStoreName = LangText.NotEmptyStoreName;
        public static string StoreLengthExceeded = LangText.StoreLengthExceeded;
        public static string ExceptionGetFoldersAndFiles = LangText.ExceptionGetFoldersAndFiles;
        public static string NotEmptyFileExtension = LangText.NotEmptyFileExtension;
        public static string NotEmptyFolderName = LangText.NotEmptyFolderName;
        public static string ExceededFolderName = LangText.ExceededFolderName;
        public static string NotEmptyFolderId = LangText.NotEmptyFolderId;
        public static string NotEmptyFolderReferenceId = LangText.NotEmptyFolderReferenceId;
        public static string NotEmptyFolderReferenceTypeId = LangText.NotEmptyFolderReferenceTypeId;
        public static string ExceededFileName = LangText.ExceededFileName;
        public static string ExceededFilePath = LangText.ExceededFilePath;
        public static string ExceededFileExtension = LangText.ExceededFileExtension;
        public static string ExceptionFolderUpsert = LangText.ExceptionFolderUpsert;
        public static string ExceptionFolderUpsertDescription = LangText.ExceptionFolderUpsertDescription;
        public static string ExceptionUploadFileUpsert = LangText.ExceptionUploadFileUpsert;
        public static string ExceptionSearchFolders = LangText.ExceptionSearchFolders;
        public static string ExceptionSearchFileHistory = LangText.ExceptionSearchFileHistory;
        public static string ExceptionDashboardConfigurationUpsert = LangText.DashboardConfigurationCouldNotBeCreatedOrUpdatedPleaseContactAdministrator;
        public static string ExceptionDashboardConfigurationsGet = LangText.DashboardConfigurationCouldNotBeGetPleaseContactAdministrator;
        public static string ExceptionCustomWidgetUpsert = LangText.CustomWidgetCouldNotBeCreatedOrUpdatedPleaseContactAdministrator;
        public static string ExceptionGetCustomWidgets = LangText.CanNotGetCustomWidgetsPleaseContactAdministrator;
        public static string ExceptionUpsertDashboardFilters = LangText.ExceptionUpsertDashboardFilters;
        public static string ExceptionGetDashboardFilters = LangText.ExceptionGetDashboardFilters;
        public static string ExceptionGetAllDashboardFilters = LangText.ExceptionGetAllDashboardFilters;
        public static string ExceptionSetAsDefaultDashboardPersistance = LangText.CanNotSetAsDefaultDashboardPersistancePleaseContactAdministrator;
        public static string ExceptionSetAsDefaultDashboardView = LangText.CanNotSetAsDefaultDashboardView;

        public static string ExceptionResetToDefaultDashboard = LangText.CanNotResetToDefaultDashboardPleaseContactAdministrator;
        public static string ExceptionExecuteCustomQuery = LangText.CanNotGetExecuteCustomQueryPleaseContactAdministrator;
        public static string ExceptionGetMasterWidgets = LangText.CannotGetMasterWidgets;
        public static string WidgetQueryRequired = LangText.WidgetQueryIsRequired;
        public static string CustomWidgetNameRequired = LangText.CustomWidgetNameIsRequired;
        public static string CustomWidgetNameLengthExceeded = LangText.CustomWidgetNameCanNotBeLongerThan50Characters;
        public static string CustomWidgetDescriptionLengthExceeded = LangText.CustomWidgetDescriptionCanNotBeLongerThan1000Characters;
        public static string ExceptionUpsertPersistance = LangText.PersistanceCouldNotBeCreatedOrUpdatedPleaseContactAdministrator;

        public const string NotEmptyUserActivityTime = "User Activity Time cannot be empty";
        public const string NotEmptyScreenShotUrl = "Screenshot Url cannot be null or empty";
        public const string NotEmptyScreenShotName = "ScreenShot Name cannot be null or empty";
        public const string NotEmptyApplicationName = "Application Name cannot be null or empty";
        public const string NotEmptyScreenShotDate = "ScreenShot Date cannot be null or empty";
        public const string ExceptionUserActivityTime = "Insert User Activity Time could not be done. Please contact administrator.";
        public const string ExceptionUserActivityScreenShot = "Insert User Activity Screenshot could not be done. Please contact administrator.";
        public const string ExceptionTrackerActivityValidator = "Cannot get tracker validator data. Please contact administrator.";
        public const string ExceptionGetTotalTimeUsageofApplicationByUsers = "Get Total Time Usage of Application By Users could not be done. Please contact administrator.";
        public const string ExceptionGetEmployees = "Get Employees could not be done. Please contact administrator.";
        public const string ExceptionGetWebAppUsageTime = "Get WebApp Usage Time could not be done. Please contact administrator.";
        public const string ExceptionGetTrackedInformationOfUserStory = "Get Tracked Information Of UserStory could not be done. Please contact administrator.";

        public const string ExceptionGetEmployeeUserStories = "Get Employee UserStories could not be done. Please contact administrator.";

        public static string ExceptionGetTimeUsageDrillDown = LangText.ExceptionGetTimeUsageDrillDown;

        public static string ExceptionUpsertCopyOrMoveCases = LangText.ExceptionUpsertCopyOrMoveCases;

        public static string ExceptionMoveAuditQuestions = LangText.ExceptionMoveAuditQuestions;

        public const string ExceptionGetClients = "Get Clients could not be done. Please contact administrator.";
        public const string ExceptionUpsertClient = "Upsert Client could not be done. Please contact administrator.";
        public const string ExceptionGetClientSecondaryContacts = "Get Client Secondary Contacts could not be done. Please contact administrator.";
        public const string ExceptionUpsertClientAddress = "Upsert Client Address could not be done. Please contact administrator.";
        public const string ExceptionUpsertClientSecondaryContact = "Upsert Client Secondary Contact could not be done. Please contact administrator.";
        public const string ExceptionGetClientHistory = "Get Client History could not be done. Please contact administrator.";
        public const string ExceptionGetClientProjects = "Get Client Projects could not be done. Please contact administrator.";
        public const string ExceptionUpsertClientProjects = "Upsert Client Projects could not be done. Please contact administrator.";
        public const string ExceptionMultipleClientDelete = "Multiple Client Delete could not be done. Please contact administrator.";
        public const string ExceptionSendReportAsPdf = "Send Report As Pdf could not be done. Please contact administrator.";
        public const string NotEmptyClientId = "Client Id can not be null or empty.";
        public const string NotEmptyClientAddressId = "Client Address Id can not be null or empty.";
        public const string NotEmptyClientProjectId = "Client Project Id can not be null or empty.";
        public const string EmailFormatError = "Email should be in correct format.";
        public const string MobileNoFormatError = "MobileNo should be in correct format.";
        public const string NotEmptyLastName = "Last Name can not be null or empty.";
        public const string NotEmptyPaidAccountToId = "Paid Account To Id can not be null or empty.";

        public const string ExceptionGetInvoices = "Get Invoice could not be done. Please contact administrator.";
        public const string ExceptionGetInvoiceStatuses = "Get Invoice statuses could not be done. Please contact administrator.";
        public const string ExceptionGetAccountTypes = "Get Account types could not be done. Please contact administrator.";
        public const string ExceptionGetInvoiceHistory = "Get Invoice history could not be done. Please contact administrator.";
        public const string ExceptionUpsertInvoice = "Upsert Invoice could not be done. Please contact administrator.";
        public const string ExceptionInsertInvoiceLog = "Invoice log payment could not be done. Please contact administrator.";
        public const string ExceptionGetInvoiceGoals = "Get Invoice Goals could not be done. Please contact administrator.";
        public const string ExceptionGetInvoiceTasks = "Get Invoice Tasks could not be done. Please contact administrator.";
        public const string ExceptionGetInvoiceItems = "Get Invoice Items could not be done. Please contact administrator.";
        public const string ExceptionGetInvoiceProjects = "Get Invoice Projects could not be done. Please contact administrator.";
        public const string ExceptionGetInvoiceTax = "Get Invoice Tax could not be done. Please contact administrator.";
        public const string ExceptionSendInvoiceEmail = "Invoice Email could not be send. Please contact administrator.";
        public const string ExceptionMultipleInvoiceDelete = "Multiple Invoice Delete could not be send. Please contact administrator.";
        public const string NotEmptyInvoiceNumber = "Invoice Number can not be null or empty.";
        public const string ExceededInvoiceNumber = "Invoice Number can not exceed 50 characters.";
        public const string NotEmptyEstimateNumber = "Estimate Number can not be null or empty.";
        public const string ExceededEstimateNumber = "Estimate Number can not exceed 50 characters.";
        public const string ExceededNotes = "Notes can not exceed 800 characters.";

        public const string ExceptionGetEstimates = "Get Estimate could not be done. Please contact administrator.";
        public const string ExceptionGetEstimateStatuses = "Get Estimate statuses could not be done. Please contact administrator.";
        public const string ExceptionGetEstimateHistory = "Get Estimate history could not be done. Please contact administrator.";
        public const string ExceptionUpsertEstimate = "Upsert Estimate could not be done. Please contact administrator.";

        public const string ExceptionGetInvoiceSchedules = "Get Invoice Schedules could not be done. Please contact administrator.";
        public const string ExceptionGetScheduleTypes = "Get Schedule Types could not be done. Please contact administrator.";
        public const string ExceptionGetScheduleSequences = "Get Schedule Sequences could not be done. Please contact administrator.";
        public const string ExceptionUpsertInvoiceSchedule = "Upsert Invoice Schedule could not be done. Please contact administrator.";
        public const string NotEmptyInvoiceId = "Invoice Id can not be null or empty.";
        public const string NotEmptyScheduleName = "Schedule Name can not be null or empty.";
        public const string MaximumLengthForScheduleName = "Schedule Name can not exceed 50 characters.";

        public const string ExceptionGetExpenseCategories = "Get Expense Categories could not be done. Please contact administrator.";
        public const string NotEmptyCategoryName = "Category Name can not be null or empty.";
        public const string CategoryNameLengthExceeded = "Category Name can not exceed 50 characters.";
        public const string ExceptionUpsertExpenseMerchant = "Upsert Expense Merchant could not be done. Please contact administrator.";
        public const string ExceptionUpsertMerchantBankDetails = "Upsert Merchant Bank Details could not be done. Please contact administrator.";
        public const string ExceptionGetExpenseMerchants = "Get Expense Merchants could not be done. Please contact administrator.";
        public const string MerchantNameLengthExceeded = "Merchant Name can not exceed 50 characters.";
        public const string ExceptionGetWorkflowTriggers = "Get workflow triggers could not be done. Please contact administrator.";

        public static string ShiftExceptionWithThisNameAlreadyExists = LangText.ShiftExceptionWithThisNameAlreadyExists;
        public static string ExceptionGetShiftException = LangText.ExceptionGetShiftException;
        public static string ExceptionUpsertShiftException = LangText.ExceptionUpsertShiftException;
        public static string ExceptionGetShiftWeek = LangText.ExceptionGetShiftWeek;
        public static string ExceptionGetEmployeeShift = LangText.ExceptionGetEmployeeShift;
        public static string ExceptionUpsertShiftWeek = LangText.ExceptionUpsertShiftWeek;
        public static string NotEmptyExceptionDate = LangText.NotEmptyExceptionDate;
        public static string NotEmptyStratTiming = LangText.NotEmptyStratTiming;
        public static string NotEmptyDayOfWeek = LangText.NotEmptyDayOfWeek;
        public static string DeadLineShouldbeGrater = LangText.DeadLineShouldBeGreater;
        public static string EndTimeShouldbeGreater = LangText.EndTimeShouldBeGreater;
        public static string EmployeeActiveFrom = LangText.ActivefromGreaterValue;

        public static string NotEmptyFeedbackDescription = LangText.NotEmptyFeedbackDescription;
        public static string ExceptionSubmitFeedbackForm = LangText.ExceptionForSubmitFeedBackForm;
        public static string ExceptionNotGettingFeedbacks = LangText.ExceptionNotGettingFeedbacks;
        public static string NotEmptyFeedbackId = LangText.NotEmptyFeedbackId;
        public static string NotFoundfeedbackWithTheId = LangText.NotFoundfeedbackWithTheId;
        public static string NotEmptyBugTitle = LangText.NotEmptyBugTitle;
        public static string MaximumLengthForBugTitle = LangText.MaximumLengthForBugTitle;
        public static string NotEmptyBugDescription = LangText.NotEmptyBugDescription;
        public static string ExceptionSubmitBugFeedback = LangText.ExceptionSubmitBugFeedback;
        public static string ExceptionUpsertMissingFeature = LangText.ExceptionUpsertMissingFeature;
        public const string ExceptionNotificationUpsert = "Notification could not be created or updated. Please contact administrator.";
        public const string ExceptionUserNotificationReadUpsert = "User notification read could not be created or updated. Please contact administrator.";
        public const string ExceptionGetNotifications = "Get notifications could not be done. Please contact administrator.";

        public const string ExceptionsGetVenues = "Get Venues could not be done.Please contact administrator";
        public const string ExceptionGetOrganisations = "Get Organisations could not be done.Please contact administrator";
        public const string ExceptionGetAllAmenities = "Get Room and Venue Amenities could not be done.Please contact administrator";
        public const string ExceptionGetRoomAndVenueAmenities = "Room and venue amenities could not be done.Please contact administrator";
        public const string ExceptionGetRoomsBasedOnSearch = "Rooms based on search could not be done.Please contac administrator";

        public static string ExceptionUpsertBooking = "upsert booking could not be done.Please contact administrator";

        public static string ExceptionGetRoomTimeSlots = "RoomTimeSlots could not be done.Please contact administrator";
        public static string ExceptionGetPlannedDetailsDrillDown = "Get Planned Details DrillDown could not be done. Please contact administractor.";
        public static string ExceptionGetProductivityDrillDown = "Get Productivity Details DrillDown could not be done. Please contact administractor.";
        public static string ExceptionGetUtilizationDrillDown = "Get Utilization Details DrillDown could not be done. Please contact administractor.";
        public static string ExceptionGetEfficiencyDrillDown = "Get Efficiency Details DrillDown could not be done. Please contact administractor.";
        public static string ExceptionGetDeliveredHoursDrillDown = "Get DeliveredHours Details DrillDown could not be done. Please contact administractor.";
        public static string ExceptionGetSpentDetailsDrillDown = "Get SpentHours Details DrillDown could not be done. Please contact administractor.";
        public static string ExceptionGetCompletedDetailsDrillDown = "Get Completed tasks Details DrillDown could not be done. Please contact administractor.";
        public static string ExceptionGetPendingTasksDetailsDrillDown = "Get Pending tasks Details DrillDown could not be done. Please contact administractor.";
        public static string ExceptionGetBranchMembers = "Get Branch Members could not be done. Please contact administractor.";


        public static string NotEmptyModuleTypeId = LangText.NotEmptyModuleTypeId;
        public static string NotEmptyReferenceId = LangText.NotEmptyReferenceId;
        public static string ExceptionCustomFieldFormUpsert = LangText.ExceptionCustomFieldFormUpsert;
        public static string NotEmptyFieldName = LangText.NotEmptyFieldName;
        public static string FieldNameCannotExceed100Characters = LangText.FieldNameCannotExceed100Characters;
        public static string NotFoundCustomFieldWithTheId = LangText.NotFoundCustomFieldWithTheId;
        public static string NotEmptyCustomFieldId = LangText.NotEmptyCustomFieldId;
        public static string ExceptionCustomFieldDataUpsert = LangText.ExceptionCustomFieldDataUpsert;
        public const string ExceptionUpsertCronExpression = "Upsert cron expression could not be done.Please contact administrator";
        public static string ExceptionUpsertSoftLabelConfigurations = LangText.ExceptionUpsertSoftLabelConfigurations;
        public static string ExceptionGetSoftLabelConfigurations = LangText.ExceptionGetSoftLabelConfigurations;
        public static string NotEmptyProjectLabel = LangText.ProjectLabelShouldNotBeEmpty;
        public static string ProjectLabelLengthExceeded = LangText.ProjectLabelCannotBeLongerThan50Characters;
        public static string NotEmptyGoalLabel = LangText.GoalLabelShouldNotBeEmpty;
        public static string GoalLabelLengthExceeded = LangText.GoalLabelCannotBeLongerThan50Characters;
        public static string NotEmptyUserStoryLabel = LangText.UserStoryLabelShouldNotBeEmpty;
        public static string UserStoryLabelLengthExceeded = LangText.UserStoryLabelCannotBeLongerThan50Characters;
        public static string NotEmptyDeadlineLabel = LangText.DeadlineLabelShouldNotBeEmpty;
        public static string DeadlineLabelLengthExceeded = LangText.DeadlineLabelCannotBeLongerThan50Characters;
        public static string NotEmptySoftLabelId = LangText.NotEmptySoftLabelId;
        public static string NotFoundSoftLabelWithTheId = LangText.NotFoundSoftLabelWithTheId;
        public static string NotEmptyTemplateName = LangText.NotEmptyTemplateName;
        public static string MaximumLengthForTemplateName = LangText.MaximumLengthForTemplateName;
        public static string NotEmptyTemplateResponsiblePerson = LangText.NotEmptyTemplateResponsiblePerson;
        public static string ExceptionTemplatesUpsert = LangText.ExceptionTemplatesUpsert;
        public static string NotFoundTemplateWithTheId = LangText.NotFoundTemplateWithTheId;
        public static string NotEmptyTemplateId = LangText.NotEmptyTemplateId;

        public static string ExceptionUpsertPayRollComponent = LangText.ExceptionUpsertPayRollComponent;
        public static string ExceptionGetPayRollComponents = LangText.ExceptionGetPayRollComponents;
        public static string PayRollComponentNameLengthExceeded = LangText.PayRollComponentNameLengthExceeded;
        public static string NotEmptyPayRollComponent = LangText.NotEmptyPayRollComponent;
        public static string ExceptionUpsertPayRollTemplate = LangText.ExceptionUpsertPayRollTemplate;
        public static string ExceptionGetPayRollTemplates = LangText.ExceptionGetPayRollTemplates;
        public static string UpsertEmployeeBonusDetails = LangText.UpsertEmployeeBonusDetails;
        public static string ExceptionGetPayRollRunTemplates = LangText.ExceptionGetPayRollTemplates;
        public static string ExceptionGetPayRollStatusList = LangText.ExceptionGetPayRollStatusList;
        public static string ExceptionUpsertPayRollStatus = LangText.ExceptionUpsertPayRollStatusList;
        public static string ExceptionInsertPayrollRun = LangText.ExceptionInsertPayrollRun;
        public static string ExceptionUpdatePayrollRunStatus = LangText.ExceptionUpdatePayrollRunStatus;
        public static string ExceptionUpdatePayrollRunEmployeePaymentStatus = LangText.ExceptionUpdatePayrollRunEmployeePaymentStatus;
        public static string ExceptionUpdatePayrollRunEmployeeStatus = LangText.ExceptionUpdatePayrollRunEmployeeStatus;
        public static string PayRollTemplateNameLengthExceeded = LangText.PayRollTemplateNameLengthExceeded;
        public static string PayRollTemplateShortNameLengthExceeded = LangText.PayRollTemplateShortNameLengthExceeded;
        public static string NotEmptyPayRollShortName = LangText.NotEmptyPayRollShortName;
        public static string NotEmptyPayRollName = LangText.NotEmptyPayRollName;
        public static string ExceptionUpsertPayRollTemplateConfiguration = LangText.ExceptionUpsertPayRollTemplateConfiguration;
        public static string ExceptionGetPayRollTemplateConfigurations = LangText.ExceptionGetPayRollTemplateConfigurations;
        public static string NotEmptyPayRollComponentId = LangText.PayRollComponentShouldNotBeNull;
        public static string NotEmptyPayRollTemplateId = LangText.PayRollTemplateShouldNotBeNull;
        public static string ExceptionUpsertPayRollRoleConfiguration = LangText.ExceptionUpsertPayRollRoleConfiguration;
        public static string ExceptionGetPayRollRoleConfigurations = LangText.ExceptionGetPayRollRoleConfigurations;
        public static string ExceptionUpsertPayRollBranchConfiguration = LangText.ExceptionUpsertPayRollBranchConfiguration;
        public static string ExceptionGetPayRollBranchConfigurations = LangText.ExceptionGetPayRollBranchConfigurations;
        public static string ExceptionUpsertPayRollGenderConfiguration = LangText.ExceptionUpsertPayRollGenderConfiguration;
        public static string ExceptionGetPayRollGenderConfigurations = LangText.ExceptionGetPayRollGenderConfigurations;
        public static string ExceptionUpsertPayRollMaritalStatusConfiguration = LangText.ExceptionUpsertPayRollMaritalStatusConfiguration;
        public static string UpsertEmployeePayrollConfiguration = LangText.UpsertEmployeePayrollConfiguration;
        public static string ExceptionGetPayRollMaritalStatusConfigurations = LangText.ExceptionGetPayRollMaritalStatusConfigurations;
        public static string NotEmptyMaritalStatus = LangText.MaritalStatusShouldNotBeNull;
        public static string NotEmptyGender = LangText.GenderShouldNotBeNull;
        public static string NotEmptyResignationStatus = LangText.NotEmptyResignationStatus;
        public static string ExceptionUpsertResignationStatus = LangText.ExceptionUpsertResignationStatus;
        public static string ExceptionGetResignationStatus = LangText.ExceptionGetResignationStatus;
        public static string NotEmptyShortName = LangText.NotEmptyShortName;
        public static string MaximumLengthForShortName = LangText.MaximumLengthForShortName;
        public static string NotEmptyProjectsLabel = LangText.ProjectsLabelShouldNotBeEmpty;
        public static string ProjectsLabelLengthExceeded = LangText.ProjectsLabelCannotBeLongerThan50Characters;
        public static string NotEmptyGoalsLabel = LangText.GoalsLabelShouldNotBeEmpty;
        public static string GoalsLabelLengthExceeded = LangText.GoalsLabelCannotBeLongerThan50Characters;
        public static string NotEmptyUserStoriesLabel = LangText.UserStoriesLabelShouldNotBeEmpty;
        public static string UserStoriesLabelLengthExceeded = LangText.UserStoriesLabelCannotBeLongerThan50Characters;
        public static string NotEmptyDeadlinesLabel = LangText.DeadlinesLabelShouldNotBeEmpty;
        public static string DeadlinesLabelLengthExceeded = LangText.DeadlinesLabelCannotBeLongerThan50Characters;
        public static string NotEmptyEstimatedTimeLabel = LangText.EstimatedTimeShouldNotBeEmpty;
        public static string EstimatedTimeLabelLengthExceeded = LangText.EstimatedTimeCannotBeLongerThan50Characters;
        public static string NotEmptyEstimationLabel = LangText.EstimationLabelShouldNotBeEmpty;
        public static string EstimationLabelLengthExceeded = LangText.EstimationLabelCannotBeLongerThan50Characters;
        public static string NotEmptyEstimationsLabel = LangText.EstimationsLabelShouldNotBeEmpty;
        public static string EstimationsLabelLengthExceeded = LangText.EstimationsLabelCannotBeLongerThan50Characters;
        public static string ExceptionTemplatesDelete = LangText.ExceptionTemplatesDelete;
        public static string ExceptionDeleteUserStoryType = LangText.ExceptionDeleteUserStoryType;
        public static string ExceptionNotGettingCustomFieldHistory = LangText.ExceptionNotGettingCustomFieldHistory;
        public static string ExceptionUpsertWebHook = LangText.ExceptionUpsertWebHook;
        public static string ExceptionGetWebHook = LangText.ExceptionGetWebHook;
        public static string ExceptionUpsertHtmlTemplate = LangText.ExceptionUpsertHtmlTemplate;
        public static string ExceptionGetHtmlTemplate = LangText.ExceptionGetHtmlTemplate;

        public static string GetRateSheets = LangText.GetRateSheets;
        public static string NotEmptyRateSheetName = LangText.NotEmptyRateSheetName;
        public static string RateSheetNameLengthExceeded = LangText.RateSheetNameLengthExceeded;
        public static string ExceptionRateSheet = LangText.ExceptionRateSheet;
        public static string NotEmptyRateSheetId = LangText.NotEmptyRateSheetId;
        public static string RateSheetValueRequired = LangText.RateSheetValueRequired;

        public static string GetRateSheetForNames = LangText.GetRateSheetForNames;

        public static string ExceptionUpsertBadge = LangText.ExceptionUpsertBadge;
        public static string ExceptionGetBadge = LangText.ExceptionGetBadge;
        public static string ExceptionAssignBadgeToEmployee = LangText.ExceptionAssignBadgeToEmployee;
        public static string ExceptionGetBadgesAssignedToEmployee = LangText.ExceptionGetBadgesAssignedToEmployee;

        public static string ExceptionUpsertAnnouncement = LangText.ExceptionUpsertAnnouncement;
        public static string ExceptionGetAnnouncements = LangText.ExceptionGetAnnouncements;
        public static string ExceptionUpsertGrade = LangText.ExceptionUpsertGrade;
        public static string ExceptionGetGrades = LangText.ExceptionGetGrades;
        public static string ExceptionUpsertEmployeeGrade = LangText.ExceptionUpsertEmployeeGrade;
        public static string ExceptionGetEmployeeGrades = LangText.ExceptionGetEmployeeGrades;

        public static string AnnouncementIsRequired = LangText.AnnouncementIsRequired;
        public static string AnnouncedToIsRequired = LangText.AnnouncedToIsRequired;

        public static string GetPeakHours = LangText.GetPeakHours;
        public static string ExceptionPeakHour = LangText.ExceptionPeakHour;
        public static string NotEmptyPeakHourOn = LangText.NotEmptyPeakHourOn;
        public static string NotEmptyPeakHourFrom = LangText.NotEmptyPeakHourFrom;
        public static string NotEmptyPeakHourTo = LangText.NotEmptyPeakHourTo;
        public static string PeakHourEndTimeShouldBeGreater = LangText.PeakHourEndTimeShouldBeGreater;

        public static string ExceptionGetEmployeeRateSheetDetails = LangText.ExceptionGetEmployeeRateSheetDetails;
        public static string ExceptionGetWeekdays = LangText.ExceptionGetWeekdays;
        public static string ExceptionAddEmployeeRatesheetDetails = LangText.ExceptionAddEmployeeRatesheetDetails;
        public static string ExceptionEditEmployeeRatesheetDetails = LangText.ExceptionEditEmployeeRatesheetDetails;
        public static string NotEmptyRateSheetDetails = LangText.NotEmptyRateSheetDetails;

        public static string BadgeNameIsRequired = LangText.BadgeNameIsRequired;
        public static string BadgeNameLengthExceeded = LangText.BadgeNameLengthExceeded;
        public static string BadgeLogoIsRequired = LangText.BadgeLogoIsRequired;
        public static string BadgeIsRequired = LangText.BadgeIsRequired;
        public static string AssignToIsRequired = LangText.AssignToIsRequired;
        public static string DescriptionMaxLength250 = LangText.DescriptionMaxLength250;

        public static string ExceptionCreateRosterSolutions = LangText.ExceptionCreateRosterSolutions;
        public static string NotEmptyEmployeeRateSheetId = LangText.NotEmptyEmployeeRateSheetId;
        public static string ExceptionCreateRosterPlan = LangText.ExceptionCreateRosterPlan;
        public static string ExceptionGetRosterPlans = LangText.ExceptionGetRosterPlans;
        public static string ExceptionGetRosterPlanByRequest = LangText.ExceptionGetRosterPlanByRequest;
        public static string ExceptionGetRosterSolutionsById = LangText.ExceptionGetRosterSolutionsById;
        public static string ExceptionCheckRosterName = LangText.ExceptionCheckRosterName;
        public static string ExceptionTimeSheetSubmission = LangText.ExceptionTimeSheetSubmission;
        public static string ExceptionGetTimeSheetSubmissions = LangText.ExceptionGetTimeSheetSubmissions;
        public static string ExceptionGetTimeSheetSubmissionTypes = LangText.ExceptionGetTimeSheetSubmissionTypes;
        public static string NotEmptyTimeSheetFrequency = LangText.TimeSheetFrequencyShouldNotBeNull;
        public static string ExceptionForUpsertSprint = LangText.ExceptionForUpsertSprint;
        public static string ExceptionForSearchSprints = LangText.ExceptionForSearchSprints;
        public static string ExceptionForDeleteSprints = LangText.ExceptionForDeleteSprints;
        public static string NotFoundSprintWithTheId = LangText.NotFoundSprintWithTheId;
        public static string NotEmptySprintId = LangText.NotEmptySprintId;
        public static string SprintDescriptionNotExceed800Characters = LangText.SprintDescriptionNotExceed800Characters;
        public static string SprintNameNotExceed250Characters = LangText.SprintNameNotExceed250Characters;
        public static string ExceptionSprintReplanHistory = LangText.ExceptionSprintReplanHistory;
        public static string ExceptionToMoveUserStoryToSprint = LangText.ExceptionToMoveUserStoryToSprint;

        public static string ExceptionGetEmployeeResignation = LangText.ExceptionGetEmployeeResignation;
        public static string ExceptionUpsertEmployeeResignation = LangText.ExceptionUpsertEmployeeResignation;
        public static string NameShouldNotBeNull = LangText.NameShouldNotBeNull;
        public static string TaxAllowanceTypeShouldNotBeNull = LangText.TaxAllowanceTypeShouldNotBeNull;
        public static string ExceptionGetTaxAllowances = LangText.ExceptionGetTaxAllowance;
        public static string ExceptionUpsertTaxAllowance = LangText.ExceptionUpsertTaxAllowance;
        public static string ExceptionGetEmployeeTaxAllowanceDetails = LangText.ExceptionGetEmployeeTaxAllowanceDetails;
        public static string ExceptionUpsertEmployeeTaxAllowanceDetails = LangText.ExceptionUpsertEmployeeTaxAllowanceDetails;
        public static string EmployeeShouldNotBeNull = LangText.EmployeeShouldNotBeNull;
        public static string TaxAllowanceShouldNotBeNull = LangText.TaxAllowanceShouldNotBeNull;
        public static string ExceptionGetLeaveEncashmentSettings = LangText.ExceptionGetLeaveEncashmentSettings;
        public static string ExceptionUpsertLeaveEncashmentSettings = LangText.ExceptionUpsertLeaveEncashmentSettings;
        public static string PercentageShouldNotBeNull = LangText.PercentageShouldNotBeNull;
        public static string ExceptionGetEmployeeAccountDetails = LangText.ExceptionGetEmployeeAccountDetails;
        public static string ExceptionUpsertEmployeeAccountDetails = LangText.ExceptionUpsertEmployeeAccountDetails;
        public static string ExceptionGetFinancialYearConfigurations = LangText.ExceptionGetFinancialYearConfigurations;
        public static string ExceptionUpsertFinancialYearConfigurations = LangText.ExceptionUpsertFinancialYearConfigurations;
        public static string FromMonthShouldNotBeNull = LangText.FromMonthShouldNotBeNull;
        public static string ToMonthShouldNotBeNull = LangText.ToMonthShouldNotBeNull;
        public static string ExceptionGetPayRollCalculationConfigurations = LangText.ExceptionGetPayRollCalculationConfigurations;
        public static string ExceptionUpsertPayRollCalculationConfigurations = LangText.ExceptionUpsertPayRollCalculationConfigurations;
        public static string ExceptionGetEmployeeCreditorDetails = LangText.ExceptionGetEmployeeCreditorDetails;
        public static string ExceptionUpsertEmployeeCreditorDetails = LangText.ExceptionUpsertEmployeeCreditorDetails;
        public static string ExceptionPeriodTypes = LangText.ExceptionPeriodTypes;
        public static string BranchShouldNotBeNull = LangText.BranchShouldNotBeNull;
        public static string ExceptionPayRollCalculationTypes = LangText.ExceptionPayRollCalculationTypes;
        public static string ExceptionGetEmployeeSalaryCertificate = LangText.ExceptionGetEmployeeSalaryCertificate;
        public static string ExceptionFinancialYearTypes = LangText.ExceptionFinancialYearTypes;
        public static string ExceptionESIMonthlyStatement = LangText.ExceptionESIMonthlyStatement;
        public static string ExceptionSalaryRegister = LangText.ExceptionSalaryRegister;
        public static string ExceptionIncomeSalaryStatement = LangText.ExceptionIncomeSalaryStatement;
        public static string ExceptionGetEmployeeUploadTemplate = LangText.ExceptionGetEmployeeUploadTemplate;
        public static string ExceptionGetTestSuiteCsvTemplate = LangText.ExceptionGetTestSuiteCsvTemplate;
        public static string ExceptionGetWorkItemUploadTemplate = LangText.ExceptionGetWorkItemUploadTemplate;
        public static string ExceptionProfessionTaxMonthlyStatement = LangText.ExceptionProfessionTaxMonthlyStatement;
        public static string ExceptionProfessionTaxReturns = LangText.ExceptionProfessionTaxReturns;
        public static string ExceptionSalaryBillRegister = LangText.ExceptionSalaryBillRegister;
        public static string ExceptionGetProductivityIndexUserstoriesForDevelopers = LangText.ExceptionGetProductivityIndexUserstoriesForDevelopers;
        public static string ExceptionIncomeSalaryStatementDetails = LangText.ExceptionIncomeSalaryStatementDetails;
        public static string ExceptionITSavingsReport = LangText.ExceptionITSavingsReport;
        public static string ExceptionIncomeTaxMonthlyStatement = LangText.ExceptionIncomeTaxMonthlyStatement;
        public static string ExceptionSalaryforITOfAnEmployee = LangText.ExceptionSalaryforITOfAnEmployee;
        public static string ExceptionRegisterOfWages = LangText.ExceptionRegisterOfWages;
        public static string ExceptionEmployeeESIReport = LangText.ExceptionEmployeeESIReport;
        public static string ExceptionEmployeePFReport = LangText.ExceptionEmployeePFReport;

        public static string ExceptionForCompleteSprints = LangText.ExceptionForCompleteSprints;
        public static string ExceptionForBugReport = LangText.ExceptionForBugReport;

        public static string ExceptionUpsertTdsSettings = LangText.ExceptionUpsertTdsSettings;
        public static string ExceptionGetTdsSettings = LangText.ExceptionGetTdsSettings;
        public static string ExceptionGetContractPayTypes = LangText.ExceptionGetContractPayTypes;
        public static string ExceptionUpsertContractPaySettings = LangText.ExceptionUpsertContractPaySettings;
        public static string ExceptionGetContractPaySettings = LangText.ExceptionGetContractPaySettings;

        public static string ContractPayTypeShouldNotBeNull = LangText.ContractPayTypeShouldNotBeNull;
        public static string ActiveFromShouldNotBeNull = LangText.ActiveFromShouldNotBeNull;
        public static string ActiveToShouldNotBeNull = LangText.ActiveToShouldNotBeNull;
        public static string IsToBePaidShouldNotBeNull = LangText.IsToBePaidShouldNotBeNull;
        public static string ExceptionGetPartsOfDays = LangText.ExceptionGetPartsOfDays;
        public static string ExceptionUpsertEmployeeLoan = LangText.ExceptionUpsertEmployeeLoan;
        public static string ExceptionGetEmployeeLoans = LangText.ExceptionGetEmployeeLoans;
        public static string ExceptionGetLoanTypes = LangText.ExceptionGetLoanTypes;
        public static string LoanAmountShouldNotBeNull = LangText.LoanAmountShouldNotBeNull;
        public static string LoanInterestPercentagePerMonthShouldNotBeNull = LangText.LoanInterestPercentagePerMonthShouldNotBeNull;
        public static string LoanTypeShouldNotBeNull = LangText.LoanTypeShouldNotBeNull;
        public static string PeriodTypeShouldNotBeNull = LangText.PeriodTypeShouldNotBeNull;
        public static string LoanBalanceAmountShouldNotBeNull = LangText.LoanBalanceAmountShouldNotBeNull;
        public static string LoanTotalPaidAmountShouldNotBeNull = LangText.LoanTotalPaidAmountShouldNotBeNull;
        public static string ExceptionGetEmployeeLoanInstallments = LangText.ExceptionGetEmployeeLoanInstallments;
        public static string ExceptionUpsertEmployeeLoanInstallment = LangText.ExceptionUpsertEmployeeLoanInstallment;

        public static string PerformanceNameIsRequired = LangText.NameIsRequired;
        public static string PerformanceFormIsRequired = LangText.PerformanceFormIsRequired;
        public static string ExceptionUpsertPerformance = LangText.ExceptionUpsertPerformance;
        public static string ExceptionGetPerformanceConfigurations = LangText.ExceptionGetPerformanceConfigurations;
        public static string ExceptionUpsertPerformanceConfiguration = LangText.ExceptionUpsertPerformanceConfiguration;
        public static string ExceptionGetPerformances = LangText.ExceptionGetPerformances;

        public static string ExceptionGetEmployeeHistory = "Get employee history cant be done please contact administrator";
        public static string ExceptionUpsertQuestionType = LangText.ExceptionUpsertQuestionType;
        public static string ExceptionUpsertAuditCategory = LangText.ExceptionUpsertAuditCategory;
        public static string ExceptionCloneAudit = LangText.ExceptionCloneAudit;
        public static string ExceptionUpsertAuditTags = LangText.ExceptionUpsertAuditTags;
        public static string ExceptionUpsertAuditImpact = LangText.ExceptionUpsertAuditImpact;
        public static string ExceptionUpsertAuditPriority = LangText.ExceptionUpsertAuditPriority;
        public static string ExceptionUpsertActionCategory = LangText.ExceptionUpsertActionCategory;
        public static string ExceptionGetActionCategories = LangText.ExceptionGetActionCategories;
        public static string ExceptionUpsertAuditRating = LangText.ExceptionUpsertAuditRating;
        public static string ExceptionGetAuditRating = LangText.ExceptionGetAuditRating;
        public static string ExceptionGetAuditImpact = LangText.ExceptionGetAuditImpact;
        public static string ExceptionGetAuditPriority = LangText.ExceptionGetAuditPriority;
        public static string ExceptionSubmitAuditConductQuestion = LangText.ExceptionSubmitAuditConductQuestion;
        public static string ExceptionGetQuestionTypes = LangText.ExceptionGetQuestionTypes;
        public static string ExceptionSearchAuditConductQuestions = LangText.ExceptionSearchAuditConductQuestions;
        public static string ExceptionGetQuestionHistory = LangText.ExceptionGetQuestionHistory;
        public static string ExceptionSubmitAuditConduct = LangText.ExceptionSubmitAuditConduct;
        public static string ExceptionReorderQuestions = LangText.ExceptionReorderQuestions;
        public static string NotEmptyReorderQuestionIds = LangText.NotEmptyReorderQuestionIds;
        public static string ExceptionGetAuditCategories = LangText.ExceptionGetAuditCategories;
        public static string ExceptionGetAuditRelatedCounts = LangText.ExceptionGetAuditRelatedCounts;
        public static string CategoryNameWithThisNameAlreadyExists = LangText.CategoryNameWithThisNameAlreadyExists;
        public static string QuestionTypeWithThisNameAlreadyExists = LangText.QuestionTypeWithThisNameAlreadyExists;
        public static string ExceptionSearchAuditConduct = LangText.ExceptionSearchAuditConduct;
        public static string ExceptionGetCategoriesAndSubCategories = LangText.ExceptionGetCategoriesAndSubCategories;
        public static string ExceptionGetTags = LangText.ExceptionGetTags;
        public static string ExceptionUpsertAuditConduct = LangText.ExceptionUpsertAuditConduct;


        public static string ExceptionGetRosterTemplatePlanByRequest = LangText.ExceptionGetRosterTemplatePlanByRequest;
        public static string ExceptionGetEmployeeUponTimesheetApproval = LangText.ExceptionGetEmployeeUponTimesheetApproval;
        public static string ExceptionGetApprovedRosterRequests = LangText.ExceptionGetApprovedRosterRequests;
        public static string ExceptionComparisionManagerReport = LangText.ExceptionComparisionManagerReport;
        public static string ExceptionGetEmployeeRosterFinalReport = LangText.ExceptionGetEmployeeRosterFinalReport;
        public static string ExceptionGetEmployeeRosterLeaveDates = LangText.ExceptionGetEmployeeRosterLeaveDates;
        public static string ExceptionGetEmployeeRosterUnavailability = LangText.ExceptionGetEmployeeRosterUnavailability;
        public static string ExceptionGetEmployeeRosterManagers = LangText.ExceptionGetEmployeeRosterManagers;
        public static string ExceptionLoadShiftwiseEmployeeForRoster = LangText.ExceptionLoadShiftwiseEmployeeForRoster;
        public static string ExceptionGetPayRollRunEmployeeLeaveDetailsList = LangText.ExceptionGetPayRollRunEmployeeLeaveDetailsList;

        public static string ExceptionGetEmployeeRatesUponTimesheetDayFinish = LangText.ExceptionGetEmployeeRatesUponTimesheetDayFinish;

        public static string ExceptionGetAppUsageUserStoryReport = LangText.ExceptionGetAppUsageUserStoryReport;
        public static string ExceptionGetAppUsageTimesheetReport = LangText.ExceptionGetAppUsageTimesheetReport;
        public static string ExceptionGetIdleAndInactiveTimeForEmployee = LangText.ExceptionGetIdleAndInactiveTimeForEmployee;
        public static string ExceptionGetActivityTrackerModes = LangText.ExceptionGetActivityTrackerModes;
        public static string ExceptionGetAvailabilityCalendar = LangText.ExceptionGetAvailabilityCalendar;
        public static string ExceptionGetCompanyStatus = LangText.ExceptionGetCompanyStatus;
        public static string ExceptionGetModeType = LangText.GetModeType;
        public static string ExceptionUpsertActivityTrackerModeConfig = LangText.ExceptionUpsertActivityTrackerModeConfig;
        public static string ExceptionUpsertUserActivityToken = LangText.ExceptionUpsertUserActivityToken;
        public static string ExceptionGetAppUsageCompleteReport = LangText.ExceptionGetAppUsageCompleteReport;
        public static string ExceptionGetUserTrackerTimeline = LangText.ExceptionGetUserTrackerTimeline;
        public static string ExceptionInApplicationCategory = LangText.ExceptionInApplicationCategory;

        public static string ExceptionGetActivityTrackerDesktops = LangText.ExceptionGetActivityTrackerDesktops;

        public static string ExceptionFileCannotReadMultiPartData = LangText.ExceptionFileCannotReadMultiPartData;
        public static string ExceptionFileCannotDeleteChunckData = LangText.ExceptionFileCannotDeleteChunckData;
        public static string NotEmptyCourseName = LangText.NotEmptyCourseName;
        public static string MaximumLengthForCourseName = LangText.MaximumLengthForCourseName;
        public static string NotEmptyCourseDescription = LangText.NotEmptyCourseDescription;
        public static string MaximumLengthForCourseDescription = LangText.MaximumLengthForCourseDescription;
        public static string ValidityCannotBeZeroOrNegative = LangText.ValidityCannotBeZeroOrNegative;
        public static string ValidityShouldBeNumber = LangText.ValidityShouldBeNumber;
        public static string ExceptionUpsertTrainingCourse = LangText.ExceptionUpsertTrainingCourse;
        public static string ExceptionSearchTrainingCourse = LangText.ExceptionSearchTrainingCourse;
        public static string ExceptionAssignOrUnAssignTrainingCourse = LangText.ExceptionAssignOrUnAssignTrainingCourse;
        public static string ExceptionCheckSameCourseExists = LangText.ExceptionCheckSameCourseExists;
        public static string ValidationSameCourseNameExists = LangText.ValidationSameCourseNameExists;
        public static string ExceptionSearchTrainingAssignments = LangText.ExceptionSearchTrainingAssignments;
        public static string ExceptionGetAssignmentStatuses = LangText.ExceptionGetAssignmentStatuses;
        public static string ExceptionAddOrUpdateAssignmentStatus = LangText.ExceptionAddOrUpdateAssignmentStatus;
        public static string ExceptionCheckAndUpdateExpiredAssignments = LangText.ExceptionCheckAndUpdateExpiredAssignments;
        public static string ValidationArchiveCannotHappen = LangText.ValidationArchiveCannotHappen;
        public static string ExceptionGetAssignmentWorkflow = LangText.ExceptionGetAssignmentWorkflow;

        public static string ExceptionGetAuditsByBranch = LangText.ExceptionGetAuditsByBranch;
        public static string ExceptionGetAuditConductTimeline = LangText.ExceptionGetAuditConductTimeline;

        public static string ExceptionGetUsersBasedOnFeature = LangText.ExceptionGetUsersBasedOnFeature;
        public static string ExceptionUpsertPayRollRunEmployeeComponent = LangText.ExceptionUpsertPayRollRunEmployeeComponent;
        public static string ActualComponentAmountShouldNotBeNull = LangText.ActualComponentAmountShouldNotBeNull;
        public static string CommentsShouldNotBeNull = LangText.CommentsShouldNotBeNull;
        public static string CommentsLengthError = LangText.CommentsLengthError;
        public static string ExceptionAddEmployeeRateTagDetails = LangText.ExceptionAddEmployeeRateTagDetails;
        public static string ExceptionEditEmployeeRateTagDetails = LangText.ExceptionEditEmployeeRateTagDetails;
        public static string ExceptionGetEmployeeRateTagDetails = LangText.ExceptionGetEmployeeRateTagDetails;
        public static string GetRateTags = LangText.GetRateTags;
        public static string NotEmptyRateTagName = LangText.NotEmptyRateTagName;
        public static string RateTagNameLengthExceeded = LangText.RateTagNameLengthExceeded;
        public static string ExceptionRateTag = LangText.ExceptionRateTag;
        public static string NotEmptyRateTagId = LangText.NotEmptyRateTagId;
        public static string RateTagValueRequired = LangText.RateTagValueRequired;
        public static string GetRateTagForNames = LangText.GetRateTagForNames;
        public static string NotEmptyRateTagDetails = LangText.NotEmptyRateTagDetails;
        public static string NotEmptyEmployeeRateTagId = LangText.NotEmptyEmployeeRateTagId;
        public static string GetRateTagAllowanceTime = LangText.GetRateTagAllowanceTime;
        public static string ExceptionUpsertRateTagAllowanceTime = LangText.UpsertRateTagAllowanceTime;
        public static string ExceptionGetEmployeeRatesFromRateTags = LangText.ExceptionGetEmployeeRatesFromRateTags;
        public static string ExceptionUpsertSpecificDay = LangText.ExceptionUpsertSpecificDay;
        public static string ExceptionGetSpecificDays = LangText.ExceptionGetSpecificDays;
        public static string NotEmptySpecificDayReason = LangText.NotEmptySpecificDayReason;
        public static string MaximumLengthForSpecificDayReason = LangText.MaximumLengthForSpecificDayReason;
        public static string ExceptionUpsertPartsOfDay = LangText.ExceptionUpsertPartsOfDay;
        public static string MaximumLengthForPartsOfDayName = LangText.MaximumLengthForPartsOfDayName;
        public static string ExceptionGetMenuSearchItems = LangText.ExceptionGetMenuItems;
        public static string ExceptionAddRateTagConfiguration = LangText.ExceptionAddRateTagConfiguration;
        public static string ExceptionEditRateTagConfiguration = LangText.ExceptionEditRateTagConfiguration;
        public static string ExceptionGetRateTagConfigurations = LangText.ExceptionGetRateTagConfigurations;
        public static string ExceptionArchivePayRoll = LangText.ExceptionArchivePayRoll;
        public static string ExceptionGetProcData = LangText.ExceptionGetProcData;
        public static string BranchOrRoleShouldNotBeNull = LangText.BranchOrRoleShouldNotBeNull;
        public static string ExceptionUpsertRateTagRoleBranchConfiguration = LangText.ExceptionUpsertRateTagRoleBranchConfiguration;
        public static string StartDateShouldNotBeNull = LangText.StartDateShouldNotBeNull;
        public static string EndDateShouldNotBeNull = LangText.EndDateShouldNotBeNull;
        public static string ExceptionUpsertBank = LangText.ExceptionUpsertBank;
        public static string ExceptionGetBanks = LangText.ExceptionGetBanks;
        public static string CountryShouldNotBeNull = LangText.CountryShouldNotBeNull;
        public static string BankNameShouldNotBeNull = LangText.BankNameShouldNotBeNull;
        public static string ExceptionGetPayRollBands = LangText.ExceptionGetPayRollBands;
        public static string ExceptionUpsertPayRollBand = LangText.ExceptionUpsertPayRollBand;
        public static string ExceptionUpsertEmployeePreviousCompanyTax = LangText.ExceptionUpsertEmployeePreviousCompanyTax;
        public static string ExceptionGetEmployeePreviousCompanyTaxes = LangText.ExceptionGetEmployeePreviousCompanyTaxes;
        public static string TaxAmountShouldNotBeNull = LangText.TaxAmountShouldNotBeNull;
        public static string ExceptionGetAuditVersions = LangText.ExceptionGetAuditVersions;
        public static string ExceptionInsertAuditVersion = LangText.ExceptionInsertAuditVersion;
        public static string ExceptionUpsertPayRollRunEmployeeComponentYTD = LangText.ExceptionUpsertPayRollRunEmployeeComponentYTD;
        public static string ExceptionGetEmployeeRateTagConfigurations = LangText.ExceptionGetEmployeeRateTagConfigurations;
        public static string CompanyPaymentFailedMessage = LangText.CompanyPaymentFailedMessage;
        public static string ExceptionCancelSubscription = LangText.ExceptionCancelSubscription;

        //Recruitment

        public static string ExceptionUpsertJobOpeningStatus = LangText.ExceptionUpsertJobOpeningStatus;
        public static string NotEmptyJobOpeningStatus = LangText.NotEmptyJobOpeningStatus;
        public static string ExceptionGetJobOpeningStatus = LangText.ExceptionGetJobOpeningStatus;
        public static string ExceptionGetSource = LangText.ExceptionGetSource;
        public static string ExceptionUpsertSource = LangText.ExceptionUpsertSource;
        public static string NotEmptySourceName = LangText.NotEmptySourceName;
        public static string NotEmptyJobOpeningName = LangText.NotEmptyJobOpeningName;
        public static string ExceptionUpsertJobOpening = LangText.ExceptionUpsertJobOpening;
        public static string NotEmptyJobOpeningSkill = LangText.NotEmptyJobOpeningSkill;
        public static string NotEmptyAddressJson = LangText.NotEmptyAddressJson;
        public static string AddressJsonLengthExceeded = LangText.AddressJsonLengthExceeded;
        public static string NotEmptyNoOfJobOpenings = LangText.NotEmptyNoOfJobOpenings;
        public static string NotEmptyCandidate = LangText.NotEmptyCandidate;
        public static string NotEmptySkill = LangText.NotEmptySkill;
        public static string NotEmptyDocumentTypeName = LangText.NotEmptyDocumentTypeName;
        public static string ExceptionUpsertDocumentType = LangText.ExceptionUpsertDocumentType;
        public static string NotEmptyDocumentName = LangText.NotEmptyDocumentName;
        public static string ExceptionUpsertCandidateDocument = LangText.ExceptionUpsertCandidateDocument;
        public static string ExceptionUpsertCandidate = LangText.ExceptionUpsertCandidate;
        public static string ExceptionGetCandidates = LangText.ExceptionGetCandidates;
        public static string ExceptionGetCandidateHistory = LangText.ExceptionGetCandidateHistory;
        public static string ExceptionGetJobOpenings = LangText.ExceptionGetJobOpenings;
        public static string ExceptionUpsertJobOpeningSkill = LangText.ExceptionUpsertJobOpeningSkill;
        public static string ExceptionGetJobOpeningSkills = LangText.ExceptionGetJobOpeningSkills;
        public static string ExceptionUpsertCandidateSkill = LangText.ExceptionUpsertCandidateSkill;
        public static string ExceptionGetCandidateSkills = LangText.ExceptionGetCandidateSkills;
        public static string ExceptionUpsertCandidateExperience = LangText.ExceptionUpsertCandidateExperience;
        public static string ExceptionGetCandidateExperiences = LangText.ExceptionGetCandidateExperiences;
        public static string ExceptionUpsertCandidateEducation = LangText.ExceptionUpsertCandidateEducation;
        public static string ExceptionGetCandidateEducation = LangText.ExceptionGetCandidateEducation;
        public static string ExceptionGetCandidateDocuments = LangText.ExceptionGetCandidateDocuments;
        public static string ExceptionGetDocumentTypes = LangText.ExceptionGetDocumentTypes;
        public static string NotEmptyInterviewTypeName = LangText.NotEmptyInterviewTypeName;
        public static string ExceptionInterviewTypeName = LangText.ExceptionInterviewTypeName;
        public static string ExceptionUpsertInterviewType = LangText.ExceptionUpsertInterviewType;
        public static string ExceptionGetInterviewTypes = LangText.ExceptionGetInterviewTypes;
        public static string ExceptionUpsertInterviewProcess = LangText.ExceptionUpsertInterviewProcess;
        public static string ExceptionGetInterviewProcess = LangText.ExceptionGetInterviewProcess;
        public static string NotEmptyInterviewProcessName = LangText.NotEmptyInterviewProcessName;
        public static string ExceptionInterviewProcessName = LangText.ExceptionInterviewProcessName;
        public static string ExceptionUpsertInterviewProcessConfigurations = LangText.ExceptionUpsertInterviewProcessConfigurations;
        public static string ExceptionGetInterviewProcessConfiguration = LangText.ExceptionGetInterviewProcessConfiguration;
        public static string NotEmptyInterviewProcessConfigurationName = LangText.NotEmptyInterviewProcessConfigurationName;
        public static string ExceptionInterviewProcessConfigurationName = LangText.ExceptionInterviewProcessConfigurationName;
        public static string ExceptionUpsertCandidateInterviewSchedule = LangText.ExceptionUpsertCandidateInterviewSchedule;
        public static string ExceptionGetCandidateInterviewSchedule = LangText.ExceptionGetCandidateInterviewSchedule;
        public static string ExceptionUpsertCandidateInterviewFeedBack = LangText.ExceptionUpsertCandidateInterviewFeedBack;
        public static string ExceptionGetCandidateInterviewFeedBack = LangText.ExceptionGetCandidateInterviewFeedBack;
        public static string ExeceptionInterviewRating = LangText.ExeceptionInterviewRating;
        public static string ExceptionGetCandidateInterviewFeedBackComments = LangText.ExceptionGetCandidateInterviewFeedBackComments;
        public static string ExceptionUpsertCandidateInterviewFeedBackComments = LangText.ExceptionUpsertCandidateInterviewFeedBackComments;
        public static string NotEmptyAssigneeId = LangText.NotEmptyAssigneeId;
        public static string NotEmptyAssigneeComments = LangText.NotEmptyAssigneeComments;
        public static string ExceptionUpsertHiringStatus = LangText.ExceptionUpsertHiringStatus;
        public static string ExceptionGetHiringStatus = LangText.ExceptionGetHiringStatus;
        public static string ExceptionUpsertInterviewRating = LangText.ExceptionUpsertInterviewRating;
        public static string ExceptionGetInterviewRatings = LangText.ExceptionGetInterviewRatings;
        public static string NotEmptyRatingName = LangText.NotEmptyRatingName;
        public static string NotEmptyValue = LangText.NotEmptyValue;
        public static string ExceptionCancelSchedulling = LangText.ExceptionCancelSchedulling;
        public static string ExceptionGetScheduleStatus = LangText.ExceptionGetScheduleStatus;
        public static string ExceptionExternalServiceFetch = LangText.ExceptionCommentUpsert;
        public static string ExceptionGetOutcomes = LangText.ExceptionCommentUpsert;
        public static string ExceptionGetResourceUsageReport = LangText.ExceptionGetResourceUsageReport;
        public static string ExceptionGetProjectUsageReport = LangText.ExceptionGetProjectUsageReport;
        public static string ExceptionSaveSentMessage = LangText.ExceptionSaveSentMessage;
        public static string ExceptionUpsertSmsTemplate = LangText.ExceptionUpsertSmsTemplate;
        public static string ExceptionGetTemplate = LangText.ExceptionGetTemplate;
        public static string ExceptionSearchCompanyModules = LangText.ExceptionSearchCompanyModules;
        public static string ExceptionForUpsertModule = LangText.ExceptionForUpsertModule;
        public static string NotEmptyModuleName = LangText.ModuleNameShouldNotBeNull;
        public static string NotEmptyModuleDescription = LangText.NotEmptyModuleDescription;
        public static string ModuleNameExceptionLength = LangText.ModuleNameLengthExceeded;
        public static string NotEmptyModulePageName = LangText.NotEmptyModulePageName;
        public static string PageNameExceptionLength = LangText.PageNameExceptionLength;
        public static string ExceptionForUpsertModulePages = LangText.ExceptionForUpsertModulePages;
        public static string ExceptionForSearchModulePages = LangText.ExceptionForSearchModulePages;
        public static string ExceptionForSearchModules = LangText.ExceptionForSearchModules;
        public static string ExceptionForUpsertCompanyModule = LangText.ExceptionForUpsertCompanyModule;

        //public static string ExceptionGetCumulativeWorkReport = LangText.ExceptionGetCumulativeWorkReport;
    }
}
